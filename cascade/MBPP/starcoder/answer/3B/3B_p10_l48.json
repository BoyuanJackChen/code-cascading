[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create an empty list to store the shared elements\n    shared_list = []\n\n    # Iterate through the first tuple\n    for item1 in test_tup1:\n\n        # Iterate through the second tuple\n        for item2 in test_tup2:\n\n            # Check if the current items are the same\n            if item1 == item2:\n\n                # Add the item to the shared list\n                shared_list.append(item1)\n\n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_set = set(test_tup1) & set(test_tup2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert both tuples into sets to remove duplicates and get unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # convert the shared set back into a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two sets from the given tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the common elements of the two sets\n    common_elements = set1.intersection(set2)\n    # Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in common:\n            common.append(element)\n    return common"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the two input tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Unpack the tuples\n    t1, t2 = test_tup1\n    # Create two sets from the lists\n    s1 = set(t1)\n    s2 = set(t2)\n    # Find the intersection of the two sets\n    intersection = s1.intersection(s2)\n    # Return the list of shared elements\n    return list(intersection)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n <= 1 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is not a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If none of the above conditions are true, then the number is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a max heap\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n    # Remove the largest n elements from the max heap and return them in descending order\n    result = []\n    while len(result) < n:\n        result.append(-hq.heappop(max_heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n\n    # Convert the list to a heap queue, with the largest numbers at the top\n    hq_nums = hq.nlargest(n, nums)\n\n    # Convert the heap queue back to a list and return it\n    return list(hq_nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers into a min heap\n    nums_min_heap = []\n    for num in nums:\n        heapq.heappush(nums_min_heap, -num)\n    # Pop the n largest numbers from the heap and return them in a list\n    return [heapq.heappop(nums_min_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_heap = []\n    for num in nums:\n        if len(largest_heap) < n:\n            hq.heappush(largest_heap, num)\n        elif num > largest_heap[0]:\n            hq.heappop(largest_heap)\n            hq.heappush(largest_heap, num)\n    return largest_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap of the first n elements\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Extract the n largest elements from the max heap\n    largest = hq.nlargest(n, max_heap)\n\n    # Return the extracted largest elements\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Build a max heap of the first n elements\n    hq.heapify(nums[:n])\n    # Remove the maximum element from the heap and append it to the result list\n    for _ in range(n):\n        hq.heappop(nums)\n        max_num = nums[-1]\n        # Check if there are any more elements in the list\n        if len(nums) > 0:\n            # Update the max heap of the remaining elements\n            hq.heapify(nums)\n        # Append the maximum element to the result list\n        result.append(max_num)\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Convert the list of numbers into a min-heap\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n\n    # Extract the n largest numbers from the heap\n    result = []\n    for _ in range(n):\n        result.append(-heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n and fill it with the first n numbers in the list\n    max_heap = []\n    for num in nums[:n]:\n        heapq.heappush(max_heap, -num)\n\n    # Pop the numbers from the min-heap and append them to the result list\n    result = []\n    while max_heap:\n        result.append(-heapq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n\n    The input parameter x is an integer.\n\n    The function should return True if the two numbers differ at one bit position only and False otherwise.\n\n    For example:\n\n    Input: 12\n    Output: True\n\n    Input: 13\n    Output: False\n\n    Input: 0\n    Output: True\n\n    Input: 1\n    Output: False\n\n    Input: -1\n    Output: False\n\n    Input: 2147483647\n    Output: False\n\n    Input: 4294967295\n    Output: True\n\n    Input: 3\n    Output: False\n\n    Input: 10\n    Output: False\n\n    Input: 2\n    Output: True\n\n    Input: 8\n    Output: True\n\n    Input: 16\n    Output: True\n\n    Input: 32\n    Output: True\n\n    Input: 64\n    Output: True\n\n    Input: 128\n    Output: True\n\n    Input: 256\n    Output: True\n\n    Input: 512\n    Output: True\n\n    Input: 1024\n    Output: True\n\n    Input: 2048\n    Output: True\n\n    Input: 4096\n    Output: True\n\n    Input: 8192\n    Output: True\n\n    Input: 16384\n    Output: True\n\n    Input: 32768\n    Output: True\n\n    Input: 65536\n    Output: True\n\n    Input: 131072\n    Output: True\n\n    Input: 262144\n    Output: True\n\n    Input: 524288\n    Output: True\n\n    Input: 1048576\n    Output: True\n\n    Input: 2097152\n    Output: True\n\n    Input: 4194304\n    Output: True\n\n    Input: 8388608\n    Output: True\n\n    Input: 16777216\n    Output: True\n\n    Input: 33554432\n    Output: True\n\n    Input: 67108864\n    Output: True\n\n    Input: 134217728\n    Output: True\n\n    Input: 268435456\n    Output: True\n\n    Input: 536870912\n    Output: True\n\n    Input: 1073741824\n    Output: True\n\n    Input: 2147483648\n    Output: True\n\n    Input: 4294967296\n    Output: False\n\n    Input: 18446744073709551615\n    Output: False\n\n    Input: 4611686018427387903\n    Output: False\n    '''\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    elif (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= x-1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    count = 0\n    while x > 1:\n        if x & 1:\n            count += 1\n        x >>= 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Get the binary representation of the number\n    x_binary = bin(x)[2:]\n    \n    # Check if the binary representation has only one '1'\n    if len(x_binary) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    elif x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    if x & (x - 1) == 0:\n        # If x is a power of 2, x - 1 must also be a power of 2\n        return (x - 1) & (x + 1) == 0\n    \n    # If x is not a power of 2, then x - 1 must not be a power of 2\n    return (x - 1) & (x + 1)!= 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True \n    else: \n        if x & (x - 1) == 0: \n            return True \n        else: \n            return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= 0 and x & (x - 1) == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x - 1)\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while n > 1:\n        if n & 1:\n            return False\n        n >>= 1\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    # Find all words in the input string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n    \n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    # Join the filtered words back into a string\n    result =''.join(long_words)\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of words that are at least 4 characters long.\n    '''\n    # Define a regular expression pattern to match words of at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Return the list of words that match the pattern\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a test string. It contains multiple words, but only the words that are at least 4 characters long are included in the list.\"\nresult = find_char_long(text)\nprint(result)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rotations = n\n\n    # Traverse through all possible rotations and find the minimum number of rotations\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rotations = min(min_rotations, j-i)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Initialize the minimum number of rotations to be greater than 0\n    min_rotations = 1\n    # Traverse through all possible rotations of the string\n    for i in range(n): \n        # Initialize the count of characters in each rotation to be 1\n        count = 1\n        # Traverse through all possible rotations of the string after the current rotation\n        for j in range(n-i-1): \n            # Check if the characters at the current and next position are equal\n            if str[j]!= str[j+i+1]: \n                # If not, increment the count of characters in the current rotation\n                count += 1\n            # Check if we have found all the characters in the current rotation\n            if count == n-i-1: \n                # If we have, update the minimum number of rotations to be greater than 0\n                min_rotations = min(min_rotations, j+1)\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize the rotation count as 0\n    count = 0\n\n    # Create a set to store the characters that need to be flipped\n    flip_set = set()\n\n    # Iterate over the characters in the string\n    for i in range(len(str)):\n        # Check if the frequency of the current character is greater than 1\n        if freq[str[i]] > 1:\n            # If it is, add the current character to the flip_set\n            flip_set.add(str[i])\n            # Decrement the frequency of the character in the dictionary\n            freq[str[i]] -= 1\n            # If the frequency of the character is now 0, add it to the flip_set\n            if freq[str[i]] == 0:\n                flip_set.add(str[i])\n\n    # Keep iterating until the flip_set is empty\n    while flip_set:\n        # Iterate over the characters in the flip_set\n        for char in flip_set:\n            # Check if the character is the last occurrence of its occurrence\n            if freq[char] == 1:\n                # If it is, remove it from the flip_set and increment the rotation count\n                flip_set.remove(char)\n                count += 1\n                # Add the character to the flip_set if it is not already in it\n                if char not in flip_set:\n                    flip_set.add(char)\n                # Decrement the frequency of the character in the dictionary\n                freq[char] += 1\n            # Check if the character is the only occurrence of its occurrence\n            elif freq[char] == 2:\n                # If it is, remove it from the flip_set and increment the rotation count\n                flip_set.remove(char)\n                count += 1\n                # Decrement the frequency of the character in the dictionary\n                freq[char] -= 1\n                # Add the character to the flip_set if it is not already in it\n                if char not in flip_set:\n                    flip_set.add(char)\n                # If the frequency of the character is now 0, add it to the flip_set\n                if freq[char] == 0:\n                    flip_set.add(char)\n\n    # Return the rotation count\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables\n    n = len(str)\n    rotations = 0\n    # Loop through all possible rotations\n    for i in range(n):\n        # Check if the rotation is possible\n        for j in range(i+1, n):\n            # Check if the two substrings are equal\n            if str[i:j+1] == str[j:i+1][::-1]:\n                # If the two substrings are equal, increment the count of rotations\n                rotations += 1\n                # Exit the inner loop after finding a rotation\n                break\n        # Exit the outer loop after finding a rotation\n        if rotations > 0:\n            break\n    # Return the minimum number of rotations\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function finds the minimum number of rotations required to get the same string.\n    \"\"\"\n    \n    # Initialize the rotation count to 0\n    count = 0\n    \n    # Initialize the maximum rotation count to infinity\n    max_count = float('inf')\n    \n    # Initialize the string with the length of the input string\n    string = str * len(str)\n    \n    # Loop through each possible rotation of the string\n    for i in range(len(string)):\n        # Make a copy of the string to avoid modifying the original string\n        new_string = string.copy()\n        \n        # Reverse the first i characters of the new string\n        new_string = new_string[i:] + new_string[:i]\n        \n        # Check if the new string is equal to the input string\n        if new_string == str:\n            # If it is, increment the rotation count and update the maximum rotation count if necessary\n            count += 1\n            max_count = max(max_count, count)\n    \n    # Return the minimum number of rotations required to get the same string\n    return max_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Initialize two pointers for the start and end of the string\n    start = 0\n    end = len(str)-1\n\n    # Initialize the minimum number of rotations\n    rotations = 0\n\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # Check if the characters at the start and end pointers are equal\n        if str[start] == str[end]:\n            # If they are, move both pointers one position\n            start += 1\n            end -= 1\n        # If the characters are not equal, move the start pointer to the right\n        else:\n            start += 1\n            rotations += 1\n\n    # Return the minimum number of rotations required\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # finding the length of the string\n    if n == 0 or n == 1: \n        # base case for empty or single character string\n        return 0\n    # finding the length of the string\n    mid = n // 2\n    # finding the midpoint of the string\n    \n    if str[mid] == str[0]: \n        # base case for strings that are equal except for the mid character\n        return 1\n    elif str[mid] == str[mid - 1]: \n        # base case for strings that are equal except for the mid character\n        return mid\n    else: \n        # finding the minimum number of rotations required\n        for i in range(1, mid): \n            # iterating through the string from index 1 to mid\n            if str[mid] == str[n - i]: \n                # base case for strings that are equal except for the mid character and the current index\n                return n - i\n            elif str[mid] == str[mid - i]: \n                # base case for strings that are equal except for the mid character and the current index\n                return mid - i\n    \n    # if none of the base cases are satisfied, then the string cannot be equal to its reverse\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n - 1):\n        if str[i] == str[n - i - 1]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    # Initialize the dictionary to store the number of rotations required to get each string\n    dp = {str: 0}\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize a new string with only the current character\n        new_str = str[:i] + str[i] + str[i+1:]\n        \n        # Check if the new string is already in the dictionary\n        if new_str in dp:\n            # If it is, increment the number of rotations required to get the same string by one\n            dp[new_str] += 1\n        else:\n            # If it's not, add the new string to the dictionary with a value of 1\n            dp[new_str] = 1\n    \n    # Get the minimum number of rotations required to get the same string\n    min_rotations = min(dp.values())\n    \n    # Get the actual rotation sequence\n    rotation_sequence = []\n    for key in dp:\n        # If the number of rotations required to get the current string is equal to the minimum number, add it to the sequence\n        if dp[key] == min_rotations:\n            rotation_sequence.append(key)\n    \n    # Return the minimum number of rotations required and the rotation sequence\n    return min_rotations, rotation_sequence"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n\n    min_rotations = 0\n    prev_char = str[-1]\n\n    for i in range(len(str)-2, -1, -1):\n        if str[i] == prev_char:\n            min_rotations += 1\n            prev_char = str[i]\n        else:\n            break\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list of characters\n    lst = list(s)\n    # initialize two pointers at the beginning and end of the list\n    i, j = 0, len(lst)-1\n    # loop until i reaches j\n    while i < j:\n        # if the current character is not the specified character, move to the next one\n        if lst[i]!= ch:\n            i += 1\n        # if the current character is the specified character, remove it from the list\n        else:\n            lst.pop(i)\n        # if the next character is not the specified character, move to the next one\n        if lst[j]!= ch:\n            j -= 1\n        # if the next character is the specified character, remove it from the list\n        else:\n            lst.pop(j)\n    # join the list of characters back into a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    else:\n        s = s.replace(ch, '')\n        return remove_Occ(s, ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        return s.replace(ch, \"\", 1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize two pointers to the beginning and end of the string\n    i = 0\n    j = len(s) - 1\n    # while there are characters left to traverse\n    while i < j:\n        # if the characters at the current positions are equal to the given character\n        if s[i] == ch and s[j] == ch:\n            # move both pointers to the next position\n            i += 1\n            j -= 1\n        # if the character at the current position is not the given character\n        elif s[i]!= ch:\n            # move the pointer to the next position\n            i += 1\n        # if the character at the current position is not the given character\n        elif s[j]!= ch:\n            # move the pointer to the previous position\n            j -= 1\n    # remove the first and last occurrences of the given character\n    return s[:i] + s[i+1:] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) == 0:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return ch + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments, the string and the character to be removed. It removes the first and last occurrence of the character from the string and returns the modified string.\n    '''\n\n    # Check if the character exists in the string\n    if ch not in s:\n        return s\n\n    # Find the first and last occurrence of the character in the string\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n\n    # If the character is not found in the string, return the same string\n    if first_occ == -1 and last_occ == -1:\n        return s\n\n    # If the character is not at the beginning of the string, remove it and return the modified string\n    if first_occ > 0:\n        return s[:first_occ - 1] + s[first_occ + len(ch):]\n    else:\n        return s[first_occ + len(ch):]\n\n    # If the character is not at the end of the string, remove it and return the modified string\n    if last_occ < len(s) - 1:\n        return s[:last_occ] + s[last_occ + len(ch):]\n    else:\n        return s[:last_occ - len(ch)] + s[last_occ - len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    # remove first occurrence of character 'ch' from string's'\n    s = s.replace(ch,'',1)\n    # remove last occurrence of character 'ch' from string's'\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    # Remove first occurrence of the character from the string\n    s = s.replace(ch, \"\")\n\n    # Remove last occurrence of the character from the string\n    s = s.replace(ch, \"\", 1)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of character from the string\n    if s[0] == ch:\n        s = s[1:]\n    \n    # Removing last occurrence of character from the string\n    if len(s) > 1 and s[-1] == ch:\n        s = s[:-1]\n    \n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a copy of the matrix to avoid modifying the original\n    M = M.copy()\n\n    # sort each row in the matrix\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n\n    # sort the matrix according to the sum of its rows\n    M = sorted(M, key=lambda x: sum(x))\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Flatten the matrix into a single list of numbers\n    flattened_matrix = [num for row in M for num in row]\n    \n    # Sort the flattened matrix in ascending order using the built-in sort function\n    flattened_matrix.sort()\n    \n    # Split the flattened matrix back into a matrix of rows\n    sorted_matrix = [[flattened_matrix[i] for i in range(len(flattened_matrix)) if i%len(M) == j] for j in range(len(M))]\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows by decreasing sum\n    row_sums.sort(reverse=True)\n    # create a new matrix with the sorted rows\n    sorted_M = [[M[i][j] for i in range(len(M))] for j in row_sums]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    for i in range(n):\n        for j in range(n-i-1):\n            M[i][j], M[i][j+1] = M[i][j+1], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Args:\n        M: a list of lists representing a matrix.\n\n    Returns:\n        A sorted matrix.\n    '''\n    # create a new matrix with the same dimensions as the input matrix\n    N = len(M)\n    sorted_matrix = [[0]*N for i in range(N)]\n\n    # loop through each element of the input matrix\n    for i in range(N):\n        # calculate the sum of the i-th row of the input matrix\n        row_sum = sum(M[i])\n\n        # loop through each element of the sorted matrix and find the index of the element\n        # with the smallest sum of the current row\n        min_index = 0\n        for j in range(N):\n            if sorted_matrix[j][i] > row_sum:\n                min_index = j\n            elif sorted_matrix[j][i] < row_sum and sorted_matrix[j][i]!= 0:\n                break\n        # set the element at the index found to the sum of the current row\n        sorted_matrix[min_index][i] = row_sum\n\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    \n    for i in range(n):\n        # Find the row with the minimum sum\n        min_sum = float('inf')\n        min_row = i\n        for j in range(n):\n            if j!= i:\n                row_sum = sum(M[j])\n                if row_sum < min_sum:\n                    min_sum = row_sum\n                    min_row = j\n        \n        # Swap the minimum row with the current row\n        M[i], M[min_row] = M[min_row], M[i]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables\n    rows = len(M)\n    cols = len(M[0])\n    total_sum = 0\n    \n    # Calculate the total sum of the matrix\n    for i in range(rows):\n        for j in range(cols):\n            total_sum += M[i][j]\n    \n    # Initialize the min_index and max_index variables\n    min_index = 0\n    max_index = 0\n    \n    # Loop through the matrix and find the minimum and maximum sums\n    for i in range(rows):\n        for j in range(cols):\n            if M[i][j] < M[min_index][min_index]:\n                min_index = i\n            elif M[i][j] > M[max_index][max_index]:\n                max_index = i\n    \n    # Swap the minimum and maximum elements\n    M[min_index], M[max_index] = M[max_index], M[min_index]\n    \n    # Sort the matrix using the heap sort algorithm\n    for i in range(rows):\n        if i < min_index:\n            heapify(M[i], total_sum, min_index, rows, cols)\n        elif i > max_index:\n            heapify(M[i], total_sum, max_index, rows, cols)\n    \n    return M\n\ndef heapify(arr, total_sum, index, rows, cols):\n    smallest = arr[0]\n    min_index = 0\n    left = 2 * index + 1\n    right = 2 * index + 2\n    \n    if left < rows and M[left] < smallest:\n        smallest = M[left]\n        min_index = left\n    \n    if right < rows and M[right] < smallest:\n        smallest = M[right]\n        min_index = right\n    \n    if min_index!= index:\n        M[index], M[min_index] = M[min_index], M[index]\n        heapify(M[min_index], total_sum, min_index, rows, cols)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Function to calculate the sum of a list of numbers\n    def sum_list(L):\n        return sum(L)\n\n    # Function to sort a matrix using the sum of its rows as the sorting criteria\n    def sort_matrix_by_rows(M):\n        N = len(M)\n        for i in range(N):\n            for j in range(N-i-1):\n                sum_m1 = sum_list(M[j:j+i+1])\n                sum_m2 = sum_list(M[j+i+1:])\n                if sum_m1 > sum_m2:\n                    M[j:j+i+1], M[j+i+1:] = M[j+i+1:], M[j:j+i+1]\n        return M\n\n    # Call the sorting function on the input matrix\n    return sort_matrix_by_rows(M)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # loop through each row in the matrix\n    for i in range(len(M)):\n        # loop through each column in the current row\n        for j in range(len(M[0])):\n            # loop through each row in the matrix again\n            for k in range(len(M)):\n                # if the sum of the current row and the kth row is greater than the current value in the jth column,\n                # update the value in the jth column to be the kth row's sum\n                if sum(M[i]) > M[j][k]:\n                    M[j][k], M[i][k] = M[i][k], M[j][k]\n\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]  # calculate the sum of each row\n    sorted_rows = [M[i] for i in sorted(range(len(M)), key=lambda i: row_sums[i])]  # sort the rows based on the row sums\n    \n    return sorted_rows"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume of the prism\n    volume = (l * b * h) / 3\n\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters: length, breadth, and height of the triangular prism.\n    It then calculates the volume of the triangular prism using the formula:\n    Volume = length * breadth * height\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in length, width, and height of a triangular prism and returns the volume of the prism.\n    '''\n    # Calculating the volume of the prism using Heron's formula\n    s = (l + b + h) / 2\n    area = 0.5 * l * b\n    volume = (s * s * area) ** 0.5\n\n    # Returning the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    V = 1/2 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h #calculating the volume using formula of the volume of a prism\n    return V #returning the calculated volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism using Heron's formula\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the triangular prism\n    area = 0.5 * l * b\n\n    # Calculate the volume of the triangular prism\n    volume = area * h\n\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume of the prism using the formula V = (1/2) * base * height\n    V = (1/2) * l * b * h\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes in length, breadth and height of a triangular prism as input parameters. \n    It returns the volume of the prism.\n    '''\n    area = l * b * h\n    volume = area / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z_]+'\n\n    # Use the re.search() function to search for a match in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return true\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define regular expression pattern for checking sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z][a-z\\s]*_?[a-z\\s]*'\n    # Use re.search() method to search for the pattern in the input string\n    match = re.search(pattern, text)\n    # If the match is found, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z_]*[a-z]+[a-z_]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<![a-z])[a-z](?![a-z])_|_(?![a-z])(?<![a-z])[a-z]'\n    # Find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Check if the length of the matches list is 0, indicating that no sequences of lowercase letters joined with an underscore were found\n    return len(matches) == 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern for checking lowercase sequences with underscore\n    pattern = r'[a-z_]*[a-z]'\n\n    # Search for matches in the input string using the pattern\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b' # matches sequences of lowercase letters joined with underscore\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define a regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+'\n\n    # Use the re.findall() function to find all matches in the input string\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if len(matches) == 0:\n        return False\n    else:\n        # Concatenate the matches with underscores\n        result = '_'.join(matches)\n        return result"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    first_list = list(string)\n    second_list = list(set(string))\n\n    for char in char_list:\n        if char in first_list and char in second_list:\n            first_list.remove(char)\n\n    return ''.join(first_list)\n\n\ndef main():\n    string1 = \"Hello World\"\n    string2 = \"llo\"\n\n    print(str_to_list(string1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list containing only the characters present in the first string.\n    The function iterates through each character of the first string and checks if it is present in the second string. \n    If it is not present, it is added to the list.\n    '''\n    list_of_chars = []\n    for char in string:\n        if char not in string:\n            list_of_chars.append(char)\n    return list_of_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Create a list to store the result\n    result = []\n    # Loop through the characters in the list\n    for char in char_list:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # If the character is not present, add it to the result list\n            result.append(char)\n    # Convert the result list back to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_list = set(string)\n    result = [char for char in string if char not in remove_list]\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = ''.join([chr(i) for i in range(NO_OF_CHARS)])\n    \n    for char in str1:\n        if char in str2:\n            str2 = str2.replace(char, '')\n    \n    return str2"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    char_list = list(string)\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i in char_set:\n            string = string.replace(chr(i), '', 1)\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    string = string.lower()\n    for i in string:\n        if i in list_of_chars:\n            list_of_chars.remove(i)\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # initialize an empty list to store the final result\n    final_list = []\n    \n    # iterate over each character in the first string\n    for char in string:\n        # check if the character is present in the second string\n        if char not in string:\n            # if the character is not present, append it to the final list\n            final_list.append(char)\n            \n    # convert the final list to a string and return it\n    return ''.join(final_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arraynums)\n    # check if the length of unique_set is equal to the length of arraynums\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a set to store unique values\n    unique_nums = set()\n    \n    # Iterate through the array and add unique values to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            \n    # Check if the set is not empty, indicating that there are duplicates\n    if len(unique_nums)!= len(arraynums):\n        print(\"There are duplicates in the array.\")\n    else:\n        print(\"The array does not contain any duplicates.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_nums = set()\n    \n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    \n    # check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique numbers in the array\n    unique_nums = set(arraynums)\n    # check if the length of the unique_nums is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        # if both conditions are true, then the array contains duplicates\n        return True\n    else:\n        # if the conditions are not met, then the array does not contain duplicates\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count = {}\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # check if any element appears more than once in the dictionary\n    for count_val in count.values():\n        if count_val > 1:\n            return True\n    \n    # if no duplicates found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Convert the given number to a string\n    x = str(x)\n    \n    # Check if the number has even number of digits\n    if len(x) % 2 == 0:\n        # If it has, check if the digits are sorted in descending order\n        if x == ''.join(sorted(x, reverse=True)):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return 'Woodball'\n    elif x > 1 and x % 2 == 0:\n        return 'Woodball'\n    elif x > 1 and x % 2!= 0:\n        return 'Not a Woodball'\n    else:\n        return 'Invalid Input'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x >= 10 and x <= 20:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_woodall(x - 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5: \n        return \"Woodball\" \n    else: \n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball_set = {10, 11, 12, 13, 14, 15}\n    if x in woodball_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3:\n        return \"Woodball\"\n    elif x >= 4 and x <= 19:\n        return \"Not Woodball\"\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the given number is divisible by 10 or not\n    if x % 10 == 0:\n        return True\n    # if not, check if the given number is divisible by 2 or not\n    elif x % 2 == 0:\n        return False\n    # if none of the above conditions are true, the given number is not a woodball\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # Find the reverse of the number\n    reverse = 0\n    while num!= 0:\n        reverse = reverse*10 + num % 10\n        num //= 10\n\n    # Check if the reverse is one less than twice the original number\n    if reverse == 2*num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n    return reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_int = int(reversed_str)\n    # Calculate the difference between the original number and the reversed number\n    diff = abs(num - reversed_int)\n    # Check if the difference is less than or equal to twice the original number\n    if diff <= num*2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # Calculate the difference between the given number and its reverse\n    diff = abs(num - rev_num)\n\n    # Check if the difference is one less than twice the reverse\n    if diff <= 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n        \n    return num - reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Get the reverse of the number\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n\n    # Check if the reverse is one less than twice the original number\n    if reverse == num - 1:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Check if the input number is positive\n    if num < 0:\n        return False\n    # Reverse the given number\n    rev_num = 0\n    while num!= 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    # Check if the reversed number is one less than twice its original value\n    if abs(rev_num - num) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return (num + 1) % (2 * reverse) == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return num == 2 * reverse_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_num = num_str[::-1]\n    reverse_reverse_num = reverse_num[::-1]\n    if int(num_str) == int(reverse_num) - 1 and int(num_str) == int(reverse_reverse_num) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits and returns the largest number that can be formed with the digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += (10**i) * arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n\n    # sort the list of digits in ascending order\n    arr.sort()\n\n    # initialize a variable to store the maximum number formed with the digits\n    max_num = 0\n\n    # loop through the digits from right to left\n    for i in range(len(arr)-1, -1, -1) : \n\n        # multiply the current digit with the power of 10 raised to its position in the array\n        temp = arr[i] * (10**i)\n\n        # add the current digit to the maximum number formed with the digits to get the current maximum number\n        max_num += temp\n\n        # update the maximum number if the current number formed with the digits is greater than the current maximum number\n        if max_num > arr[i] : \n            max_num = arr[i]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    \n    for num in arr:\n        max_num = max(max_num, num)\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, digit)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed by those digits.\n    '''\n    # Create an empty dictionary to store the frequencies of each digit in the list\n    digit_freq = {}\n    for digit in arr:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate through the dictionary to find the largest number that can be formed\n    max_num = 0\n    for digit, freq in digit_freq.items():\n        if freq > 0:\n            max_num += int(digit) ** freq\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize a variable to store the largest number formed\n    max_num = 0\n    \n    # Iterate through the digits in the list\n    for digit in arr:\n        # Iterate through the digits from 0 to the digit\n        for i in range(digit+1):\n            # Update the largest number formed with the current digit and i\n            max_num = max(max_num, digit*i)\n    \n    # Return the largest number formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # sort the list of digits\n    arr.sort(reverse=True)\n    \n    # initialize a variable to store the largest number\n    largest_num = 0\n    \n    # iterate over the digits of the sorted list\n    for digit in arr:\n        # if the digit is greater than or equal to 1, multiply the current largest number by 10 and add the digit\n        if digit >= 1:\n            largest_num = largest_num * 10 + digit\n    \n    # return the largest number formed with the given digits\n    return largest_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    \n    # Loop through the digits and multiply them\n    for i in range(len(arr)):\n        max_num *= 10\n        max_num += int(arr[i])\n        \n    # Add 1 to the max number if the last digit is a 1\n    if arr[-1] == '1':\n        max_num += 1\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            temp_sum = sum(arr[k] * (j-k) for k in range(i, j))\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0: \n        # Both integers are positive or zero\n        return True\n    elif x < 0 and y < 0: \n        # Both integers are negative or zero\n        return True\n    else: \n        # One of the integers is positive and the other is negative\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"The two integers have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"The two integers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"The first integer has a negative sign while the second integer has a positive sign.\"\n    elif x > 0 and y < 0:\n        return \"The first integer has a positive sign while the second integer has a negative sign.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y > 0:\n        return \"The signs are same.\"\n    else:\n        return \"The signs are opposite.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0: \n        return True \n    elif x <= 0 and y <= 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        print(\"Both positive numbers have opposite signs\")\n    elif x<0 and y<0:\n        print(\"Both negative numbers have opposite signs\")\n    elif x<0 and y>0:\n        print(\"First number has opposite sign and second number has positive sign\")\n    else:\n        print(\"First number has positive sign and second number has opposite sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        print(\"The given integers have opposite signs\")\n    else:\n        print(\"The given integers do not have opposite signs\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number and False otherwise.\n    A number is an octagonal number if its square root is equal to its cube root. \n    '''\n    # define a function to calculate the square root\n    def sqrt(n):\n        if n < 0:\n            return None\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            i = 2\n            while i * i <= n:\n                if n % i == 0:\n                    return None\n                i += 1\n            return i - 1\n\n    # check if the square root of n is equal to its cube root\n    def is_octagonal_sqrt(n):\n        sqrt_n = sqrt(n)\n        cube_sqrt_n = sqrt(sqrt_n)\n        return cube_sqrt_n == sqrt_n ** 3\n\n    # check if n is an octagonal number\n    if is_octagonal_sqrt(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Define the function to check if a number is octagonal or not\n    def is_oct(num):\n        if num < 1 or num % 2 == 0:\n            return False\n        return num == int(num**0.5**2)\n\n    # Check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n\n    # Check if the input is a valid octagonal number\n    if is_oct(n):\n        return \"The input number is an octagonal number.\"\n    else:\n        return \"The input number is not an octagonal number.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Use the formula for the nth triangular number: 1 + 3 + 6 +... + n * (n+1) / 2\n    triangular_number = 1 + 3 + 6 +... + n * (n+1) / 2\n    octagonal_number = triangular_number ** 2\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 1\n    while b <= n:\n        if b**2 == 8*a**2:\n            print(a)\n            return True\n        a += 1\n        b += 1\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # initialize variables\n    result = 0\n    prev_result = 0\n    is_odd = True\n\n    # calculate nth octagonal number\n    for i in range(1, n+1):\n        result = prev_result + 2*i\n\n        # check if result is an octagonal number\n        if is_odd and (result - prev_result) % 12 == 0:\n            return True\n        elif not is_odd and (result - prev_result) % 12 == 0:\n            return False\n\n        # update variables\n        prev_result = result\n        is_odd = not is_odd\n\n    # if we reach this point, it means n is not an octagonal number\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return is_octagonal(n//2)\n    else:\n        return is_octagonal(3*n+1)\n\nn = int(input(\"Enter the value of n: \"))\noct_num = 0\ncount = 0\n\nwhile count < n:\n    oct_num = is_octagonal(count)\n    if oct_num:\n        print(count)\n        count += 1\n    else:\n        count += 1\n\nprint(\"The nth octagonal number is:\", oct_num)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i <= n:\n        if i**2 + i + 1 == n:\n            return i**2\n        i += 1\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Error: n must be a positive integer.\"\n    \n    # calculate the value of nth octagonal number\n    octagonal = n * (2 * n - 1)\n    \n    # check if n is a valid octagonal number\n    if octagonal < 0 or octagonal % 2 == 1:\n        return \"Error: n is not a valid octagonal number.\"\n    \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, False otherwise.\n    A number is an octagonal number if its square is equal to 2n^2.\n    '''\n    return n**2 == 2*n**2\n\ndef nth_octagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth octagonal number.\n    '''\n    i = 0\n    octagonal_num = 0\n    while i < n:\n        if is_octagonal(octagonal_num):\n            i += 1\n        octagonal_num += 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the input is an octagonal number, and False otherwise.\n    \"\"\"\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n\n    # Compute the square root of n\n    square_root = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if not isinstance(square_root, int):\n        return False\n\n    # Compute the sum of the cube of the square root and n\n    cube_sum = square_root ** 3 + n\n\n    # Check if the cube of the sum is an integer\n    if not isinstance(cube_sum, int):\n        return False\n\n    # Check if the cube of the sum is equal to the square of the square root\n    if cube_sum == square_root ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[i] = sum(int(digit) for digit in str(i+1))\n\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = set(str(i))\n            sum_of_digits = sum(int(digit) for digit in digits)\n            if sum_of_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the number of substrings for each digit length\n    digit_length_count = defaultdict(int)\n\n    # iterate through the string and count the number of substrings with the specified condition\n    for i in range(len(s)):\n        digit_length_count[len(s) - i] += 1\n\n    # sum up the counts for each digit length and return the total number of substrings\n    return sum(digit_length_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring]\n            sum_digits = sum(digits)\n            if sum_digits == len(substring):\n                count[substring] += 1\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    # Initialize a dictionary to store the count of substrings with the given sum\n    substring_count = defaultdict(int)\n\n    # Iterate over all possible substrings of length equal to the length of the string\n    for i in range(len(s)):\n        # Check if the sum of the digits of the substring is equal to its length\n        substring_sum = sum(int(digit) for digit in s[i])\n        if substring_sum == len(s[i]):\n            # Update the count of substrings with the given sum\n            substring_count[substring_sum] += 1\n            count += substring_count[substring_sum]\n\n    # Return the total count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Create a defaultdict to store the frequency of each digit\n    freq = defaultdict(int)\n    for char in s:\n        freq[int(char)] += 1\n    \n    # Initialize the count variable to zero\n    count = 0\n    \n    # Iterate through the characters in the string\n    for i in range(len(s)):\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(freq[ord(c) - ord('0')] for c in s[i:i+len(freq)])\n        \n        # If the substring sum is equal to its length, increment the count\n        if substring_sum == i+1:\n            count += 1\n            \n    # Return the count of substrings with the given condition\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            # Check if the sum of digits of the substring is equal to its length\n            digits_sum = sum(map(int, substring))\n            if digits_sum == len(substring):\n                count_dict[substring] += 1\n\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert string to list of characters\n    s = list(s)\n    # Initialize a dictionary to store the count of substrings\n    counts = defaultdict(int)\n    # Loop through all possible substrings of length len(s)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Compute the sum of digits in the substring\n            substring_sum = sum(int(c) for c in s[i:j+1])\n            # If the sum is equal to the length of the substring, increment the count in the dictionary\n            if substring_sum == len(s[i:j+1]):\n                counts[substring_sum] += 1\n    # Return the count of substrings with sum equal to len(s)\n    return sum(counts[len(s)])"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of substrings with each length\n    substrings = defaultdict(int)\n\n    # loop through the string s and for each character,\n    # calculate the sum of its digits and check if its length is equal to the sum of digits\n    for i in range(len(s)):\n        substring = s[i]\n        for j in range(i, len(s)):\n            substring += s[j]\n            substring = sorted(substring)\n            digit_sum = sum(map(int, substring))\n            if digit_sum == len(substring):\n                substrings[len(substring)] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return substrings[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int) # create a defaultdict to store count of substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1] # create a substring from index i to j+1\n            digits_sum = sum(int(digit) for digit in substring) # calculate the sum of digits in the substring\n            count_dict[digits_sum] += 1 # update the count of substrings for the given digits_sum\n    return sum(count_dict.values()) # return the sum of all counts of substrings"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list.\n\n    Args:\n    - xs: a list of numbers\n\n    Returns:\n    - the smallest number in the list\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains two elements, representing two numbers.\n\n    Returns:\n        int: The maximum difference between available pairs in the list.\n\n    Example:\n        test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n        max_difference(test_list) # Output: 8\n    \"\"\"\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables for the maximum difference and the difference between the first two elements\n    max_diff = 0\n    diff = test_list[1][0] - test_list[0][0]\n\n    # Iterate through the remaining elements of the list and calculate the difference between the current element and the previous element\n    for i in range(1, len(test_list)):\n        curr_diff = test_list[i][0] - test_list[i - 1][0]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n        diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i][0], test_list[j][0]))\n    max_diff = 0\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    temp_diff = 0\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        # Calculate the difference between the current pair and the next pair\n        temp_diff = abs(test_list[i+1][0] - test_list[i][1])\n        # Update the maximum difference if necessary\n        if temp_diff > max_diff:\n            max_diff = temp_diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n    \n    # Loop through each pair of elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair of elements\n            diff = abs(test_list[i][1] - test_list[j][1])\n            \n            # Update the maximum difference if the difference is greater\n            if diff > max_diff:\n                max_diff = diff\n                \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples using the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples by second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts the tuples based on the second value of each tuple.\n    The function returns the sorted list of tuples.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum([item for sublist in data_list for item in sublist])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if not data_list:\n            return []\n        elif isinstance(data_list[0], list):\n            return flatten_list(data_list[0]) + flatten_list(data_list[1:])\n        else:\n            return [data_list[0]] + flatten_list(data_list[1:])\n\n    flattened_list = flatten_list(data_list)\n    total = 0\n    for item in flattened_list:\n        total += item\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Flatten a list and return a single list with all elements.\n        '''\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    def sum_flat_list(flat_lst):\n        '''\n        Sum all the elements in a flattened list.\n        '''\n        return sum(flat_lst)\n\n    flat_data_list = flatten(data_list)\n    return sum_flat_list(flat_data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    def flatten_helper(sub_list):\n        for item in sub_list:\n            if type(item) == list:\n                flatten_helper(item)\n            else:\n                flattened_list.append(item)\n    flatten_helper(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(nested_list):\n        flattened_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    def sum_flattened_list(flat_list):\n        sum_value = 0\n        for item in flat_list:\n            if isinstance(item, int):\n                sum_value += item\n        return sum_value\n\n    flat_list = flatten_list(data_list)\n    return sum_flattened_list(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n: The number of partitions to calculate the number of ways for.\n\n    Returns:\n        The number of ways to partition a set of Bell numbers into `n` parts.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Find the number of Bell numbers\n    bell_numbers = [1] * (n+1)\n    bell_numbers[0] = 0\n    bell_numbers[1] = 0\n    bell_numbers[2] = 1\n    bell_numbers[3] = 1\n    \n    # Calculate the number of ways to partition the set of Bell numbers\n    ways = 1\n    for i in range(4, n+1):\n        ways *= i\n        ways //= i - 1\n        bell_numbers[i] = ways\n    \n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Number of ways to partition a set of Bell numbers:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \n    :param n: the number of elements in the set to partition\n    :type n: int\n    :return: the number of ways to partition the set of Bell numbers\n    :rtype: int\n    \"\"\"\n    # initialize the number of ways to partition to 1\n    num_ways = 1\n    # loop through the set of Bell numbers\n    for i in range(n + 1):\n        # initialize the number of ways to partition at 1\n        ways = 1\n        # loop through the set of Bell numbers\n        for j in range(i + 1):\n            # add the number of ways to partition the current pair of numbers\n            ways *= j\n            # add the number of ways to partition the set of Bell numbers\n            ways //= j\n        # add the number of ways to partition the current Bell number to the total\n        num_ways *= ways\n    # return the total number of ways to partition the set of Bell numbers\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    def helper(k, n):\n        if k == 0:\n            return n + 1\n        if k == n:\n            return 1\n        return helper(k - 1, n) + helper(k, n - 1)\n\n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    The Bell numbers are numbers defined by the formula:\n\n    B(n) = (-1)^n * n^(n-1) / ((1-2^{-n}) * (2^n - 1))\n\n    Args:\n        n: an integer\n\n    Returns:\n        an integer representing the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Define the first n Bell numbers\n    bell_numbers = [(-1)**i * n**(i-1) / ((1-2**(-i)) * (2**i - 1)) for i in range(1, n+1)]\n\n    # Return the sum of the first n Bell numbers\n    return sum(bell_numbers)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    elif A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    elif A[0] > A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize the first element of the array\n    first_element = A[0]\n    # Traverse the array from second element to last element\n    for i in range(1, len(A)): \n        # Check if the current element is less than the previous element\n        if A[i] < first_element: \n            # If it is, return False\n            return False\n        # Update the first element of the array\n        first_element = A[i]\n    # If all elements are greater than the first element, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n        elif A[i] >= A[i-1]:\n            return True\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    \n    else:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    # Sort the given array in ascending order\n    A.sort()\n    # Check if the array is monotonic or not\n    if (A[len(A)-1] - A[0]) == sum(A) - A[len(A)-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # iterate through the array and check if each element is greater or less than the previous element\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n\n    # if we reach this point, then all the elements in the array are either equal or greater than the previous element\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n\n    A is an array consisting of integers.\n\n    An array is said to be monotonic if it is either monotone increasing or monotone decreasing.\n\n    If the array is monotone increasing, then the array has elements that are in non-decreasing order.\n    If the array is monotone decreasing, then the array has elements that are in non-increasing order.\n\n    Time Complexity: O(n), where n is the length of the array.\n    '''\n\n    # Initialize the first element of the array\n    prev = A[0]\n\n    # Loop through the rest of the array\n    for i in range(1, len(A)):\n\n        # Check if the current element is greater than the previous element\n        if A[i] > prev:\n\n            # If it is greater than the previous element, return False\n            return False\n\n        # Update the previous element to the current element\n        prev = A[i]\n\n    # If the loop completes without finding any decreasing elements, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n        elif A[i] < A[i + 1]:\n            pass\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)):\n        if l[i:] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s and is_sublist(l[1:], s):\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    :param l: A list.\n    :param s: A sublist.\n    :return: True if the sublist is present in the list, False otherwise.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    # Check if the first element of the sublist is present in the list.\n    if l[0] == s[0]:\n        # Check if the remaining elements of the sublist are present in the list.\n        for i in range(1, len(s)):\n            if l[i]!= s[i]:\n                return False\n\n        # If all the remaining elements are present, then the sublist is present.\n        return True\n\n    # If the first element is not present, then the sublist cannot be present.\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Args:\n    l (list): List to search for sublist\n    s (list): Sublist to search in the list\n\n    Returns:\n    bool: True if sublist is found in the list, else False.\n\n    Examples:\n    >>> is_sublist([1, 2, 3], [1, 2])\n    True\n    >>> is_sublist([1, 2, 3], [2, 3])\n    True\n    >>> is_sublist([1, 2, 3], [3, 4])\n    False\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length,\n    False otherwise.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_tuples_have_equal_length = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            all_tuples_have_equal_length = False\n            break\n    return all_tuples_have_equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # loop through all the tuples in the input\n    for t in Input:\n        # check if all the elements of the tuple are same\n        if len(t)!= len(set(t)):\n            # if not, then return False\n            return False\n    \n    # if all the tuples have equal length, then return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1,len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(x) == len(Input[0]) for x in Input):\n        print(\"All the tuples have equal length\")\n    else:\n        print(\"Not all the tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            flag = False\n            break\n    return flag"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i < gap:\n            j = i + gap\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb sort algorithm.\n    \n    Parameters:\n    nums (list): The list of elements to be sorted.\n    \n    Returns:\n    The sorted list.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = (n + gap) // 2\n        n = gap + gap\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        list: A sorted version of the input list.\n    '''\n\n    # initialize variables for the algorithm\n    n = len(nums)\n    swapped = True\n    start = 0\n    gap = n\n    count = 0\n\n    # iterate until the list is sorted\n    while swapped:\n\n        # swap adjacent elements if they are not in the correct order\n        for i in range(start, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n        # check if any swaps were made in the inner loop\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                swapped = True\n\n        # update the gap size and check if the gap size is too small\n        if swapped:\n            gap = int(0.75 * gap)\n            count += 1\n            if gap == 1:\n                break\n\n        # check if the algorithm has run too many times\n        if count > 1000:\n            break\n\n        start += gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap/1.3)\n        for i in range(gap, n):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j-gap] > temp:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = temp\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using comb sort.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n // 1.3\n        for i in range(gap, n):\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while gap > 0 or swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap //= 1\n        if gap == 0:\n            gap = n // 2\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is an in-place comparison sorting algorithm that is designed to be efficient on partially sorted lists.\n\n    It has a time complexity of O(n^2) and has a space complexity of O(1).\n\n    Args:\n        nums (list): The list of elements to be sorted.\n\n    Returns:\n        The sorted list.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # Main sorting loop\n    while gap > 1 or swapped:\n\n        # Calculate the new gap size\n        gap = int(gap / 1.3)\n\n        # Set swapped to False to begin with\n        swapped = False\n\n        # Iterate through the list using the gap size\n        for i in range(0, n - gap):\n\n            # Check if the current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n\n                # Swap the elements if they are not in the correct order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n                # Set swapped to True to indicate a swap\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it can be represented as the difference of two squares, and False otherwise.\n    \"\"\"\n\n    # Check if the number is less than or equal to zero\n    if n <= 0:\n        return False\n\n    # Find the square of the number\n    square = n ** 2\n\n    # Find the difference between two squares\n    diff = (square + 1) ** 2 - square ** 2\n\n    # Check if the number is equal to the difference\n    if n == diff:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    if n < 0: \n        return \"Please enter a non-negative number.\"\n    \n    # convert the given number to integer\n    n = int(n)\n    \n    # check for the special cases\n    if n == 0: \n        return \"0 is the only square whose difference is itself.\"\n    if n == 1: \n        return \"1 is the only square whose difference is itself.\"\n    \n    # check if the difference of any two squares is equal to the given number\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(1, int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return \"Yes, the difference of any two squares is equal to the given number.\"\n    \n    # if none of the above conditions are satisfied, the given number can't be represented as the difference of two squares\n    return \"No, the given number can't be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # checking if n is a square\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of n\n    sqrt_n = n ** 0.5\n\n    # check if sqrt_n is an integer\n    if sqrt_n.is_integer():\n        # if it is an integer, it can be represented as the difference of two squares\n        return True\n    else:\n        # if it's not an integer, it cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_square(num):\n        return num == int(num ** 0.5) ** 2\n\n    if n > 0 and is_square(n):\n        return True\n    elif n < 0 and is_square(-n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # check if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is even\n    if sqrt_n % 2 == 0:\n        return False\n\n    # Check if the difference of the squares is a perfect square\n    diff_sq = (sqrt_n * sqrt_n) - n\n\n    # Check if the difference of the squares is an integer\n    if diff_sq % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if n - i*i == i*i:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a multiple of 4\n    if n % 4 == 0:\n        # If n is a multiple of 4, then it can be represented as the difference of two squares\n        diff = (n // 4) ** 2 - n\n        return diff\n    else:\n        # If n is not a multiple of 4, then it cannot be represented as the difference of two squares\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # check if the number is a power of 2\n    if n & (n-1) == 0:\n        # find the maximum value for the square root of n\n        max_sqrt = int(n**0.5)\n        # check if the difference of squares can be represented as integers\n        for i in range(1, max_sqrt+1):\n            if i**2 + i*n - n == 0:\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a list of unique colors\n    unique_colors = list(set(colors))\n\n    # initialize a list to store the current pattern\n    current_pattern = []\n\n    # iterate through the colors in the list\n    for color in unique_colors:\n        # check if the color matches any of the patterns in the list\n        for pattern in patterns:\n            if pattern[0] == color:\n                # add the color to the current pattern\n                current_pattern.append(color)\n                # check if the pattern is complete\n                if pattern == current_pattern:\n                    # remove the pattern from the list of patterns\n                    patterns.remove(pattern)\n                    # if the pattern is complete, return True\n                    return True\n                # if the pattern is not complete, continue to the next color in the list\n                continue\n\n    # if the function has made it this far, the list of patterns is not valid\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    pattern_count = {}\n\n    for color in colors:\n        for pattern in patterns:\n            if pattern in pattern_count:\n                pattern_count[pattern] += 1\n            else:\n                pattern_count[pattern] = 1\n\n    for pattern in pattern_count:\n        if pattern_count[pattern]!= colors.count(pattern):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize variables\n    current_pattern = 0\n    current_color = 0\n    \n    # Check if there are any patterns in the list\n    if not patterns:\n        return True\n    \n    # Loop through each color in the colors list\n    for color in colors:\n        # Check if the current color matches the current pattern\n        if patterns[current_pattern] == color:\n            # If the colors match, move to the next pattern\n            current_pattern += 1\n        else:\n            # If the colors don't match, start over with the first pattern\n            current_pattern = 0\n        \n        # Check if we have reached the end of the patterns list\n        if current_pattern == len(patterns):\n            # If we have, return True\n            return True\n        \n        # Check if the current color matches the next pattern\n        if current_pattern + 1 < len(patterns) and patterns[current_pattern + 1] == color:\n            # If the colors match, move to the next pattern\n            current_pattern += 1\n        else:\n            # If the colors don't match, start over with the first pattern\n            current_pattern = 0\n    \n    # If we get here, there was a mismatch between the colors and patterns\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color in color_count:\n                color_count[color] += 1\n            else:\n                color_count[color] = 1\n    for color in color_count:\n        if color_count[color]!= patterns[0].count(color):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a dictionary to map colors to their corresponding patterns\n    pattern_map = {\n       'red': patterns[0],\n        'blue': patterns[1],\n        'green': patterns[2],\n        'yellow': patterns[3],\n        'black': patterns[4]\n    }\n\n    # get the length of the pattern list\n    pattern_length = len(patterns)\n\n    # loop through the colors and check if they match their patterns\n    for color in colors:\n        if pattern_map[color] == color:\n            continue\n        else:\n            return False\n\n    # if all colors match their patterns, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initializing the sequence of colors to check against\n    sequence = colors[0]\n\n    # looping through the patterns array\n    for pattern in patterns:\n\n        # checking if the pattern is a substring of the sequence\n        if pattern in sequence:\n\n            # removing the pattern from the sequence\n            sequence = sequence.replace(pattern, '')\n\n        else:\n\n            # if pattern is not a substring, the function returns False\n            return False\n\n    # if all the patterns are present in the sequence, the function returns True\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Initialize a dictionary to store the count of each color\n    color_count = {}\n    \n    # Loop through the colors array\n    for color in colors:\n        # If the color is not in the dictionary, add it with a count of 1\n        if color not in color_count:\n            color_count[color] = 1\n        # If the color is already in the dictionary, increment its count by 1\n        else:\n            color_count[color] += 1\n    \n    # Loop through the patterns array\n    for pattern in patterns:\n        # If the pattern is not a string, return False\n        if not isinstance(pattern, str):\n            return False\n        \n        # Loop through the characters in the pattern\n        for char in pattern:\n            # If the character is not a color, return False\n            if not char in color_count:\n                return False\n            \n            # If the character is a color, decrement its count by 1\n            else:\n                color_count[char] -= 1\n                \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether a given list of colors and a list of patterns are the same.\n    A pattern is represented as a list of colors.\n    For example, if patterns = [[1, 2, 3], [4, 5, 6]], then it means that the colors are 1, 2, 3, 4, 5, 6.\n    '''\n\n    # Check if the length of the patterns list is equal to the length of the colors list\n    if len(patterns)!= len(colors):\n        return False\n\n    # Check if each pattern in the patterns list is a sublist of the colors list\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_dict = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color in patterns_dict:\n                patterns_dict[color] += 1\n            else:\n                patterns_dict[color] = 1\n\n    if len(patterns_dict) == len(colors) and all(len(pattern) == len(patterns_dict.keys()) for pattern in patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find all tuples from the given list of tuples that have all elements divisible by k.\n    \"\"\"\n\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if all elements are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                divisible_tuples.append(test_list[i] + test_list[j])\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tuple1 in test_list:\n        if all(x % K == 0 for x in tuple1):\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the tuples\n    result = []\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by k, append the tuple to the result list\n            result.append(tup)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    words = s.split()\n    count = 0\n    for word in words:\n        if len(word) % 2!= 0:\n            count += 1\n    if count > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(\"The length of the word '{}' is odd.\".format(word))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: # If the length of the word is even\n        print(s, \"is an even length word.\")\n    else: # If the length of the word is odd\n        print(s, \"is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n\n    # Initialize a counter variable to keep track of the number of odd words\n    odd_words = 0\n\n    # Iterate through each word in the list\n    for word in words:\n\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            odd_words += 1\n\n    # Return the count of odd words\n    return odd_words"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # loop through each word\n    for word in words:\n        # check the length of the word\n        if len(word) % 2 == 1:\n            # if the length is odd, return True\n            return True\n        # if the length is even, continue looping\n        else:\n            continue\n    # if the loop completes without finding an odd length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    words = s.split() # split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # loop through each word\n    for word in words:\n        # check the length of the word\n        if len(word) % 2 == 1:\n            # return True if the length is odd\n            return True\n        else:\n            # otherwise, return False\n            return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s.split()) % 2 == 0:\n        print(s.split()[0] + \" is an odd-length word.\")\n    else:\n        print(s.split()[0] + \" is an even-length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Initialize a variable to store the length of the longest word\n    max_len = 0\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            # If the length is odd, update the max_len variable\n            max_len = max(max_len, len(word))\n    # Check if the length of the longest word is odd\n    if max_len % 2!= 0:\n        # If the length is odd, return True\n        return True\n    # If the length is even, return False\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    \n    # recursive case\n    else:\n        return 4*n*(n+1) + tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num_triangles = n * (n-1) * (n-2) * (n-3) / 6\n    return num_triangles\n\nTo test the function, we can call it with different values of n:\n\nprint(tetrahedral_number(5)) # Output: 120\nprint(tetrahedral_number(10)) # Output: 35040\nprint(tetrahedral_number(100)) # Output: 1020800"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    \n    # Define the recursive case\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 20\n    elif n == 3:\n        return 60\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (2 * n + 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the first and second tetrahedral numbers\n    a = 0\n    b = 6\n    \n    # Find the nth tetrahedral number by adding n-1 to the sum of a and b\n    for i in range(1, n):\n        a += b\n        b += 6\n    \n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(4*n-1)**2 + 4*n - 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function calculates the nth tetrahedral number.\n\n    Args:\n        n (int): The number for which we need to find the tetrahedral number.\n\n    Returns:\n        int: The nth tetrahedral number.\n    '''\n\n    # Formula for the nth tetrahedral number\n    nth_tetrahedral = (n * (n + 1)) // 2\n\n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the first two tetrahedral numbers\n    t1 = 1\n    t2 = 15\n\n    # Loop through the remaining numbers\n    for i in range(3, n+1):\n        # Calculate the next tetrahedral number\n        t = t1 + t2 - t1 + t2\n\n        # Update the values of t1 and t2\n        t1 = t2\n        t2 = t\n\n        # Print the current tetrahedral number\n        print(t)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_of_power_of_6(n):\n        return sum([6**i for i in range(1, n+1)])\n\n    def power_of_sum_of_2(n):\n        return 2**sum_of_power_of_6(n)\n\n    def sum_of_power_of_2(n):\n        return sum([2**i for i in range(1, n+1)])\n\n    def power_of_sum_of_3(n):\n        return 3**sum_of_power_of_6(n)\n\n    def sum_of_power_of_3(n):\n        return sum([3**i for i in range(1, n+1)])\n\n    def power_of_sum_of_4(n):\n        return 4**sum_of_power_of_6(n)\n\n    def sum_of_power_of_4(n):\n        return sum([4**i for i in range(1, n+1)])\n\n    def power_of_sum_of_5(n):\n        return 5**sum_of_power_of_6(n)\n\n    def sum_of_power_of_5(n):\n        return sum([5**i for i in range(1, n+1)])\n\n    def sum_of_tetrahedra(n):\n        return factorial(n) * power_of_sum_of_2(n) * power_of_sum_of_3(n) * power_of_sum_of_4(n) * power_of_sum_of_5(n)\n\n    return sum_of_tetrahedra(n)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with the given radius r.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius value and calculates the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0  \n    for char in strr:  \n        total += ord(char)  \n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum(ord(char) for char in strr)\n    ascii_sum %= 26\n    return chr(ascii_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Initialize the result string\n    result = \"\"\n    # Convert the string to a list of characters\n    lst = list(strr)\n    # Loop through the list of characters\n    for char in lst:\n        # Convert the character to an ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value to the result string\n        result += chr((ascii_val + 13) % 26)\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res += ord(i)\n    return chr((res % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # loop through each character in the string\n    char = 0\n    for i in range(len(strr)):\n        # add the ASCII value of the character to the running total\n        char = (char + ord(strr[i])) % 26\n\n    # convert the running total to a character and return it\n    return chr(char)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 1:\n        print(\"The first number in the sequence is 1.\")\n    else:\n        print(\"The\", n, \"number in the sequence is\", n ** 2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        seq = [1]\n        for i in range(2, n + 1):\n            next_num = seq[-1] * 2 + seq[-2]\n            seq.append(next_num)\n        return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1, 1, 1, 0, 0, 0, 0, 0]\n    for i in range(n - 1):\n        next_sequence = [0] * len(sequence)\n        for j in range(len(sequence)):\n            next_sequence[j] = sequence[j] + sequence[j + 1]\n        sequence = next_sequence\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    This function finds the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 3*sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        return sequence(n - 1) + sequence(n - 3) + 1"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = 4 * math.pi * r ** 2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to calculate surface area of a sphere\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere given its radius r.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere with radius r.\n    \n    Parameters:\n    r (float): The radius of the sphere.\n    \n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to find the surface area of a sphere\n    surface_area = 4 * math.pi * r ** 2\n    \n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n + 1) // 3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(i):\n        if i == 1:\n            return 1\n        elif i % 2 == 0:\n            return (centered_hexagonal_number_helper(i//2) * 3) - 1\n        else:\n            return centered_hexagonal_number_helper(i//2) * 3\n\n    return centered_hexagonal_number_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    b = 1\n    c = 2\n    \n    for i in range(n):\n        a = b\n        b = c\n        c = a + b + c\n    \n    return c\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a, b = 1, 2\n    while b <= n:\n        a, b = b, 4 * a + b - 2\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n\n    The centered hexagonal number is the nth centered triangular number (the sum of the squares of the first n positive integers).\n\n    The centered triangular number is defined as:\n\n    centered_triangular_number(n) = (n + 1/2)(n + 1) / 2\n\n    The centered hexagonal number is defined as:\n\n    centered_hexagonal_number(n) = (n + 1/2)(n^2 + 6n + 3) / 2\n\n    Therefore, the nth centered hexagonal number is equal to:\n\n    centered_hexagonal_number(n) = (n + 1/2)(n^2 + 6n + 3) / 2\n\n    This is the same as:\n\n    centered_hexagonal_number(n) = (n + 1/2)(2n + 1) / 2\n\n    This is the same as:\n\n    centered_hexagonal_number(n) = 3 * n^2 + 18 * n + 9\n\n    Therefore, the function centered_hexagonal_number(n) takes an integer n as input and returns the nth centered hexagonal number.\n    '''\n    return 3 * n**2 + 18 * n + 9"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        print(f'{a}*{b} = {a*b}', end=' ')\n        a += 2\n        b += 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the first centered hexagonal number\n    hexagonal_num = 1\n    \n    # Loop through the remaining n-1 centered hexagonal numbers\n    for i in range(2, n):\n        # Calculate the next centered hexagonal number\n        hexagonal_num = 3 * (2 * hexagonal_num - 1)\n    \n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    def centered_hexagonal_number_helper(n, m):\n        if n == 0:\n            return m\n        else:\n            return centered_hexagonal_number_helper(n - 1, 2 * m - 1)\n\n    return centered_hexagonal_number_helper(n, 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 1\n    if n == 1:\n        return 1\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 4 * a - 2\n    d = 2 * c - 1\n    \n    # Loop to calculate centered hexagonal numbers\n    for i in range(2, n+1):\n        # Update variables\n        a = b + c\n        b = c + d\n        c = 4 * a - 2\n        d = 2 * c - 1\n        \n    return a"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1: A dictionary.\n    - dict2: A dictionary.\n    - dict3: A dictionary.\n\n    Returns:\n    A single dictionary with the merged contents of the input dictionaries.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create a new dictionary to store the merged dictionary\n    merged_dict = {}\n    \n    # Merge the first two dictionaries into the new dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Merge the third dictionary into the new dictionary\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merging the dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    # Returning the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2.keys() and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key])\n        elif key in dict2 and key in dict3.keys():\n            merged_dict[key] = (dict1[key], dict3[key])\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.defaultdict(list)\n\n    for key in dict1.keys():\n        merged_dict[key].extend(dict1[key])\n\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = list()\n        merged_dict[key].extend(dict2[key])\n\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = list()\n        merged_dict[key].extend(dict3[key])\n\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    # Iterate through the dictionaries\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    \n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    \n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine all dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary that contains all the keys from all three dictionaries.\n    \"\"\"\n    merged_dict = ct.defaultdict(list)\n    \n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n        \n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n        \n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n        \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    # Creating a dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    \n    # Iterating through the list and updating the frequency of each element in the dictionary\n    for i in lst:\n        freq_dict[i] += 1\n        \n    # Returning the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns the frequency of all elements in the list `lst` as a dictionary.\n    '''\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.defaultdict(int)\n\n    for i in list1:\n        freq_dict[i] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # use a dictionary to store the frequency of each element in the list\n    freq = collections.Counter(list1)\n    # convert the dictionary to a list of tuples containing the element and its frequency\n    freq_list = freq.most_common()\n    # return the list of tuples\n    return freq_list"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as an argument and returns a dictionary of the frequency of each element in the list.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    for i in range(1, N+1):\n        diff = abs(N-i)\n        if diff < min_diff:\n            min_diff = diff\n    return N-min_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    smallest = float('inf')\n    closest = 0\n    \n    # Iterate through each number from 1 to N\n    for i in range(1, N+1):\n        # Calculate the difference between the number and N\n        diff = abs(N - i)\n        \n        # Check if the current number is smaller than the smallest so far\n        if i < smallest:\n            smallest = i\n            closest = diff\n        \n        # If the current number is larger than the smallest so far and is within the difference between the closest number and N\n        elif i > smallest and diff <= closest:\n            closest = diff\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    largest = N + 1\n\n    while smallest <= largest:\n        mid = (smallest + largest) // 2\n\n        if mid < N:\n            smallest = mid + 1\n        else:\n            largest = mid - 1\n\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(N))\n    closest_num = float('inf')\n\n    for num in num_list:\n        if num < N:\n            closest_num = min(closest_num, num)\n        elif num > N:\n            closest_num = min(closest_num, N - num)\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    smallest = float('inf')\n    smallest_diff = float('inf')\n    current_num = N\n    next_num = 1\n    \n    # loop through numbers from N+1 to infinity\n    while True:\n        if current_num < N:\n            next_num = current_num + 1\n            if next_num < smallest:\n                smallest = next_num\n                smallest_diff = abs(current_num - N)\n        else:\n            break\n        \n        current_num = next_num\n    \n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest smaller number to be n\n    closest_smallest = N\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, N+1):\n        # If the current number is smaller than the current closest smaller number\n        if i < closest_smallest:\n            # Update the closest smaller number to be the current number\n            closest_smallest = i\n    \n    # Return the closest smaller number\n    return closest_smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = 1\n    while True:\n        if num**2 <= N:\n            num += 1\n        else:\n            num -= 1\n            break\n    return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    closest = abs(num_list[0] - N)\n    for num in num_list:\n        if abs(num - N) < closest:\n            closest = abs(num - N)\n    return num_list[num_list.index(N) - closest]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    nums.append(N)\n    nums.sort()\n    return nums[1]"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize variables\n    longest_word = \"\"\n    length = 0\n\n    # loop through list\n    for word in list1:\n\n        # check if current word is longer than the current longest word\n        if len(word) > length:\n            longest_word = word\n            length = len(word)\n\n    # return length of longest word\n    return length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list):\n        str1 = [str1]\n    if not isinstance(sub_str, list):\n        sub_str = [sub_str]\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str_list, sub_str):\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating((3 * n) + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return \"Number must be greater than or equal to 1\"\n    elif n > 500:\n        return \"Number must be less than or equal to 500\"\n    else:\n        return \"Number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    \n    if n < 0:\n        return False\n    \n    # iterate through the digits of the number\n    for digit in str(n):\n        # if the digit is even, the number is not undulating\n        if int(digit) % 2 == 0:\n            return False\n    \n    # if the loop completes without returning False, the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0:\n        return \"Negative number\"\n    elif n == 0:\n        return \"Not undulating\"\n    elif n == 1 or n == 2:\n        return \"Undulating\"\n    elif n % 2 == 0:\n        return \"Undulating\"\n    else:\n        return \"Not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even number is undulating\"\n    else:\n        return \"Odd number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if n is positive\n    if n <= 0:\n        return False\n\n    # Calculate the sum of the squares of the first n odd numbers\n    odd_squares = sum(i**2 for i in range(1, n+1, 2))\n\n    # Check if the sum is odd\n    if odd_squares % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a,b-1)\n    else:\n        return 1/power(a,-b)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sorting the list of tuples by second value\n    return sorted_list[0] # returning the index of the tuple with the smallest second value"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    \"\"\"\n    # sort the list of tuples based on the second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Loop through each list in the input list of lists\n    min_length = 100\n    for sublist in lst:\n        # Check if the length of the current sublist is less than the minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    # Return the length of the minimum sublist\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n    \"\"\"\n    min_len = len(lst[0])\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000  # initialize a very large value\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf')\n    min_list = None\n\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n            min_list = sub_list\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = len(lst[0])\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # Initialize the minimum length variable to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of distinct divisors of a given integer.\n    '''\n    divisors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as an input and returns the number of divisors of that integer.\n    A divisor of an integer is an integer that divides evenly into it.\n    \"\"\"\n\n    # initialize a counter variable to keep track of the number of divisors found\n    count = 0\n\n    # loop through all numbers from 1 to the square root of the given integer\n    for i in range(1, int(n ** 0.5) + 1):\n        # if the given integer is divisible by the current number, add 1 to the counter variable\n        if n % i == 0:\n            count += 1\n\n    # return the count of divisors found\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store frequency\n    freq = {}\n\n    # loop through each list in the list1 and add each element to the dictionary\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for item in list1:\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n            \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    # Return the dictionary containing frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # loop through each element in the flattened list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq:\n            # if it is, increment its frequency by 1\n            freq[item] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq[item] = 1\n    \n    # return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store frequency counts\n    frequency_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            frequency_dict[element] = 1\n\n    # Return the frequency dictionary\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # Divide with the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    else:\n        result = 1\n        for num in numbers:\n            if not isinstance(num, int):\n                raise TypeError(\"All elements in the list must be integers\")\n            else:\n                result *= num\n        return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 1\n    else:\n        result = multiply_num(numbers[1:]) * numbers[0]\n        return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Calculate the multiplication factor\n    mult_factor = 1\n    for num in numbers:\n        mult_factor *= num\n\n    # Divide the multiplication factor by the length of the list\n    mult_factor /= len(numbers)\n\n    # Return the result\n    return mult_factor"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # convert the decimal number to a list of digits\n    digits = list(str(n))\n    # initialize an empty list to store the binary digits\n    binary_digits = []\n    # loop through the digits of the decimal number\n    for digit in digits:\n        # if the digit is 0, append a 0 to the binary_digits list\n        if digit == '0':\n            binary_digits.append(digit)\n        # if the digit is 1, append a 1 to the binary_digits list\n        elif digit == '1':\n            binary_digits.append(digit)\n        # if the digit is neither 0 nor 1, raise an error\n        else:\n            raise ValueError(\"Invalid digit in decimal number\")\n    # convert the binary_digits list to a string and return it\n    return ''.join(binary_digits)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent of the decimal number\n    binary_str = \"\"\n\n    # iterate through each digit of the decimal number\n    while n > 0:\n        # get the remainder of n divided by 2\n        digit = n % 2\n\n        # add the remainder to the beginning of binary_str\n        binary_str = str(digit) + binary_str\n\n        # divide n by 2\n        n = n // 2\n\n    # remove any leading zeros from the binary string\n    binary_str = binary_str.lstrip('0')\n\n    # return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    # convert decimal to binary \n    binary = bin(n)[2:] \n    \n    # add leading zeros to make binary string of required length \n    return \"0\"*(8-len(binary)) + binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_representation = \"\"\n    while n > 0:\n        binary_representation = str(n % 2) + binary_representation\n        n //= 2\n    return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    \n    # Convert decimal number to binary recursively\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary = str(remainder) + binary\n        \n    # Remove leading zeros from binary string\n    binary = binary.lstrip(\"0\")\n        \n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert integer to string and reverse it\n    str_num = str(num)[::-1]\n    # Convert string to integer and add 1\n    next_num = int(str_num) + 1\n    # Check if the next number is a palindrome\n    if str(next_num) == str(next_num)[::-1]:\n        return next_num\n    else:\n        # If not, return the original number\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n    \n    # Find the first smallest odd number greater than the input number\n    first_smallest_odd = num + 2\n    \n    # Find the largest palindrome that is smaller than the first smallest odd number\n    largest_palindrome = first_smallest_odd - 1\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome -= 1\n    \n    # Return the smallest palindrome that is larger than the input number\n    return largest_palindrome - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, return it as is\n        return num\n\n    # Otherwise, find the largest palindrome that is less than the input number\n    largest_palindrome = 0\n    for i in range(10**num, 10**(num-1), -1):\n        if is_palindrome(i):\n            largest_palindrome = i\n            break\n\n    # Increment the largest palindrome until it becomes a palindrome\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome += 1\n\n    # Return the next smallest palindrome\n    return largest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a given integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    min_num = sys.maxsize\n    while min_num < num:\n        min_num += 1\n        if is_palindrome(min_num):\n            return min_num\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Find the next smallest number that is a palindrome\n    for i in range(num + 1, 1000001):\n        if is_palindrome(i) and i < num:\n            return i\n\n    # If no palindromes are found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # get the length of the given integer\n    length = len(str(num))\n    # loop through all possible palindromes of the same length\n    for i in range(length):\n        # get the first half of the palindrome\n        first_half = int(str(num)[i:length//2+i])\n        # get the second half of the palindrome\n        second_half = int(str(num)[-i-1:length//2-i-1:-1])\n        # check if the palindrome is a palindrome of the next smallest palindrome\n        if first_half * second_half < num:\n            return first_half * second_half"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**9+1\n    num_str = str(num)\n    is_palindrome = True\n    for i in range(len(num_str)):\n        if num_str[i]!= num_str[-i-1]:\n            is_palindrome = False\n            break\n    if is_palindrome:\n        return num+1\n    else:\n        if num % 2 == 0:\n            return num-1\n        else:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    This function checks if a number is a palindrome or not.\n    \"\"\"\n    # Convert the number to a string and reverse it.\n    reversed_num = str(num)[::-1]\n    # Compare the original number with its reversed form.\n    return reversed_num == num\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    # If the number is already a palindrome, return it.\n    if is_palindrome(num):\n        return num\n    \n    # Initialize the smallest palindrome that can be found.\n    smallest_palindrome = num\n    \n    # Initialize the range of numbers to search in.\n    left, right = num - 1, num + 1\n    \n    # While the range of numbers is not empty, search for the next smallest palindrome.\n    while left >= right:\n        # Calculate the middle number of the range.\n        mid = (left + right) // 2\n        \n        # Check if the middle number is a palindrome.\n        if is_palindrome(mid):\n            # If it is, update the smallest palindrome.\n            smallest_palindrome = mid\n            # Update the range of numbers.\n            right = mid - 1\n        else:\n            # If it's not, update the range of numbers.\n            left = mid + 1\n    \n    # Return the smallest palindrome.\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    '''\n    This function checks whether a given number is a palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    This function finds the next smallest palindrome of a specified integer.\n    '''\n    # If the number is already a palindrome, return it.\n    if is_palindrome(num):\n        return num\n\n    # Find the smallest odd integer greater than num.\n    odd_num = num + 1\n    while not is_palindrome(odd_num):\n        odd_num += 1\n\n    # If the largest odd integer greater than num is greater than num itself, it's the next smallest palindrome.\n    if odd_num > num:\n        return odd_num\n\n    # If the largest odd integer greater than num is less than or equal to num itself, it's the next smallest palindrome.\n    else:\n        return odd_num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Returns True if the given number is palindrome, False otherwise.\n    '''\n    if num < 0:\n        num *= -1\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        num *= -1\n    base = 10\n    while base < num:\n        base *= 10\n    for i in range(base, num):\n        if is_palindrome(i) and i >= num:\n            return i\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        mid = n // 2\n        if k <= mid:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid:], k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the given array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Find the size of the array\n    n = len(arr)\n    \n    # If the given k is greater than the size of the array, return None\n    if k > n:\n        return None\n    \n    # If the given k is 1-based, decrement it\n    if k == 1:\n        k -= 1\n    \n    # Traverse the array from the beginning to k-1\n    for i in range(k-1):\n        # If the element at index i is greater than the element at index k-1, swap them\n        if arr[i] > arr[k-1]:\n            arr[i], arr[k-1] = arr[k-1], arr[i]\n    \n    # Return the element at index k-1\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a positive integer k as input and returns the kth element of the array.\n    It uses 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # Check if the array is empty\n    if len(arr) == 0:\n        raise ValueError(\"Array is empty\")\n    \n    # Check if k is a positive integer\n    if not isinstance(k, int) or k < 1:\n        raise ValueError(\"k must be a positive integer\")\n    \n    # Check if k is less than or equal to the length of the array\n    if k > len(arr):\n        raise ValueError(\"k must be less than or equal to the length of the array\")\n    \n    # Initialize the count of elements visited\n    count = 0\n    \n    # Initialize the current index\n    i = 0\n    \n    # Iterate through the array\n    while i < len(arr):\n        # Check if the current element is the kth element\n        if count == k - 1:\n            return arr[i]\n        # Increment the count of elements visited\n        count += 1\n        # Increment the index\n        i += 1\n    \n    # If the loop finishes without finding the kth element, raise a ValueError\n    raise ValueError(\"kth element not found in the array\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and a 1-based indexing k and returns the kth element in the array.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid index\"\n\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the input array is empty\n    if len(arr) == 0:\n        raise ValueError(\"Array cannot be empty\")\n    # check if the input k is valid\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid index\")\n    # return the kth element from the array\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        # find the index of the first element greater than arr[i]\n        j = i\n        while j > 0 and arr[j] <= arr[j-1]:\n            j -= 1\n        # swap arr[i] with arr[j]\n        arr[i], arr[j] = arr[j], arr[i]\n        # if k is now 1, return arr[i]\n        if k == 1:\n            return arr[i]\n        # decrement k\n        k -= 1\n    # if k is still greater than 1, arr[n-1] is not the kth element\n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # convert snake case to camel case\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif i == len(word) - 1 and word[i]!= \"_\":\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join them together\n    result = ''.join([word.capitalize() for word in words])\n\n    # Remove any leading or trailing underscores\n    result = result.lstrip('_').rstrip('_')\n\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert all words to lowercase\n    word = word.lower()\n    # Initialize the result string\n    result = \"\"\n    # Iterate through the words in the word\n    for i in range(len(word)):\n        # If the current word is a digit, add it to the result string\n        if word[i].isdigit():\n            result += word[i]\n        # If the current word is a letter, add it to the result string and convert it to uppercase\n        else:\n            result += word[i].capitalize()\n    # Return the result string\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word += word[i].lower()\n        elif word[i-1].isupper():\n            camel_case_word += word[i].upper()\n        else:\n            camel_case_word += word[i]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i-1].isupper():\n            camel_case += '_' + word[i].lower()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i] == '_':\n            camel_case +=''\n        else:\n            camel_case += word[i].upper()\n    return camel_case.strip()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        if m == 0:\n            return 1\n        else:\n            return -1\n    elif n == 1:\n        return m\n    else:\n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 1 and m == 1:\n        return 2\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\n\nprint(\"Eulerian number a({}, {}) is: {}\".format(n, m, eulerian_num(n, m)))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n < m:\n        a = 1\n    else:\n        a = 0\n\n    for i in range(n - 1, 0, -1):\n        if (i + 1) * m - i * (i + 1) <= n - 1:\n            a += 1\n        else:\n            break\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): The number of elements in row 1.\n    m (int): The number of elements in row 2.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n\n    # Calculate the number of combinations using Pascal's triangle\n    num_combinations = 1\n    for i in range(1, n+1):\n        num_combinations *= i\n\n    # Calculate the sum of the first n terms of the Fibonacci sequence\n    fib_sequence = [0, 1]\n    for i in range(2, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n\n    # Calculate the sum of the first m terms of the Fibonacci sequence\n    fib_sequence2 = [0, 1]\n    for i in range(2, m+1):\n        fib_sequence2.append(fib_sequence2[i-1] + fib_sequence2[i-2])\n\n    # Calculate the product of the first n terms of the Fibonacci sequence and the first m terms of the Fibonacci sequence\n    fib_product = 1\n    for i in range(n):\n        fib_product *= fib_sequence[i]\n\n    # Calculate the sum of the first n terms of the Fibonacci sequence raised to the power of m\n    fib_sum = 1\n    for i in range(n):\n        fib_sum += fib_sequence[i] ** m\n\n    # Return the Eulerian number a(n, m)\n    return fib_product * fib_sum // num_combinations"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0 or n == 1:\n        return 0\n    elif m == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row with all 1's\n    first_row = [1] * m\n    # Initialize the last row with all 1's\n    last_row = [1] * n\n    # Initialize the 2nd row with 1's and 0's\n    second_row = [1] * n\n    # Initialize the 3rd row with 1's and 0's\n    third_row = [1] * m\n\n    # Initialize the 2nd and 3rd rows with the 1's and 0's of the 1st row\n    second_row[0] = 0\n    third_row[0] = 0\n\n    # Iterate through each row of the matrix\n    for i in range(1, n):\n        # Calculate the next row of the matrix\n        next_row = []\n        for j in range(m):\n            # Calculate the number of 1's in the ith column of the current row\n            count_1s = sum(first_row[:j+1])\n            # Calculate the number of 1's in the (n-i)-th column of the current row\n            count_1s += sum(second_row[:(n-i)])\n            # Calculate the number of 1's in the (m-j)-th column of the current row\n            count_1s += sum(third_row[:(m-j)])\n            # Set the next element of the next row to the result\n            next_row.append(count_1s)\n        # Update the variables for the next iteration\n        first_row = second_row\n        second_row = third_row\n        third_row = next_row\n\n    # Calculate the final value of a(n, m) by summing the elements of the 1st row\n    return sum(first_row)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 0 or m <= 0:\n        return None\n    \n    # Initialize the first row of Pascal's triangle\n    a = [1] * (m + 1)\n    \n    # Fill in the remaining rows\n    for i in range(1, n):\n        row = [0] * (m + 1)\n        row[0] = 1\n        for j in range(1, m + 1):\n            row[j] = a[j] + a[j - 1]\n        a = row\n    \n    # Return the value at the top-right corner of Pascal's triangle\n    return a[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a list to store the prime numbers\n    primes = []\n    \n    # Check if the number of rows is even or odd\n    if m % 2 == 0:\n        # Check if the number of columns is even or odd\n        if n % 2 == 0:\n            # If both conditions are satisfied, then it's an Eulerian path\n            return 1\n        else:\n            # If the number of rows is even, but the number of columns is odd, then the Eulerian path is the sum of the even numbers from 1 to n in steps of 2\n            a = 0\n            for i in range(1, n+1, 2):\n                a += i\n            return a\n    else:\n        # If the number of rows is odd, but the number of columns is even, then the Eulerian path is the sum of the odd numbers from 1 to n in steps of 2\n        b = 0\n        for i in range(1, n+1, 2):\n            b += i\n        return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 1 - (1 - m/n) ** n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return \"Invalid input! Please enter positive integers.\"\n    elif n == 0 and m == 0:\n        return 0\n    else:\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if i == j:\n                    yield i * j\n                elif i < j:\n                    if i + j == n:\n                        yield i * j\n                    elif i + j == m:\n                        yield i * j\n                elif i > j:\n                    if i + j == n:\n                        yield i * j\n                    elif i + j == m:\n                        yield i * j"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # sort the sublist in place\n        sublist.sort()\n        # convert the sorted sublist back to a list\n        sorted_sublist = list(sublist)\n        # replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = str(input_list[i][j])\n            input_list[i][j] = input_list[i][j].lower()\n            input_list[i][j] = ''.join(sorted(input_list[i][j]))\n            input_list[i][j] = ''.join(sorted(input_list[i][j], reverse=True))\n            input_list[i][j] = ''.join(sorted(input_list[i][j], reverse=True))\n            input_list[i][j] = ''.join(sorted(input_list[i][j]))\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) is bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_true_booleans(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    # Append the list to the tuples\n    test_list.extend(test_tup)\n    # Convert the lists back to tuples\n    test_list = tuple(test_list)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # add the list to the tuple\n    test_tup = test_tup + tuple(test_list)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append the test list to the test_tup tuple\n    test_tup = test_tup + tuple(test_list)\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the given lists and tuples\n    combined = test_list + test_tup\n    # Return the combined list\n    return combined"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_list)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Define a new list to store the new tuples with the appended list\n    new_list = []\n    # Loop through the given tuples and append the list to each one\n    for tup in test_tup:\n        # Convert the list to tuple and then append it to the new list\n        new_tup = tup + (test_list,)\n        # Add the new tuple to the new list\n        new_list.append(new_tup)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    \n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three sorted lists into one\n    merged_list = num1 + num2 + num3\n    # Sort the merged list in ascending order\n    heapq.heapify(merged_list)\n    # Remove duplicates from the merged list\n    unique_list = []\n    for num in merged_list:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) > -heapq.heappop(num2):\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n        elif -heapq.heappop(num2) > -heapq.heappop(num3):\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n\n    while num1:\n        heapq.heappush(merged_list, -heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged_list, -heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list, -heapq.heappop(num3))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of tuples containing the elements of each list\n    list_of_tuples = [(num1[i], i) for i in range(len(num1))] + \\\n                     [(num2[i], i) for i in range(len(num2))] + \\\n                     [(num3[i], i) for i in range(len(num3))]\n    # sort the list of tuples based on the first element of each tuple\n    heapq.heapify(list_of_tuples)\n    # create a new list to hold the merged sorted list\n    merged_list = []\n    # while the heap is not empty, pop the smallest tuple and add its first element to the merged list\n    while list_of_tuples:\n        smallest_tuple = heapq.heappop(list_of_tuples)\n        merged_list.append(smallest_tuple[0])\n    # return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1 (list): A list of integers.\n        num2 (list): A list of integers.\n        num3 (list): A list of integers.\n\n    Returns:\n        list: A single list containing all the elements from num1, num2, and num3 sorted in ascending order.\n\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to sort the merged list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Extract the elements from the min heap and sort them into a new list\n    sorted_list = []\n    while len(min_heap) > 0:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    lst = num1 + num2 + num3\n    \n    # Sort the combined list in ascending order\n    lst.sort()\n    \n    # Return the sorted list\n    return lst"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    index1 = index2 = index3 = 0\n    while index1 < len(num1) and index2 < len(num2) and index3 < len(num3):\n        if num1[index1] < num2[index2]:\n            if num3[index3] < num1[index1]:\n                merged_list.append(num1[index1])\n                index1 += 1\n            elif num3[index3] < num2[index2]:\n                merged_list.append(num3[index3])\n                index3 += 1\n            else:\n                merged_list.append(num2[index2])\n                index2 += 1\n        elif num1[index1] > num2[index2]:\n            if num3[index3] > num1[index1]:\n                merged_list.append(num1[index1])\n                index1 += 1\n            elif num3[index3] > num2[index2]:\n                merged_list.append(num3[index3])\n                index3 += 1\n            else:\n                merged_list.append(num2[index2])\n                index2 += 1\n        else:\n            if num3[index3] < num2[index2]:\n                merged_list.append(num1[index1])\n                index1 += 1\n            elif num3[index3] > num2[index2]:\n                merged_list.append(num3[index3])\n                index3 += 1\n            else:\n                merged_list.append(num2[index2])\n                index2 += 1\n    while index1 < len(num1):\n        merged_list.append(num1[index1])\n        index1 += 1\n    while index2 < len(num2):\n        merged_list.append(num2[index2])\n        index2 += 1\n    while index3 < len(num3):\n        merged_list.append(num3[index3])\n        index3 += 1\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list = [num1, num2, num3]\n    heapq.heapify(num_list)\n    sorted_list = []\n    while len(num_list) > 0:\n        sorted_list.append(heapq.heappop(num_list))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list\n    merged = sorted(num1 + num2 + num3)\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate all three lists into one single list\n    all_lists = [num1, num2, num3]\n    # Convert all lists into sets to remove duplicates\n    unique_lists = [set(i) for i in all_lists]\n    # Merge all sets into one single set\n    merged_set = set.union(*unique_lists)\n    # Convert the merged set back into a sorted list\n    sorted_list = sorted(list(merged_set))\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    binary_list = list(s)\n\n    # Initialize a counter for odd numbers\n    count = 0\n\n    # Loop through each digit of the binary string\n    for digit in binary_list:\n        # Convert the digit to an integer\n        int_digit = int(digit)\n\n        # Check if the digit is odd\n        if int_digit % 2!= 0:\n            # Increment the counter\n            count += 1\n\n    # Check if the number of digits is odd\n    if count % 2!= 0:\n        # If it is, divide by 2 to get the number of odd digits\n        count //= 2\n    else:\n        # If it's even, multiply by 2 to get the number of odd digits\n        count *= 2\n\n    # Check if the number of rotations is odd\n    if n % 2!= 0:\n        # If it is, add 1 to get the number of rotations\n        n += 1\n\n    # Calculate the number of odd digits after rotating the binary string n times\n    rotated_binary = [0] * n\n    for i in range(n):\n        rotated_binary[i] = binary_list[(i + count) % len(binary_list)]\n\n    # Initialize a counter for odd numbers\n    odd_count = 0\n\n    # Loop through each digit of the rotated binary string\n    for digit in rotated_binary:\n        # Convert the digit to an integer\n        int_digit = int(digit)\n\n        # Check if the digit is odd\n        if int_digit % 2!= 0:\n            # Increment the counter\n            odd_count += 1\n\n    # Return the total number of odd digits after rotating the binary string n times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n):\n        for j in range(len(s)-1):\n            if s[j] == '1' and s[j+1] == '0':\n                count += 1\n                s = s[j+1:] + s[:j] + s[j+1:]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for _ in range(n):\n        # rotate the binary string by one position\n        s = s[-1] + s[:-1]\n        # count the number of odd characters in the rotated string\n        odd_count += sum(1 for c in s if c == '1')\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize count to 0\n    count = 0\n    # Initialize the length of the binary string\n    length = len(s)\n    # Loop n times\n    for i in range(n):\n        # Convert the binary string to a list of digits\n        digits = [int(d) for d in s]\n        # Reverse the list of digits\n        digits.reverse()\n        # Convert the reversed list of digits back to a binary string\n        new_s = ''.join([str(d) for d in digits])\n        # Check if the new binary string has an odd number of digits\n        if len(new_s) % 2 == 1:\n            # Increment the count by 1\n            count += 1\n        # Rotate the binary string to the right by 1 bit\n        s = s[1:]+s[0]\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input.\n    It rotates the binary string s n times and counts the number of odd numbers in the rotated string.\n    \n    Args:\n    s (str): A binary string.\n    n (int): An integer indicating the number of times to rotate the binary string.\n    \n    Returns:\n    int: The number of odd numbers in the rotated string.\n    \"\"\"\n    s = s.zfill(len(s))  # Make the string of length len(s) and pad it with 0s if necessary\n    s_rotated = \"\"  # Initialize an empty string to store the rotated string\n\n    for i in range(n):\n        # Rotate the binary string s by shifting each character to the right\n        s_rotated = s[-1] + s[:-1]\n        s = s_rotated\n\n    # Count the number of odd numbers in the rotated string\n    count = sum(1 for i in s if i == '1')\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    # initialize variables\n    s = list(s)\n    count = 0\n    # iterate over the given number of rotations\n    for _ in range(n):\n        # rotate the binary string left by one character\n        s.append(s.pop(0))\n        # count the number of odd numbers in the rotated string\n        count += sum(1 for c in s if int(c) % 2 == 1)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert binary string to a list of bits\n    bits = list(map(int, bin(int(s))[2:].zfill(len(s)*4)))\n\n    # initialize the counter variable\n    count = 0\n\n    # rotate the list of bits by n times\n    for i in range(n):\n        bits.append(bits.pop(0))\n\n    # iterate through the rotated list of bits and count the odd numbers\n    for bit in bits:\n        if bit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables\n    count = 0\n    i = 0\n\n    # Iterate through the binary string s\n    while i < len(s):\n        # If the current character is an odd digit, increment the count\n        if int(s[i]) % 2 == 1:\n            count += 1\n\n        # Rotate the binary string by one position\n        s = s[1:] + s[0]\n        s = s.lstrip('0')\n\n        # Increment the index\n        i += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (string): Binary string to be rotated\n    n (int): Number of times to rotate the binary string\n\n    Returns:\n    int: Number of odd numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    # convert the binary string to a list of digits\n    binary = [int(x) for x in s]\n\n    # initialize a counter to keep track of the odd numbers\n    count = 0\n\n    # rotate the binary string the given number of times\n    for _ in range(n):\n        odds = [1 if x % 2 == 1 else 0 for x in binary]\n        binary = [int(x) for x in odds]\n\n    # count the number of odd numbers with an odd value when rotating the binary string the given number of times\n    for x in binary:\n        if x % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Converting the binary string to a list of digits\n    binary_list = [int(d) for d in s]\n    \n    # Initializing the counter for odd numbers\n    count = 0\n    \n    # Looping for n rotations\n    for i in range(n):\n        # Creating a new list for the rotated binary string\n        rotated_list = [0]*len(binary_list)\n        \n        # Looping through the binary string and appending odd digits to the rotated list\n        for j in range(len(binary_list)):\n            if binary_list[j] == 1:\n                rotated_list[j] = 1\n            else:\n                rotated_list[j] = 0\n        \n        # Updating the binary list with the rotated list\n        binary_list = rotated_list\n        \n    # Looping through the rotated binary string and counting the number of odd digits\n    for i in range(len(binary_list)):\n        if binary_list[i] == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through each nested list and iterate through its elements\n    for lst in nestedlist:\n        # Loop through each element in the nested list\n        for elem in lst:\n            # If the element is already in the dictionary, increment its count\n            if elem in common_dict:\n                common_dict[elem] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                common_dict[elem] = 1\n\n    # Create a new list to store the common elements\n    common_list = []\n\n    # Loop through each key in the dictionary and add it to the common_list if the count is 1\n    for key in common_dict:\n        if common_dict[key] == 1:\n            common_list.append(key)\n\n    # Return the common_list\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    # Loop through each nested list\n    for lst in nestedlist:\n        # Loop through each element in the nested list\n        for item in lst:\n            # If the element is already in the set, add it to the common set\n            if item in common:\n                common.remove(item)\n            else:\n                common.add(item)\n    # Return the common set as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    # Iterate over each list in the nested list\n    for lst in nestedlist:\n        # Iterate over each element in the current list\n        for elem in lst:\n            # If the element is in the set, add it to the common set\n            if elem in common:\n                common.remove(elem)\n    # Return the common set\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0])):\n                if nestedlist[i][j] == nestedlist[0][k] and nestedlist[j][k] == nestedlist[0][k]:\n                    common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Iterate through each nested list\n    for i in nestedlist:\n        # Iterate through each element of the nested list\n        for j in i:\n            # Add the element to the set of common elements\n            common.add(j)\n    \n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common_elements:\n                common_elements.append(item)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Iterate over each item in the list\n    for item in nestedlist:\n        # If the item is a list, recursively call the function\n        if isinstance(item, list):\n            common_in_nested_lists(item)\n        # If the item is a set, convert it to a list and compare\n        elif isinstance(item, set):\n            if common_in_nested_lists(list(item)):\n                return True\n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through the nested lists\n    for sublist in nestedlist:\n\n        # Loop through the sublist\n        for item in sublist:\n\n            # Check if the item is in the common set\n            if item in common:\n                common.remove(item)\n\n            # Otherwise, add the item to the common set\n            else:\n                common.add(item)\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize empty list to store the common elements\n    common_elements = []\n\n    # Loop through each list in the nested list\n    for i in nestedlist:\n        # Loop through each element in the current list\n        for j in i:\n            # If the element is not in the common elements list yet, add it\n            if j not in common_elements:\n                common_elements.append(j)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # create a set to store the common elements\n    common = set()\n\n    # loop through each list in the nested list\n    for lst in nestedlist:\n        # loop through each element in the list\n        for element in lst:\n            # check if the element is already in the set\n            if element in common:\n                # if it is, add it to a list to store the duplicates\n                duplicates = common.copy()\n                duplicates.remove(element)\n                duplicates.append(element)\n                # update the set with the duplicates\n                common.update(duplicates)\n            else:\n                # if it's not, add it to the set\n                common.add(element)\n\n    # return the common elements as a list\n    return sorted(list(common))"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for dic in list1:\n        if dic!= {}:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not all(isinstance(num, int) and num > 0 for num in nums):\n        raise ValueError(\"All elements in the tuple must be positive integers.\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the tuple must be integers.\")\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # iterate through the tuple\n    for num in nums:\n        # add the current number to the result\n        result += num\n    \n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initializing an empty string to store the integer\n    int_str = \"\"\n    # iterating over each integer in the tuple\n    for num in nums:\n        # converting each integer to a string and appending it to the integer string\n        int_str += str(num)\n    # converting the integer string to an integer and returning the result\n    return int(int_str)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    float_value = float(test_list[i][j])\n                    result_list.append(float_value)\n                except ValueError:\n                    pass\n            else:\n                result_list.append(test_list[i][j])\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                element = None\n            else:\n                element = float(element)\n            finally:\n                sublist.remove(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                try:\n                    element = float(element.replace(',', '.'))\n                except ValueError:\n                    continue\n                else:\n                    sublist.remove(element)\n                    sublist.append(float(element))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_element = float(element)\n                result.append(float_element)\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                new_list.append(float(test_list[i][j]))\n            except ValueError:\n                pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row[row.index(item)] = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                result.append(float(item))\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    for row in test_list:\n        for elem in row:\n            try:\n                elem = float(elem)\n            except ValueError:\n                pass  # skip non-convertible elements\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    string_list = string.split()\n    \n    # Return the list of strings\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in arr:\n        if count[num] == 1:\n            return num\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables to keep track of the count and the element that appears only once\n    count = 0\n    result = None\n    \n    # Loop through the array and check if the current element is equal to the next element\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            count += 1\n        else:\n            # If the count is equal to 1, we have found the element that appears only once\n            if count == 1:\n                result = arr[i - 1]\n            # Reset the count to 0 and start counting from the next element\n            count = 1\n    \n    # If the count is equal to 1 and we have not found the element that appears only once,\n    # the element is in the array but is repeated twice\n    if count == 1 and result is None:\n        result = arr[-1]\n    \n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i+1] == arr[i]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and increment the frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Traverse through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the first duplicate element\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n    \n    first_occurrence = arr[0]\n    second_occurrence = arr[1]\n    \n    if first_occurrence == second_occurrence:\n        for i in range(2, len(arr)):\n            if arr[i] == first_occurrence:\n                return arr[i]\n    else:\n        for i in range(2, len(arr)):\n            if arr[i] == first_occurrence:\n                first_occurrence = arr[i]\n            elif arr[i] == second_occurrence:\n                second_occurrence = arr[i]\n                \n    return second_occurrence"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 1\n    element = arr[0]\n\n    for i in range(1, n):\n        if arr[i] == element:\n            count += 1\n        else:\n            if count == 1:\n                return element\n            element = arr[i]\n            count = 1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # iterate through the array and update the frequency of each element in the dictionary\n    for i in range(len(arr)):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    \n    # iterate through the array again and find the element that appears only once in the array\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    product = 1\n    prev_product = 1\n\n    # Iterate through the list\n    for i in range(len(list1)):\n        # Calculate the current product\n        current_product = abs(list1[i][0]) * abs(list1[i][1])\n\n        # Update the maximum product if needed\n        if current_product > max_product:\n            max_product = current_product\n\n        # Calculate the previous product\n        prev_product = abs(list1[i][0]) * prev_product\n\n        # Update the product if needed\n        if current_product < 0:\n            product = prev_product\n        else:\n            product = current_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    max_pair = [0, 0]\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = [list1[i], list1[j]]\n    \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    list1 (list): A list of tuples containing numbers.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the maximum absolute product between numbers in pairs\n    of tuples within the list. The function returns the maximum absolute product.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] * list1[j][1])\n            if diff > max_product:\n                max_product = diff\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_product = abs(lst[i][0] * lst[j][1])\n            max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a = 0\n    b = 1\n    total_sum = 0\n    while b < limit:\n        if b == a:\n            a += 1\n            b = 1\n        elif is_amicable(a, b):\n            total_sum += a + b\n            a += 1\n            b = 1\n        else:\n            b += 1\n    return total_sum\n\ndef is_amicable(a, b):\n    '''\n    Check if two numbers are amicable or not.\n    '''\n    if a == b:\n        return False\n    if a > b:\n        a, b = b, a\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and b % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i == sum_of_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    \"\"\"\n    Write a function to calculate the sum of all divisors of a given number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable_number(n):\n    \"\"\"\n    Returns True if n is an amicable number, otherwise False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit+1):\n        if is_amicable_number(i):\n            total += i\n    return total\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a = [1]\n    b = [1]\n    amicable_sum = 0\n\n    for i in range(2, limit+1):\n        if b[i-1] == i:\n            for j in range(2, limit+1):\n                if b[j-1] == j and i!= j:\n                    amicable_sum += i + j\n                    break\n\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i!= 1 and i!= limit:\n            for j in range(1, limit + 1):\n                if i!= j:\n                    if i + j == limit and is_prime(i) and is_prime(j):\n                        amicable_numbers.append(i + j)\n    return sum(amicable_numbers)\n\n\ndef is_prime(n):\n    \"\"\"\n    Write a function to check if a given number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for i in range(1, limit+1):\n        if i!= 1 and is_amicable(i):\n            amicable_numbers.add(i)\n\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is an amicable number.\n    \"\"\"\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and num/i!= i:\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit):\n        # Check if i and its divisors (excluding 1 and itself) sum up to a number greater than i\n        for j in range(2, i):\n            if i % j == 0 and j!= i:\n                # If it does, we have found an amicable number\n                if i + j == limit:\n                    sum += i + j\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all prime numbers up to the limit\n    primes = []\n    for num in range(2, limit+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\n    # calculate the sum of all amicable numbers\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num in primes:\n            for other in primes:\n                if num == other:\n                    continue\n                if num + other == 10000:\n                    amicable_sum += num + other\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        if i == 2:\n            amicable_sum += i\n            continue\n        if i > 2:\n            j = 2\n            while True:\n                if i % j == 0:\n                    break\n                j += 1\n            if j > 2:\n                amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num) and num!= 1:\n            total += num\n    return total\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Print the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable(limit))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n\n    # Convert the angle to degrees\n    angle_degrees = cmath.phase(angle) * 180 / cmath.pi\n\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the conjugate of the complex number\n    conjugate = complex(a,b)\n    \n    # calculate the absolute value of the conjugate\n    angle = abs(conjugate)\n    \n    # calculate the phase of the conjugate\n    phase = cmath.phase(conjugate)\n    \n    # calculate the angle in radians\n    radians_angle = cmath.pi * (phase/180)\n    \n    # calculate the angle in degrees\n    degrees_angle = radians_angle * 180 / cmath.pi\n    \n    # return the angle as a string\n    return f'{degrees_angle:.2f} degrees'"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the complex number to polar coordinates\n    polar = cmath.polar(a+b*1j)\n    # Calculate the angle using the modulus of the polar coordinate\n    angle = polar[1]\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    angle = cmath.phase(a - b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the complex conjugate of the complex number\n    conjugate = a / cmath.sqrt(a**2 + b**2)\n\n    # Convert the conjugate to an angle in degrees\n    angle = cmath.phase(conjugate) * 180 / cmath.pi\n\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize the result variable and a dictionary to store the count of 0s and 1s in each sub-string\n    max_diff = 0\n    count_dict = {}\n\n    # Loop through each sub-string of the binary string\n    for i in range(len(string) - 1):\n        # Calculate the count of 0s and 1s in the current sub-string\n        count_0 = sum([1 for j in string[i:i+2] if j == '0'])\n        count_1 = sum([1 for j in string[i:i+2] if j == '1'])\n\n        # Update the count dictionary with the current sub-string's count of 0s and 1s\n        if string[i:i+2] in count_dict:\n            count_dict[string[i:i+2]][0] += count_0\n            count_dict[string[i:i+2]][1] += count_1\n        else:\n            count_dict[string[i:i+2]] = [count_0, count_1]\n\n    # Loop through each sub-string of the binary string again and find the maximum difference between the count of 0s and 1s\n    for i in range(len(string) - 1):\n        # Calculate the count of 0s and 1s in the current sub-string\n        count_0 = sum([1 for j in string[i:i+2] if j == '0'])\n        count_1 = sum([1 for j in string[i:i+2] if j == '1'])\n\n        # Check if the current sub-string is in the count dictionary\n        if string[i:i+2] in count_dict:\n            # Check if the difference between the count of 0s and 1s in the current sub-string and the count of 0s and 1s in the previous sub-string is greater than the current maximum difference\n            if abs(count_dict[string[i:i+2]][0] - count_0) > max_diff:\n                max_diff = abs(count_dict[string[i:i+2]][0] - count_0)\n\n            if abs(count_dict[string[i:i+2]][1] - count_1) > max_diff:\n                max_diff = abs(count_dict[string[i:i+2]][1] - count_1)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    n = len(string) \n    max_diff = 0 \n    for i in range(1, n): \n        diff = 0 \n        if string[i] == '0': \n            diff = 1 \n        elif string[i] == '1': \n            diff = -1 \n        else: \n            continue \n        for j in range(i): \n            if string[j] == '0' and string[j+1] == '1': \n                diff += 1 \n        max_diff = max(max_diff, diff) \n    return max_diff "
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2] + 1)\n            \n    return dp[-1]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Initialize variables for count of 0s and 1s in each sub-string\n    count_0s = 0\n    count_1s = 0\n\n    # Iterate through each sub-string of the binary string\n    for i in range(len(string)):\n        # Update count of 0s and 1s for the current sub-string\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n        # Calculate the maximum difference between the count of 0s and 1s for each sub-string\n        max_diff = max(count_0s - count_1s, count_1s - count_0s)\n\n        # Update the count of 0s and 1s for the next sub-string\n        if string[i] == '0':\n            count_0s -= 1\n        else:\n            count_1s -= 1\n\n    # Return the maximum difference between the count of 0s and 1s for any sub-string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # initialize variables\n    length = 0\n    zeros = 0\n    ones = 0\n    max_diff = 0\n\n    # loop through the string\n    for i in range(len(string)):\n        # if the current character is a 0, update the number of zeros\n        if string[i] == '0':\n            zeros += 1\n        # if the current character is a 1, update the number of ones\n        else:\n            ones += 1\n\n        # if the number of zeros is greater than the number of ones, update the max_diff\n        if zeros > ones:\n            max_diff = max(max_diff, zeros - ones)\n\n        # reset the number of zeros and ones to 0\n        zeros = 0\n        ones = 0\n\n    # return the max_diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n        diff = abs(count_0s - count_1s)\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        diff = 0\n        for j in range(i, n):\n            if string[j] == '1':\n                diff += 1\n            else:\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    curr_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, curr_diff)\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count_zeroes = 0\n    count_ones = 0\n    max_length = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of zeroes\n        if char == '0':\n            count_zeroes += 1\n        # If the character is a 1, increment the count of ones\n        else:\n            count_ones += 1\n            \n        # Calculate the length of the current substring\n        substring_length = max(count_zeroes, count_ones)\n        \n        # Update the maximum length if this is the longest substring\n        max_length = max(max_length, substring_length)\n        \n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes in two numbers and finds the sum of their common divisors.\n\n    Args:\n        a (int): First number to find sum of common divisors.\n        b (int): Second number to find sum of common divisors.\n\n    Returns:\n        int: The sum of common divisors of the given numbers.\n\n    \"\"\"\n    # Define a function to check if a number is a common divisor of two numbers\n    def is_common_divisor(n, m):\n        \"\"\"\n        This function takes in two numbers n and m and returns True if n is a common divisor of m,\n        False otherwise.\n\n        Args:\n            n (int): First number to check for common divisor.\n            m (int): Second number to check for common divisor.\n\n        Returns:\n            bool: True if n is a common divisor of m, False otherwise.\n\n        \"\"\"\n        if m == 0:\n            return True\n        if m % n == 0:\n            return True\n        else:\n            return False\n\n    # Find all common divisors of the two numbers\n    divisors = []\n    i = 1\n    while i <= a:\n        if is_common_divisor(i, a) and is_common_divisor(i, b):\n            divisors.append(i)\n        i += 1\n\n    # Calculate the sum of common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a function that returns the sum of common divisors of two given numbers a and b.\n\n    Parameters:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    int: the sum of common divisors of a and b\n    \"\"\"\n    # First, we find the maximum common divisor of a and b.\n    max_cd = max(a, b)\n    # Next, we find the common divisors of a and b that are less than or equal to the maximum common divisor.\n    common_divisors = set()\n    for i in range(1, max_cd+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    # Finally, we calculate the sum of the common divisors.\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of common divisors using a while loop\n    total_sum = 0\n    divisor = 1\n    while divisor <= a and divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            total_sum += divisor\n        divisor += 1\n\n    # Return the sum of common divisors\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the prime numbers less than or equal to the square root of the maximum number\n    primes = [True] * (int(b**0.5) + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(b**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, b + 1, i):\n                primes[j] = False\n\n    # Find the common divisors of the two numbers\n    common_divisors = []\n    for i in range(a, b + 1):\n        if primes[i]:\n            common_divisors.append(i)\n\n    # Find the sum of the common divisors\n    sum_common_divisors = 0\n    for divisor in common_divisors:\n        sum_common_divisors += divisor\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\nprint(sum(24, 36))  # Output: 12"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # finding the common divisors of two numbers\n    common = [x for x in range(1, b+1) if a % x == 0 and b % x == 0]\n    \n    # summing the common divisors\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    divisors = []\n    if a > b:\n        a, b = b, a\n    \n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as inputs and returns their sum of their common divisors.\n    \"\"\"\n    # initializing variables\n    sum_of_common_divisors = 0\n    divisor_set = set()\n\n    # iterating through all possible divisors of both numbers\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            sum_of_common_divisors += i\n            divisor_set.add(i)\n\n    # returning the sum of common divisors\n    return sum_of_common_divisors, divisor_set"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of their common divisors.\n    The common divisors of two numbers are all the numbers that divide both numbers without leaving a remainder.\n    \"\"\"\n\n    # Use a set to keep track of the common divisors of the two numbers\n    common_divisors = set()\n\n    # Find all the divisors of the first number\n    divisors_of_a = set(range(1, a+1))\n\n    # Find all the divisors of the second number\n    divisors_of_b = set(range(1, b+1))\n\n    # Find the intersection of the two sets of divisors\n    common_divisors = divisors_of_a.intersection(divisors_of_b)\n\n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the GCD of the two numbers\n    gcd = gcd(a,b)\n\n    # Find the sum of the GCD and the smaller number\n    return gcd + min(a,b) - a - b"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n\n    result = x * y\n\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into a list of words\n    words = str.split()\n    # Create an empty list to store the long words\n    long_words_list = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is greater than n, add it to the long_words_list\n        if len(word) > n:\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    magic_square = [[0 for i in range(num_cols)] for j in range(num_rows)]\n    for i in range(num_rows):\n        for j in range(num_cols):\n            magic_square[i][j] = my_matrix[i][j] * (i+j+1)\n    magic_sum = sum([sum(row) for row in magic_square])\n    if num_rows == num_cols == num_rows*num_cols:\n        for i in range(num_rows):\n            for j in range(num_rows):\n                if magic_square[i][j]!= magic_sum - magic_square[i][j]:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                return False\n            sum += my_matrix[i][j]\n    if sum!= 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                return False\n            sum += my_matrix[j][i]\n    if sum!= 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                return False\n            sum += my_matrix[i][j]\n    if sum!= 0:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if the sum of all elements in each row is equal to the sum of all elements in the matrix\n    for row in my_matrix:\n        if sum(row)!= n * (n+1) // 2:\n            return False\n    # Check if the sum of all elements in each column is equal to the sum of all elements in the matrix\n    for i in range(n):\n        column_sum = 0\n        for j in range(n):\n            column_sum += my_matrix[j][i]\n        if column_sum!= n * (n+1) // 2:\n            return False\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # Calculate the sum of the rows and columns\n    row_sum = sum(row)\n    col_sum = sum(col)\n    # Check for duplicates in the diagonal\n    if row_sum == col_sum == sum(row + col) == 15:\n        return True\n    # Check for symmetric matrix\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][len(my_matrix)-i-1]:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum and the sum of the squares\n    sum_of_squares = 0\n    sum_of_powers = 0\n    \n    # Iterate through the matrix and calculate the sum of the squares and the sum of the powers\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                continue\n            \n            # Calculate the sum of squares and the sum of powers for the current row and column\n            sum_of_squares += my_matrix[i][j] ** 2\n            sum_of_powers += my_matrix[i][j]\n            \n            # Check if the current row and column is a magic square\n            if i == j or i + j == len(my_matrix) - 1:\n                if my_matrix[i][j]!= i + j:\n                    return False\n    \n    # Check if the sum of squares is a magic square\n    if sum_of_squares == sum_of_powers ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all elements in the matrix are different\n    for row in my_matrix:\n        for num in row:\n            if len(set(num))!= 1:\n                return False\n\n    # Check if the main diagonal has any repeated elements\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i] in my_matrix[i+1]:\n            return False\n\n    # Check if the secondary diagonal has any repeated elements\n    for i in range(len(my_matrix)):\n        if my_matrix[i][len(my_matrix)-i-1] in my_matrix[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the input matrix is a list of lists\n    if not isinstance(my_matrix, list) or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    \n    # Check if the length of the first row is the same as the length of the matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        # Check the rows for magic squares\n        for j in range(len(my_matrix[i])):\n            if i-j >= 0:\n                if my_matrix[i][j] == my_matrix[i-j][j] or my_matrix[i][j] == my_matrix[i][j-i] or my_matrix[i][j] == my_matrix[j][i]:\n                    return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix[0])):\n        # Check the columns for magic squares\n        for j in range(len(my_matrix)):\n            if i-j >= 0:\n                if my_matrix[j][i] == my_matrix[j][i-j] or my_matrix[j][i] == my_matrix[i][j] or my_matrix[j][i] == my_matrix[i-j][j]:\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the elements in the matrix\n    sum_elements = 0\n\n    # Loop through each row and column of the matrix\n    for i in range(len(my_matrix)):\n        # Add up the elements in each row and column\n        row_sum = 0\n        col_sum = 0\n        for j in range(len(my_matrix[i])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        # Add up the row sums and column sums to the sum of the elements\n        sum_elements += row_sum + col_sum\n\n    # Compare the sum of the elements with the sum of the matrix\n    if sum_elements == sum(x*x for x in range(1, len(my_matrix)+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    for i in range(n):\n        # check rows\n        for j in range(n):\n            if my_matrix[i][j]!= sum(my_matrix[k][j] for k in range(n)) - i:\n                return False\n        # check columns\n        for j in range(n):\n            if my_matrix[j][i]!= sum(my_matrix[i][k] for k in range(n)) - j:\n                return False\n    # check diagonals\n    for i in range(n):\n        if my_matrix[i][i]!= sum(my_matrix[k][k] for k in range(n)) - i:\n            return False\n    for i in range(n):\n        if my_matrix[i][n-i-1]!= sum(my_matrix[k][n-k-1] for k in range(n)) - i:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check that the matrix has n rows and n columns\n    if n!= len(my_matrix[0]):\n        return False\n    # Check that each row and column has all unique values\n    for i in range(n):\n        if len(set(my_matrix[i]))!= n:\n            return False\n        if len(set(my_matrix[:, i]))!= n:\n            return False\n    # Check that the matrix is a magic square\n    for i in range(n - 2):\n        for j in range(n - 2):\n            if my_matrix[i][j] + my_matrix[i][j+1] + my_matrix[i][j+2] == n * n:\n                continue\n            elif my_matrix[i][j] + my_matrix[i+1][j+1] + my_matrix[i+2][j] == n * n:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    frequency = defaultdict(int)\n\n    # Iterate through the list and update the frequency count for each item\n    for num in nums:\n        frequency[num] += 1\n\n    # Create a list of tuples with the frequency and item as values\n    freq_item_list = [(freq, item) for item, freq in frequency.items()]\n\n    # Sort the list by frequency in descending order\n    freq_item_list.sort(reverse=True)\n\n    # Find the item with the highest frequency\n    max_item = freq_item_list[0][1]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_count = 0\n    max_num = None\n    \n    for num, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    # Count frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency and store it in max_item\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = 0\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    \n    max_count = 0\n    max_item = None\n    \n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Loop through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    result = ''\n    \n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n        else:\n            result = char + result\n            \n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_str = ''\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n    return vowel_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort()\n    new_str = ''\n    for i in vowel_indices:\n        new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    reversed_str = ''\n\n    # Count the number of vowels in the string\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n\n    # Reverse only the vowels\n    for i in range(vowel_count):\n        reversed_str = str1[::-1]\n\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n\n    # Find all the indices of vowels in the string\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n\n    # Reverse the vowels from the string\n    for i in reversed(vowel_indices):\n        str1 = str1[:i] + str1[i+1:].replace(str1[i], '', 1)\n\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    Args:\n        tup1 (tuple): A tuple of values.\n\n    Returns:\n        str: A string representation of the tuple.\n    \"\"\"\n    # Convert the tuple to a string using f-strings\n    return f\"({', '.join(str(x) for x in tup1)})\""
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a list\n    lst = list(tup)\n    # Join the list elements with a space\n    string =''.join(lst)\n    # Return the string\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join the elements of the tuple with a comma and space\n    return ', '.join(str(item) for item in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \", \".join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for i in tup1:\n        str_tup += str(i)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup):\n    return ', '.join(str(x) for x in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Using the join() method to convert the tuple to a string\n    result = ','.join(str(x) for x in tup1)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a list and join its elements with a comma and space\n    return ', '.join(str(item) for item in tup)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            neg_sum += num\n\n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Create an empty sum variable\n    sum_neg = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum_neg += num\n    \n    # Return the sum of the negative numbers\n    return sum_neg"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n * (n+1) + 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    # calculate the nth hexagonal number\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    h = 1\n    i = 1\n\n    # Loop until we have found the nth hexagonal number\n    while i < n:\n        h += 6 * i\n        i += 1\n\n    # Return the nth hexagonal number\n    return h"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n) ** 0.5) * 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Define the base number of the triangle.\n    a = 1\n    \n    # Calculate the number of rows in the triangle.\n    rows = n // 2\n    \n    # Iterate through each row and calculate the nth hexagonal number.\n    for i in range(rows):\n        # Calculate the number of columns in the current row.\n        cols = (2 * i + 1) // 2\n        \n        # Iterate through each column and calculate the nth hexagonal number.\n        for j in range(cols):\n            # Calculate the nth hexagonal number.\n            hex_num = a * ((2 * i) ** 2 + (2 * j) ** 2)\n            \n            # Check if the nth hexagonal number is the nth number.\n            if hex_num == n:\n                print(hex_num)\n                return\n            \n            # Increment the base number of the triangle.\n            a += 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        print(\"Invalid input\")\n        return\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num = 6 * (2 * hex_num - 1) + i\n    print(hex_num)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def hexagonal_number(n):\n        if n == 0:\n            return 0\n        if is_prime(n):\n            return n * (3*n-1)\n        else:\n            return 6 * (n**2) - 6 * n\n\n    hex_num = hexagonal_number(n)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    a, b = 1, 6 # Initialize first and second row of triangle\n    \n    # Iterate through the rows and calculate the nth hexagon\n    for i in range(1, n+1):\n        print(a, end=' ')\n        # Update row length and shift values\n        a, b = b, a + b\n    \n    # End the loop\n    print()"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n * n) + (n + 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return (zeros / non_zeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to an array-like object to get the length of the array\n    arr = array('i', nums)\n    # Get the number of non-zero values in the array\n    non_zero_count = arr.count(1)\n    # Get the number of zero values in the array\n    zero_count = len(nums) - non_zero_count\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    # Return the ratio as a float value\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    nonzeros = array('i', [1] * n)\n    for i in range(n):\n        if nums[i] == 0:\n            nonzeros[i] = 0\n    zeros = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zeros += 1\n    ratio = zeros / nonzeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = sum(zero_count)\n    ratio = non_zero_count / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return non_zeros / zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an array to store the count of zeros and non-zeros\n    zeros_array = array('i', [0] * len(nums))\n\n    # Iterate through the array and count the number of zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zeros_array[nums.index(num)] += 1\n\n    # Calculate the ratio of zeros to non-zeros\n    ratio = zeros_array[0] / len(nums)\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    if non_zeros == 0:\n        return 0\n\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    ones = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            ones[ones.index(num)] += 1\n\n    non_zeros = len(nums) - (zeros[0] + zeros[1] + ones[0] + ones[1])\n    ratio = zeros[0] / non_zeros\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    non_zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n\n    zero_count = len(nums) - non_zero_count\n    zero_ratio = zero_count / non_zero_count\n\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    for i in range(1, n+1):\n        if n % i == 0:\n            if n == 1:\n                return True\n            elif i == 1:\n                return False\n            elif n % (2**i) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Helper function to check if a number is a power of 2\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n    \n    # Helper function to check if a number is divisible by 2\n    def is_divisible_by_two(num):\n        return num % 2 == 0\n    \n    # Check if n is a power of 2\n    if is_power_of_two(n):\n        # Check if the sum of powers of 2 is less than or equal to n\n        if sum(i*2 for i in range(n)) <= n:\n            return True\n    \n    # Check if n is divisible by 2\n    if is_divisible_by_two(n):\n        # Check if the sum of powers of 2 is less than or equal to n/2\n        if sum(i*2 for i in range(int(n/2))) <= n/2:\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the number is zero\n    if n == 0:\n        return True\n    \n    # check if the number is a power of 2\n    if n == 1:\n        return True\n    \n    # check if the number is a sum of powers of 2\n    if n % 2 == 0:\n        n = n // 2\n        if is_Sum_Of_Powers_Of_Two(n):\n            return True\n    \n    # check if the number is a sum of powers of 2\n    if n % 2 == 1:\n        n = (n - 1) // 2\n        if is_Sum_Of_Powers_Of_Two(n):\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if n is even\n    if n % 2 == 0: \n        return False\n    \n    # loop through all the bits of n\n    for i in range(32): \n        # check if the bit is 1\n        if n & (1 << i): \n            # calculate the power of 2\n            power_of_two = 1 << i\n            \n            # check if the power of 2 is a part of n\n            if power_of_two <= n: \n                # if yes, divide n by the power of 2 and check if the result is even\n                n = n - power_of_two\n                if n % 2 == 0: \n                    return True\n    \n    # if n is not divisible by any power of 2, then it cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # if n is zero, return True\n    if n == 0: \n        return True\n\n    # initialize variables to keep track of powers of 2 and non-zero powers of 2\n    power_of_two = 1\n    non_zero_power = 0\n    \n    # loop while the sum of powers of 2 is less than or equal to n\n    while power_of_two <= n:\n        # if the sum of powers of 2 is less than or equal to n, increment non_zero_power and decrease power_of_two by 1\n        if power_of_two <= n:\n            non_zero_power += 1\n            power_of_two <<= 1\n\n        # if the sum of powers of 2 is greater than n, decrease non_zero_power by 1 and increase power_of_two by 1\n        else:\n            non_zero_power -= 1\n            power_of_two >>= 1\n    \n    # if n can be represented as sum of non-zero powers of 2, return True\n    if non_zero_power == 0:\n        return True\n    \n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if the number is a power of 2\n    if n & (n-1) == 0: \n        return True\n    else: \n        # Check if the number is divisible by 2^(i+1) for i in [0, 63]\n        for i in range(64):\n            if (n >> i) & 1 == 1:\n                if ((n - (1 << i)) >> (i+1)) & 1 == 1:\n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables\n    sum_of_powers = 0\n    temp_num = n\n    \n    # Iterate through the digits of the given number\n    for digit in str(n):\n        # If the digit is 0, skip it\n        if digit == '0':\n            continue\n        # Otherwise, convert it to an integer and add it to the sum of powers of 2\n        else:\n            temp_num = temp_num // 2\n            sum_of_powers += temp_num\n    \n    # Check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    if n & (n-1) == 0:\n        return False\n    \n    for i in range(1, n//2+1):\n        if n == (2**i) + (2**i):\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the given number to binary representation\n    bin_str = bin(n)[2:]\n    \n    # Initialize the count of 1's in the binary representation\n    count = 0\n    \n    # Loop through each character in the binary representation\n    for char in bin_str:\n        # If the character is 1, increment the count\n        if char == '1':\n            count += 1\n        \n        # If the count is greater than the number of bits in the binary representation, there is no way to represent the number as sum of powers of 2\n        if count > len(bin_str):\n            return False\n    \n    # If we reach here, the number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # radius is a constant value\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(f\"The circumference of a circle of radius {r} is {circumference:.2f}\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Circle circumference equation\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened.extend(item)\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        flattened_list += item\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    This function sorts the input list of numbers in ascending order using the pancake sort algorithm.\n\n    Args:\n    nums (list): List of numbers to be sorted\n\n    Returns:\n    list: Sorted list of numbers\n\n    Time Complexity:\n    Best: O(n^2)\n    Worst: O(n^2)\n\n    Space Complexity:\n    O(1)\n    '''\n\n    def sort_helper(nums, n):\n        if n == 1:\n            return nums\n\n        pivot = nums[n-1]\n        i = 0\n        j = n-2\n\n        while i <= j:\n            while nums[i] < pivot:\n                i += 1\n            while nums[j] > pivot:\n                j -= 1\n            if i <= j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n\n        nums[n-1], nums[j] = nums[j], nums[n-1]\n\n        return sort_helper(nums, j)\n\n    return sort_helper(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Helper function to reverse the list of indices\n    def reverse(i, j):\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n\n    # Helper function to find the largest index that can be swapped with the current index\n    def find_max(i):\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        return max_index\n\n    # Main loop\n    for i in range(n - 1, 0, -1):\n        # Find the maximum element in the list\n        max_index = find_max(i)\n\n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the list of indices for the next iteration\n        reverse(0, max_index)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a copy of the input list so that we can modify it\n    nums_copy = nums[:]\n\n    # find the maximum element in the list\n    max_val = max(nums_copy)\n\n    # loop through each element and swap it with the element that has the maximum value\n    for i in range(len(nums_copy)):\n        if nums_copy[i] == max_val:\n            # find the index of the element with the maximum value\n            max_index = nums_copy.index(max_val)\n            # swap the current element with the element at the maximum index\n            nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # reverse the array\n    nums.reverse()\n    # perform pancake sort\n    for i in range(n-1):\n        # get the index of the next element\n        j = i + 1\n        # get the current element and its index\n        curr = nums[i]\n        curr_idx = i\n        # find the smallest element to the right of the current element\n        while j < n and nums[j] < curr:\n            j += 1\n        # swap the current element with the smallest element to the right\n        nums[curr_idx], nums[j-1] = nums[j-1], nums[curr_idx]\n    # reverse the array again\n    nums.reverse()\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element of the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the order of the elements in the sub-array of the array that is now sorted\n        for j in range(i, n):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Sort the list using the selection sort algorithm\n    for i in range(n):\n        # Find the index of the smallest element\n        min_idx = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        \n        # Swap the smallest element with the current element\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    \n    # Print the sorted list\n    print(\"Sorted List: \", end=\"\")\n    for i in range(n):\n        print(nums[i], end=\" \")"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # generate a sequence of numbers from 1 to n\n    sequence = [i for i in range(1, n+1)]\n    # repeat the sequence n times\n    for _ in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums))\n        # swap the maximum element with the first element of the unsorted part\n        nums[max_index], nums[0] = nums[0], nums[max_index]\n        # reverse the sequence of numbers\n        sequence.reverse()\n        # reverse the unsorted part of the list\n        nums.reverse()\n        # reverse the sequence of numbers again\n        sequence.reverse()\n    return sequence"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2*i + 1\n        r = 2*i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n        return arr\n\n    nums = heap_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Function to swap two elements of the list\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Function to arrange the list in increasing order\n    def sort_increasing(start, end):\n        for i in range(start, end + 1):\n            for j in range(i + 1, end + 1):\n                if nums[i] > nums[j]:\n                    swap(i, j)\n\n    # Function to arrange the list in decreasing order\n    def sort_decreasing(start, end):\n        for i in range(start, end + 1):\n            for j in range(i + 1, end + 1):\n                if nums[i] < nums[j]:\n                    swap(i, j)\n\n    # Call the appropriate function based on the sorting order\n    if n % 2 == 0:\n        sort_increasing(0, n // 2 - 1)\n        sort_decreasing(n // 2, n - 1)\n    else:\n        sort_increasing(0, n // 2)\n        sort_decreasing(n // 2 + 1, n - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    def merge_sort(nums):\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n    \n    sorted_nums = merge_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        elif list1[i] == list3[i]:\n            count += 1\n        elif list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(i+1,len(list2)):\n                if list2[j] == list3[i]:\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate over each element in the input tuple\n    for element in Input: \n        # Check if the element is a list\n        if type(element) == list: \n            # Increment count variable by 1\n            count += 1\n\n    # Return the count of lists\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i]-arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize the maximum difference to be the difference between the smallest and the largest element of the array\n    max_diff = abs(arr[0] - arr[-1])\n\n    # Traverse through the array and update the maximum difference if a difference between two adjacent elements is found\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1]-arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        curr_diff = arr[i+1] - arr[i]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = abs(arr[len(arr)-1]-arr[0])\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1]-arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            x = (n // i)**2\n            y = (a*x + b*i) // i\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    if a == 0:\n        return None\n    \n    x1 = -n / b\n    x2 = (n * b ** 2) / (a * b)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a and b are equal\n    if a == b:\n        return None\n    \n    # Initialize x and y as 0\n    x = 0\n    y = 0\n    \n    # Loop until we have found a solution\n    while True:\n        # Check if the current solution satisfies the given condition\n        if x * a + y * b == n:\n            return (x, y)\n        \n        # Increment x or y until we find a solution\n        elif x * a + y * b < n:\n            x += 1\n        else:\n            y += 1"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if there are two integers x and y such that ax + by = n\n    for x in range(-n, n+1):\n        for y in range(-n, n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Given three integers a, b and n, returns a tuple (x, y) of integers that satisfy ax + by = n,\n    or returns None if no solution exists.\n    \"\"\"\n    x1, x2 = 0, n // a\n    y1, y2 = 0, n // b\n    x, y = None, None\n\n    for x_val in range(-n // b, n // b + 1):\n        x = a * x_val + b * x1\n        y = b * x_val + a * y1\n        if x == n:\n            return x, y\n\n    for y_val in range(-n // a, n // a + 1):\n        x = a * x2 + b * y_val\n        y = b * y_val + a * y2\n        if x == n:\n            return x, y\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Initialize variables\n    x1 = 0\n    x2 = 0\n    y1 = 0\n    y2 = 0\n    x3 = 0\n    x4 = 0\n    y3 = 0\n    y4 = 0\n    found = False\n\n    # Check if the equation has two solutions\n    for i in range(1, n+1):\n        x3 = (-b + (a*i) ** 0.5) / (a * i)\n        y3 = a * x3 + b\n\n        x4 = (-b - (a*i) ** 0.5) / (a * i)\n        y4 = a * x4 + b\n\n        if (a * x3 + b == n or a * x4 + b == n) and (x3 >= 0 and x4 >= 0) and (x3 <= n and x4 <= n):\n            x1 = x2 = x3\n            x2 = x4\n            y1 = y2 = y3\n            y2 = y4\n            found = True\n            break\n\n    # Check if the equation has one solution\n    if not found:\n        x1 = (-b + (a * n) ** 0.5) / (a * n)\n        y1 = a * x1 + b\n\n        if x1 >= 0 and x1 <= n:\n            x2 = (-b - (a * n) ** 0.5) / (a * n)\n            y2 = a * x2 + b\n\n            if x2 >= 0 and x2 <= n:\n                x3 = x1\n                x4 = x2\n                y3 = y1\n                y4 = y2\n                found = True\n\n    if found:\n        return (x1, y1), (x2, y2), (x3, y3), (x4, y4)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    for x in range(-1000, 1001):\n        y = (-b + (a*x))//n\n        if y*n == -b + (a*x):\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, b):\n        if a * i + b * (n - i * i) == 0:\n            return (i, n - i * i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = int((-n - (b*n)) / a)\n        y = int((-n + (b*n)) / a)\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    discriminant = b**2 - 4*a*n\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        return (x1, x1)\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list1 and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and removes all elements present in list2 from list1.\n    \"\"\"\n    # Loop through list2 and remove elements from list1 if they are present in list1\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    \n    # Return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return (n // 2) * (2 * (n // 2) - 1)\n    else:\n        return (n // 2) * (2 * (n // 2) + 1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    else:\n        return n + sum_series(n - 2 * n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Check if n is even or odd\n    if n % 2 == 0:\n        # Calculate the sum using a for loop\n        for i in range(n // 2):\n            total_sum += n - 2 * i\n        \n        # Add the first term of the series (n)\n        total_sum += n\n    else:\n        # Calculate the sum using a while loop\n        i = 0\n        while n - 2 * i >= 0:\n            total_sum += n - 2 * i\n            i += 1\n        \n        # Add the first term of the series (n)\n        total_sum += n\n    \n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(0, n//2):\n            sum += n - 2*i\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        if n - 2 * i <= 0:\n            break\n        total_sum += n - 2 * i\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n\n    else:\n        return sum_series(n // 2) + 2 * n - 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #calculate the perimeter of the polygon\n    perimeter = s * l\n    \n    #calculate the area using the formula for a polygon with n sides and side length l\n    area = perimeter * (1/2)\n    \n    #return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using Heron's formula\n    area = (s*(s-l)*tan(math.pi/l))/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s / l) * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-2*l)+2*s*l-s*l**2)/6\n    return area\n\ns = float(input(\"Enter the side length: \"))\nl = int(input(\"Enter the number of sides: \"))\n\narea = area_polygon(s, l)\n\nprint(\"The area of the regular polygon is:\", area)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * l) / (4 * pi * s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a triangle using Heron's formula\n    area = (s*(s-s/2)*(s-s/4)*(s-s/6))*pi\n    # calculate the area of the polygon using the formula for regular polygons\n    A = l*area\n    # return the area of the polygon\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    \n    # Calculate the perimeter of the polygon\n    perimeter = (s + l) * l / 2\n    \n    # Calculate the area of each triangle in the polygon\n    for i in range(l):\n        h = s / tan(pi/l) * tan((2*i*pi)/l)\n        area += (s - h) * (s - h) / 2\n    \n    # Calculate the area of the polygon as the sum of the areas of its triangles\n    area += perimeter * perimeter / 2\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n//i:\n                div_sum += n//i\n    \n    # Return True if the sum of the divisors is the same for both integers\n    if div_sum == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    \n    #finding all the divisors of n using a for loop\n    for i in range(1,n+1):\n        if n % i == 0:\n            div_list.append(i)\n    \n    #finding the sum of all the divisors using a for loop\n    sum_div = 0\n    for i in div_list:\n        sum_div += i\n    \n    #checking if the sum of the divisors is the same as the original integer\n    if sum_div == n:\n        print(\"The sum of the divisors of\", n, \"is the same as the original integer.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"is not the same as the original integer.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    div_sum = sum(divisors)\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n//i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = set()\n    div2 = set()\n\n    # calculate divisors of n using math.factorial()\n    for i in range(1, n+1):\n        if n % i == 0:\n            div1.add(i)\n\n    # calculate sum of divisors of n1 and n2 using math.factorial()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div2.add(i)\n        if n // i == i:\n            div2.add(n // i)\n\n    # if sum of divisors of n1 and n2 is the same, then check if the sum of their divisors is the same as n\n    if div1.union(div2) == set([1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n\n    div_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n // i:\n                div_sum += n // i\n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def divisor_sum(n): \n        '''\n        Helper function to calculate the sum of its divisors.\n        '''\n        s = 1\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                s += i + n//i\n        return s\n    \n    div1 = divisor_sum(n)\n    div2 = divisor_sum(n)\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div2 = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div1.sort()\n    div2.sort()\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    d = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            d.append(i)\n            d.append(n//i)\n    # check if the sum of the divisors is the same for both integers\n    for i in d:\n        if i > n//i:\n            d.remove(i)\n        else:\n            d.remove(n//i)\n    if len(d) == 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the character counts\n    counts = {}\n    # Loop through the characters in the input string\n    for char in str1:\n        # If the character is a lowercase English alphabet character, add it to the counts dictionary\n        if 'a' <= char <= 'z':\n            counts[char] = counts.get(char, 0) + 1\n    # Return the dictionary of character counts\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(i+97)] = 0\n        \n    for char in str1:\n        if char.isalpha() and char.lower() in count_dict:\n            count_dict[char.lower()] += 1\n            \n    result = 0\n    for count in count_dict.values():\n        result += count\n    \n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    for i, c in enumerate(str1):\n        if c.lower() in count:\n            count[c.lower()] += 1\n        else:\n            count[c.lower()] = 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the character counts\n    char_count = {}\n\n    # Iterate through the input string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    # Iterate over the characters in the string\n    for i in range(26):\n        # Add the character at index i to the dictionary with value 0 if it doesn't exist already\n        if chr(65+i) not in char_count:\n            char_count[chr(65+i)] = 0\n        # Increment the count of the character at index i in the dictionary\n        char_count[chr(65+i)] += 1\n    # Iterate over the characters in the string again and update the count of characters at the same position in the string as in the English alphabet\n    for char in str1:\n        # Check if the character is a letter in the English alphabet\n        if char in char_count:\n            # Increment the count of the character at the same position in the string as in the English alphabet\n            char_count[char] += 1\n    # Return the dictionary containing the count of characters at each position in the string\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters in each position in the alphabet\n    char_count = {i: 0 for i in range(26)}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to its position in the alphabet (0-25)\n        position = ord(char) - ord('a')\n        \n        # Increment the count of characters at this position\n        char_count[position] += 1\n        \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(26):\n        if str1[i] == chr(i+97):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all the characters in the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of characters at each position in the alphabet\n    count_dict = {}\n\n    # Iterate through all the characters in the string\n    for i in range(26):\n        # If the character is not already present in the dictionary, set its count to 1\n        if chr(ord('a') + i) not in count_dict:\n            count_dict[chr(ord('a') + i)] = 1\n        # If the character is already present in the dictionary, increment its count by 1\n        else:\n            count_dict[chr(ord('a') + i)] += 1\n\n    # Iterate through all the characters in the first string\n    count = 0\n    for char in str1:\n        # If the character is present in the dictionary, increment the count by its count in the dictionary\n        if char in count_dict:\n            count += count_dict[char]\n\n    # Return the final count of characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    \n    count = 0\n    \n    for i in range(ord('a'), ord('z')+1):\n        if str1.lower().find(chr(i).lower())!= -1:\n            count += 1\n            \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            xor_value = A[i] ^ A[j] \n            if xor_value == 0: \n                even_count += 1 \n    return even_count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is negative\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # find the position of the least significant bit set to 1\n    bit_position = 0\n    while (1 << bit_position) < n:\n        bit_position += 1\n\n    # shift n to the left by the number of bits to the right of the least significant bit set to 1\n    n <<= bit_position\n\n    # increment the least significant bit to 1\n    n |= 1\n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(int(np.log2(n)) + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return 2 ** int(n ** 0.5)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a number as input and returns the smallest power of 2 greater than or equal to the input number.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    \n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the value to n\n    power = n\n\n    # Loop until the power is a power of 2\n    while power & (power - 1):\n        power = power | (power - 1)\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the next power of 2 using binary search\n    lo = 1\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if mid * mid >= n:\n            hi = mid\n        else:\n            lo = mid + 1\n    \n    return lo"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize the power of 2 as 1\n    power_of_2 = 1\n\n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    # Return the result\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    # Initialize a variable to store the result\n    power = 1\n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        # Increment the power variable\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use the logarithm to find the closest power of 2\n    log2 = 0\n    while (2**log2) < n:\n        log2 += 1\n    \n    # Return the 2 raised to the power of the logarithm plus one\n    return 2 ** log2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, elem):\n    '''\n    Count the number of occurrences of a given element in a list.\n    '''\n    count = 0\n    for item in lst:\n        if item == elem:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize a variable to store the sum of numbers in the range\n    sum = 0\n\n    # loop through the list from the starting index to the ending index\n    for i in range(m, n+1):\n        # if the current element is within the range, add it to the sum\n        if i >= 0 and i < len(list1):\n            sum += list1[i]\n\n    # return the sum of numbers in the range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list of numbers (lst) and two indices (m and n) and returns the sum of all numbers in the range [m, n] (inclusive).\n\n    If m or n is negative, it is treated as the index of the first or last element of the list, respectively.\n\n    >>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> sum_range_list(lst, 2, 7)\n    15\n    >>> sum_range_list(lst, 4, -1)\n    25\n    >>> sum_range_list(lst, -3, 3)\n    15\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize variables to hold the sum and count of numbers in the list\n    sum_count = 0\n    count = 0\n    \n    # Loop through the list starting from index m and ending at index n\n    for i in range(m, n+1):\n        # Check if the current number is in the range and add it to the sum if it is\n        if i >= 0 and i < len(list1):\n            if i in list1:\n                sum_count += list1[i]\n                count += 1\n                \n    # If there are no numbers in the range, return 0\n    if count == 0:\n        return 0\n    \n    # Otherwise, return the sum divided by the count\n    return sum_count / count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Calculate the sum of the range of numbers\n    range_sum = sum(list1[m:n+1])\n\n    return range_sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = 5 * a\n    \n    # Calculate the area using Heron's formula\n    area = (5 * semi_perimeter ** 2) / (4 * math.tan(math.pi / 5))\n    \n    # Return the perimeter and area as a tuple\n    return (semi_perimeter, area)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    circumference = 2 * a * math.sin(math.pi/5)\n    perimeter = circumference * 5\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a * math.sin(math.pi/5)\n    return circumference * 5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the length of one side of the pentagon\n    side = a\n\n    # Use the formula for the area of a regular polygon\n    area = (5/2) * side ** 2\n\n    # Use the formula for the circumference of a regular polygon\n    circumference = 5 * side\n\n    # Calculate the perimeter of the polygon\n    perimeter = circumference + (5 * side)\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    s = (5 * a) / 4\n    \n    # Use the formula for the length of a right-angled triangle to find the area of the pentagon\n    area = (5 * s ** 2) / (4 * math.tan(math.pi / 5))\n    \n    # Calculate the perimeter of the pentagon using the formula for the perimeter of a right-angled triangle\n    perimeter = 5 * a * math.sqrt(3)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' or i == 't' or i == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i:].startswith('td'):\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 3 # add 3 to move to the next occurrence of'std'\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for i in range(1, len(test_tuple)):\n        if not isinstance(test_tuple[i], type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n\n    # Loop through the tuple elements\n    for element in test_tuple:\n        # Check if the current element has same data type as the first element\n        if not isinstance(element, type(first_element)):\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not isinstance(test_tuple, tuple):\n        raise ValueError(\"Input should be a tuple\")\n    else:\n        for element in test_tuple:\n            if not isinstance(element, type(test_tuple[0])):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize variables\n    data_type = None\n    \n    # loop through tuple\n    for item in test_tuple:\n        # if data type is not None, check if it is same as current item's data type\n        if data_type is not None:\n            if not isinstance(item, data_type):\n                return False\n        else:\n            # set data type to first item's data type if it is not None yet\n            data_type = type(item)\n    \n    # all items have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Find the leftmost and rightmost occurrences of x\n    leftmost_occurrence = -1\n    rightmost_occurrence = -1\n    for i in range(n):\n        if arr[i] == x:\n            if leftmost_occurrence == -1:\n                leftmost_occurrence = i\n            else:\n                rightmost_occurrence = i\n\n    # If there are no occurrences of x in the array, return False\n    if leftmost_occurrence == -1:\n        return False\n\n    # Calculate the sum of the occurrences of x\n    sum_occurrences = leftmost_occurrence + rightmost_occurrence\n\n    # If the sum of occurrences is greater than n/2, return True\n    if sum_occurrences > n//2:\n        return True\n\n    # If the sum of occurrences is less than n/2, return False\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join(c for i, c in enumerate(str) if i % 2 == 0)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create a new string to store the odd index values\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if len(str) % 2 == 1:\n            # If the index is odd, append the character to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Loop through the characters of the list and remove those with odd index values\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list.pop(i)\n\n    # Convert the modified list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the output\n    output = \"\"\n    \n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if str.index(char) % 2!= 0:\n            # If it is, add it to the output string\n            output += char\n    \n    # Return the output string\n    return output"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create an empty string to store the result\n    result = ''\n    # loop through each character in the given string\n    for char in str:\n        # if the index of the character is odd, add it to the result string\n        if (ord(char) - 64) % 2 == 1:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and removes the characters with odd index values.\n    \"\"\"\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create an empty string to store the output\n    output = \"\"\n    # iterate over each character in the input string\n    for char in str:\n        # if the index of the character is even, add it to the output string\n        if int(char) % 2 == 0:\n            output += char\n        else:\n            # if the index is odd, skip it and move on to the next character\n            continue\n    return output"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the new string without odd values\n    new_str = ''\n    # loop through each character in the given string\n    for char in str:\n        # if the index of the character is odd, add it to the new string\n        if len(new_str) % 2 == 0:\n            new_str += char\n    # return the new string without odd values\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    return min(a, b, c) "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c): \n    \"\"\"\n    This function takes three numbers as arguments and returns the minimum value.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(5,10,2)) # Output: 2\nprint(min_of_three(5,5,5)) # Output: 5\nprint(min_of_three(1,100,20)) # Output: 1"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize variables to keep track of unset bits and unset bits count\n    unset_bits = 0\n    unset_bits_count = 0\n\n    # Loop through each bit in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if (n & (1 << i)) == 0:\n            # If the bit is unset, increment the unset bits count and add it to the unset bits variable\n            unset_bits_count += 1\n            unset_bits += (1 << i)\n\n    # Check if all the unset bits in the given range are set\n    if unset_bits_count == 0:\n        # If all the bits are set, return True\n        return True\n    else:\n        # If not all the bits are set, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a boolean variable to keep track of whether all bits are unset or not\n    result = True\n\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the i-th bit is set or not\n        if (n & (1 << i))!= 0:\n            # if the i-th bit is set, then the whole number n cannot be a multiple of 2^i\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a list to store the unset bits in the given range\n    unset_bits = []\n\n    # Iterate through each bit of n\n    for i in range(32):\n        # If the bit is set, add its index to the unset_bits list\n        if ((n >> i) & 1) == 1:\n            unset_bits.append(i)\n\n    # Sort the unset_bits list in ascending order\n    unset_bits.sort()\n\n    # Check if all the bits are unset in the given range\n    if r - l + 1 == len(unset_bits):\n        print(\"All bits are unset in the given range.\")\n    else:\n        print(\"Not all bits are unset in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n <= 0:\n        return False\n    for i in range(l, r+1):\n        if n & (1 << i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments - n, l, and r.\n    n is an integer representing the binary number.\n    l is an integer representing the lower bound of the range.\n    r is an integer representing the upper bound of the range.\n    This function returns True if all the bits are set in the given range, and False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(l, r+1):\n        if bin(i).count('1') > 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert both the given range and the given number to binary form\n    binary_n = bin(n)[2:].zfill(32)\n    binary_l = bin(l)[2:].zfill(32)\n    binary_r = bin(r)[2:].zfill(32)\n\n    # Check if all the bits in the given range are set to 1\n    all_set = True\n    for i in range(32):\n        if binary_n[i] == '0' and binary_l[i] == '0' and binary_r[i] == '0':\n            all_set = False\n            break\n\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the binary numbers to binary strings\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n\n    # Calculate the number of bits required to represent n\n    n_bits = len(n)\n\n    # Initialize the count of unset bits\n    count = 0\n\n    # Compare the binary strings and count the number of unset bits\n    for i in range(n_bits):\n        if n[i]!= '1' and l[i] == '1' and r[i] == '1':\n            count += 1\n\n    # Check whether all the bits are unset or not\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the given range from binary to decimal format\n    range_decimal = int(bin(r - l + 1)[2:], 2)\n\n    # Calculate the maximum possible value of the range\n    max_value = 2 ** n - 1\n\n    # Loop through all possible values of the range\n    for i in range(range_decimal + 1):\n        # Check if the current value of the range is greater than the maximum value of the range or not\n        if i > max_value or (n > 1 and i > 1):\n            # Check if all the bits are unset in the current range or not\n            if bin(i)[2:].count('1') == n:\n                # If all the bits are unset, return True\n                return True\n\n    # If the function reaches here, it means that all the bits are set in the given range\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1') < len(bin(i)[2:]):\n            count += 1\n            if count == 32:\n                return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & 1 == 0:\n            return False\n        n >>= 1\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a dictionary to store the indices of each element\n    indices = {}\n    for i, num in enumerate(arr):\n        indices[num] = i\n\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n\n    # Iterate through the sorted array and swap elements as needed\n    for i in range(n):\n        # Get the indices of the current element\n        j = sorted_arr.index(arr[i])\n        if arr[i] < 0:\n            # Swap the current element with the last positive element before it\n            while j > 0 and sorted_arr[j] > 0:\n                j -= 1\n            if j > 0:\n                arr[indices[sorted_arr[j]]] = arr[i]\n                arr[i] = sorted_arr[j]\n        elif arr[i] > 0:\n            # Swap the current element with the last negative element before it\n            while j > 0 and sorted_arr[j] < 0:\n                j -= 1\n            if j > 0:\n                arr[indices[sorted_arr[j]]] = arr[i]\n                arr[i] = sorted_arr[j]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create an empty list to hold the new array\n    new_arr = []\n    \n    # loop through the original array\n    for num in arr:\n        # check if the number is positive\n        if num >= 0:\n            # add the number to the new array\n            new_arr.append(num)\n        else:\n            # check if there are any negative numbers left in the array\n            if len(new_arr) < n:\n                # add the negative number to the new array\n                new_arr.append(num)\n            else:\n                # find the position where the negative number should be inserted\n                index = -1\n                for i in range(n):\n                    if num > new_arr[i]:\n                        index = i\n                        break\n                # insert the negative number at the specified position\n                new_arr.insert(index, num)\n    \n    # return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two variables to keep track of the negative and positive elements\n    negative = []\n    positive = []\n\n    # Iterate through the array and add the negative and positive elements to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Concatenate the negative and positive lists and return the result\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize two lists to store the negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the array and add each element to the appropriate list\n    for element in arr:\n        if element < 0:\n            neg_list.append(element)\n        else:\n            pos_list.append(element)\n    \n    # Concatenate the two lists into one and shuffle it randomly\n    shuffle_list = neg_list + pos_list\n    random.shuffle(shuffle_list)\n    \n    # Split the shuffled list into two parts, and return the two parts as a tuple\n    return tuple(shuffle_list[:n]) + tuple(shuffle_list[n:])"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive and one for negative elements\n    i, j = 0, n\n    # Traverse the array and swap the elements as required\n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in arr[:n]:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    for i in arr[n:]:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # create two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n    \n    # loop through the input array\n    for i in arr:\n        \n        # if the element is negative, add it to the negative list\n        if i < 0:\n            negative.append(i)\n        \n        # if the element is positive, add it to the positive list\n        elif i > 0:\n            positive.append(i)\n    \n    # loop through the first n elements of the input array\n    for i in range(n):\n        \n        # if the i-th element is negative, add it to the beginning of the negative list\n        if negative:\n            arr[i] = negative.pop(0)\n        \n        # if the i-th element is positive, add it to the end of the positive list\n        elif positive:\n            arr[i] = positive.pop()\n        \n        # if the i-th element is neither, append a 0 to the array\n        else:\n            arr[i] = 0\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create a list to store the negative elements\n    neg_list = []\n    \n    # Loop through the array and append negative elements to the list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n    \n    # Loop through the array and append positive elements to the list\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            neg_list.append(arr[i])\n    \n    # Add the negative elements to the beginning of the array\n    for i in range(n):\n        arr[i] = neg_list[i]\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Helper function to sort the first n elements of the array\n    def sort_first_n(arr):\n        neg = []\n        pos = []\n        for i in range(n):\n            if arr[i] < 0:\n                neg.append(arr[i])\n            else:\n                pos.append(arr[i])\n        neg.sort()\n        pos.sort()\n        return neg + pos\n\n    # Sort the first n elements of the array\n    sorted_arr = sort_first_n(arr)\n\n    # Re-arrange the remaining elements of the array according to the given constraints\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            sorted_arr.insert(0, arr[i])\n        else:\n            sorted_arr.append(arr[i])\n\n    # Return the sorted array\n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_count = 0\n    positive_count = 0\n    first_negative = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n            if negative_count == 1:\n                first_negative = i\n        else:\n            positive_count += 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[first_negative] = arr[first_negative], arr[i]\n            first_negative += 1\n        else:\n            first_negative = i\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n        elif i == \" \":\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate over the list of words\n    for i in range(len(words)):\n        # Check if the current word contains only spaces\n        if words[i] == '':\n            # Replace the word with the character\n            words[i] = char\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n\n    # Get the first n elements of the sorted list\n    return sorted_list[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and add all elements from the list\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the min heap as a list\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, i)\n        else:\n            if i > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialize an empty list to store the n largest elements\n    largest_nums = []\n    # loop through the list and add the largest n elements to the heapq\n    for num in list1:\n        heapq.heappush(largest_nums, num)\n        # if the heapq has more than n elements, remove the smallest element\n        if len(largest_nums) > n:\n            heapq.heappop(largest_nums)\n    # return the largest n elements from the heapq\n    return largest_nums"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap[0])\n                heapq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heapq.heapify(list1)\n    return list(heapq.nlargest(n, list1))"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, list1.pop(0))\n    \n    # Add the remaining elements to the max heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n    \n    # Return the largest n elements from the max heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_area = 2 * r * h\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Calculate the lateral surface area of the cylinder\n    LSA = 2*3.14159*r*h\n    \n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * (3.14 * r**2) + 2 * (3.14 * h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r**2  # formula for lateral surface area of a cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder using the formula:\n    # A = \u03c0r\u00b2h\n    A = 3.14 * r**2 * h\n\n    # Return the surface area\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2)*h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the modified number\n    modified_num = ''\n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append a '1' to the modified number\n        if bit == '1':\n            modified_num += '1'\n        # If the bit is odd, append a '0' to the modified number\n        else:\n            modified_num += '0'\n    # Convert the modified number to an integer and return it\n    return int(modified_num, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary and split it into individual bits\n    binary_str = bin(n)[2:]\n    binary_list = [int(bit) for bit in binary_str]\n\n    # Set even bits to 1\n    for i in range(len(binary_list)):\n        if binary_list[i] == 0 and i % 2 == 0:\n            binary_list[i] = 1\n\n    # Convert the binary list back to a number\n    even_bit_set = int(''.join(str(bit) for bit in binary_list), 2)\n\n    return even_bit_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1) & 0x55555555"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a counter variable to keep track of the number of set bits\n    count = 0\n\n    # Iterate through each bit of the number\n    for i in range(32):\n        # Check if the i-th bit is even\n        if (n & (1 << i))!= 0:\n            # If it is, set the i-th bit to 1\n            n |= (1 << i)\n            # Increment the count variable\n            count += 1\n\n    # Return the number with all even bits set to 1\n    return n, count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits set to 1\n    even_bits_list = []\n    # Iterate over each bit of the number\n    for i in range(32):\n        # If the bit is even (i.e., the least significant bit), add 1 to the list\n        if n & (1 << i):\n            even_bits_list.append(1)\n        # If the bit is odd (i.e., the most significant bit), add 0 to the list\n        else:\n            even_bits_list.append(0)\n    # Convert the list to an integer\n    even_bits_int = int(''.join(str(i) for i in even_bits_list), 2)\n    # Return the even_bits_int as the result\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result \n    result = 0\n\n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if bit == '1':\n            result |= 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    while n > 0:\n        result |= (1 << (n % 8)) # Set the ith bit of the result to 1 if the n-th bit of n is even\n        n = n >> 1 # Move to the next bit of n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert integer to binary string\n    binary_str = bin(n)[2:]\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate through the binary string\n    for i in binary_str:\n        # If the current bit is even, set the corresponding bit in the new binary string to 1\n        if int(i) == 0:\n            count += 1\n        else:\n            new_str = new_str + '1'\n        \n        # If the count reaches the total number of even bits, break out of the loop\n        if count == 2*binary_str.count('0'):\n            break\n    \n    # Convert the new binary string to an integer and return it\n    return int(new_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n\n    for i in range(32):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n\n    return even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    counter = {}\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it and set its count to 1\n        if tup not in counter:\n            counter[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counter[tup] += 1\n    # Return the dictionary\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a Counter object to store the counts of each unique tuple\n    counts = Counter(test_list)\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        count = count_dict.get(item, 0)\n        count_dict[item] = count + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples into a set to remove duplicates and then back into a list\n    unique_tuples = list(set(test_list))\n\n    # Create a dictionary to store the number of occurrences for each unique tuple\n    occurrence_dict = {}\n\n    # Loop through each tuple in the list and update the dictionary accordingly\n    for tup in unique_tuples:\n        count = test_list.count(tup)\n        if count in occurrence_dict:\n            occurrence_dict[count] += 1\n        else:\n            occurrence_dict[count] = 1\n\n    return occurrence_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    output_dict = dict(counter)\n    return output_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    # Initialize variables to count non-empty substrings\n    count = 0\n    prev_char = ''\n\n    # Iterate over each character in the string\n    for char in str:\n        # If the current character is different from the previous character,\n        # or if the current character is the same as the previous character,\n        # then the current substring is not empty and we count it\n        if char!= prev_char or char == prev_char:\n            count += 1\n\n        # Update the previous character variable to the current character\n        prev_char = char\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize a matrix to store the number of sequences for each value of m up to n\n    sequences = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # Fill in the matrix with the number of possible sequences for each value of m up to n\n    for m_val in range(1, m+1):\n        for n_val in range(1, n+1):\n            if m_val == 1:\n                sequences[m_val][n_val] = n_val\n            elif n_val == 1:\n                sequences[m_val][n_val] = 0\n            else:\n                sequences[m_val][n_val] = sequences[m_val-1][n_val-1] + sequences[m_val-1][n_val]\n\n    # Return the total number of sequences found up to n\n    return sequences[m][n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if j >= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables for the total number of sequences and the number of sequences with length n\n    total_sequences = 0\n    n_sequences = 0\n\n    # Loop through all possible starting values\n    for i in range(1, m + 1):\n        # Initialize variables for the current sequence and the previous value\n        current_sequence = [i]\n        prev_value = i\n\n        # Loop through all possible increasing values\n        for j in range(i + 2, m + 1):\n            # Check if the current value is in the allowed range\n            if j <= m:\n                # Append the current value to the sequence and check if it's a valid sequence\n                if j - current_sequence[-1] <= n and n - j + current_sequence[-1] <= n:\n                    current_sequence.append(j)\n\n                # If it's a valid sequence, increment the total number of sequences and the number of sequences with length n\n                if len(current_sequence) == n:\n                    n_sequences += 1\n                    total_sequences += 1\n\n    # Return the total number of sequences and the number of sequences with length n\n    return total_sequences, n_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # initializing the result variable to 0\n    result = 0\n    \n    # initializing a list to store the previous element\n    prev_elements = []\n    \n    # iterating from the second element to m\n    for i in range(2, m + 1):\n        # checking if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2 * prev_elements[-1] <= m:\n            # if it is, adding it to the result variable\n            result += 1\n        \n        # adding the current element to the list of previous elements\n        prev_elements.append(i)\n    \n    # returning the result variable\n    return result"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total = 0\n    for i in range(n + 1):\n        total += get_combinations(m, i)\n    return total\n\ndef get_combinations(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the number of possible combinations of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    else:\n        return get_combinations(m, n - 1) * (m - n + 1) // n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and returns the total number of sequences of length n that satisfy the given conditions.\n    '''\n    total = 0\n    # initialize the list to keep track of the previous element\n    prev_element = 0\n    # loop through all possible elements from 1 to m\n    for i in range(1, m + 1):\n        # if the current element is greater than or equal to twice the previous element\n        if i >= 2 * prev_element <= m:\n            # and the current element is less than or equal to n\n            if i <= n:\n                # add one to the total count\n                total += 1\n        # update the previous element for the next iteration\n        prev_element = i\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    sequence = [1]\n\n    # Generate all possible sequences of length n\n    while len(sequence) < n:\n        # Calculate the next element of the sequence\n        next_element = min(m, 2 * sequence[-1])\n\n        # Check if the next element is within the valid range\n        if next_element >= 2 * sequence[-1] < m:\n            # Add the next element to the sequence and increment the count\n            sequence.append(next_element)\n            count += 1\n\n        # Remove the first element of the sequence if it's too large\n        if sequence[0] > m:\n            sequence.pop(0)\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_number_of_sequences = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if i > 2 * j:\n                total_number_of_sequences += 1\n    return total_number_of_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    for i in range(2, m+1):\n        if i % 2 == 0:\n            total_sequences += n * (m-i+1)\n        else:\n            total_sequences += n * (i-1)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = []\n    prev_elem = None\n    for i in range(n):\n        sequence.append(prev_elem+1)\n        if sequence[-1] <= m:\n            total_sequences += 1\n            prev_elem = sequence[-1]\n        else:\n            prev_elem = sequence[-1] - 2\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the second list is greater than 0.\n    if len(list2) > 0:\n        # Get the length of the first list.\n        length = len(list1)\n        # Replace the last element of the first list with the elements of the second list.\n        list1[length-1:length] = list2\n    # Return the modified first list.\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the second list\n    length = len(list2)\n    \n    # Get the last element of the first list\n    last_element = list1[-1]\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-length:] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.append(list2.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        if len(list2) == 0:\n            return list1[:-1]\n        else:\n            return list1[:-1] + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        # If the second list has more elements than the first list, \n        # we only need to replace the last element of the first list.\n        list1[-1] = list2[-1]\n    else:\n        # If the second list has fewer elements than the first list,\n        # we need to replace all the elements in the first list.\n        list1[:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the length of list1 is less than or equal to 1\n    if len(list1) <= 1:\n        return list1\n    else:\n        # append the last element of list1 to list2\n        list1[-1] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # calculate the length of the second list\n    length_second_list = len(list2)\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-length_second_list:] = list2[-length_second_list:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists, list1 and list2, and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2 = list2[1:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of list1 is greater than 1\n    if len(list1) > 1:\n        # Remove the last element from list1\n        del list1[-1]\n        # Iterate through the elements of list2 and append them to the end of list1\n        for element in list2:\n            list1.append(element)\n    else:\n        # If list1 has only one element, append its value to list2\n        list1.append(list1[0])\n        # Append the elements of list2 to list1\n        list1.extend(list2)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        '''\n        Helper function to check if a given number is a perfect square.\n        '''\n        if num < 0:\n            return False\n        root = math.sqrt(num)\n        return root * root == num\n\n    def get_next_perfect_square(num):\n        '''\n        Helper function to find the next perfect square.\n        '''\n        if num == 1:\n            return 2\n        elif num == 2:\n            return 3\n        else:\n            x = math.sqrt(num)\n            if int(x) ** 2 == num:\n                return int(x) ** 2 + 1\n            else:\n                y = int(x) + 1\n                while not is_perfect_square(y ** 2):\n                    y += 1\n                return y ** 2\n\n    if is_perfect_square(N):\n        return N\n    else:\n        return get_next_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    power = int(math.ceil(math.log(sqrtN, 2)))\n    next_pow_2 = 1 << power\n    return (N + next_pow_2) * (next_pow_2 - 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return None\n\n    sqrt_N = math.sqrt(N)\n    next_sqrt = int(sqrt_N) + 1\n    if next_sqrt**2 > N:\n        next_sqrt -= 1\n\n    return next_sqrt**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    sqrt_N_int = int(sqrt_N)\n\n    if sqrt_N_int*sqrt_N_int == N:\n        sqrt_N_int += 1\n\n    next_square = sqrt_N_int*sqrt_N_int\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N and returns the next perfect square greater than N.\n    '''\n    # calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    # calculate the integer part of the square root\n    sqrt_N_int = int(sqrt_N)\n    # check if the square root is an odd integer\n    if sqrt_N_int % 2 == 1:\n        # if it is, calculate the next odd perfect square\n        next_sqrt_N = sqrt_N_int + 1\n    else:\n        # if it's even, calculate the next even perfect square\n        next_sqrt_N = sqrt_N_int + 2\n    # return the next perfect square greater than N\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find square root of given number\n    sqrt_N = math.sqrt(N)\n\n    # iterate through odd values until square root is greater than or equal to 1\n    while sqrt_N < 1:\n        sqrt_N += 1\n\n    # calculate square of square root\n    sq_sqrt_N = sqrt_N**2\n\n    # return square of square root + 1\n    return sq_sqrt_N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    while True:\n        x += 1\n        y = int(math.sqrt(x))\n        if y*y == x:\n            break\n    return y+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    square = int(math.sqrt(sqrtN + 1))\n    if N % square == 0:\n        return square * square\n    else:\n        return (square + 1) * (square + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize variables\n    square = int(math.sqrt(N))\n    while True:\n        square += 1\n        if math.isqrt(square**2) == math.sqrt(square):\n            return square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    A perfect square is a square that is the square of a perfect number.\n    For example, 6 is a perfect square because 6 = 4^2.\n    The next perfect square greater than N is the number that is the square of a perfect square.\n    For example, the next perfect square greater than 6 is 8 which is the square of 8 = 6^2.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # multiplying sqrt_N by sqrt_N gives the next perfect square greater than N\n    next_sqrt_N = sqrt_N * sqrt_N\n    # add 1 to next_sqrt_N to get the next perfect square greater than sqrt_N\n    next_perfect_square = next_sqrt_N + 1\n    return next_perfect_square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    max_sum = float('-inf') \n\n    # Check if the array is increasing or decreasing \n    if arr[0] <= arr[n-1]: \n        is_increasing = True \n    else: \n        is_increasing = False \n\n    # If the array is increasing, then find the maximum sum of a decreasing subsequence \n    if is_increasing: \n        for i in range(1, n): \n            if arr[i] > arr[i-1]: \n                subseq_sum = arr[i] \n            else: \n                subseq_sum = arr[i-1] \n            max_sum = max(max_sum, subseq_sum) \n    else: \n        for i in range(1, n): \n            if arr[i] < arr[i-1]: \n                subseq_sum = arr[i] \n            else: \n                subseq_sum = arr[i-1] \n            max_sum = max(max_sum, subseq_sum) \n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Check if the array is bitonic\n    if arr[0] < arr[1] and arr[1] < arr[-1]:\n        # Check if the first subsequence is increasing and then decreasing\n        if arr[0] < arr[2] and arr[2] < arr[-1]:\n            subseq = [arr[0], arr[1], arr[2]]\n            max_sum = max(subseq)\n        else:\n            # Find the subsequence that is decreasing and increasing\n            for i in range(1, n-1):\n                if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n                    subseq = [arr[i-1], arr[i], arr[i+1]]\n                    max_sum = max(subseq)\n                    break\n    else:\n        # If the first subsequence is not increasing and then decreasing\n        subseq = arr\n        max_sum = max(subseq)\n    # Check if the second subsequence is increasing and then decreasing\n    if arr[1] < arr[2] and arr[2] < arr[-1]:\n        subseq = [arr[1], arr[2], arr[-1]]\n        max_sum = max(max_sum, subseq)\n    else:\n        # Find the subsequence that is decreasing and increasing\n        for i in range(2, n-1):\n            if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n                subseq = [arr[i-1], arr[i], arr[i+1]]\n                max_sum = max(max_sum, subseq)\n                break\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the maximum sum to be the first element of the array\n    max_so_far = arr[0]\n    # Initialize the current sum to be the first element of the array\n    curr_sum = arr[0]\n    # Iterate over the array from the second element to the last\n    for i in range(1, len(arr)):\n        # If the element is greater than the previous element, then update the current sum\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        # If the element is less than the previous element, then subtract the previous element from the current sum\n        else:\n            curr_sum -= arr[i-1]\n        # Update the maximum sum if the current sum is greater than the maximum sum so far\n        max_so_far = max(max_so_far, curr_sum)\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif arr[1] < arr[0]:\n        return max(arr[1], max_sum(arr[1:])) + arr[0]\n    else:\n        return max_sum(arr[1:]) + arr[0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n\n    # initialize variables\n    increasing = True\n    max_sum = arr[0]\n    max_sum_ending_in_increasing = 0\n    max_sum_ending_in_decreasing = 0\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n\n        if increasing:\n            if arr[i] > max_sum_ending_in_increasing:\n                max_sum_ending_in_increasing = arr[i]\n            if max_sum_ending_in_increasing > max_sum_ending_in_decreasing:\n                max_sum_ending_in_decreasing = max_sum_ending_in_increasing\n        else:\n            if arr[i] > max_sum_ending_in_decreasing:\n                max_sum_ending_in_decreasing = arr[i]\n            if max_sum_ending_in_decreasing > max_sum_ending_in_increasing:\n                max_sum_ending_in_increasing = max_sum_ending_in_decreasing\n\n        if increasing and max_sum_ending_in_increasing > max_sum:\n            max_sum = max_sum_ending_in_increasing\n            max_sum_ending_in_increasing = 0\n            max_sum_ending_in_decreasing = 0\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # check if the array is increasing or decreasing\n    increasing = True\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n            break\n\n    # initialize variables for the maximum sum and the current sum\n    max_sum_ending_at_i = float('-inf')\n    curr_sum = 0\n\n    # iterate through the array and update the current sum based on the increasing/decreasing property of the array\n    for i in range(n):\n        if increasing:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i]\n\n        # update the maximum sum if the current sum becomes greater than the previous maximum sum ending at i\n        if curr_sum > max_sum_ending_at_i:\n            max_sum_ending_at_i = curr_sum\n\n    return max_sum_ending_at_i"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables to keep track of the previous element of the subsequence and the maximum sum of the subsequence\n    prev_element = float('-inf')\n    current_sum = 0\n    max_sum_so_far = float('-inf')\n    \n    # Traverse the array and compute the maximum sum of a bitonic subsequence\n    for i in range(len(arr)):\n        # If the current element is increasing, add it to the current sum\n        if arr[i] < arr[i-1]:\n            current_sum += arr[i]\n        # If the current element is decreasing, subtract it from the current sum\n        elif arr[i] > arr[i-1]:\n            current_sum -= arr[i-1]\n        \n        # If the current sum is greater than the maximum sum of the subsequence so far, update the maximum sum of the subsequence so far\n        if current_sum > max_sum_so_far:\n            max_sum_so_far = current_sum\n        \n        # If the current element is decreasing and the previous element is increasing, add the difference to the current sum\n        elif arr[i] < arr[i-1] and arr[i-1] > prev_element:\n            current_sum += arr[i-1] - prev_element\n        \n        # Update the previous element for the next iteration of the loop\n        prev_element = arr[i]\n    \n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i + 1):\n            if j == 0 or i == j:\n                dp[i] = max(arr[i], dp[j])\n            else:\n                dp[i] = max(arr[i] + dp[j], arr[j] + dp[i])\n                if dp[i] > max_sum:\n                    max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # If the current number is less than the previous number, add it to the current sum\n        if num < arr[0]:\n            current_sum += num\n        # If the current number is greater than the previous number, subtract the previous number from the current sum\n        else:\n            current_sum -= arr[0]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Find the maximum sum in the increasing subsequence\n    increasing_max_sum = 0\n    for i in range(n):\n        increasing_max_sum = max(increasing_max_sum, arr[i])\n\n    # Find the maximum sum in the decreasing subsequence\n    decreasing_max_sum = 0\n    for i in range(n-1, -1, -1):\n        decreasing_max_sum = max(decreasing_max_sum, arr[i])\n\n    # Find the maximum sum of the two subsequences\n    max_sum = max(increasing_max_sum, decreasing_max_sum)\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # initialize the guess and the upper and lower bounds for the search\n    guess = number / 2\n    upper_bound = number\n    lower_bound = 0\n\n    # keep iterating until the upper bound is less than or equal to the lower bound\n    while upper_bound > lower_bound:\n\n        # compute the current estimate of the square root\n        current_estimate = (upper_bound + lower_bound) / 2\n\n        # check if the current estimate is within the tolerance of the actual square root\n        if abs(current_estimate ** 2 - number) < 0.00001:\n            return current_estimate\n\n        # update the upper and lower bounds based on the sign of the difference between the current estimate and the actual square root\n        if number / current_estimate < 1:\n            lower_bound = current_estimate\n        else:\n            upper_bound = current_estimate\n\n    # if the upper and lower bounds are equal, the actual square root must be within the tolerance of the guess\n    return upper_bound"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number/guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the maximum number of iterations and the current guess\n    max_iterations = 50\n    guess = number / 2.0\n    # Initialize the square root and the number of iterations\n    square_root = None\n    iterations = 0\n    # Keep iterating until the square root is within the desired tolerance\n    while square_root is None or abs(square_root - guess) > 1e-12:\n        square_root = guess\n        # Update the guess using the babylonian method\n        guess = (guess + number / guess) / 2.0\n        # Keep track of the number of iterations\n        iterations += 1\n        # Check if we've exceeded the maximum number of iterations\n        if iterations > max_iterations:\n            print(\"Exceeded maximum number of iterations.\")\n            break\n    return square_root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 0.5\n    x1 = 1.0\n    x2 = 1.5\n    x3 = 2.0\n    x4 = 2.5\n    x5 = 3.0\n\n    # find the square root using the babylonian method\n    for i in range(6):\n        x2 = x1\n        x1 = x0\n        x0 = (number/x1) + x1\n\n    # return the square root\n    return x2\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initial approximation\n    x = number/2\n\n    # Iteratively improve the approximation\n    while x*x > number:\n        x = (x + number/x)/2\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"The square root of a negative number is not defined.\")\n    elif number == 0:\n        print(\"The square root of 0 is not defined.\")\n    else:\n        guess = number / 2\n        while True:\n            new_guess = guess + (number / guess)\n            if abs(guess - new_guess) < 0.00001:\n                print(\"The square root of\", number, \"is approximately\", guess)\n                break\n            guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = guess - (guess**2 - number) / (2*guess)\n        if abs(next_guess - guess) < 1e-10:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess*guess-number) >= 0.00001:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = 1\n    y = number\n    # iterate until x and y are equal\n    while abs(x - y) >= 0.000001:\n        x = (x + y) / 2\n        y = number / x\n    # return the square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Find the initial approximation of the square root\n    guess = number/2.0\n\n    # Initialize the number of iterations\n    iterations = 0\n\n    # While the difference between the square of the guess and the actual value is greater than some tolerance...\n    while abs(math.sqrt(guess)**2 - number) > 1e-6:\n\n        #...update the guess using the babylonian method\n        guess = (guess + number/math.sqrt(guess)) / 2.0\n\n        # Increment the number of iterations\n        iterations += 1\n\n    # Return the result\n    return guess, iterations"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    # Initialize two variables to store the start and end index of the longest palindromic subsequence\n    start = 0\n    end = 0\n\n    # Initialize a variable to store the length of the longest palindromic subsequence found so far\n    max_length = 1\n\n    # Iterate through the string\n    for i in range(len(str)):\n        # Check if the current character is the same as the next character\n        if str[i] == str[i + 1]:\n            # If yes, check if the current subsequence is longer than the longest subsequence found so far\n            if i + 2 > end - start + 1:\n                # If yes, update the start and end index of the current subsequence\n                start = i\n                end = i + 1\n                max_length = 2\n            elif i + 2 == end - start + 1:\n                # If no, check if the current subsequence is longer than the previous subsequence\n                if end - start + 2 > max_length:\n                    # If yes, update the start and end index of the current subsequence\n                    start = i\n                    end = i + 1\n                    max_length = end - start + 1\n\n    # Return the length of the longest palindromic subsequence found\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    max_len = 1\n\n    # Manacher's algorithm\n    # Using two pointers - left and right\n    left = right = 0\n    for i in range(1, n - 1):\n        # Extend the left pointer as far as possible\n        while right < n - 1 and s[i + right + 1] == s[i - left - 1]:\n            right += 1\n\n        # Update the maximum length\n        dp[i] = right\n        # Update the maximum length\n        max_len = max(max_len, right)\n\n        # Move the right pointer to the next position\n        if i - left >= 0 and i + right + 1 < n:\n            left = i - left\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(str) == 1:\n        return 1\n    \n    dp = [1] * len(str)\n    longest_palindrome = 1\n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 2\n            if dp[i] > longest_palindrome:\n                longest_palindrome = dp[i]\n        else:\n            dp[i] = 1\n            if dp[i] > longest_palindrome:\n                longest_palindrome = dp[i]\n                \n    return longest_palindrome\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    \"\"\"\n    Given a string, find the length of the longest palindromic subsequence.\n    \"\"\"\n    # Initialize a table to store the length of the longest palindromic subsequence ending at each index\n    lps_table = [[0] * len(str) for _ in range(len(str) + 1)]\n\n    # Initialize the first row and first column of the table to 0\n    lps_table[0][0] = 0\n\n    # Fill the table row by row\n    for i in range(1, len(str) + 1):\n        # If the current character is same as the next character, then expand from the previous longest palindromic subsequence\n        if str[i - 1] == str[i]:\n            lps_table[i][i] = lps_table[i - 1][i - 1] + 1\n\n        # If the current character is different from the next character, then we need to expand from the longest palindromic subsequence that ends at the previous index\n        else:\n            lps_table[i][i] = max(lps_table[i - 1][j] for j in range(i))\n\n    return lps_table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(string):\n    n = len(string)\n    # Create a 2D table to store lengths of longest palindromic subsequences ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[j][i])\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n\n    # create a 2D array to store lengths of longest palindromic subsequences for all prefixes of the string \n    # dp[i][j] will store the length of the longest palindromic subsequence of str[i:j+1] \n    dp = [[0] * n for _ in range(n)] \n\n    # base case: if the string is empty or has only one character, then it is a palindrome and its length is 1 \n    for i in range(n): \n        dp[i][i] = 1\n\n    # fill the dp array using dynamic programming \n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            # if the current characters of the string are same, then the length of the palindrome \n            # ending at the current index is one more than the length of the longest palindrome ending at the previous index \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            # else, take the maximum of the length of the palindrome ending at the left and right of the current index \n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n\n    # return the length of the longest palindromic subsequence \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the length of palindromic subsequences ending at each index\n    dp = [[0]*n for _ in range(n)]\n    # base case: if the length of the string is 1, then it is a palindrome\n    dp[0][0] = 1\n    # loop through all possible starting indices\n    for i in range(1, n):\n        # check if the current character is same as the previous character\n        if str[i] == str[i-1]:\n            dp[i][i] = 2\n            # check if the substring from index i-1 to i+1 is also a palindrome\n            if i > 1 and str[i-2] == str[i-3]:\n                dp[i][i] += 2\n    # find the length of the longest palindromic subsequence ending at each index\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] > max_length:\n                max_length = dp[i][j]\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str)\n    lps_array = [1] * n\n    \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            lps_array[i] = lps_array[i-1] + 1\n        else: \n            lps_array[i] = max(lps_array[i-1], lps_array[i])\n            \n    return max(lps_array)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the lengths of longest palindromic subsequence ending at each index\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # Initialize all values to 1 for odd length strings\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill the DP table using dynamic programming\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # Return the maximum length of a palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # Create a 2D table to store lengths of longest palindromic subsequences for all possible substrings \n    table = [[0 for j in range(n)] for i in range(n)] \n\n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        table[i][i] = 1 \n\n    # Calculate lengths of longest palindromic subsequences for substrings of length greater than 1 \n    for length in range(2, n + 1): \n        for i in range(n - length + 1): \n            j = i + length - 1 \n\n            # If the characters at i and j are same, then we can extend the palindrome of length length by expanding the palindrome of length length-1. \n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n\n            # If the characters at i and j are not same, then we need to expand the palindrome of length length by adding the palindrome of length length-1. \n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]) \n\n    # Return the length of the longest palindromic subsequence \n    return table[0][n-1] "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return harmonic_sum(n-1) + 1/n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n * harmonic_sum(n-1) / (n-2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(2*n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return 1 / (2 * n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 1\n    for i in range(n-1):\n        harmonic_sum = (harmonic_sum + 1) / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * n - 1"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the unique elements of array_nums1\n    unique_nums1 = set()\n\n    # Iterate through array_nums1 to add unique elements to unique_nums1\n    for num in array_nums1:\n        unique_nums1.add(num)\n\n    # Initialize an empty set to store the intersection of unique_nums1 and array_nums2\n    intersection = set()\n\n    # Iterate through array_nums2 and check if each element is in unique_nums1\n    for num in array_nums2:\n        if num in unique_nums1:\n            intersection.add(num)\n\n    # Return the intersection as a list\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection by creating a set of unique elements from both arrays\n    unique_nums = set(array_nums1).intersection(set(array_nums2))\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create a set of all the elements in the first array\n    set_nums1 = set(array_nums1)\n\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Loop through the second array and add the elements that are in the set of first array\n    for num in array_nums2:\n        if num in set_nums1:\n            common_set.add(num)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the input arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n\n    # Create a dictionary to store the frequency of each element in array_nums2\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n\n    # Find the intersection of the two dictionaries using the intersection() method\n    intersection_set = set(freq_dict1.keys()) & set(freq_dict2.keys())\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # create a list to store the intersection of the two arrays\n    intersection = []\n    \n    # iterate over the elements in array_nums2\n    for num in array_nums2:\n        # check if the number is in the dictionary\n        if num in freq and freq[num] > 0:\n            # add the number to the intersection list\n            intersection.append(num)\n            # decrement the frequency of the number in the dictionary\n            freq[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, array_nums1 and array_nums2, and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a set for array_nums1 and another set for array_nums2\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets and return it as a list\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize two empty lists to store the intersection\n    intersection = []\n    # Initialize two dictionaries to store the frequency of each number in each array\n    freq1 = {}\n    freq2 = {}\n    # Loop through the first array and update the frequency dictionary\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n    # Loop through the second array and update the frequency dictionary\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n    # Loop through the intersection of the two arrays and add to the intersection list\n    for num in freq1:\n        if num in freq2 and freq1[num] > 0 and freq2[num] > 0 and freq1[num] == freq2[num]:\n            intersection.append(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list[:-1] + [list[-1]]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element at the beginning of each element of a list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0,element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        # Convert the complex number to polar coordinates using the cmath module\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        angle = cmath.phase(number)\n        # Convert the angle from radians to degrees\n        angle = (angle * 180) / cmath.pi\n        # Print the magnitude and angle of each complex number\n        print(magnitude, angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        arg = cmath.phase(num)\n        polar_num = cmath.polar(num)\n        print(f\"Real part: {real}, Imaginary part: {imag}, Argument: {arg}, Polar form: {polar_num}\")\n\nif __name__ == \"__main__\":\n    numbers = [1+2j, 3-4j, 5+6j]\n    convert(numbers)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        polar_coord = (real**2 + imag**2)**0.5, 180*cmath.degrees(cmath.phase(num))\n        print(polar_coord)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Store the polar coordinates in a dictionary\n        d = {'r': r, 'theta': theta}\n        result.append(d)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if type(number) == complex:\n            r = abs(number)\n            theta = cmath.phase(number)\n            print(f\"The value of {number} in polar coordinates is r = {r}, theta = {theta}\")\n        else:\n            print(f\"{number} is not a complex number\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:  \n        # Extract real and imaginary parts of the complex number  \n        real = num.real  \n        imag = num.imag  \n  \n        # Calculate the modulus of the complex number  \n        modulus = cmath.sqrt(real**2 + imag**2)  \n  \n        # Calculate the angle of the complex number in degrees  \n        angle = cmath.phase(num) * 180/cmath.pi  \n  \n        # Print the result in the form 'r (theta in degrees)'  \n        print(f'{modulus} ({angle} degrees)')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # add the polar coordinates to the list\n        polar.append((r, theta))\n        \n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        polar = cmath.polar(complex(real, imag))\n        result.append(polar)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    result = []\n    for c in comb:\n        result.append(tuple(c))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combination = tuple(l[i:i+n])\n        color_combinations.append(color_combination)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    colors = ['red', 'blue', 'green']\n    result = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[j] for j in range(i, i+n))\n        if comb not in result:\n            result.append(comb)\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use itertools.combinations_with_replacement to generate all combinations with repetition\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, i+1):\n            result.append((l[0],) + j)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    \n    while num < n:\n        is_prime = True\n        \n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n        num += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p * p <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p]:\n            # Update all multiples of p\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    # count prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Check if one tuple is a subset of the other\n    for element in test_tup1:\n        if element not in test_tup2:\n            return None\n    \n    # Check if both tuples have the same elements\n    if test_tup1 == test_tup2:\n        return test_tup1\n    \n    # Check if one tuple is a permutation of the other\n    for element in test_tup2:\n        if element not in test_tup1:\n            return None\n    \n    # If all checks pass, return the larger tuple\n    return max(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    # Compare the values of the first elements of each tuple\n    max_val = max(test_tup1[0], test_tup2[0])\n    # Return the tuple with the maximum value for the first element\n    if test_tup1[0] == max_val:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples have different lengths.\"\n    \n    # Initialize a variable to store the maximum element of each tuple\n    max_elem1, max_elem2 = 0, 0\n    \n    # Loop through the elements of each tuple and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_elem1 = max(max_elem1, test_tup1[i])\n            max_elem2 = max(max_elem2, test_tup2[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_elem1 = max(max_elem1, test_tup2[i])\n            max_elem2 = max(max_elem2, test_tup1[i])\n        else:\n            continue\n    \n    # Return the tuple with the maximum elements\n    return (max_elem1, max_elem2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value1 = max(test_tup1)\n    max_value2 = max(test_tup2)\n    if max_value1 > max_value2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    max_value = max(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return (max_value, test_tup1[i])\n        elif test_tup1[i] > test_tup2[i]:\n            return (max_value, test_tup2[i])\n    return (max_value, max_value)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value for each element in the tuples\n    max_tup1 = (max(test_tup1), max(test_tup1))\n    max_tup2 = (max(test_tup2), max(test_tup2))\n\n    # Check which tuple has the maximum value for each element\n    if max_tup1[0] > max_tup2[0]:\n        return max_tup1\n    else:\n        return max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = []\n    if test_tup1[0] > test_tup2[0]:\n        max_tuple.append(test_tup1[0])\n        max_tuple.append(test_tup1[1])\n    elif test_tup1[0] < test_tup2[0]:\n        max_tuple.append(test_tup2[0])\n        max_tuple.append(test_tup2[1])\n    else:\n        max_tuple.append(test_tup1[1])\n        max_tuple.append(test_tup2[1])\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as inputs and returns a new tuple with the elements from the two input tuples\n    with the maximum value.\n    '''\n    max_value = test_tup1[0]\n    max_index = 0\n    \n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n            max_index = i\n    \n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n            max_index = i\n            \n    return (test_tup1[max_index], test_tup2[max_index])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum sum.\n    '''\n\n    # Initialize the variable to store the maximum sum\n    max_sum = 0\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n\n        # Calculate the sum of the current element and the maximum sum of the previous elements\n        current_sum = test_tup1[i] + max_sum\n\n        # Update the maximum sum\n        max_sum = current_sum\n\n    # Loop through each element of the second tuple\n    for i in range(len(test_tup2)):\n\n        # Calculate the sum of the current element and the maximum sum of the previous elements\n        current_sum = test_tup2[i] + max_sum\n\n        # Update the maximum sum\n        max_sum = current_sum\n\n    # Return the tuple with the maximum sum\n    return test_tup1 if max_sum > 0 else test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Initialize i to 2\n    i = 2\n\n    # Loop until count reaches n\n    while count < n:\n        # Initialize j to 2\n        j = 2\n\n        # Loop until j is greater than i\n        while j <= i // 2:\n            # Check if i is a factor of j\n            if i % j == 0:\n                # If i is a factor of j, break out of loop\n                break\n            else:\n                # Increment j\n                j += 1\n\n        # If j exceeds i // 2, i is a prime number and we can add it to the count\n        if j > i // 2:\n            count += 1\n\n        # Increment i\n        i += 1\n\n    # Return the count of newman-shanks-williams primes\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Starting with 2, check if the number is prime or not.\n    for i in range(2, n):\n        if n % i == 0:\n            break\n    else:\n        return n\n    \n    # If the number is not prime, check the next odd number.\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            break\n    else:\n        return i\n    \n    # If the number is not prime, check the next even number.\n    for i in range(4, n+1, 2):\n        if n % i == 0:\n            break\n    else:\n        return i\n    \n    # If the number is not prime, return None.\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    i = 0\n    prime_count = 0\n    prime_numbers = [2]\n\n    # Check if the input is valid\n    if not isinstance(n, int) or n < 1:\n        print(\"Invalid input. Please enter an integer greater than or equal to 1.\")\n        return\n\n    # Check for prime number\n    while prime_count < n:\n        i += 1\n        is_prime = True\n        if i in prime_numbers:\n            is_prime = False\n\n        # Check for newman-shanks-williams condition\n        if is_prime and i <= 1000000000:\n            is_prime = False\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = True\n                    break\n            if not is_prime:\n                prime_numbers.append(i)\n                prime_count += 1\n\n        if prime_count == n:\n            break\n\n    # Print the nth newman\u2013shanks\u2013williams prime number\n    if prime_count < n:\n        print(\"Invalid input. Please enter an integer greater than or equal to\", prime_count, \"prime numbers.\")\n        return\n    else:\n        print(\"The\", n, \"th newman\u2013shanks\u2013williams prime number is\", prime_numbers[n - 1])"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Check if n is an integer\n    if type(n)!= int:\n        print(\"n must be an integer!\")\n        return None\n\n    # Initialize variables\n    i = 1\n    prime = 1\n\n    # Iterate through all numbers up to sqrt(n)\n    while prime <= n:\n        # Check if i is a newman prime\n        if i > 1:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime += 1\n\n        i += 1\n\n    # Return nth newman prime\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    prime = 2\n    while count < n:\n        if is_prime(prime):\n            count += 1\n        prime += 1\n    return prime\n\ndef is_prime(num): \n    if num < 2: \n        return False\n    for i in range(2, int(num**0.5) + 1): \n        if num % i == 0: \n            return False\n    return True\n\nn = int(input(\"Enter the number of newman-shanks-williams primes to find: \"))\nprint(newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    num = 2\n    max_num = 2\n\n    # Loop until count reaches n\n    while count < n:\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it's prime\n        if count < n:\n            num += 1\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n\n        # If count is less than n, increment the number and check if it"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # define the function as a generator\n    def generate_primes():\n        \"\"\"\n        Generate prime numbers using the Sieve of Eratosthenes algorithm.\n        \"\"\"\n        # create a boolean array to mark prime numbers\n        is_prime = [True] * (n+1)\n        is_prime[0] = is_prime[1] = False\n        \n        # iterate over all numbers from 2 to n\n        for i in range(2, int(n**0.5)+1):\n            # if i is prime, mark all multiples of i as composite\n            if is_prime[i]:\n                for j in range(i*i, n+1, i):\n                    is_prime[j] = False\n        \n        # iterate over the remaining numbers and return the prime numbers\n        for i in range(2, n+1):\n            if is_prime[i]:\n                yield i\n    \n    # initialize the generator\n    prime_generator = generate_primes()\n    \n    # iterate over the first n newman-shanks-williams prime numbers\n    for _ in range(n):\n        prime = next(prime_generator)\n        yield prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Set up the list of prime numbers up to the square root of n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Use the Sieve of Eratosthenes algorithm to find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n):\n        if primes[-1] * primes[-1] > n:\n            break\n        primes = [x for x in primes if x % primes[-1]!= 0]\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the list of primes up to 20000\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n\n    # Find the nth newman-shanks-williams prime\n    nth_newman_prime = primes[n-1]\n\n    return nth_newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Find the nth newman prime number\n    i = 1\n    while True:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            n_prime = i\n            break\n        i += 1\n\n    return n_prime"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of both tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of tuples must be same\")\n        return\n\n    # Perform element-wise division operation on tuples\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero\")\n            return\n\n    # Return the result\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Lengths of the tuples are not equal.\")\n        return\n    \n    # Perform element-wise division operation\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (None,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            result_tup = []\n            for i in range(len(test_tup1)):\n                result_tup.append(test_tup1[i] / test_tup2[i])\n            return result_tup\n        else:\n            raise ValueError(\"Length of the two tuples should be same\")\n    except TypeError:\n        raise TypeError(\"Both tuples should be of the same type\")"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the number of elements in both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in both tuples are not equal\"\n\n    # Perform element-wise division of the tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]\n        result_tup.append(result)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 and test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the number of elements in the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the input tuples are not equal\")\n        return None\n    # Perform element-wise division operation\n    result_tup = tuple([elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of two tuples must be equal.\")\n    else:\n        result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n        return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    mid = n//2\n    left_part = list1[:mid]\n    right_part = list1[mid:]\n    return (left_part, right_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use slicing to split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the resulting lists in a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the length of the list is greater than L\n    if len(lst) > L:\n        # calculate the number of times L needs to be divided\n        n = len(lst) // L\n        # calculate the length of the first part of the list\n        L1 = L * n\n        # create the first part of the list\n        lst1 = lst[:L1]\n        # create the second part of the list\n        lst2 = lst[L1:]\n        # return the two parts of the list in a tuple\n        return (lst1, lst2)\n    # if the length of the list is less than or equal to L, return the original list\n    else:\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes a list and an integer L and splits the list into two parts such that the length of the first part is L.\n    '''\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"L should be less than or equal to the length of the list\")\n    mid = n // 2\n    return list1[:mid], list1[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        return \"L should be a positive integer\"\n    \n    # check if the length of list1 is greater than L\n    if len(list1) <= L:\n        return \"The length of list1 should be greater than L\"\n    \n    # split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a list to store the first part of the list\n    part1 = []\n    # Create a list to store the second part of the list\n    part2 = []\n    # Iterate over the input list\n    for i in range(len(list1)):\n        # If the length of the current element is equal to L, append it to the first part list\n        if len(str(list1[i])) == L:\n            part1.append(list1[i])\n        # If the length of the current element is greater than L, append it to both part lists\n        else:\n            part1.append(list1[i])\n            part2.append(list1[i])\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the first part of the list is L or greater than L\n    if len(list1) >= L:\n        # Split the list into two parts using slicing\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts in a tuple\n        return (part1, part2)\n    else:\n        # If the length of the first part of the list is less than L, return the original list as a tuple\n        return (list1,)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # convert hours to days\n    days = h_age / 24\n    # calculate dog's years\n    dog_years = days / 7\n    # return the dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    dog_age = years / 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years based on the height provided.\n    '''\n    if h_age <= 3:\n        return h_age * 7\n    elif h_age >= 4 and h_age <= 6:\n        return h_age * 6\n    elif h_age >= 7 and h_age <= 9:\n        return h_age * 5\n    elif h_age >= 10 and h_age <= 12:\n        return h_age * 4\n    elif h_age >= 13 and h_age <= 15:\n        return h_age * 3\n    elif h_age >= 16 and h_age <= 18:\n        return h_age * 2\n    else:\n        return h_age * 1"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter the dog's birth date (format: mm/dd/yyyy): \")\n    dob_list = dob.split(\"/\")\n    dob_date = int(dob_list[2])\n    dob_month = int(dob_list[0])\n    dob_year = int(dob_list[1])\n    current_year = 2021\n    current_month = 12\n    current_day = 31\n    current_date = current_month + \"/\" + str(current_day) + \"/\" + str(current_year)\n\n    age = current_year - dob_year\n    if dob_month > current_month:\n        age -= 1\n    elif dob_month == current_month and dob_date > current_day:\n        age -= 1\n    \n    if dob_date < current_day:\n        age -= 1\n    \n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in years using the formula: age_in_years = h_age / 7\n    age_in_years = h_age / 7\n    # Return the calculated age in years\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog years\n    dog_age_years = h_age * 7\n    # Print the dog's age in dog years\n    print(\"The dog is {} years old.\".format(dog_age_years))"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate dog's age in dog's years\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(len(S)):\n        if i % n == 0:\n            result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    # calculate number of parts to create\n    parts = n // step\n    # create empty list to hold parts\n    result = []\n    # iterate through input list, splitting into parts of size step\n    for i in range(0, n, step):\n        # create a new part of length step\n        part = S[i:i+step]\n        # append the part to the result list\n        result.append(part)\n    # return the result list of parts\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        split_list.append(sublist)\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Calculate the number of lists to be created\n    num_lists = len(S) // step\n\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Loop through each nth element of the list\n    for i in range(0, len(S), step):\n        # Append the current element to the current list\n        result.append(S[i])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    L = []\n    for i in range(0, len(S), n):\n        L.append(S[i:i+n])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Cube surface area is 6 times the volume\n    volume = l**3\n    surface_area = 6*volume\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    lateral_area = (6 * l * l) + (12 * l) + (8 * l * l)\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculating the lateral surface area of the cube\n    area = 6 * l * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralSurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * (l**2))"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = (6 * l ** 2) + (12 * l) + (8 * l)\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    i = 1\n    while i <= n:\n        total += i**2\n        i += 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i ** 2\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n % 2 == 0:\n        return None\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i * i\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    \n    while count < n:\n        total += count*count\n        count += 2\n        \n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initialize the sum variable to 0\n    total_sum = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the total sum\n        total_sum += i*i\n\n    # return the total sum of squares\n    return total_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum_of_squares = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of each odd number to the sum\n        sum_of_squares += i*i\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initializing a variable to store the sum of squares of odd numbers\n    square_sum = 0\n\n    # Looping through the odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        square_sum += i**2\n\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum of squares to zero\n    sum_of_squares = 0\n    # iterate from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if the number is odd (using the modulo operator to check for evenness)\n        if i % 2!= 0:\n            # add the square of the number to the sum of squares\n            sum_of_squares += i*i\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input: n must be greater than or equal to 1\"\n    if n == 1:\n        return \"1\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if count == n:\n            return i\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function calculates the nth star number.\n\n    Args:\n        n (int): The nth star number to find.\n\n    Returns:\n        int: The nth star number.\n    \"\"\"\n    star_num = 1\n    for i in range(1, n+1):\n        star_num = star_num * i\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n+1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Calculate the number of rows and columns in the pyramid\n    rows = n // 2 + 1\n    cols = 2 * n - 1\n    # Initialize a list to store the star numbers\n    star_nums = []\n    # Loop through the pyramid\n    for i in range(rows):\n        # Loop through each row of the pyramid\n        for j in range(cols):\n            # Check if the current position is a star\n            if i == 0 and j == 0 or i == 0 and cols - j == 1 or rows - i == 1 and j == 0:\n                # Append the current star number to the list\n                star_nums.append(i * (cols - j))\n    # Return the nth star number in the list\n    return star_nums[n - 1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += 2*i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the counter variable\n    count = 1\n    # Initialize the result variable\n    result = \"\"\n    \n    # Loop until we have n star numbers\n    while count <= n:\n        # Add a star to the result\n        result += \"*\"\n        # Increment the counter\n        count += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    elif n == 3:\n        return \"***\"\n    else:\n        result = \"\"\n        for i in range(1, n + 1):\n            result += \"*\" * i\n        return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the character to a string\n    k = str(k)\n    # find the ascii value of the first character\n    ascii_val = ord(k[0])\n    # return the ascii value\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return ascii_value(k[0]) + ascii_value(k[1:])"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even_index += arr[i]\n\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):  \n        even_sum += arr[i]  \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return even_sum / count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n    \n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even_at_even_index += arr[i]\n            \n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                print(\"Sum of even numbers at even positions is:\", even_sum)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the raised to the fifth power of the number i\n        power = i ** 5\n        # If the result is even, add it to the sum\n        if power % 2 == 0:\n            sum += power\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(1, n+1):\n        sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_even_powers += i**5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i**5 % 2 == 0:\n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize a variable to store the sum of even numbers raised to the fifth power\n    sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # Calculate the sum of the i-th even number raised to the fifth power\n        sum += i**5\n    \n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # create an empty list to hold the rear elements\n    rear_elements = []\n    # loop through the input list of tuples\n    for i in range(len(test_list)):\n        # extract the rear element from the tuple and append it to the rear_elements list\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for i in test_list:\n        if len(i) > 1:\n            result_list.append(i[-1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two input tuples must have the same length.\"\n    else:\n        # create a new tuple to store the result\n        result_tup = ()\n        # iterate through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index, value1 in enumerate(test_tup1):\n        if index in test_tup2:\n            test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # iterate through all even numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # find the binomial coefficient\n        coeff = math.comb(n, i)\n\n        # if coefficient is even, add it to the sum\n        if coeff % 2 == 0:\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n\n    The even index binomial coefficients are defined as:\n\n    B(n, k) = n! / (k! * (n-k)!)\n\n    The function calculates the sum of even index binomial coefficients using the formula:\n\n    sum(B(n, i) for i in [0, 2,..., 2n])\n\n    The function uses the math.factorial() function to calculate the factorial of n and k.\n    \"\"\"\n    total_sum = 0\n    n_factorial = math.factorial(n)\n\n    for i in range(2, 2*n+1, 2):\n        k_factorial = math.factorial(i)\n        total_sum += n_factorial / (k_factorial * (n_factorial - k_factorial))\n\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += math.factorial(n) // (math.factorial(i-1) * math.factorial(n-i))\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Function to calculate even index binomial coefficients\n    def even_index_binomial_coeff(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n    # Initialize variables\n    coeff_sum = 0\n\n    # Calculate sum of even index binomial coefficients\n    for i in range(2, n+1, 2):\n        coeff_sum += even_index_binomial_coeff(n, i)\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Calculate the first even index binomial coefficient\n    first_coeff = (math.factorial(2*n-1)//(math.factorial(n-1)*math.factorial(2*n-2)))\n\n    # Add the first even index binomial coefficient to the sum\n    sum += first_coeff\n\n    # Loop through odd indices from 1 to n-1\n    for i in range(1, n//2+1):\n        # Calculate the current even index binomial coefficient\n        current_coeff = (math.factorial(2*i-1)//(math.factorial(i-1)*math.factorial(2*n-2-2*i)))\n\n        # Add the current even index binomial coefficient to the sum\n        sum += current_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return \"Error: n must be a positive integer\"\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            term = math.comb(n, i-1)\n            if i % 2 == 0:\n                sum += term\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total_sum = 0\n    for i in range(2, n+1):\n        even_index = 2*i-1\n        coeff = math.comb(n, even_index)\n        if even_index % 2 == 0:\n            total_sum += coeff\n\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum variable to 0\n    sum_even_binomial_coeff = 0\n    \n    # Check if n is even\n    if n % 2 == 0:\n        # If n is even, initialize even_index to 0\n        even_index = 0\n        \n        # Iterate from 0 to n/2\n        for i in range(0, n//2):\n            # Calculate the binomial coefficient using math.comb() function\n            binomial_coeff = math.comb(n, even_index)\n            \n            # Check if binomial_coeff is even\n            if binomial_coeff % 2 == 0:\n                # If binomial_coeff is even, add to sum_even_binomial_coeff\n                sum_even_binomial_coeff += binomial_coeff\n                \n            # Increment even_index\n            even_index += 1\n            \n    # Return sum_even_binomial_coeff\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return 0\n    else:\n        even_sum = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                even_sum += math.comb(n, i)\n        return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (3.14/4)*r**2*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r ** 2 * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*3.14159*r**2*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    vol = 3.14 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            if count == i:\n                return count\n        else:\n            return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_sum = 0\n    for i in range(1, n+1):\n        dec_sum += (i * i + i)\n    return dec_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the first and second row of the decagonal number\n    row1 = [1]\n    row2 = [1, 1]\n\n    # Initialize the count of decagonal numbers found so far\n    count = 0\n\n    # Loop through the rows\n    for i in range(2, n+1):\n        # Add the previous row to the next row\n        row3 = [1]\n        for j in range(1, len(row2)-1):\n            row3.append(row2[j-1] + row2[j])\n        row3.append(1)\n\n        # Update the count of decagonal numbers found so far\n        count += len(row3)\n\n        # Update the row for the next iteration\n        row1 = row2\n        row2 = row3\n\n    # Check if the nth decagonal number is found\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a += 2*i*a - 1\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 22\n    elif n == 4:\n        return 35\n    elif n == 5:\n        return 51\n    elif n == 6:\n        return 70\n    elif n == 7:\n        return 92\n    elif n == 8:\n        return 117\n    elif n == 9:\n        return 145\n    elif n == 10:\n        return 176\n    else:\n        return -1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num += (10**(i-1))\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((10 * n + 1) * (10 * n + 1) // 2)\n\nn = int(input(\"Enter a number: \"))\nresult = is_num_decagonal(n)\nprint(\"The\", n, \"th decagonal number is:\", result)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the decagonal number counter\n    counter = 1\n    # Initialize the decagonal number\n    decagonal = 1\n    # Loop through the decagonal numbers\n    while counter <= n:\n        # Add the current decagonal number to the total number of decagonal numbers\n        total = total + counter\n        # Increment the counter\n        counter = counter + 2\n    # Check if the total number of decagonal numbers is equal to n\n    if total == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize a counter variable\n    count = 1\n\n    # Loop through each digit of the input number\n    for digit in str(n):\n        # Check if the digit is odd\n        if int(digit) % 2 == 1:\n            # If it is, increment the count\n            count += 1\n\n        # If the count is greater than n, return False\n        if count > n:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Using the set() function to remove duplicate elements from the list\n    unique_set = set(test_list)\n    # Checking if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store the unique elements\n    unique_set = set()\n    # Loop through each element in the list\n    for element in test_list:\n        # If the element is already in the set, return False\n        if element in unique_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n    # If all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return len(unique_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate through the list\n    for element in test_list:\n        # add the element to the set if it is not already present\n        if element not in unique_set:\n            unique_set.add(element)\n        # if an element is already present in the set, return False\n        else:\n            return False\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the list and add unique elements to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n            \n    # Check if the set is empty\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtracts the elements of the two lists element-wise and returns the result.\n    '''\n    result = []\n    for i in range(min(len(nums1), len(nums2))):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    \n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check the lengths of the lists\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    # Subtract the elements of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of both lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    # subtract each element of the lists\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their subtraction of elements element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise and return a new list.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    # Create an empty list to store the difference\n    diff_list = []\n    \n    # Iterate through the two lists\n    for i in range(len(nums1)):\n        # Subtract the elements element-wise\n        diff = nums1[i] - nums2[i]\n        # Append the result to the difference list\n        diff_list.append(diff)\n    \n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists have different lengths.\")\n        return None\n    else:\n        for i in range(len(nums1)):\n            nums1[i] -= nums2[i]\n        return nums1"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    for d in freq:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Dictionary to store the frequency of each digit in the number\n    freq = {}\n    # Loop through each digit in the number\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its count by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            freq[digit] = 1\n    # Loop through each digit in the number again and check if the frequency of the digit is greater than or equal to the digit itself\n    for digit in str(n):\n        # If the frequency of the digit is greater than or equal to the digit itself, return True\n        if freq[digit] >= int(digit):\n            return True\n    # If no digits in the number pass the validation, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Split the integer into its individual digits\n    digits = [int(d) for d in str(n)]\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through the digits and update the frequency in the dictionary\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n\n    # Iterate through the digits and check whether the frequency is greater than or equal to the digit\n    for d in digits:\n        if freq[d] < d:\n            return False\n\n    # If the loop completes without returning False, then the integer passes the validation\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit not in freq:\n            freq[digit] = 0\n        freq[digit] += 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > freq[digit]:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check the frequency of each digit\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # If all digits have a frequency less than or equal to themselves, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate over each digit and update the dictionary\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Iterate over each digit and check whether the frequency is greater than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] < digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit\n    freq_dict = {}\n\n    # Convert the integer to a string and iterate over the characters\n    for char in str(n):\n        # If the character is not in the dictionary, add it with a frequency of 1\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[char] += 1\n\n    # Iterate over the frequency dictionary to check whether the frequency of each digit is less than or equal to the digit itself\n    for key in freq_dict:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if freq_dict[key] > key:\n            return False\n\n    # If all digits have a frequency of 1 or less, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Define a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its value\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a value of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate through the dictionary and check if the frequency of each digit is less than or equal to itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit_freq[digit]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # check if all items in the list are equal to the element\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n    else:\n        return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if all items in the list are equal to the given element\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if all items in the list are equal to the given element\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?<=a)(b){2,3}')\n    match = pattern.search(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b{2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a(b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    result = pattern.search(text)\n\n    if result:\n        print(\"The string contains the pattern\")\n    else:\n        print(\"The string does not contain the pattern\")\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return None\n    else:\n        # Find the maximum sum of a contiguous array of size k from the given array\n        max_sum_k = max(a[i:i+k] for i in range(n-k+1))\n        \n        # Find the maximum sum of a contiguous array of size k from the modified array formed by repeating the given array k times\n        max_sum_k_repeated = sum(a) - max_sum_k + k*max_sum_k\n        \n        # Return the maximum of the two values\n        return max(max_sum_k_repeated, max_sum_k)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Compute the sum of the original array\n    sum_original = sum(a)\n\n    # Initialize the sum of the modified array with only the first element\n    sum_modified = a[0]\n\n    # Initialize the maximum sum of the modified array\n    max_sum_modified = a[0]\n\n    # Loop through the modified array\n    for i in range(1, n):\n        # Compute the sum of the modified array and check if it's greater than the current maximum sum\n        sum_modified = sum_modified + a[i] - a[i - 1]\n        if sum_modified > max_sum_modified:\n            max_sum_modified = sum_modified\n\n        # Check if the sum of the modified array exceeds the original array\n        if sum_modified > sum_original:\n            break\n\n        # Check if the modified array has more than k repeated elements\n        if i > k:\n            # Update the sum of the modified array with the next element\n            sum_modified = a[i]\n\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Find the sum of the original array\n    original_sum = sum(a)\n\n    # Find the sum of k copies of the original array\n    k_original_sum = k * original_sum\n\n    # Create an array of k+1 integers where the first integer is the sum of the original array\n    k_plus_one_array = [original_sum]\n\n    # Iterate through the array and find the sum of k+1 integers\n    for i in range(1, n):\n        k_plus_one_array.append(k_plus_one_array[i-1] + a[i])\n\n    # Find the maximum sum of the modified array\n    max_sum = max(k_plus_one_array)\n\n    # Find the minimum sum of the modified array\n    min_sum = min(k_plus_one_array)\n\n    # Find the sum of the k+1 integers that are part of the maximum sum of the modified array\n    max_sum_part = max_sum - k_plus_one_array[max_sum.index(max_sum)]\n\n    # Find the sum of the k+1 integers that are part of the minimum sum of the modified array\n    min_sum_part = min_sum - k_plus_one_array[min_sum.index(min_sum)]\n\n    # Return the maximum sum of the modified array that is formed by repeating the given array k times\n    return max_sum - max_sum_part + min_sum_part"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array by repeating the given array k times\n    modified_array = [a] * k\n    \n    # Initialize the maximum sum to be the sum of the first k elements of the original array\n    max_sum = sum(a[:k])\n    \n    # Loop through the modified array and find the maximum sum\n    for i in range(1, k):\n        # Calculate the sum of the current i+1 elements of the modified array\n        current_sum = modified_array[i] + sum(modified_array[i-1:i])\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a contiguous array in the given array\n    max_sum = max(a)\n    # Initialize the largest sum of a contiguous array in the modified array\n    modified_max_sum = 0\n    # Initialize the number of times the array has been repeated\n    repeated_count = 0\n    # Initialize the current sum of the modified array\n    current_sum = 0\n    # Loop through the array and find the maximum sum of a contiguous array in the modified array\n    for i in range(n):\n        current_sum += a[i]\n        # If the current sum becomes greater than the maximum sum of a contiguous array in the modified array, update both the maximum sum and the modified maximum sum\n        if current_sum > modified_max_sum:\n            modified_max_sum = current_sum\n        # If the current sum becomes equal to the maximum sum of a contiguous array in the modified array, increment the repeated count\n        if current_sum == modified_max_sum:\n            repeated_count += 1\n        # If the current sum becomes greater than the sum of the current element and the repeated element in the modified array, update both the maximum sum and the modified maximum sum\n        if current_sum > a[i] + modified_max_sum:\n            modified_max_sum = a[i] + modified_max_sum\n            repeated_count = 1\n        # If the current sum becomes greater than the sum of the current element and the repeated element in the modified array, but the repeated element is not the current element, increment the repeated count\n        if current_sum > a[i] + modified_max_sum and current_sum < modified_max_sum:\n            repeated_count += 1\n    # Return the maximum sum of a contiguous array in the modified array and the number of times the array has been repeated\n    return modified_max_sum, repeated_count"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    total_sum = sum(a)\n\n    # Calculate the sum of the first k elements in the original array\n    first_sum = sum(a[:k])\n\n    # Initialize the maximum sum to the sum of the first k elements\n    max_sum = first_sum\n\n    # Find the sum of the first k elements after repeating the array k times\n    second_sum = (first_sum * k) - first_sum\n\n    # Compare the sum of the first k elements after repeating with the maximum sum found so far\n    if second_sum > max_sum:\n        max_sum = second_sum\n\n    # Calculate the sum of the first k elements after repeating the array k+1 times\n    third_sum = (first_sum * (k+1)) - first_sum\n\n    # Compare the sum of the first k elements after repeating with the maximum sum found so far\n    if third_sum > max_sum:\n        max_sum = third_sum\n\n    # Calculate the sum of the first k elements after repeating the array k+2 times\n    fourth_sum = (first_sum * (k+2)) - first_sum\n\n    # Compare the sum of the first k elements after repeating with the maximum sum found so far\n    if fourth_sum > max_sum:\n        max_sum = fourth_sum\n\n    # Calculate the sum of the first k elements after repeating the array k+3 times\n    fifth_sum = (first_sum * (k+3)) - first_sum\n\n    # Compare the sum of the first k elements after repeating with the maximum sum found so far\n    if fifth_sum > max_sum:\n        max_sum = fifth_sum\n\n    # Calculate the sum of the first k elements after repeating the array k+4 times\n    sixth_sum = (first_sum * (k+4)) - first_sum\n\n    # Compare the sum of the first k elements after repeating with the maximum sum found so far\n    if sixth_sum > max_sum:\n        max_sum = sixth_sum\n\n    # Calculate the sum of the first k elements after repeating the array k+5 times\n    seventh_sum = (first_sum * (k+5)) - first_sum\n\n    # Compare the sum of the first k elements after repeating with the maximum sum found so far\n    if seventh_sum > max_sum:\n        max_sum = seventh_sum\n\n    # Return the maximum sum found\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    modified_array = []\n\n    # Add the first element of the array to the modified array\n    modified_array.append(a[0])\n\n    # Loop through the array\n    for i in range(1, n):\n        # Add the current element to the modified array\n        modified_array.append(a[i])\n\n        # Check if the sum of the modified array is greater than the current maximum sum\n        if temp_sum < 0:\n            temp_sum = modified_array[-1]\n        elif temp_sum > 0:\n            temp_sum = modified_array[-1] + modified_array[-k]\n\n        # Update the maximum sum if necessary\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n        # Remove the first element of the modified array\n        modified_array.pop(0)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Step 1: Create a modified array by repeating the given array k times\n    modified_array = [a[i] for i in range(n)] * k\n    \n    # Step 2: Calculate the maximum sum of a contiguous array in the given array\n    max_sum_given_array = max(a)\n    \n    # Step 3: Calculate the maximum sum of a contiguous array in the modified array\n    max_sum_modified_array = max(modified_array)\n    \n    # Step 4: Return the larger sum\n    return max_sum_given_array if max_sum_given_array > max_sum_modified_array else max_sum_modified_array"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Find the maximum subarray sum\n    max_sum = max(a)\n    curr_sum = max_sum\n\n    # Initialize the repeated array\n    repeated_array = [0] * k\n    repeated_array[0] = a[0]\n\n    # Iterate through the remaining elements of the array\n    for i in range(1, n):\n        # Update the current sum\n        curr_sum = max(a[i], curr_sum + a[i])\n\n        # Update the repeated array\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            repeated_array[0] = a[i]\n            for j in range(1, k):\n                repeated_array[j] = repeated_array[j-1] + a[i]\n\n    # Print the maximum subarray sum\n    print(\"Maximum subarray sum of the original array:\", max_sum)\n\n    # Print the repeated array\n    print(\"Repeated array:\", repeated_array)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the result\n    max_sum = float('-inf')\n\n    # Loop through all possible positions of k repeated elements\n    for i in range(k, n):\n        # Find the subarray sum of the first k elements\n        subarray_sum = sum(a[:i])\n\n        # Find the subarray sum of the k+1th to n-1th elements\n        subarray_sum_2 = sum(a[i:])\n\n        # Calculate the maximum subarray sum by taking the maximum of the two subarray sums\n        max_sum = max(max_sum, max(subarray_sum, subarray_sum_2))\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # initialize sum variable to 0\n    sum_of_squares = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the even number to the sum\n        sum_of_squares += i*i\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer `n` and returns the sum of squares of first `n` even natural numbers.\n    \"\"\"\n    even_numbers = []\n    # generate first n even numbers\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    # calculate sum of squares of even numbers\n    square_sum = sum([x**2 for x in even_numbers])\n    return square_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist[0] < max_lengths[0]):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n\n    # Iterate over each element in the list\n    for element in list1:\n        # Find the length of the element\n        length = len(element)\n\n        # Check if the length is greater than the current maximum\n        if length > max(max_lengths):\n            # If it is, add it to the list of maximum lengths\n            max_lengths = [length]\n        elif length == max(max_lengths):\n            # If it is equal to the maximum, add it to the list of lengths\n            max_lengths.append(length)\n\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for item in list1:\n        if len(max_length_list) == 0:\n            max_length_list.append(len(item))\n        else:\n            if len(item) > max_length_list[-1]:\n                max_length_list[-1] = len(item)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(max(len(j) for j in list1[i]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables\n    max_list = []\n    max_length = 0\n\n    # loop through each list in the list1\n    for i in list1:\n        # check if the current length of the list is greater than the maximum length\n        if len(i) > max_length:\n            # update the maximum length and list\n            max_length = len(i)\n            max_list = i\n\n    # return the maximum length and list\n    return max_length, max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists and returns the list of maximum length in the list of lists.\n    \"\"\"\n    # Initialize the variable to store the maximum length\n    max_length_list = []\n\n    # Iterate over each sublist in the list of lists\n    for sublist in list1:\n        # Check if the length of the current sublist is greater than the length of the previous maximum length\n        if len(sublist) > len(max_length_list):\n            # If yes, update the maximum length list with the current sublist\n            max_length_list = sublist\n\n    # Return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize variables to store the maximum length and the list of lists\n    max_len = 0\n    max_list = []\n\n    # Iterate through each list in the list of lists\n    for lst in list1:\n        # Update the maximum length if the current list has a greater length\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        # If the current list has the same length as the maximum, append it to the list of lists\n        elif len(lst) == max_len:\n            max_list.append(lst)\n\n    # Return the list of lists with the maximum length\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initializing a 2D array to store the number of ways of painting the fence with n posts and k colors.\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    # Base cases:\n    # If there is only one post left, it will be colored with any color.\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    \n    # If there are no colors left, there will be 0 ways to paint the fence.\n    for i in range(1, k+1):\n        dp[1][i] = 0\n\n    # Filling the array using dynamic programming.\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # If adjacent posts have different colors, we can paint them in any combination.\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n            \n            # If adjacent posts have the same color, we cannot paint them in any combination.\n            if i > 1 and j > 1 and dp[i-1][j] == dp[i-2][j-2]:\n                dp[i][j] = 0\n    \n    # Returning the final value in the array.\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    # base case: if k is 0, there is only one way to paint the fence\n    if k == 0: \n        return 1\n    \n    # base case: if n is 0, there is only one way to paint the fence\n    if n == 0: \n        return 0\n    \n    # recursive case: count the number of ways to paint the fence with n-2 posts and k colors\n    # and with the same color as the last post of the previous fence\n    ways_to_paint_1 = count_no_of_ways(n-1, k)\n    ways_to_paint_2 = count_no_of_ways(n-2, k-1)\n    \n    # return the sum of the two subproblems\n    return ways_to_paint_1 + ways_to_paint_2"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Args:\n        n (int): Number of posts in the fence.\n        k (int): Number of colors in the fence.\n\n    Returns:\n        int: Number of ways of painting the fence.\n    \"\"\"\n    # Initialize an array to store the count of ways for each color\n    color_count = [0] * k\n    # Base case: if there is only one color, there is only one way\n    if k == 1:\n        return 1\n    # Initialize the count of ways for the first color\n    color_count[0] = 1\n    # Iterate over the remaining colors\n    for color in range(1, k):\n        # For each color, consider all the possibilities for the previous color\n        for previous_color in range(color_count[color - 1]):\n            # For each possibility, add the possibility for the current color\n            color_count[color] += color_count[previous_color]\n    # Finally, return the count of ways for the last color\n    return color_count[k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    # Create a boolean matrix to store whether each post has been painted with a color\n    painted = [[False] * k for _ in range(n)]\n    # Initialize the count of ways to 1\n    count = 1\n    # Loop through each post\n    for i in range(n):\n        # Check if the post has been painted with a color\n        if not painted[i][0]:\n            # Mark the post as painted with the first color\n            painted[i][0] = True\n            # Increment the count of ways\n            count += count_no_of_ways(n-1, k)\n    # Return the count of ways\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize variables to keep track of the number of ways and the current color of adjacent posts\n    ways = 0\n    color = 0\n\n    # Check if the first post has the same color as the second post\n    if n % 2 == 0:\n        if n > k:\n            # If n is even and n > k, check if the first post has the same color as the first post after k posts\n            if color == 0:\n                ways += count_no_of_ways(n, k + 1)\n        else:\n            # If n is even and n <= k, the first post has the same color as the second post\n            ways += 1\n\n    # Loop through the remaining posts\n    for i in range(1, n // 2 + 1):\n        # Check if the current post has the same color as the previous two posts\n        if n % 2 == 0:\n            if i % 2 == 0:\n                # If i is even, the current post has the same color as the previous two posts\n                if color == 0:\n                    ways += count_no_of_ways(n - 1, k + 1)\n            else:\n                # If i is odd, the current post has the same color as the previous two posts\n                ways += count_no_of_ways(n - 1, k + 1)\n        else:\n            # If n is odd, the current post has the same color as the previous two posts\n            ways += count_no_of_ways(n - 1, k + 1)\n\n    # Return the final number of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a boolean list to represent whether each post has been painted or not\n    painted = [False] * n\n    # Initialize a counter for the number of ways of painting the fence\n    count = 0\n\n    # Find all possible combinations of colors that can be used for the first post\n    color_combinations = list(combinations(range(k), 2))\n\n    # Iterate over all possible combinations of colors for the first post\n    for i, color in enumerate(color_combinations):\n        # Mark all adjacent posts as painted\n        painted[i] = True\n\n        # Check if there are more than 2 adjacent posts that have the same color as the first post\n        if not any(color[0] == color[1] or painted[j] for j in range(i + 1, n)):\n            # If there are no more than 2 adjacent posts that have the same color as the first post, increment the count\n            count += 1\n\n        # Unmark all adjacent posts as painted\n        painted[i] = False\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def paint_post(post, color):\n        if post < n:\n            return paint_post(post + 1, color)\n        else:\n            return [color]\n\n    def count_adj_same_colors(colors):\n        count = 0\n        for i in range(len(colors) - 1):\n            if colors[i] == colors[i+1]:\n                count += 1\n        return count\n\n    def count_adj_colors(colors):\n        count = 0\n        for i in range(len(colors) - 1):\n            count += 1\n        return count\n\n    def count_adj_colors_and_same_colors(colors):\n        count = 0\n        for i in range(len(colors) - 2):\n            if colors[i] == colors[i+2]:\n                count += 1\n        return count\n\n    def count_ways(n, k):\n        if n == 0:\n            return 1\n        elif k == 0:\n            return 0\n        elif n == 1:\n            if k == 1:\n                return 1\n            else:\n                return 0\n        elif k == 1:\n            return 1\n        else:\n            ways = 0\n            for color in range(1, k + 1):\n                if color <= n:\n                    ways += count_ways(n - color, k - 1)\n            return ways\n\n    colors = []\n    for color in range(1, k + 1):\n        colors += paint_post(0, color)\n    ways = 0\n    if count_adj_colors(colors) <= 2:\n        ways += count_ways(n, k)\n    if count_adj_colors_and_same_colors(colors) <= 2:\n        ways += count_ways(n, k)\n    if count_adj_same_colors(colors) <= 2:\n        ways += count_ways(n, k)\n    return ways\n\nn = 6\nk = 4\nprint(count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    # Check if the fence has less than 3 posts\n    if n < 3:\n        return 0\n    \n    # Create a list of lists to store the count of ways for each possible arrangement of colors\n    color_count = [[0] * k for _ in range(n+1)]\n    \n    # Initialize the first row of the list to 1\n    for i in range(1, k+1):\n        color_count[0][i-1] = 1\n    \n    # Calculate the count of ways for each possible arrangement of colors for the remaining posts\n    for i in range(1, n+1):\n        for j in range(k):\n            # If the previous post has the same color, add the count of ways of painting the fence with one less post and the previous color to the current count\n            if j > 0 and color_count[i-1][j-1] == 1:\n                color_count[i][j] += color_count[i-1][j]\n            \n            # If the previous post has a different color, add the count of ways of painting the fence with one less post and the previous color to the current count and the count of ways of painting the fence with one more post and the same color to the next row\n            color_count[i][j] += color_count[i-1][j] + color_count[i][j]\n    \n    # Return the count of ways of painting the fence with n posts and k colors\n    return color_count[n][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways of painting the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column with 1\n    ways[0][0] = 1\n    ways[0][1] = 0\n\n    # Fill the rest of the array\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                ways[i][j] = ways[i][j - 1]\n            elif j == 1:\n                ways[i][j] = ways[i - 1][j]\n            else:\n                ways[i][j] = ways[i - 1][j] + ways[i][j - 1]\n\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case for the recursion\n    if n == 0 or k == 0:\n        return 1\n    # recursive case for the recursion\n    if n < k:\n        return count_no_of_ways(n, k-1)\n    else:\n        return count_no_of_ways(n-1, k)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two integers as input and returns the quotient of those integers rounded down to the nearest integer.\n    \"\"\"\n    # Perform integer division and return the result\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n // m\n    \n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as inputs and returns the quotient of the two numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find(n, m):\n    return math.floor(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes in two integers n and m and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the area of the triangle\n    area = 0.5 * w * h\n\n    # Calculate the semi-perimeter of the triangle\n    s = math.sqrt(3) * w / 2\n\n    # Calculate the semi-perimeter of the other side\n    s_other = math.sqrt(3) * h / 2\n\n    # Calculate the other side of the triangle\n    h_other = (area ** 2 - (w / 2) ** 2) ** 0.5\n\n    # Return the third side of the triangle\n    return h_other"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the semi-perimeter\n    sp = (w + h) / 2\n    \n    # Calculate the third side\n    third_side = math.sqrt(sp ** 2 - w ** 2)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        a = w\n        b = h\n    else:\n        a = h\n        b = w\n    c = math.sqrt(a**2 + b**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s * (w + h) - w ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s ** 2 - w ** 2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # initialize variables to store maximum value and type of the list\n    max_val = None\n    max_type = None\n    # loop through the list and compare each element to the current maximum value\n    for item in listval:\n        # check if current item is of a different type from the previous maximum value\n        if type(item)!= max_type:\n            # if it is, update the maximum value and type\n            max_val = item\n            max_type = type(item)\n        # if the item is of the same type as the previous maximum value, compare their values\n        elif item > max_val:\n            # if the item is greater, update the maximum value\n            max_val = item\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first value in the list\n    max_val = listval[0]\n    # Loop through the remaining values in the list\n    for i in range(1, len(listval)):\n        # If the current value is greater than max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = float('-inf')\n    for item in listval:\n        if type(item) == float:\n            if item > max_num:\n                max_num = item\n        elif type(item) == int:\n            if item > max_num:\n                max_num = item\n        elif type(item) == str:\n            if len(item) > len(str(max_num)):\n                max_num = item\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value in it.\n    '''\n    # convert the list to a set to remove duplicates and sort the set to get the maximum value\n    return max(set(lst))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array in ascending order \n    arr.sort()\n    \n    # Initialize count variable to 0 \n    count = 0\n    \n    # Iterate through the array \n    for i in range(len(arr)): \n        \n        # Initialize left and right pointers \n        left = 0\n        right = i\n        \n        # Calculate the mid point of the current subarray \n        mid = (left + right) // 2\n        \n        # Count inversions in the subarray before mid \n        count += merge_sort(arr[:mid])\n        \n        # Count inversions in the subarray after mid \n        count += merge_sort(arr[mid:])\n        \n        # Count the inversions in the current subarray \n        inv_count = merge_sort(arr[left:right+1])\n        \n        # Add the inversions count of the current subarray to the total count \n        count += inv_count\n        \n        # Print the final count \n        print(\"Count inversions of the subarray:\", arr[left:right+1])\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the inversion count\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array and count inversions\n    while left < right:\n        # If the left and right elements are swapped\n        if arr[left] > arr[right]:\n            # Count an inversion\n            count += right - left + 1\n            # Move the left pointer to the right\n            left += 1\n        else:\n            # Move the right pointer to the left\n            right -= 1\n\n    # Return the inversion count\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse the array and count the inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves recursively\n    for i in range(n // 2):\n        left, right = i, n - 1 - i\n\n        # Count inversions in the left and right subarrays\n        inv_count += merge_sort(arr, left, right)\n\n    # Merge the two halves of the array to get the final sorted array\n    merge_sort(arr, 0, n - 1)\n\n    return inv_count\n\n\ndef merge_sort(arr, left, right):\n    if left < right:\n        mid = (left + right) // 2\n\n        # Count inversions in the left and right subarrays\n        inv_count = merge_sort(arr, left, mid) + merge_sort(arr, mid + 1, right)\n\n        # Merge the two halves of the array to get the final sorted array\n        i, j, k = left, mid + 1, left\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n\n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += j - i\n                j = n # terminate the inner loop\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base case: if the array is empty or has only one element, there are no inversions.\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array into two halves recursively.\n    mid = len(arr) // 2\n    left_count = get_Inv_Count(arr[:mid])\n    right_count = get_Inv_Count(arr[mid:])\n    \n    # Count inversions by merging the two halves and counting the number of inversions.\n    left = 0\n    right = mid\n    inv_count = 0\n    while left < mid and right < len(arr):\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            inv_count += mid - left\n            right += 1\n    \n    return left_count + right_count + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    # Initializing two pointers to the beginning and end of the array\n    i = 0\n    j = len(arr) - 1\n    \n    # Counting inversions by comparing adjacent elements of the array and incrementing the pointers accordingly\n    inv_count = 0\n    while i < j:\n        if arr[i] > arr[j]:\n            inv_count += (j - i)\n            i += 1\n        else:\n            j -= 1\n    \n    # Returning the final count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    \n    # Initialize variables to store count of inversions\n    inversion_count = 0\n    left = 0\n    right = n - 1\n    \n    # Loop through the sorted array and find inversions\n    while left < right:\n        if arr[left] > arr[right]:\n            inversion_count += right - left\n            left += 1\n        else:\n            right -= 1\n    \n    return inversion_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and returns a flattened list.\n    '''\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initialize an empty list to store flattened elements\n    flat_list = []\n    \n    # loop through each element of the nested list\n    for element in list1:\n        # if the element is a list, recursively call the function to flatten it\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        # if the element is not a list, add it to the flat list\n        else:\n            flat_list.append(element)\n    \n    # return the flattened list\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    if not isinstance(lst, list):\n        return [lst]\n    else:\n        flat_lst = []\n        for item in lst:\n            flat_lst.extend(flatten_list(item))\n        return flat_lst\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n    # Iterate over the list of tuples\n    for trans in stdata:\n        # Get the total amount of the transaction\n        total = sum([amount for item, amount in trans])\n        # Update the max aggregate for the current transaction\n        max_agg[tuple(trans)] = max(max_agg[tuple(trans)], total)\n    # Get the maximum aggregate from the defaultdict\n    max_agg_list = max_agg.items()\n    max_agg_list.sort(key=lambda x: x[1], reverse=True)\n    max_agg_total = 0\n    for trans, total in max_agg_list:\n        max_agg_total += total\n    return max_agg_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n    for transaction in stdata:\n        # For each transaction, iterate over the items and calculate the maximum aggregate\n        for item in transaction:\n            max_agg[item] = max(max_agg[item], item)\n    # Calculate the maximum aggregate for all transactions by taking the maximum value\n    total_max_agg = max(max_agg.values())\n    return total_max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    freq = defaultdict(int) # create a defaultdict to store the frequency of each item\n    \n    for item in stdata:\n        freq[item[0]] += item[1] # increment the frequency of each item in the list\n    \n    max_agg = 0 # initialize the maximum aggregate variable\n    \n    for i in freq:\n        max_agg += i * freq[i] # calculate the maximum aggregate by multiplying the frequency of each item with its index\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Add the count to the dictionary\n        item_count[item] += 1\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for count in item_count.values():\n        max_agg += count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n    \n    # Loop through each tuple in the list of tuples\n    for cust, item, price in stdata:\n        # Calculate the maximum aggregate for this customer\n        max_aggs[cust] = max(max_aggs[cust], price)\n        \n    # Find the maximum aggregate for each customer\n    max_aggs = max(max_aggs.items(), key=lambda x: x[1])\n    \n    # Return the maximum aggregate for each customer\n    return max_aggs[1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    # Iterate through the list of tuples\n    for item, freq in stdata:\n        # Add the frequency to the defaultdict\n        freq += 1\n        # If the frequency is greater than the current maximum, update the maximum\n        if freq > freq.max():\n            freq.max()\n    # Iterate through the defaultdict and find the maximum value\n    max_freq = 0\n    max_item = ''\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    # Return the maximum aggregate and the item with the maximum frequency\n    return max_freq, max_item"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the max aggregate for each station\n    station_max = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for t in stdata:\n        # Calculate the aggregate for each station\n        aggregate = sum(t[1:])\n\n        # Update the max aggregate for the station\n        station_max[t[0]] = max(station_max[t[0]], aggregate)\n\n    # Calculate the maximum aggregate across all stations\n    max_aggregate = max(station_max.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        if item[1] > max_dict[item[0]]:\n            max_dict[item[0]] = item[1]\n    max_aggr = max(max_dict.values())\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize defaultdict to store sum of transaction values for each customer\n    customer_sums = defaultdict(int)\n\n    # Iterate through list of tuples\n    for transaction in stdata:\n        # Extract customer and transaction value from tuple\n        customer, value = transaction\n\n        # Add transaction value to sum of transaction values for customer\n        customer_sums[customer] += value\n\n    # Find maximum sum of transaction values for each customer\n    max_values = [customer_sums[customer] for customer in customer_sums]\n\n    # Find maximum aggregate value by taking maximum sum of transaction values for each customer\n    max_aggregate = max(max_values)\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    max_so_far = defaultdict(int)\n    max_ending = defaultdict(int)\n    max_ending[0] = 0\n    for i in range(len(stdata)):\n        if stdata[i][1] > max_ending[i-1] + stdata[i][0]:\n            max_so_far[i] = max(max_ending[i-1] + stdata[i][0], max_so_far[i-1])\n            max_ending[i] = max_ending[i-1] + stdata[i][0]\n        else:\n            max_so_far[i] = max_ending[i-1] + stdata[i][0]\n            max_ending[i] = max_ending[i-1] + stdata[i][0]\n    max_agg = max(max_so_far.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Helper function to find the sum of first n bits\n    def sum_first_n_bits(n, bit):\n        return sum([int(b) * 2**i for i, b in enumerate(format(bit, '0{}b'.format(n))))]\n\n    # Helper function to find the sum of last n bits\n    def sum_last_n_bits(n, bit):\n        return sum([int(b) * 2**(n - 1 - i) for i, b in enumerate(format(bit, '0{}b'.format(n))))]\n\n    # Count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            # Check if the sum of first n bits is same as sum of last n bits\n            if sum_first_n_bits(n, i) == sum_last_n_bits(n, j):\n                count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if i % 2 == 0:\n            if sum(int(digit) for digit in bin(i)[2:]) == sum(int(digit) for digit in bin((i + 1)//2)[2:]):\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        total_sum = sum(bin(i)[2:].zfill(n))\n        remain_sum = sum(bin(i)[2+n:].zfill(n))\n        if total_sum == remain_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            # Calculate the sum of first n bits and last n bits\n            sum1 = sum(int(bit) for bit in bin(i)[2:].zfill(n))\n            sum2 = sum(int(bit) for bit in bin(j)[2:].zfill(n))\n            # Check if both sums are equal\n            if sum1 == sum2:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n)-1):\n        first_half = i // 2**n\n        last_half = i % 2**n\n        if first_half == last_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        binary = bin(i)[2:].zfill(2 * n)\n        first_sum = sum(int(binary[x:x+n]) for x in range(0, len(binary), n))\n        last_sum = sum(int(binary[-x-1-n:(-x-1-n+n)]) for x in range(1, len(binary), -n))\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(2*n)\n        if seq[:n] == seq[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if sum(bin(i).lstrip('0b').zfill(n)) == sum(bin(i).lstrip('0b').zfill(n)[::-1]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        if sum(binary_str[:n]) == sum(binary_str[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = i >> n\n        last_half = i & ((1 << n) - 1)\n        if first_half == last_half:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    elif isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth counter to 0\n    depth = 0\n\n    # Recursively call function for each key in dictionary\n    for key in d:\n        depth += 1\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(d[key], list):\n            depth = 1 + max([dict_depth(item) for item in d[key]])\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for i in d.values():\n        if isinstance(i, dict):\n            count += 1\n            count += dict_depth(i)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n        if isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n            max_depth = max(max_depth, new_depth)\n        elif isinstance(value, list):\n            new_depth = len(value) + 1\n            max_depth = max(max_depth, new_depth)\n        else:\n            max_depth = max(max_depth, 1)\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    current = arr[index]\n    count = 0\n    \n    # Rotate the array to get the final rotation count\n    for _ in range(rotations):\n        for i in range(n - 1, 0, -1):\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n    \n    # Iterate over the array to find the element at the given index\n    for i in range(n):\n        if arr[i] == current:\n            count += 1\n            if count == index:\n                return arr[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the following parameters:\n    arr: List of integers\n    ranges: List of ranges (each range is a tuple of two integers)\n    rotations: Number of rotations required to find the element\n    index: Index of element to be found after rotations\n    \"\"\"\n    # Initialize variables to keep track of the current element and the number of rotations\n    current = arr[0]\n    rotations_count = 0\n\n    # Loop through the list of integers\n    for i in range(1, len(arr)):\n        # Check if the current element is in the range\n        if current >= ranges[i - 1][0] and current <= ranges[i - 1][1]:\n            # If the current element is in the range, keep track of the current element and number of rotations\n            current = arr[i]\n            rotations_count = 0\n        else:\n            # If the current element is not in the range, rotate the list of integers by 1 and check if the current element is in the new range\n            arr[i - rotations_count], arr[i] = arr[i], arr[i - rotations_count]\n            current = arr[i]\n            rotations_count += 1\n\n            if current >= ranges[i - 1][0] and current <= ranges[i - 1][1]:\n                # If the current element is in the new range, return the element at the given index\n                return arr[index]\n\n    # If the element is not found after rotations, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations, and an index as input.\n    The function returns the element at the given index after number of rotations.\n\n    Args:\n    arr (list): An array of integers.\n    ranges (list): A list of tuples containing the start and end index of each range.\n    rotations (int): The number of rotations required to reach the desired index.\n    index (int): The index of the element to be found after rotations.\n\n    Returns:\n    int: The element at the given index after number of rotations.\n    \"\"\"\n    # Find the smallest range that contains the index.\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            start = ranges[i][0]\n            end = ranges[i][1]\n\n    # Find the element at the given index after rotations.\n    if rotations % 2 == 0:\n        return arr[start + rotations - 1]\n    else:\n        return arr[start + rotations - 1] + arr[end - 1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables to store the number of rotations required and the result\n    rot_count = 0\n    result = None\n    \n    # Loop through each rotation range and count the number of rotations required\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            rot_count += 1\n            index -= ranges[i]\n            \n    # If the index is less than the starting index of the first range, the element is not present\n    if index < ranges[0]:\n        return None\n    \n    # Loop through each rotation range and rotate the array by the required number of rotations\n    for i in range(rotations - 1, -1, -1):\n        if i == rotations - 1:\n            # If the last rotation, rotate the entire array\n            arr = [arr[index] for index in range(ranges[0], ranges[0] + ranges[1])]\n        else:\n            # Otherwise, rotate the range of the previous rotation\n            arr = arr[ranges[i] - ranges[i - 1]:ranges[i]] + arr[:ranges[i] - ranges[i - 1]]\n            # Shift the starting index of the range by the number of elements rotated\n            ranges[i] -= arr[:ranges[i] - ranges[i - 1]].__len__()\n    \n    # Return the result\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, and a list of rotations, and an index.\n    It then finds the element at the given index after rotations and returns it.\n\n    Parameters:\n    arr (list): The array to search in\n    ranges (list): A list of ranges, one for each element in the array. These are the indices that can be rotated to find the element.\n    rotations (list): A list of rotations that can be applied to find the element. These are the numbers of rotations that can be applied to each element.\n    index (int): The index of the element that we want to find after rotations.\n\n    Returns:\n    element (int): The element at the given index after rotations.\n    \"\"\"\n\n    # Check that the index is within the range of the array\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Index out of range for array.\")\n\n    # Initialize the element variable to None\n    element = None\n\n    # Loop through the ranges and rotations\n    for range_index, range_value in enumerate(ranges):\n        for rotation in rotations:\n            # Check if the current rotation is within the range of rotations for this range\n            if range_index < len(rotations) - 1:\n                if range_value + rotation < 0 or range_value + rotation >= len(arr):\n                    continue\n            else:\n                if range_value + rotation < 0 or range_value + rotation > len(arr):\n                    continue\n\n            # Find the element at the rotated index\n            rotated_index = (range_value + rotation) % len(arr)\n            if rotated_index == index:\n                element = arr[rotated_index]\n                break\n\n    # Check if the element has been found\n    if element is None:\n        raise ValueError(\"Element not found after rotations.\")\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # To find element at given index after rotations, we need to know the previous element\n    # that was present at the given index before rotating.\n\n    # If the previous element is present in the array, we can find the element at the given index.\n    if index - 1 >= 0 and arr[index - 1] in ranges:\n        # If the previous element was present at the given index, we can find the element at the given index.\n        if arr[index - 1] == ranges[ranges.index(arr[index - 1]) - rotations[index - 1]]:\n            return arr[index - 1]\n        # If the previous element was not present at the given index, we need to rotate the given range of\n        # numbers to find the element at the given index.\n        else:\n            # Find the index of the previous element in the range of numbers.\n            prev_index = ranges.index(arr[index - 1]) - rotations[index - 1]\n            # If the given index is greater than the previous index, rotate the range of numbers to\n            # find the element at the given index.\n            if index > prev_index:\n                # Find the range of numbers after rotating by the given number of rotations.\n                temp_range = ranges[rotations.index(index) - prev_index:]\n                # Find the element at the given index after rotating by the given number of rotations.\n                temp_element = arr[ranges.index(arr[index - 1]) + temp_range.index(arr[index - 1])]\n                # Check if the element is present in the range of numbers.\n                if temp_element in temp_range:\n                    return temp_element\n                # If the element is not present in the range of numbers, rotate the range to find the\n                # element at the given index.\n                else:\n                    return find_Element(arr, temp_range, rotations, index)\n            # If the given index is less than the previous index, rotate the range of numbers to\n            # find the element at the given index.\n            else:\n                # Find the range of numbers before rotating by the given number of rotations.\n                temp_range = ranges[:rotations.index(index) - prev_index]\n                # Find the element at the given index before rotating by the given number of rotations.\n                temp_element = arr[ranges.index(arr[index - 1]) - temp_range.index(arr[index - 1])]\n                # Check if the element is present in the range of numbers.\n                if temp_element in temp_range:\n                    return temp_element\n                # If the element is not present in the range of numbers, rotate the range to find the\n                # element at the given index.\n                else:\n                    return find_Element(arr, temp_range, rotations, index)\n    # If the previous element is not present in the array, we can find the element at the given index.\n    else:\n        # Find the index of the previous element in the range of numbers.\n        prev_index = ranges.index(arr[index - 1]) - rotations[index - 1]\n        # If the given index is greater than the previous index, rotate the range of numbers to\n        # find the element at the given index.\n        if index > prev_index:\n            # Find the range of numbers after rotating by the given number of rotations.\n            temp_range = ranges[rotations.index(index) - prev_index:]\n            # Find the element at the given index after rotating by the given number of rotations.\n            temp_element = arr[ranges.index(arr[index - 1]) + temp_range.index(arr[index - 1])]\n            # Check if the element is present in the range of numbers.\n            if temp_element in temp_range:\n                return temp_element\n            # If the element is not present in the range of numbers, rotate the range to find the\n            # element at the given index.\n            else:\n                return find_Element(arr, temp_range, rotations, index)\n        # If the given index is less than the previous index, rotate the range of numbers to\n        # find the element at the given index.\n        else:\n            # Find the range of numbers before rotating by the given number of rotations.\n            temp_range = ranges[:rotations.index(index) - prev_index]\n            # Find the element at the given index before rotating by the given number of rotations.\n            temp_element = arr[ranges.index(arr[index - 1]) - temp_"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes a list of integers arr, a list of tuples ranges, a list of integers rotations, and an integer index.\n    The function returns the element at index after rotations.\n\n    :param arr: A list of integers\n    :param ranges: A list of tuples containing the range of values for each integer in arr\n    :param rotations: A list of integers representing the number of rotations to perform\n    :param index: An integer representing the index to find the element at after rotations\n    :return: An integer representing the element at index after rotations.\n    \"\"\"\n\n    # Initialize the current index and the element to be searched\n    current_index = 0\n    element = arr[0]\n\n    # Loop through each rotation and find the element at the new index\n    for rotation in rotations:\n        if rotation!= 0:\n            # Find the new index after the rotation\n            new_index = (current_index + rotation) % len(arr)\n            # If the new index is outside the range of values, wrap around\n            if new_index < 0:\n                new_index = len(arr) + new_index\n            # If the element is not in the range of the new index, wrap around\n            if arr[new_index] not in ranges[current_index]:\n                if current_index == len(arr) - 1:\n                    new_index = 0\n                else:\n                    new_index = len(arr)\n            # Update the current index and element to search for the next rotation\n            current_index = new_index\n            element = arr[new_index]\n\n    # Return the element at the specified index after rotations\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    mod_index = index % len(arr)\n    if rotations == 0:\n        return arr[mod_index]\n    else:\n        return arr[(mod_index + ranges) % len(arr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # check if the index is within the bounds of the array\n    if index < 0 or index >= len(arr):\n        return \"Index out of range.\"\n\n    # initialize the element to be found\n    element = arr[index]\n\n    # loop through the rotations and find the element\n    for i in range(rotations):\n        # find the corresponding range index\n        range_index = index % len(ranges)\n\n        # find the new index in the original array\n        new_index = index - ranges[range_index]\n\n        # check if the new index is within the bounds of the array\n        if new_index < 0 or new_index >= len(arr):\n            return \"Index out of range.\"\n\n        # find the element in the original array\n        element = arr[new_index]\n\n        # find the new range index\n        range_index = new_index % len(ranges)\n\n        # find the new index in the original array\n        new_index = new_index - ranges[range_index]\n\n        # check if the new index is within the bounds of the array\n        if new_index < 0 or new_index >= len(arr):\n            return \"Index out of range.\"\n\n        # find the element in the original array\n        element = arr[new_index]\n\n    # return the element found after rotations\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        arr = list(map(lambda x: arr.index(x)+ranges[i], arr))\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Create a regular expression pattern for words starting with 'p'\n    pattern = r'p\\w+'\n    # Use the findall() method to extract all words that match the pattern\n    matches = re.findall(pattern,''.join(words))\n    # Return the two words that match the pattern\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b[Pp]..', words)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define a regex pattern to match the starting letter of a word\n    pattern = re.compile(r'^p\\w+$')\n    \n    # loop through the list of words\n    for word in words:\n        # check if the word starts with 'p'\n        if pattern.match(word):\n            # split the word into two parts using'' as the delimiter\n            parts = word.split(' ')\n            # check if the second part starts with 'p'\n            if pattern.match(parts[1]):\n                # return the two parts\n                return parts[0], parts[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w{1,}$')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) == 0:\n        return None\n    elif len(matches) == 1:\n        return matches[0], matches[0]\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w+p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^[Pp]..') # find words starting with letter 'p'\n    matches = pattern.findall(words)\n    if len(matches) < 2:\n        return \"Not enough words starting with letter 'p'.\"\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return 'There are not exactly two words starting with letter \"p\".'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    for word in words:\n        match = re.match(pattern, word)\n        if match:\n            return word, match.group()\n    return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n    elif index == 1 and a[0] < a[1]:\n        return a[0]\n    elif index == 2 and a[0] < a[1] and a[1] < a[2]:\n        return a[0]\n    else:\n        max_sum = 0\n        max_sum_arr = [0] * (index + 1)\n        max_sum_arr[0] = a[0]\n        max_sum_arr[1] = a[0] + a[1]\n        max_sum_arr[2] = a[0] + a[1] + a[2]\n        for i in range(3, index + 1):\n            if a[i] > a[i - 1]:\n                max_sum_arr[i] = a[i] + max(max_sum_arr[i - 1], max_sum_arr[i - 2])\n            else:\n                max_sum_arr[i] = max(max_sum_arr[i - 1], max_sum_arr[i - 2])\n        max_sum_arr[k] += a[index]\n        for i in range(k, index + 1):\n            max_sum += max_sum_arr[i]\n        return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize max_sum and max_subseq\n    max_sum = float('-inf')\n    max_subseq = [0]\n\n    # Loop through the array\n    for i in range(n):\n        # Calculate the sum of current prefix up to the i-th index\n        prefix_sum = sum(a[:i+1])\n\n        # If the current prefix sum is greater than the maximum sum so far, update max_sum and max_subseq\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n            max_subseq = [i]\n        elif prefix_sum == max_sum and i == index:\n            max_sum = prefix_sum\n            max_subseq.append(i)\n        elif prefix_sum == max_sum and i > index:\n            # Check if the current prefix sum is greater than the maximum sum up to index and also including kth element\n            if prefix_sum > max_sum + a[i] * (k-i):\n                max_sum = prefix_sum\n                max_subseq = [i]\n\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_seq = []\n\n    # iterate through the array\n    for i in range(index, n):\n        # check if the current element is kth element and if it's greater than i\n        if i == k and a[i] > a[k]:\n            current_seq = []\n            break\n\n        # if it's not kth element, check if it's increasing\n        if i == k or a[i] <= a[i-1]:\n            # if it's increasing, add it to the current sum and the current sequence\n            current_sum += a[i]\n            current_seq.append(a[i])\n\n        # check if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_seq = current_seq\n\n    # return the maximum sum and the maximum sequence\n    return max_sum, max_seq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                dp[i] = dp[j] + a[i]\n    dp_sum = 0\n    max_sum = float('-inf')\n    for i in range(k):\n        dp_sum += dp[i]\n        if dp_sum > max_sum:\n            max_sum = dp_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the variables\n    max_sum = 0\n    current_sum = 0\n    current_seq = []\n\n    # Traverse the array\n    for i in range(index, n):\n        # If the current element is less than or equal to k, add it to the current sequence\n        if a[i] <= k:\n            current_seq.append(a[i])\n\n            # If the length of the current sequence is greater than or equal to k, update the max_sum and reset the current_sum and current_seq\n            if len(current_seq) >= k:\n                current_sum = sum(current_seq)\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    current_seq = current_seq[:k]\n                else:\n                    current_seq = current_seq[:k]\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function will find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_start = 0\n    prefix_sum = [0] * n\n    prefix_sum[0] = a[0]\n    for i in range(1, n):\n        prefix_sum[i] = max(prefix_sum[i-1], a[i])\n    for i in range(index, k):\n        if prefix_sum[i] > prefix_sum[i-1]:\n            curr_sum = prefix_sum[i] - prefix_sum[i-1]\n        else:\n            curr_sum = 0\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n    return max_sum, max_start"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return 0\n\n    # get the sum of increasing subsequence from prefix until i-1\n    max_sum_left = max_sum_increasing_subseq(a, n, index-1, k)\n\n    # get the sum of increasing subsequence from prefix until i+1\n    max_sum_right = max_sum_increasing_subseq(a, n, index+1, k)\n\n    # check if the kth element is before i and if it satisfies the condition k > i\n    if k > index:\n        # add the value of the kth element to the sum of increasing subsequence from prefix until i+1\n        max_sum_right += a[k-1]\n\n    # return the maximum sum of increasing subsequence from prefix until i\n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = index - k\n\n    # Traverse the array from start to n-1\n    for i in range(start, n):\n\n        # Check if the current element is less than or equal to kth element\n        if i >= k:\n\n            # Check if the current element is greater than the current kth element\n            if a[i] > a[k]:\n\n                # Calculate the sum of the increasing subsequence until ith index\n                curr_sum = a[i] + max_sum_increasing_subseq(a, n, i, k-1)\n\n                # Update the maximum sum\n                max_sum = max(max_sum, curr_sum)\n\n        # Check if the current element is greater than the kth element\n        else:\n\n            # Calculate the sum of the increasing subsequence until ith index\n            curr_sum = a[i]\n\n            # Update the maximum sum\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    max_sum = float('-inf')\n    subseq = [0] * n\n    subseq[0] = a[0]\n    \n    for i in range(1, n):\n        if i <= index:\n            subseq[i] = a[i]\n        else:\n            if i - index <= k:\n                subseq[i] = max(subseq[i - index], a[i] + subseq[i - index - k])\n            else:\n                subseq[i] = subseq[i - index]\n        \n        if subseq[i] > max_sum:\n            max_sum = subseq[i]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if a[index] <= a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:]\n        new_tuplex = (new_tuplex,)*n\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new list with the same length as the tuple\n    new_list = [0] * len(tuplex)\n    # loop through each element in the tuple and insert them into the new list\n    for i in range(len(tuplex)):\n        new_list[i] = tuplex[i]\n    # create a new list containing the colon of the tuple\n    colon = []\n    # loop through each element in the new list and insert it into the colon\n    for i in range(m):\n        for j in range(n):\n            if i == j:\n                colon.append(new_list[i])\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Reverse the first n elements of the tuple\n    new_tuplex[:n] = new_tuplex[:n][::-1]\n    # Reverse the last m-n elements of the tuple\n    new_tuplex[n:] = new_tuplex[n:][::-1]\n    # Return the modified tuple\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        new_tup = deepcopy(tuplex)\n        for j in range(n):\n            new_tup = new_tup[0], new_tup[1:]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    colon = tuple()\n    for i in range(m):\n        for j in range(n):\n            colon = colon + (new_tuplex[i][j],)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    num_elements = len(tuplex_copy)\n\n    # Loop through each index in the range of m\n    for i in range(m):\n        # Loop through each index in the range of n\n        for j in range(n):\n            # If the current index is less than the number of elements in the tuple\n            if j < num_elements:\n                # Set the element at the current index to None\n                tuplex_copy[j] = None\n\n    # Return the colon of the tuple\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Define a list comprehension to get the desired colon\n    colon = [deepcopy(tuplex[i]) for i in range(m, m+n)]\n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple tuplex and returns a colon of the tuple with length n.\n    The deepcopy() function is used to create a copy of the input tuple.\n    '''\n    # Create a copy of the input tuple\n    t = deepcopy(tuplex)\n    # Split the tuple into two parts\n    a, b = t[:m], t[m:]\n    # Return the colon as a new tuple\n    return a + (b[:n],) + b[n:]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        if i < len(new_tuplex):\n            new_tuplex[i] = [new_tuplex[i][j] for j in range(n)]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple is valid\n    if len(tuplex)!= m:\n        raise ValueError(\"The input tuple should have length m.\")\n\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Reverse the order of the first n elements\n    for i in range(n):\n        new_tuplex[i], new_tuplex[m-n+i] = new_tuplex[m-n+i], new_tuplex[i]\n\n    # Print the colon\n    print(tuple(new_tuplex))"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product variables\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n\n    # Iterate through the specified number of products\n    for i in range(N):\n        # Calculate the product of the first list and the maximum product of the second list\n        product1 = nums1[i] * max_product2\n\n        # Calculate the product of the second list and the maximum product of the first list\n        product2 = nums2[i] * max_product1\n\n        # Update the maximum product variables\n        max_product1 = max(product1, max_product1)\n        max_product2 = max(product2, max_product2)\n\n    return max_product1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_products.append(max(nums1[i]*nums2[i], nums1[i]*max(nums2[j]*nums2[j+1] for j in range(i+1, N)), nums2[i]*max(nums1[j]*nums1[j+1] for j in range(i+1, N))))\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    largest_products = []\n    for i in range(N):\n        largest_product = max(nums1[i] * nums2[i], nums1[i] * nums2[len(nums2) - 1 - i], nums2[i] * nums1[len(nums1) - 1 - i], nums2[i] * nums1[i])\n        largest_products.append(largest_product)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        nums1 (list): A list of integers.\n        nums2 (list): A list of integers.\n        N (int): The number of products to find.\n\n    Returns:\n        list: A list of the N largest products.\n    \"\"\"\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the list to store the N largest products\n    largest_products = []\n\n    # Iterate over the first N elements of nums1 and nums2\n    for i in range(N):\n        # Calculate the product of the current element from nums1 and the second largest element from nums2\n        product1 = nums1[i] * nums2[i]\n\n        # Calculate the product of the second element from nums1 and the current element from nums2\n        product2 = nums1[i] * nums2[i+1]\n\n        # If the current product is greater than the product from the previous iteration, add it to the list\n        if product1 > product2:\n            largest_products.append(product1)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    max_product_a = -float('inf')\n    max_product_b = -float('inf')\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product_a:\n                max_product_a = product\n            if product > max_product_b:\n                max_product_b = product\n    return (i, j)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the products and the indices of the largest products\n    largest_products = []\n    indices = []\n\n    # Iterate through each list and find the N largest products\n    for i in range(len(nums1)):\n        max_product = max(nums1[i:i+N]) * max(nums2[i:i+N])\n        max_product_index = nums1.index(max(nums1[i:i+N]))\n        largest_products.append(max_product)\n        indices.append(max_product_index)\n\n    # Return the N largest products and the indices of the largest products\n    return largest_products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products list\n    largest_products = []\n\n    # Iterate through the list of factors to select\n    for i in range(N):\n        # Calculate the product of the first N elements of each list\n        product = nums1[0] * nums2[0]\n\n        # If the product is greater than the current largest product, update the list of largest products\n        if product > largest_products[-1] if len(largest_products) > 0 else 0:\n            largest_products = [product]\n        elif product > largest_products[-1] if len(largest_products) > 0 else 0:\n            largest_products.append(product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def max_product(nums):\n        max_val = float('-inf')\n        max_index = -1\n        for i in range(len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_index = i\n        return max_val, max_index\n\n    largest_products = []\n    for i in range(N):\n        factor1, factor1_index = max_product(nums1)\n        factor2, factor2_index = max_product(nums2)\n\n        largest_product = max(factor1 * factor2, factor2 * factor1)\n        largest_products.append(largest_product)\n\n        nums1.pop(factor1_index)\n        nums2.pop(factor2_index)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate through each number in the first list\n    for num1 in nums1:\n        # Initialize a variable to store the product of the number and the largest factor from nums2\n        product1 = num1\n\n        # Iterate through each number in the second list\n        for num2 in nums2:\n            # Initialize a variable to store the product of the number and the largest factor from nums1\n            product2 = num2\n\n            # Iterate through each factor from nums1\n            for factor in nums1:\n                # Check if the current factor is larger than the current number in nums2\n                if factor > num2:\n                    # Calculate the product of the current number and the factor\n                    product2 *= factor\n\n            # Check if the current product is larger than the largest product seen so far\n            if product2 > product1:\n                product1 = product2\n\n        # Add the largest product seen so far to the list of largest products\n        largest_products.append(product1)\n\n        # If we have reached the desired number of products, stop iterating through nums2\n        if len(largest_products) == N:\n            break\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products to 0\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Iterate through the sorted lists, selecting the largest N products from each\n    for i in range(N):\n        largest_product1 = max(nums1[i] * largest_product1, largest_product1)\n        largest_product2 = max(nums2[i] * largest_product2, largest_product2)\n\n    return largest_product1 * largest_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the given string to a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the variable to store the unset bit\n    unset_bit = 0\n    \n    # Iterate over all bits in the binary representation of n\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            # Set the unset bit to 1\n            unset_bit = 1 << i\n            break\n    \n    # Set the leftmost unset bit in n\n    n = n | unset_bit\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer `n`.\n    '''\n\n    # Initialize the number of set bits to the number of bits in the integer\n    count = bin(n).count('1')\n\n    # If all bits are set, return 0\n    if count == len(bin(n))[2:].count('1'):\n        return 0\n\n    # Calculate the number of unset bits in the integer\n    unset_bits = 0\n    for i in range(len(bin(n))):\n        if bin(n)[i] == '0':\n            unset_bits += 1\n\n    # If the number of unset bits is even, return the number of set bits\n    if unset_bits % 2 == 0:\n        return count\n\n    # If the number of unset bits is odd, return the number of set bits + 1\n    else:\n        return count + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # get binary representation of n-1\n    bin_n = bin(n-1)[2:]\n    # if the rightmost bit is set, shift the leftmost bit to the left by 1\n    if bin_n[-1] == '1':\n        return n << 1\n    # if the rightmost bit is not set, the leftmost bit is already set\n    else:\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the leftmost unset bit in a binary number.\n    '''\n    # Find the rightmost unset bit using binary search\n    leftmost_unset = 0\n    while n & (1 << leftmost_unset) == 0:\n        leftmost_unset += 1\n    \n    # Set the leftmost unset bit to 1\n    n = n | (1 << leftmost_unset)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the number of set bits to the number of bits in n\n    count = 0\n    while n > 0:\n        n &= (n - 1)\n        count += 1\n    # Set the leftmost unset bit by shifting a 1 to the count - 1 positions\n    return n << (count - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    # initialize the index of the leftmost unset bit to -1\n    left_most_unset_bit = -1\n\n    # iterate through each bit position from the rightmost to the leftmost\n    for bit in range(31, -1, -1):\n        # if the bit at the current position is not set to 1, set it to 1\n        if (n >> bit) & 1 == 0:\n            left_most_unset_bit = bit\n            n = n | (1 << bit)\n            break\n\n    return n, left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while n > 0:\n        n &= (n-1)\n        i += 1\n    return i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Initialize leftmost unset bit index to -1\n    leftmost_unset_bit = -1\n    \n    # Iterate through all the bits in the integer n\n    for i in range(31, -1, -1): \n\n        # Check if the i-th bit is unset\n        if ((n >> i) & 1) == 0: \n\n            # Set the leftmost unset bit index to i\n            leftmost_unset_bit = i\n            \n            # Exit the loop\n            break\n    \n    # Set the leftmost unset bit\n    n |= (1 << leftmost_unset_bit)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Set the left most unset bit in the given integer `n`.\n    '''\n    bit_set = 0\n    while bit_set!= n:\n        bit_set = bit_set | (1 << bit_set)\n    return bit_set"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # loop through each bit in the number and set the leftmost unset bit\n    for bit in bin(n)[2:]:\n        if bit == '0':\n            n |= (1 << int(bit))\n            break\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2  # Calculate the surface area of the cone\n    volume = area * h  # Calculate the volume of the cone\n    return volume  # Return the volume of the cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with given radius r and height h.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3)*math.pi*(r**2)*h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Find the volume of the cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = 1/3 * math.pi * r**2 * h\n\n    # Return the volume\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the volume of the cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 2**(n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2 - n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    power = 1\n    result = 1\n    \n    # Iterate while the result is less than or equal to n\n    while result <= n: \n        # If the result is less than the next power of 2, increment the power and result\n        if result < power * 2: \n            power *= 2\n            result = power\n            \n    # Return the highest power of 2 that is less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize power to 1\n    power = 1\n    # Initialize current value to n\n    current_value = n\n    # Loop while current value is greater than 1\n    while current_value > 1:\n        # Multiply power by 2\n        power *= 2\n        # Divide current value by 2\n        current_value //= 2\n    # Return power\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 less than or equal to n\n    highest_power = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if the current number is a power of 2\n        if i == 1:\n            highest_power = 1\n        elif i == 2:\n            highest_power = 1\n        elif i == 4:\n            highest_power = 2\n        elif i == 8:\n            highest_power = 2\n        elif i == 16:\n            highest_power = 3\n        elif i == 32:\n            highest_power = 3\n        elif i == 64:\n            highest_power = 4\n        elif i == 128:\n            highest_power = 4\n        elif i == 256:\n            highest_power = 5\n        elif i == 512:\n            highest_power = 5\n        elif i == 1024:\n            highest_power = 6\n        elif i == 2048:\n            highest_power = 6\n        elif i == 4096:\n            highest_power = 7\n        elif i == 8192:\n            highest_power = 7\n        elif i == 16384:\n            highest_power = 8\n        elif i == 32768:\n            highest_power = 8\n        elif i == 65536:\n            highest_power = 9\n        elif i == 131072:\n            highest_power = 9\n        elif i == 262144:\n            highest_power = 10\n        elif i == 524288:\n            highest_power = 10\n        elif i == 1048576:\n            highest_power = 11\n        elif i == 2097152:\n            highest_power = 11\n        elif i == 4194304:\n            highest_power = 12\n        elif i == 8388608:\n            highest_power = 12\n        elif i == 16777216:\n            highest_power = 13\n        elif i == 33554432:\n            highest_power = 13\n        elif i == 67108864:\n            highest_power = 14\n        elif i == 134217728:\n            highest_power = 14\n        elif i == 268435456:\n            highest_power = 15\n        elif i == 536870912:\n            highest_power = 15\n        elif i == 1073741824:\n            highest_power = 16\n        elif i == 2147483648:\n            highest_power = 16\n        elif i == 4294967296:\n            highest_power = 17\n        elif i == 8589934592:\n            highest_power = 17\n        elif i == 17179869184:\n            highest_power = 18\n        elif i == 34359738368:\n            highest_power = 18\n        elif i == 68719476736:\n            highest_power = 19\n        elif i == 137438953472:\n            highest_power = 19\n        elif i == 274877906944:\n            highest_power = 20\n        elif i == 549755813888:\n            highest_power = 20\n        elif i == 1099511627776:\n            highest_power = 21\n        elif i == 2199023255552:\n            highest_power = 21\n        elif i == 4398046511104:\n            highest_power = 22\n        elif i == 8796093022208:\n            highest_power = 22\n        elif i =="
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    # check if n is 0 or 1\n    if n == 0 or n == 1:\n        return n\n    \n    # loop through all odd numbers up to the square root of n\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            return i\n    \n    # return the last odd number that is less than or equal to n\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        power = 1\n        while power < n:\n            power <<= 1\n        return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 1\n    highest_power = 1\n    \n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If the current number is a power of 2, set the highest power to that number\n        if i == 2**highest_power:\n            highest_power += 1\n            \n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    # check if n is 0\n    if n == 0: \n        return 0\n    \n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # calculate the highest power of 2 that is less than or equal to n\n    return highest_Power_of_2(n >> 1) + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # loop through all integers from 1 to n and check if the number is a power of 2\n    for i in range(1, n+1):\n        if i == 1:\n            highest = i\n        elif i & (i-1) == 0:\n            highest = i\n\n    # return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n - 1) // (1 - 2 ** n)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th Lucas number is {find_lucas(n)}\")"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Lucas number is\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [0, 2]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2[i])):\n            result[l1[i]][l2[i][j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        if i == 0:\n            for item in lst:\n                if isinstance(item, dict):\n                    result.update(item)\n                else:\n                    result[item] = {}\n        else:\n            for item in lst:\n                if isinstance(item, dict):\n                    for k, v in item.items():\n                        if k in result:\n                            result[k].update(v)\n                        else:\n                            result[k] = v\n                else:\n                    if item in result:\n                        result[item].update({})\n                    else:\n                        result[item] = {}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2)):\n            inner_dict[l2[j]] = l3[j]\n        result[l1[i]] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        for j in range(len(l2)):\n            data[l1[i]][l2[j]] = l3[i*len(l2)+j]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {l2[i]: l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the result\n    result = {}\n    # Loop through each list and add each item as a key to the result dictionary\n    for item in l1:\n        result[item] = l2[l1.index(item)]\n    for item in l3:\n        result[item] = l3[l3.index(item)]\n    # Return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize empty dictionary to store nested dictionary\n    nested_dict = {}\n    # Loop through each list and create a nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i*len(l2)+j]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Convert the first list to a dictionary\n    d1 = {i: j for i, j in zip(l1, l2)}\n    \n    # Convert the second list to a dictionary\n    d2 = {i: j for i, j in zip(l3, d1)}\n    \n    # Return the final dictionary\n    return d2"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # loop through each list and add the elements to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if isinstance(item, list):\n                if i not in result:\n                    result[i] = {}\n                if j not in result[i]:\n                    result[i][j] = []\n                for subitem in item:\n                    result[i][j].append(subitem)\n            else:\n                if i not in result:\n                    result[i] = {}\n                if j not in result[i]:\n                    result[i][j] = item\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 3\n    \n    if n == 3:\n        return 12\n    \n    if n == 4:\n        return 45\n    \n    if n == 5:\n        return 120\n    \n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n        return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    elif n == 2:\n        return 3\n\n    elif n == 3:\n        return 6\n\n    elif n == 4:\n        return 10\n\n    else:\n        half = get_max_sum(n // 2)\n        three_fourth = get_max_sum(n // 3)\n        four_fifth = get_max_sum(n // 4)\n        five_sixth = get_max_sum(n // 5)\n\n        return max(half + three_fourth + four_fifth + five_sixth, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        # recursive call for (n/2)\n        sum1 = get_max_sum(n/2)\n        # recursive call for (n/3)\n        sum2 = get_max_sum(n/3)\n        # recursive call for (n/4)\n        sum3 = get_max_sum(n/4)\n        # recursive call for (n/5)\n        sum4 = get_max_sum(n/5)\n        # find the maximum of the sum of the above 4 calls and (n)\n        max_sum = max(sum1 + sum2 + sum3 + sum4, n)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 35\n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    \n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        \n        if n == 1:\n            memo[n] = 0\n            return memo[n]\n        \n        if n % 2 == 0:\n            memo[n] = max(helper(n//2, memo) + n, helper(n//2 + 1, memo))\n            return memo[n]\n        else:\n            memo[n] = max(helper(n//2 + 1, memo) + n, helper(n//2, memo))\n            return memo[n]\n    \n    return helper(n, {})"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for num in input_list:\n        if len(num) > max_len:\n            max_len = len(num)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    result = []\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            result = [item]\n        elif len(item) == max_len:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    for elem in input_list:\n        if len(elem) > max_len:\n            max_len = len(elem)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # check if the set has 1 element (which means all elements are distinct)\n    if len(unique_tup) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to list\n    test_list = list(test_tup)\n    # sort the list in ascending order\n    test_list.sort()\n    # compare adjacent elements and return True if duplicates found\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    # if no duplicates found, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the tuple to check for duplicates\n    test_set = set(test_tup)\n    # Check if the set has any elements in it\n    if not test_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first character with a frequency of 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeating character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # loop through each character in the string again and find the first character that has a frequency of 1\n    for char in str1:\n        # if the character has a frequency of 1, return it\n        if freq[char] == 1:\n            return char\n\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Find the first non-repeating character in the frequency dictionary\n    for char, count in freq_dict.items():\n        if count == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n\n    :param str1: A string to find the first non-repeating character in.\n    :return: The first non-repeating character in the string, or None if there is no such character.\n    \"\"\"\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over each character in the string again and find the first non-repeating character\n    for char in str1:\n        # If the character is not in the dictionary or its frequency is 1, return the character\n        if char not in freq or freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a, b, c]\n    nums.sort()\n\n    n = len(nums)\n    if n % 2 == 0:\n        median = (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        median = nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the length of the sorted array\n    length = len(sorted_numbers)\n\n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_numbers[length//2]\n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[length//2-1] + sorted_numbers[length//2]) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the middle number\n    middle_index = len(sorted_numbers) // 2\n    middle_number = sorted_numbers[middle_index]\n    \n    # Return the middle number\n    return middle_number"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Find the middle number\n    mid = len(nums) // 2\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(nums) % 2 == 1:\n        return nums[mid]\n    \n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (nums[mid-1] + nums[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    nums = sorted([a,b,c])\n    \n    # Calculate the median\n    if len(nums) % 2 == 0:\n        # If the length of the sorted list is even,\n        # take the average of the middle two numbers\n        mid = len(nums)//2\n        median = (nums[mid-1] + nums[mid]) / 2\n    else:\n        # If the length of the sorted list is odd,\n        # take the middle number\n        mid = len(nums)//2\n        median = nums[mid]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the middle number of the sorted numbers\n    middle_number = sorted_numbers[1]\n    \n    # Check if the middle number is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If the middle number is even, find the average of the two middle numbers\n        median = (middle_number + sorted_numbers[2]) / 2\n    else:\n        # If the middle number is odd, return it\n        median = middle_number\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_list = sorted([a, b, c])\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2-1] + sorted_list[n//2])/2\n    else:\n        return sorted_list[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    nums = [a, b, c]\n    nums.sort()\n\n    # Find the middle number\n    mid = len(nums) // 2\n\n    # Return the median\n    return nums[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a,b,c])\n\n    # Find the middle two numbers\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2\n    else:\n        median = nums[len(nums)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the sum variable to 0\n    sum_of_digits = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and loop through each character in the string\n        for digit in str(num):\n            # convert the character to an integer and add it to the sum variable\n            sum_of_digits += int(digit)\n    \n    # return the sum variable\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate over each number in the list\n    total = 0\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        # iterate over each digit and add it to the total\n        for digit in digits:\n            total += int(digit)\n    # return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        digit_sum += sum([int(digit) for digit in num_str])\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits = sum(int(digit) for digit in str(num))\n        result.append(digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        for digit in str(num):\n            sum_of_digits += int(digit)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits_list.append(digits_sum)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and split into a list of digits\n        digits = list(str(num))\n        # Compute the sum of the digits\n        total = sum(int(digit) for digit in digits)\n        # Add the total to the running sum\n        running_sum += total\n    # Return the running sum\n    return running_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= (test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    \n    # loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation and append the result to the result tuple\n        result_tup = result_tup + ((test_tup1[i] ^ test_tup2[i]),)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # create an empty list to store the result\n    result_list = []\n    # iterate over each element of both tuples\n    for i in range(len(test_tup1)):\n        # perform bitwise xor on the corresponding elements\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n    # convert the list of results to a tuple\n    result_tup = tuple(result_list)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # perform the bitwise xor operation across the lists\n    xor_list = [a^b for a, b in zip(list1, list2)]\n    \n    # pack the list back into a tuple\n    xor_tup = tuple(xor_list)\n    \n    # return the result\n    return xor_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq = {}\n\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # if the tuple is not in the dictionary, add it with a count of 1\n        if tup not in freq:\n            freq[tup] = 1\n        # if the tuple is already in the dictionary, increment its count by 1\n        else:\n            freq[tup] += 1\n\n    # return the total number of unique tuples in the list\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    unique_tuples = []\n    for key in freq_dict:\n        unique_tuples.append((key, freq_dict[key]))\n    return unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Use a set to remove duplicates and count the frequency of each tuple\n    freq = len(set(test_list))\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    unique_freq = {}\n\n    for item in test_list:\n        if item in unique_freq:\n            unique_freq[item] += 1\n        else:\n            unique_freq[item] = 1\n\n    total_freq = 0\n    for freq in unique_freq.values():\n        total_freq += freq\n\n    return total_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Convert the list to a set to get unique elements\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples are valid\n    if len(test_tup1)!= len(test_tup2) or any(len(tup)!= len(test_tup1[0]) for tup in test_tup2):\n        print(\"Error: Invalid input tuples.\")\n        return\n    \n    # Initialize the resultant tuple with the same length as the first input tuple\n    result = tuple(0 for i in range(len(test_tup1[0])))\n    \n    # Loop through each index of the first input tuple\n    for i in range(len(test_tup1[0])):\n        # Loop through each index of the second input tuple\n        for j in range(len(test_tup2[0])):\n            # Add the corresponding elements from the input tuples and assign the sum to the result tuple\n            result[i] += test_tup1[0][i] + test_tup2[0][j]\n    \n    # Return the resultant tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to store the result\n    result = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements of the two tuples\n            result.append(test_tup1[i] + test_tup2[i][j])\n    # return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_list = []\n        for j in range(len(test_tup2[i])):\n            temp_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp_list))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif type(test_tup1[i]) == tuple and type(test_tup2[i]) == list:\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif type(test_tup1[i]) == list and type(test_tup2[i]) == tuple:\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif type(test_tup1[i]) == list and type(test_tup2[i]) == list:\n            result.append(test_tup1[i] + test_tup2[i])\n        elif type(test_tup1[i]) == int and type(test_tup2[i]) == int:\n            result.append(test_tup1[i] + test_tup2[i])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Append the result of adding the corresponding elements of the two tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup1[i], tuple) or isinstance(test_tup2[i], tuple):\n            result_tup.append(\"Invalid tuple element\")\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = []\n        for j in range(len(test_tup1[i])):\n            new_tuple.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(new_tuple)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of these numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple.\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters - tuplex which is a tuple and tuple1 which is another tuple.\n    It then checks whether an element exists within tuple1.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            print(\"The element exists within the tuple.\")\n            return\n    print(\"The element does not exist within the tuple.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number as input and returns True if its parity is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    # Check if the number is even or not\n    if x % 2 == 0:\n        # If even, then parity is odd\n        return \"The parity of the number {} is odd\".format(x)\n    else:\n        # If odd, then parity is even\n        return \"The parity of the number {} is even\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer input and returns True if the parity of the input number is odd, otherwise False.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number x as input and returns True if the parity of x is odd, and False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even or odd\n    if x % 2 == 0:\n        # if even, return True (odd parity)\n        return True\n    else:\n        # if odd, return False (even parity)\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2!= 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Find the largest digit in the number\n    largest_digit = max(int(digit) for digit in str(n))\n    # Create a dictionary of digits and their positions in the number\n    digit_positions = {}\n    for digit in str(n):\n        digit_positions[int(digit)] = digit\n    # Rearrange digits by shifting them to the left until the largest digit is at the rightmost position\n    for digit in range(largest_digit, 0, -1):\n        if digit_positions[digit] == '0':\n            continue\n        position = digit_positions[digit]\n        for i in range(position):\n            n = n * 10 + digit\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n < 10:\n        return 10\n\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    new_n = 0\n    for digit in digits:\n        new_n += digit * 10 ** (len(digits) - digits.index(digit))\n\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the maximum number in the input\n    max_num = max(n, key=lambda x: len(str(x)))\n\n    # Initialize the new number as the last digit of max_num\n    new_num = max_num % 10\n\n    # Rearrange the digits of n to form new_num\n    for i in range(1, len(str(max_num))):\n        digit = n // (10**(len(str(max_num)) - i))\n        new_num = new_num * 10 + digit\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    n_digits = len(digits)\n    max_digit = max(digits)\n    max_index = digits.index(max_digit)\n    for i in range(n_digits):\n        if digits[i] == max_digit and i!= max_index:\n            digits[i], digits[max_index] = digits[max_index], digits[i]\n            n = int(''.join(str(d) for d in digits))\n            return n\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the index of the first digit that is '1'\n    index = -1\n    for i in range(len(str(n))):\n        if int(str(n)[i]) == 1:\n            index = i\n            break\n\n    # If all digits are '9', then the next bigger number is 10\n    if index == -1:\n        return 10\n\n    # Rearrange the digits to the left of the first digit that is '1' and add 1 to the left of the '1'\n    new_num = str(n)[:index] + str(int(str(n)[index]) + 1) + str(n)[index + 1:]\n\n    # If the leftmost digit is '9', add 1 to the right\n    if int(str(new_num)[0]) == 9:\n        new_num = '1' + new_num[1:]\n\n    # Convert the resulting string to an integer and return it\n    return int(new_num)\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Get the length of the string\n    num_len = len(num_str)\n    \n    # Initialize the next bigger number\n    next_bigger = 0\n    \n    # Iterate through each digit of the number and add it to the next bigger number\n    for digit in num_str:\n        next_bigger += int(digit)\n    \n    # Add the carry over from the previous iteration to the next bigger number\n    if next_bigger > 9:\n        next_bigger -= 9\n    \n    # Convert the next bigger number to a string and add 1 to the end to get the next number\n    next_bigger_str = str(next_bigger) + '1'\n    \n    # Convert the next bigger number string to an integer and return it\n    return int(next_bigger_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a string representation of the number\n    num_str = str(n)\n    # Find the maximum value in the string\n    max_value = max(num_str)\n    # Find the index of the maximum value\n    max_index = num_str.index(str(max_value))\n    # Rearrange the digits of the number to create the next bigger number\n    for i in range(max_index, len(num_str)):\n        num_str = num_str[:i] + str(max_value) + num_str[i+1:]\n    # Convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # convert the input number to a string\n    num_str = str(n)\n\n    # initialize a list to store the digits of the number\n    digits = []\n\n    # loop through each character in the string\n    for char in num_str:\n        # if the character is a digit, add it to the list of digits\n        if char.isdigit():\n            digits.append(int(char))\n\n    # sort the list of digits in descending order\n    digits.sort(reverse=True)\n\n    # initialize a string to store the rearranged digits\n    rearranged_digits = ''\n\n    # loop through the digits and add them to the rearranged string in the same order\n    for digit in digits:\n        rearranged_digits += str(digit)\n\n    # convert the rearranged string back to an integer and return it\n    return int(rearranged_digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # initialize an empty list to store the digits of the number\n    digits = []\n    \n    # convert the given number to a string and split it into its digits\n    for digit in str(n):\n        digits.append(int(digit))\n    \n    # reverse the list of digits\n    digits.reverse()\n    \n    # initialize a variable to store the sum of the digits\n    digit_sum = sum(digits)\n    \n    # initialize a variable to store the next bigger number\n    next_bigger = 0\n    \n    # loop through the digits of the number in reverse order\n    for i in range(len(digits)):\n        # check if the sum of the digits is less than the next bigger number\n        if digit_sum < next_bigger:\n            # add the next digit to the end of the next bigger number\n            next_bigger = digits[i]\n            # subtract the sum of the digits from the next digit\n            next_bigger += digit_sum\n            # break out of the loop since the next bigger number has been found\n            break\n        # add the current digit to the next bigger number\n        else:\n            next_bigger += digits[i]\n    \n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(map(int, str(n)))\n    max_digit = max(digits)\n    next_bigger = max_digit\n    for digit in digits:\n        if digit > max_digit:\n            next_bigger = digit\n            break\n    return str(int(''.join(map(str, digits)))+1)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(len(nums1)):\n        # insert the first element into the min heap\n        heapq.heappush(min_heap, (nums1[i], i))\n        # if the min heap size exceeds k, remove the last element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # create a list to store the result\n    result = []\n    \n    while min_heap:\n        # get the smallest element from the min heap\n        pair = heapq.heappop(min_heap)\n        \n        # if the second element is the minimum, add the pair to the result and insert the next element into the min heap\n        if pair[1] == 0:\n            result.append(pair)\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[pair[1]][0], 0))\n        # if the first element is the minimum, add the pair to the result and insert the next element into the min heap\n        else:\n            result.append(pair)\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums2[pair[1]][0], 1))\n                \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of size k\n    min_heap = []\n    # Use a dictionary to store the indices of each element in nums1 and nums2\n    indices = {}\n    for i, num in enumerate(nums1):\n        indices[num] = i\n    for i, num in enumerate(nums2):\n        indices[num] = i\n    # Sort the elements in nums1 and nums2\n    nums1.sort()\n    nums2.sort()\n    # Initialize the result list\n    result = []\n    # Iterate through nums1\n    for i in range(len(nums1)):\n        # If the heap is not full, add the current element to the heap and its index to the dictionary\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (nums1[i], i))\n            indices[nums1[i]] = None\n            indices[nums2[i]] = None\n        # If the heap is full and the smallest element in the heap is greater than the current element, pop the smallest element and add the current element to the heap and its index to the dictionary\n        elif nums1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (nums1[i], i))\n            indices[nums1[i]] = None\n            indices[nums2[i]] = None\n        # If the heap is full and the smallest element in the heap is less than or equal to the current element, add the current element to the result list\n        else:\n            result.append((nums1[i], nums2[min_heap[0][1]]))\n            # Remove the smallest element from the heap and its index from the dictionary\n            heapq.heappop(min_heap)\n            indices.pop(nums1[i])\n            indices.pop(nums2[min_heap[0][1]])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest k pairs\n    heap = []\n    for i in range(len(nums1)):\n        # for each element in nums1, add it to the heap\n        heapq.heappush(heap, (-nums1[i], i))\n        # if the heap has more than k elements, remove the largest element\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # initialize the result list\n    result = []\n    \n    # for each element in nums2, try to find a pair in nums1 that makes it the smallest\n    for j in range(len(nums2)):\n        # if there are still elements in the heap, and the smallest element in nums2 is greater than the current element in nums2, pop the smallest element from the heap and append it to the result list\n        if heap and -heap[0][0] > nums2[j]:\n            pair = (-heap[0][0], nums2[j], heap[0][1], j)\n            heapq.heappop(heap)\n            result.append(pair)\n        # else, if there are not enough elements in the heap or the smallest element in nums2 is smaller than the current element in nums2, add the current element in nums2 to the result list and pop the smallest element from the heap\n        else:\n            pair = (-nums1[heap[0][1]], nums2[j], heap[0][1], j)\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-nums1[heap[0][1]], heap[0][1]))\n            result.append(pair)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n\n    result = []\n\n    for num in nums1 + nums2:\n        if len(heap1) == k or len(heap2) == k:\n            break\n\n        if not heap1 or not heap2 or nums1[0] <= num <= heap1[0]:\n            heapq.heappush(heap1, -num)\n        else:\n            heapq.heappush(heap2, -num)\n\n    while heap1 and heap2:\n        result.append([heap1[0], heap2[0]])\n        heapq.heappush(heap1, -heapq.heappop(heap2))\n        heapq.heappush(heap2, -heapq.heappop(heap1))\n\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap to store the smallest pairs\n    min_heap = []\n\n    # Iterate through both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the current elements of both arrays\n            current_sum = nums1[i] + nums2[j]\n\n            # If the current sum is less than the minimum sum found so far or if the minimum sum found so far is greater than k, ignore the pair\n            if current_sum < min_heap[0][0] or (min_heap[0][0] == current_sum and len(min_heap) < k):\n                # Create a new pair with the current elements and the sum of them\n                pair = (current_sum, (nums1[i], nums2[j]))\n\n                # If the heap is empty or if the current pair is smaller than the minimum sum found so far, add the current pair to the heap\n                if not min_heap or current_sum < min_heap[0][0]:\n                    heapq.heappush(min_heap, pair)\n            # If the heap is not empty and the minimum sum found so far is equal to the current sum, add the current pair to the heap\n            elif min_heap[0][0] == current_sum:\n                heapq.heappush(min_heap, pair)\n\n            # If the heap is not empty and the minimum sum found so far is less than the current sum, pop the smallest pair from the heap and add the current pair to the heap\n            else:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, pair)\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    while min_heap and len(result) < k:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort the given arrays\n    nums1.sort()\n    nums2.sort()\n\n    # create a min heap with k elements\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # initialize the result list with an empty list\n    result = []\n\n    # traverse the arrays and update the min heap accordingly\n    i, j = 0, 0\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < min_heap[0]:\n            heapq.heappushpop(min_heap, -nums1[i] - nums2[j])\n            k -= 1\n        elif nums1[i] + nums2[j] == min_heap[0]:\n            heapq.heappushpop(min_heap, -nums1[i] - nums2[j])\n            result.append((nums1[i], nums2[j]))\n            k -= 1\n            i += 1\n            j += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # create a dictionary to store the index of the first element of nums1 for each element in nums2\n    index_dict = {}\n\n    for i, num2 in enumerate(nums2):\n        index_dict[num2] = i\n\n    # loop through nums1 and add each element to the min heap\n    for num1 in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num1)\n        else:\n            # if the size of the min heap is greater than k, pop the smallest element from it and add the current element to the min heap\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num1)\n\n    # create a list to store the result of the k smallest pairs\n    result = []\n\n    # loop through the min heap and add the elements to the result list\n    for _ in range(k):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap of tuples containing the values and indices of the first array\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (nums1[i], i))\n\n    # initialize the result list\n    result = []\n\n    # iterate until the heap is not empty and the result list has k elements\n    while min_heap and len(result) < k:\n        # pop the minimum value and index from the heap\n        value, index = heapq.heappop(min_heap)\n\n        # if the result list has less than k elements, add the pair to the result list\n        if len(result) < k:\n            result.append((value, nums2[index]))\n\n        # if the result list has more than k elements and the minimum value is smaller than the previous smallest value,\n        # add the pair to the result list and pop the minimum value and index from the heap\n        elif value < result[-1][0]:\n            result.append((value, nums2[index]))\n            heapq.heappop(min_heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of length k to store the smallest pairs\n    min_heap = []\n\n    # Initialize pointers for nums1 and nums2\n    i = 0\n    j = 0\n\n    # Loop through the two arrays until k pairs have been found\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        # Calculate the sum of the current pair\n        pair_sum = nums1[i] + nums2[j]\n\n        # If the pair_sum is smaller than the smallest element in the heap,\n        # add the pair to the heap and update i and j\n        if pair_sum < min_heap[0] or (pair_sum == min_heap[0] and nums1[i] < nums1[min_heap[0]]):\n            heapq.heappush(min_heap, pair_sum)\n            i += 1\n            j += 1\n            k -= 1\n        # If the pair_sum is larger than or equal to the smallest element in the heap,\n        # remove the smallest element from the heap and update i and j\n        else:\n            pair_sum = heapq.heappop(min_heap)\n            i += 1\n            k -= 1\n\n    # Return the smallest k pairs from the heap\n    return min_heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three parameters:\n    1. nums1: a list of integers, the first array\n    2. nums2: a list of integers, the second array\n    3. k: an integer, the number of pairs we want to find\n\n    This function returns a list of tuples, where each tuple contains two elements:\n    the first element is the element from nums1 and the second element is the element from nums2\n    which form a pair with the minimum sum.\n\n    Example:\n    Input: nums1 = [1, 7, 11], nums2 = [2, 4, 6], k = 3\n    Output: [(1, 2), (1, 4), (1, 6), (7, 2), (7, 4), (11, 2)]\n\n    Note: The length of nums1 and nums2 will be in the range [1, 1000].\n    The values of nums1 and nums2 will be in the range [1, 1000].\n    The value of k will be in the range [1, 1000].\n    \"\"\"\n    # Step 1: Create a min-heap of length k\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (float('inf'), None))\n\n    # Step 2: Iterate through nums1 and nums2\n    for num1 in nums1:\n        for num2 in nums2:\n            # Step 3: Calculate the sum of the current pair\n            pair_sum = num1 + num2\n\n            # Step 4: If the sum is less than or equal to the smallest element in the heap,\n            #   then update the heap with the current pair\n            if pair_sum <= heap[0][0]:\n                heapq.heapreplace(heap, (pair_sum, (num1, num2)))\n\n            # Step 5: If the heap is of length k, then return the smallest k pairs\n            if len(heap) == k:\n                yield heapq.heappop(heap)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function finds the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum product and the current minimum product\n    min_product = float('inf')\n    current_min_product = float('inf')\n\n    # Iterate through each tuple in the list\n    for tup in list1:\n        # Calculate the product of the tuple elements\n        product = 1\n        for elem in tup:\n            product *= elem\n\n        # Update the minimum product if the current product is smaller\n        if product < current_min_product:\n            min_product = current_min_product\n            current_min_product = product\n\n        # Update the current minimum product\n        else:\n            current_min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Finds the minimum product of pairs of tuples in a given list.\n    \"\"\"\n    min_product = float('inf')\n    for pair in list1:\n        product = 1\n        for elem in pair:\n            product *= elem\n        min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to be infinity\n    min_prod = float('inf')\n\n    # Iterate through all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            prod = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if the current product is smaller than the current minimum product\n            if prod < min_prod:\n                min_prod = prod\n\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function finds the minimum product of any two pairs of tuples from a given list.\n\n    :param list1: a list of tuples\n    :return: the minimum product of any two pairs of tuples from the given list\n    \"\"\"\n\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n\n            # If the product is less than the current minimum product, update the minimum product\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes in a list of tuples as an input and returns the minimum product of two tuples within the list.\n\n    Example:\n    list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    min_product_tuple(list1) # Output: 360\n\n    Note: The function should work for any list of tuples.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product from the pairs of tuples.\n    '''\n    product = float('inf')\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < product:\n                min_product = product\n                product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples in ascending order\n    list1.sort()\n    \n    # Initialize variables for the minimum product and the result\n    min_product = list1[0][0] * list1[0][1]\n    result = list1[0]\n    \n    # Loop through the sorted list of tuples\n    for i in range(1, len(list1)):\n        # Calculate the product of the two tuples in the list\n        product = list1[i][0] * list1[i][1]\n        \n        # If the product is smaller than the current minimum, update the minimum and result\n        if product < min_product:\n            min_product = product\n            result = list1[i]\n    \n    # Return the minimum product and the corresponding tuple\n    return min_product, result"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # check if list is empty\n    if len(listval) == 0:\n        return None\n    # initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # iterate through the rest of the list\n    for val in listval[1:]:\n        # if current value is less than minimum value, update minimum value\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the minimum value in the list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        return listval\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize a variable to store the minimum value\n    min_val = float('inf')\n\n    # iterate through the list and update the minimum value if a smaller one is found\n    for num in listval:\n        if num < min_val:\n            min_val = num\n\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if type(listval[0]) == int:\n        return min(listval)\n    elif type(listval[0]) == float:\n        return min(listval)\n    elif type(listval[0]) == str:\n        return min(listval)\n    else:\n        print(\"Invalid input\")"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n    # Loop through the list and compare each element with the minimum value found so far\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # split the word into individual words\n    words = word.split('_')\n\n    # capitalize each word except the first one\n    words = [words[0].capitalize() + word.capitalize() for word in words[1:]]\n\n    # join the words into a camel case string\n    camel_case = ''.join(words)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the word into words by underscores\n    words = word.split('_')\n\n    # Convert each word to camel case\n    camel_words = []\n    for word in words:\n        if word.isupper():\n            camel_words.append(word.lower())\n        else:\n            camel_words.append(word)\n\n    # Join the camel words into a string\n    camel_word = ''.join(camel_words)\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Remove underscores and capitalize the first letter of each word\n    words = re.findall(r'_(.?)(?=[A-Z])', word)\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Split the word into words and capitalize the first letter of each word except the first one\n    words = [word[0].upper()] + re.findall(r'(?<![A-Z])[A-Z]+', word)\n    # Join the words with camel case\n    camel_word = ''.join(words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert all underscores to spaces\n    word = re.sub(r'_','', word)\n    # Split the word into words and capitalize the first letter\n    words = [word[0].upper() + word[1:].lower() for word in word.split()]\n    # Join the words into a camel case string\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into words based on underscores\n    words = re.findall(r'\\w+', word)\n    # Capitalizing the first letter of each word\n    camel_case = []\n    for w in words:\n        if w == word:\n            camel_case.append(w)\n        else:\n            camel_case.append(w.capitalize())\n    # Joining the words into a camel case string\n    camel_case_string = ''.join(camel_case)\n    return camel_case_string"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Initialize an empty list to store the even numbers\n    even_list = []\n    # Loop through the input list\n    for num in l:\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            # If the number is even, add it to the even list\n            even_list.append(num)\n    # Return the even list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError(\"n is greater than the length of the list\")\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for i in range(len(list1)):\n        if i == n-1:\n            return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        for i in range(len(list1)):\n            if i == n-1:\n                return list1[i]\n    else:\n        print(\"Invalid input: the input should be a list of tuples\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # check if the current element is the nth element\n        if i == n-1:\n            # return the nth element\n            return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return None\n\n    # Check if the index is valid\n    if n < 0 or n >= len(list1):\n        return None\n\n    # Extract the nth element from the list\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n][0]\n    except IndexError:\n        return 'Index out of range'"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list exists in the second list or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            print(value, \"exists in both sequences\")\n        else:\n            print(value, \"doesn't exist in the second sequence\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Convert the input lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any value in set1 exists in set2\n    for val in set1:\n        if val in set2:\n            print(\"The value\", val, \"exists in both the lists.\")\n            return True\n    # If no value exists in both lists, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # iterate through the list1 and check if the value exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list exists in the second list or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list. If so, it returns True, else False.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): A sequence of values.\n    list2 (list): Another sequence of values.\n\n    Returns:\n    bool: True if any value in list1 exists in list2, otherwise False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n\n    Args:\n        list1 (list): A sequence.\n        list2 (list): Another sequence.\n\n    Returns:\n        bool: True if there is any overlapping value in the two sequences, False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the maximum and minimum values\n    in the array as well as the product of the maximum and minimum values.\n\n    If the array contains only one element, the function returns the element and its multiplicative identity 1.\n    '''\n\n    if len(arr) == 1:\n        return arr[0], 1, 1\n\n    max_val = min_val = arr[0]\n    product_max = arr[0]\n    product_min = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            product_max = max_val * min_val\n            max_val = arr[i]\n            min_val = arr[i]\n        elif arr[i] < min_val:\n            product_min = min_val * max_val\n            min_val = arr[i]\n        else:\n            continue\n\n        product_max = max(product_max, arr[i] * max_val)\n        product_min = min(product_min, arr[i] * min_val)\n\n    return max_val, min_val, product_max // product_min\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize maximum product and two indices\n    max_product = arr[0]\n    max_product_indices = (0, 0)\n    min_product = arr[0]\n    min_product_indices = (0, 0)\n    \n    # loop through the array\n    for i in range(1, len(arr)):\n        # update maximum product and its indices\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_indices = (i, 0)\n        elif arr[i] == max_product:\n            max_product_indices = (max_product_indices[0], i)\n        \n        # update minimum product and its indices\n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_product_indices = (i, 0)\n        elif arr[i] == min_product:\n            min_product_indices = (min_product_indices[0], i)\n    \n    # find the pair with highest product\n    max_product_indices_set = set(max_product_indices)\n    min_product_indices_set = set(min_product_indices)\n    highest_pair = max(max_product_indices_set, min_product_indices_set)\n    return arr[highest_pair[0]], arr[highest_pair[1]]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in a list of integers and returns a tuple containing the pair of integers with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    else:\n        max1 = arr[0]\n        max2 = arr[0]\n        min1 = arr[0]\n        min2 = arr[0]\n        for i in arr:\n            if i > max1:\n                max2 = max1\n                max1 = i\n            elif i > max2:\n                max2 = i\n            elif i < min1:\n                min2 = min1\n                min1 = i\n            elif i < min2:\n                min2 = i\n        return (max1, min1) if max1 * min1 > max2 * min2 else (max2, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')  # initialize max_product with negative infinity\n    max_pair = [0, 0]             # initialize max_pair with [0, 0]\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = [arr[i], arr[j]]\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (-1, -1) #initilize max_pair\n    \n    #loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            #find the product of the two subarrays\n            product = arr[i]*arr[j]\n            #compare the product to the current max_pair\n            if product > max_pair[0]:\n                max_pair = (product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -float('inf')\n    min_product = float('inf')\n    for num in arr:\n        if num > max_product:\n            max_product = num\n            min_product = num\n        elif num < min_product and num!= max_product:\n            min_product = num\n    return max(max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Create a dictionary to store the products of subarrays\n    product_dict = {}\n\n    # Iterate through the array and calculate the products of subarrays\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product not in product_dict:\n                product_dict[product] = subarray\n            elif product > product_dict[product][0]:\n                product_dict[product] = subarray\n\n    # Find the maximum product\n    max_product = 0\n    for key, value in product_dict.items():\n        if value[0] > max_product:\n            max_product = value[0]\n\n    # Return the maximum product and the subarray\n    return max_product, product_dict[max_product]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr = sorted(arr, reverse=True)\n\n    # Initialize variables to store the maximum and minimum products\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Iterate over the remaining array and find the pair with the highest product\n    for i in range(2, len(arr)):\n        current_product = arr[i] * arr[i-1]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < min_product:\n            min_product = current_product\n\n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a pair with highest product.\n    '''\n    max_product = float('-inf')\n    max_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        if len(set(tup[1:])) == 1:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary\n    common_dict = {}\n\n    # Iterate over the list of tuples\n    for tup in Input:\n\n        # Get the first element of the tuple\n        first_element = tup[0]\n\n        # Check if the first element exists in the dictionary\n        if first_element in common_dict:\n\n            # Add the second element of the tuple to the list of elements\n            common_dict[first_element].append(tup[1])\n\n        # If the first element is not in the dictionary, add the tuple to the dictionary with an empty list\n        else:\n            common_dict[first_element] = [tup[1]]\n\n    # Create an empty list to store the final result\n    result = []\n\n    # Iterate over the dictionary to find the common elements\n    for key, value in common_dict.items():\n\n        # Check if the length of the list of elements is greater than 1\n        if len(value) > 1:\n\n            # Add the common elements to the result list\n            for element in value:\n                result.append(element)\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create a dictionary to store common first element counts\n    common_first_dict = {}\n\n    # loop through each tuple in the input list\n    for i in Input:\n        # extract the first element from the tuple\n        first_element = i[0]\n\n        # if the first element is not already in the dictionary, add it with a count of 1\n        if first_element not in common_first_dict:\n            common_first_dict[first_element] = 1\n\n        # if the first element is already in the dictionary, increment its count by 1\n        else:\n            common_first_dict[first_element] += 1\n\n    # create a list of tuples containing the common first element and its count\n    common_first_tuples = [(key, value) for key, value in common_first_dict.items()]\n\n    # sort the list of tuples by descending count and ascending first element\n    common_first_tuples.sort(key=lambda x: (-x[1], x[0]))\n\n    # return the first tuple in the list (which is the most common first element)\n    return common_first_tuples[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if common_element is None:\n            common_element = tuple[0]\n        elif tuple[0] == common_element:\n            pass\n        else:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for i in range(len(Input)):\n        if len(common_elements) == 0:\n            common_elements.append(Input[i][0])\n        elif Input[i][0] == common_elements[-1]:\n            common_elements.append(Input[i][1])\n        else:\n            break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples where the common first element\n    is grouped together.\n    \"\"\"\n    common_elements = []\n    for i in range(len(Input)-1):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], [Input[i], Input[j]]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and groups them based on the common first element.\n    The function returns a dictionary where the key is the common first element and the value is a list of tuples where that element appears.\n    '''\n    common_elements = {}\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] in common_elements:\n                common_elements[Input[i][0]].append(Input[j])\n            else:\n                common_elements[Input[i][0]] = [Input[j]]\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] in result:\n            result[tup[0]].append(tup)\n        else:\n            result[tup[0]] = [tup]\n    return result.values()"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # sort the tuples based on first element\n    Input.sort(key=lambda x: x[0])\n\n    # initialize a set to store the common elements\n    common_elements = set()\n\n    # iterate through the sorted tuples\n    for i in range(len(Input)):\n        # get the first element of the current tuple\n        first_element = Input[i][0]\n\n        # check if the common element has already been added to the set\n        if first_element in common_elements:\n            # if it has, add the current tuple to the set of common tuples\n            common_elements.add(Input[i])\n        else:\n            # if it hasn't, add the current tuple to the set of common elements\n            common_elements.add(first_element)\n\n    # return the set of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary\n    common_first_element = {}\n    # iterate through the given list of tuples\n    for tup in Input:\n        # extract the first element of each tuple\n        first_element = tup[0]\n        # if the first element is not already a key in the dictionary, add it as a key with a value of 1\n        if first_element not in common_first_element:\n            common_first_element[first_element] = 1\n        # otherwise, increment the value of the first element key in the dictionary by 1\n        else:\n            common_first_element[first_element] += 1\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # iterate through the dictionary and find the common elements\n    for key, value in common_first_element.items():\n        if value == len(Input):\n            common_elements.append(key)\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element which has the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list\n    having the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initializing the sum variable to zero\n    sum = 0\n\n    # iterating n times\n    for i in range(1, n+1):\n        # finding the cube of the even natural number i\n        cube = i ** 3\n\n        # adding the cube to the sum\n        sum += cube\n\n    # returning the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum of cubes to zero\n    cube_sum = 0\n\n    # Loop from 1 to n (inclusive)\n    for i in range(1, n+1):\n\n        # Check if the number is even\n        if i % 2 == 0:\n\n            # Calculate the cube of the even number and add it to the cube sum\n            cube_sum += i**3\n\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(n):\n        sum_cube += i*i*i\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1,2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # Remove the last delimiter from the result string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    concatenated_string = delimiter.join(result)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = delimiter.join(map(str, test_tup))\n    return concatenated_str"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    return sum(cubes) / n\n\nprint(find_Average_Of_Cube(5))  # Output: 45.0"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    total_cubes = 0\n    for i in range(n):\n        total_cubes += i**3\n    average_cubes = total_cubes / n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*i*i\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    average_cube = cube_sum/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [num ** 3 for num in range(1, n+1)]\n    return sum(cubes) / len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        total_sum += i ** 3\n        count += 1\n    average = total_sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_cube = 0\n\n    for i in range(n):\n        sum_cube += i**3\n\n    average_cube = sum_cube/n\n\n    return average_cube"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, str):\n            result.append(element[-1])\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple) - 1:\n            rear_list.append(test_tuple[i])\n        else:\n            if isinstance(test_tuple[i], str):\n                rear_list.append(test_tuple[i][-1])\n            else:\n                rear_list.append(test_tuple[i])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, string in enumerate(test_tuple):\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str_[:len(str_) - 1] for str_ in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    Counts the number of sublists in a list containing the given element.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == x:\n            count += 1\n            if i == len(lst) - 1 or lst[i+1]!= x:\n                print(f\"There are {count} sublists containing {x}.\")\n                count = 0\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n\n    Parameters:\n    list1 (list): A list of lists.\n    x (any): The element to search for in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element x.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n    # check if match was found\n    if match:\n        # convert the matched groups to dd-mm-yyyy format\n        year, month, day = match.groups()\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert to yyyy-mm-dd format\n    yyyy_mm_dd = dt.split(\"-\")\n    year = int(yyyy_mm_dd[0])\n    month = int(yyyy_mm_dd[1])\n    day = int(yyyy_mm_dd[2])\n\n    # convert to dd-mm-yyyy format\n    day_str = str(day).zfill(2)\n    month_str = str(month).zfill(2)\n    year_str = str(year)\n    yyyy_mm_dd_str = year_str + \"-\" + month_str + \"-\" + day_str\n\n    # return new date in dd-mm-yyyy format\n    return yyyy_mm_dd_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year, month and day from the date string\n    year, month, day = [int(x) for x in re.findall(r'\\d+', dt)]\n    # Convert the month and day to the format dd-mm-yyyy\n    new_dt = f\"{day}-{month:02d}-{year:04d}\"\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() function to replace the date format with the desired format\n    new_dt = re.sub(pattern, lambda match: match.group(0)[6:4] + '-' + match.group(0)[4:2] + '-' + match.group(0)[2:0], dt)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = regex.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Define the regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() function to replace the pattern with a desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match a valid date string\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.search() function to match the pattern in the date string\n    match = re.search(pattern, dt)\n    # If a match is found, convert the date string to dd-mm-yyyy format\n    if match:\n        return match.group(0).replace('-', '/')\n    # If no match is found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the input date matches the pattern\n    if re.match(pattern, dt):\n        # Convert the date from yyyy-mm-dd to dd-mm-yyyy format\n        dt_new = '-'.join([dt[6:4], dt[3:5], dt[:2]])\n        return dt_new\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split date string into year, month, and day\n    year, month, day = dt.split('-')\n    \n    # Convert year to four digit format\n    year = str(int(year))\n    \n    # Reverse the order of year, month, and day\n    date_str = day + '-' + month + '-' + year\n    \n    # Return date in dd-mm-yyyy format\n    return date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regex pattern to match a date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Search for a date in the input string\n    match = re.search(pattern, dt)\n\n    # If a date is found, convert it to dd-mm-yyyy format\n    if match:\n        year, month, day = match.group(1).split('-')\n        dt = f'{day}-{month}-{year}'\n\n    return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the largest element in the array\n    max_val = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_val:\n            max_val = my_list[i]\n    \n    # Perform shell sort on the array\n    gap = max_val\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            # Insert the current element at its correct position\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    \n    n = len(my_list)\n    \n    # Find the maximum gap\n    max_gap = n // 2\n    \n    # Step through the array until the maximum gap is reached\n    while max_gap > 0:\n        \n        # Step through the array with the gap size\n        for i in range(max_gap, n):\n            \n            # Compare the current element with the previous element\n            temp = my_list[i]\n            j = i\n            \n            # Shift the elements to the right until the correct position is found\n            while j >= max_gap and my_list[j-max_gap] > temp:\n                my_list[j] = my_list[j-max_gap]\n                j -= max_gap\n                \n            my_list[j] = temp\n        \n        # Reduce the maximum gap by half\n        max_gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n                \n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    # get the length of the list\n    n = len(my_list)\n    \n    # set the increment value\n    inc = n // 2\n    \n    while inc > 0:\n        # iterate through the array using the increment value\n        for i in range(inc, n):\n            # compare the current element with its correct position\n            j = i\n            while j >= inc and my_list[j] > my_list[j-inc]:\n                # swap the elements if they are in the wrong order\n                my_list[j], my_list[j-inc] = my_list[j-inc], my_list[j]\n                j -= inc\n        # reduce the increment value\n        inc //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = key\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            \n            while j >= gap and key < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        \n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Initialize gap and list length\n    gap = my_list[1]\n    n = len(my_list)\n\n    # Iterate through gap values\n    while gap > 0:\n\n        # Iterate through list starting from gap value\n        for i in range(gap, n):\n\n            # Insert the current element at its correct position\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n\n        # Reduce gap value by factor of 1.3\n        gap = int(gap * 1.3)\n\n    # Return the sorted array\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # perform the elementwise and operation\n        test_tup1[i] &= test_tup2[i]\n        # append the result to a new tuple\n        result_tup = result_tup + (test_tup1[i],)\n    # return the new tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(x1 and x2) for x1, x2 in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    and_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n    \n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # use the bitwise AND operator to calculate the elementwise and tuple\n        and_tuple = test_tup1[i] & test_tup2[i]\n        # append the and_tuple to the and_tuples_list\n        and_tuples_list.append(and_tuple)\n        \n    # return the and_tuples_list\n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    \n    # create a new list to store the elementwise and tuples\n    and_tup_list = []\n    \n    # loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # create a new tuple to store the elementwise and\n        and_tup = (test_tup1[i] & test_tup2[i],)\n        # add the new tuple to the and_tup_list\n        and_tup_list.append(and_tup)\n    \n    # return the and_tup_list\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the elements are both True or both False\n        if (test_tup1[i] and test_tup2[i]):\n            # If they are both True, add the element to the new tuple\n            new_tuple = new_tuple + (test_tup1[i], test_tup2[i])\n        else:\n            # If they are both False, add the element to the new tuple\n            new_tuple = new_tuple + (test_tup1[i], test_tup2[i])\n    return new_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuple = tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # if the discriminant is negative, the parabola has no real roots\n    if disc < 0:\n        print(\"The parabola has no real roots.\")\n    # if the discriminant is zero, the parabola has a single real root\n    elif disc == 0:\n        x = -b/2/a\n        print(\"The directrix of the parabola is:\", x)\n    # if the discriminant is positive, the parabola has two real roots\n    else:\n        # calculate the first root\n        x1 = (-b + math.sqrt(disc))/(2*a)\n        \n        # calculate the second root\n        x2 = (-b - math.sqrt(disc))/(2*a)\n        \n        # print the roots\n        print(\"The first root of the parabola is:\", x1)\n        print(\"The second root of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return \"The equation of the parabola has no real root.\"\n    elif determinant == 0:\n        root1 = -b/2/a\n        root2 = -b/2/a\n        return \"The directrix of the parabola is equal to {}\".format(root1)\n    else:\n        root1 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n        root2 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        return \"The directrix of the parabola is between {} and {}\".format(root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant of the quadratic equation ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is negative, then the parabola has no real roots and there is no directrix.\n    if discriminant < 0:\n        return \"The parabola has no real roots and therefore cannot have a directrix.\"\n\n    # If the discriminant is zero, then the parabola has only one real root and there is one directrix.\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        return \"The directrix of the parabola is: x = {}\".format(x1)\n\n    # If the discriminant is positive, then the parabola has two real roots and there are two directrices.\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is: x1 = {} and x2 = {}\".format(x1, x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is x = {:.2f} and x = {:.2f}\".format(x1, x2))\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is x = {:.2f}\".format(x))\n    else:\n        print(\"The equation of the parabola is not real and does not have a unique directrix\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is equal to zero, then there is only one solution\n    if discriminant == 0:\n        x = (-b)/(2*a)\n        return x\n    \n    # Check if the discriminant is positive, then there are two solutions\n    elif discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    \n    # Otherwise, the discriminant is negative, so there are no solutions\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix of the parabola is:\", root)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    gradient = (2 * c * b) / (a**2)\n    directrix = (b**2 - 4 * a * c) / (2 * a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    This function calculates the directrix of a parabola given its coefficients a, b, and c.\n    It returns the directrix as a float value.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        return (-b + math.sqrt(discriminant)) / (2*a)\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is non-negative\n    if discriminant >= 0:\n        # calculate the two roots\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n\n        # sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n\n        # return the roots as the directrix\n        return root1, root2\n    else:\n        # if the discriminant is negative, return None as the directrix\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through the list1 elements\n    for element in list1:\n        # Check if the element is in list2\n        if element in list2:\n            return True\n\n    # If we make it here, no common element was found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Check if both lists are non-empty\n    if not list1 or not list2:\n        return False\n\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is any common element between the two sets\n    if set1 & set2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Loop through each element in the first list\n    for num1 in list1:\n        # Check if it exists in the second list\n        if num1 in list2:\n            return True\n    # If we reach here, there was no common element\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height % 2 == 0:\n        median = (base1 + base2 + height) / 2\n    else:\n        median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium\n    length = (area / 2) ** 0.5\n\n    # Calculate the median length of the trapezium\n    median = max(base1, base2) + length\n\n    # Return the median length of the trapezium\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5 * (base1 + base2 + math.sqrt(math.pow(base1,2) + math.pow(base2,2)) + math.sqrt(math.pow(height,2) + math.pow(base1 + base2,2)))"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    trapezium_length = 2 * area\n    median = trapezium_length / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the two halves of the trapezium\n    half1 = base1 + base2\n    half2 = height - (base1 + base2)\n    \n    # Find the median length of each half\n    half1_median = 0.5 * half1\n    half2_median = 0.5 * half2\n    \n    # Find the median of the two medians\n    median_of_medians = 0.5 * (half1_median + half2_median)\n    \n    # Return the median of the trapezium\n    return median_of_medians"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2)/2\n    base = area * height\n    trapezium_length = (3 * base)/2\n\n    if trapezium_length < area:\n        return (base1 + base2)/2\n    else:\n        return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the areas of the triangles\n    a1 = 0.5 * base1 * height\n    a2 = 0.5 * base2 * height\n    # calculate the areas of the rectangles\n    a3 = 0.5 * base1 * base2\n    # calculate the perimeter of the base\n    p = base1 + base2\n    # calculate the area of the trapezium\n    area = a1 + a2 + a3\n    # calculate the length of the semi-perimeter of the trapezium\n    s = 0.5 * p * (1 + (area / (a1 + a2)))\n    # calculate the length of the base of the trapezium\n    b = 0.5 * (a1 + a2)\n    # calculate the length of the first half of the trapezium\n    h1 = b - s\n    # calculate the length of the second half of the trapezium\n    h2 = b + s\n    # calculate the length of the trapezium\n    length = 0.5 * height * max(h1, h2)\n    # calculate the median length of the trapezium\n    median = length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_half = base1 / 2\n    base2_half = base2 / 2\n    area = 0.5 * (base1 * height + base2 * height)\n    area_side = 0.5 * (base1 * base1_half + base2 * base2_half)\n    area_trapezium = area - area_side\n    median_length = 0.5 * height\n    if area_trapezium > 0:\n        median_length = (area_trapezium / area) * median_length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    return (area / 2.0)**0.5"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapeziums\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the trapezium's base area\n    base_area = area1 + area2\n\n    # Calculate the trapezium's height\n    trapezium_height = (base_area / area2) ** 0.5\n\n    # Calculate the length of the trapezium\n    trapezium_length = (2 * base1 + 2 * base2) / 3\n\n    # Calculate the median length of the trapezium\n    median_length = (trapezium_length + trapezium_height) / 2\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            print(True)\n            break\n    else:\n        print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if number > elem:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\b[a][a]*[b][b]*\\b'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"aaaabbbb\"\nprint(text_match_one(text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'\\ba\\w*\\bb{1,}\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w+b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to string\n    num_str = str(n)\n    # Find the length of the string\n    length = len(num_str)\n    # Return the last digit of the number\n    return int(num_str[-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 10:\n        return last_Digit(n // 10)\n    else:\n        return n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list containing only the negative numbers in the original list.\n    '''\n    neg_nums = []\n    for num in lst:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list with all the negative numbers.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the new string\n    new_str = ''\n    # loop through each character in the original string\n    for char in str1:\n        # check if the character is odd\n        if char % 2 == 1:\n            # if it is, add it to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # convert the string to a list of characters\n    lst = list(str1)\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # loop through the list of characters\n    for char in lst:\n        # if the character is odd, append it to the even_str\n        if char % 2 == 1:\n            even_str += char\n    # return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(lambda x: x.isalnum() or x in [' '], str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_list = []\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = ''\n    for char in str1:\n        if char.isalnum():\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if c.isdigit() or int(c) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all odd characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit():\n            new_string += char\n        elif char % 2 == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum() and char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if (test_list[i][0], test_list[j][1]) in test_list or (test_list[j][0], test_list[i][1]) in test_list:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j] or (test_list[j][0], test_list[i][1]) in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 0\n    for num in L:\n        single_number += num\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if type(num) == int:\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num += num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the variable to store the sum of all the integers in the list\n    sum_of_integers = 0\n    \n    # Loop through each integer in the list and add it to the sum\n    for num in L:\n        sum_of_integers += num\n    \n    # Return the sum of all the integers in the list\n    return sum_of_integers"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers into a single string\n    joined_string = ''.join(str(num) for num in L)\n    # Convert the joined string into a single integer\n    single_num = int(joined_string)\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define regex pattern for adverb\n    adverb_pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # Find all matches of adverb pattern in the given text\n    matches = re.findall(adverb_pattern, text)\n    \n    # Initialize empty dictionary to store adverb and its position in the sentence\n    adverb_position = {}\n    \n    # Iterate through all matches and find their position in the sentence\n    for i, match in enumerate(matches):\n        # Find the first occurrence of the adverb in the sentence\n        index = text.index(match)\n        \n        # Add the adverb and its position to the dictionary\n        adverb_position[match] = index\n    \n    # Return the dictionary containing the adverb and its position in the sentence\n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a regular expression pattern for adverbs\n    pattern = r'\\b(really|actually|always|always|anytime|certainly|eventually|fairly|frequently|greatly|heavily|increasingly|initially|increasingly|just|lately|little|mainly|mostly|not|occasionally|regularly|rarely|seldom|slightly|somewhat|specifically|strongly|supposedly|typically|usually|very|very|weakly|often|sometime|sometimes|rarely|sometimes|often|often|sometimes|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasionally|occasionally|rarely|occasion"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb in the given sentence and returns its position in the sentence.\n    '''\n\n    # Match the first adverb in the sentence\n    adverb = re.findall(r'\\b\\w+ing\\b', text)[0]\n    \n    # Find the position of the adverb in the sentence\n    position = text.lower().find(adverb.lower())\n    \n    return position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a dictionary containing the \n    first adverb(s) and their positions in the sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(only|also|instead|too|just|maybe|really|also|unfairly|just|so|right|very|also|even|also|fairly|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the pattern for adverbs\n    pattern = r'\\b([a-z]+\\b\\s*[-]\\s*\\b[a-z]+\\b)'\n    # Use the pattern to find all matches in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # Create a list to store the adverbs and their positions\n    adverbs = []\n    # Loop through all the matches\n    for match in matches:\n        # Get the matched text and the position of the matched text in the original text\n        matched_text = match.group(1)\n        start_pos = match.start()\n        # Add the matched text and the position to the adverbs list\n        adverbs.append((matched_text, start_pos))\n    # Return the adverbs list\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[a-zA-Z]*\\b\\s*\\b(a|an|the|this|that|these|those)\\b\\s*\\b\\w*', text)\n\n    # Check if there is at least one adverb\n    if not adverbs:\n        print(\"No adverbs found in the sentence.\")\n        return\n\n    # Find the position of the first adverb\n    pos = text.find(adverbs[0][0])\n\n    # Print the adverb and its position in the sentence\n    print(f\"The first adverb is '{adverbs[0][0]}' and its position is {pos}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern for matching adverbs\n    pattern = r'\\b[a-z]+\\s*[-\u2013]\\s*[A-Z][a-z]+\\b'\n    # Find all matches in the text using the pattern\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Sort the matches by their position in the sentence\n    matches.sort(key=lambda x: text.index(x))\n    # Print the result\n    if matches:\n        print(f\"The first adverb is: {matches[0]}\")\n        print(f\"Its position in the sentence is: {text.index(matches[0])}\")\n    else:\n        print(\"No adverbs found in the text.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ing\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverb found:\", matches[0])\n        index = text.find(matches[0])\n        print(\"Adverb position:\", index)\n    else:\n        print(\"No adverb found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b(?:adverb|adv|adv\\.)\\b'\n    matches = re.findall(pattern, text.lower())\n    if matches:\n        # The adverb is the first word after the last noun or verb\n        adverb_position = text.lower().index(matches[0].lower()) + len(matches[0].lower()) + 1\n        return matches[0], adverb_position\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(\\w+)(?:ing|ed|ing\\w+|ed\\w+|ly|er|est|ly\\w+|er\\w+|est\\w+|ly\\s+|er\\s+|est\\s+)'\n    matches = re.finditer(pattern, text)\n    \n    if matches:\n        for match in matches:\n            adverb = match.group(1)\n            position = match.start()\n            print(f\"Adverb: {adverb}, Position: {position}\")\n            break\n    else:\n        print(\"No adverb found in the sentence.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    print(\"Surface area of cube of length\", l, \"is\", area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_list = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    \n    for num in num_list:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    \n    pos_ratio = (pos_count / len(num_list)) * 100\n    neg_ratio = (neg_count / len(num_list)) * 100\n    \n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')  # create an empty array to store positive numbers\n    \n    # loop through each element in the input array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            pos_nums.append(num)\n            \n    # find the total number of positive numbers in the array\n    total_pos = len(pos_nums)\n    \n    # calculate the ration of positive numbers\n    ratio = pos_nums.count(1) / total_pos\n    \n    # return the ration as a float\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    if zero_count == 0:\n        return 0.0\n    else:\n        return (pos_count / (pos_count + neg_count + zero_count))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of positive integers in the array.\n    '''\n    # Convert the input array to an array of characters\n    arr = array('i', nums)\n    # Initialize the count of positive integers to zero\n    count = 0\n    # Iterate over the array and count the positive integers\n    for num in arr:\n        if num > 0:\n            count += 1\n    # Calculate the ratio of positive integers\n    ratio = count / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create a new array of integers to store the positive numbers\n    positive = array('i')\n\n    # loop through the input array and append only positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n\n    # calculate the total number of positive numbers in the input array\n    total_positive = sum(positive)\n\n    # calculate the ration of positive numbers as a float\n    ration = total_positive / len(nums)\n\n    # return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an empty array to store the positive numbers\n    pos_arr = array('i')\n    \n    # Iterate through the array of integers\n    for num in nums:\n        # If the number is positive, add it to the positive array\n        if num > 0:\n            pos_arr.append(num)\n    \n    # Calculate the total number of positive numbers in the array\n    pos_count = len(pos_arr)\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums)\n    \n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    float: The ration of positive numbers in the array.\n\n    \"\"\"\n    # Initialize the array of positive and negative numbers\n    positive_nums = array('i')\n    negative_nums = array('i')\n\n    # Iterate through the array and add positive and negative numbers to the arrays\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n\n    # Find the length of the arrays and calculate the ration of positive numbers\n    num_pos = len(positive_nums)\n    num_neg = len(negative_nums)\n    num_total = num_pos + num_neg\n    ration = num_pos / num_total\n\n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negatives = array('i')\n    zeros = array('i')\n\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        elif num < 0:\n            negatives.append(num)\n        else:\n            zeros.append(num)\n\n    pos_count = len(positives)\n    neg_count = len(negatives)\n    zero_count = len(zeros)\n\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    \n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n            \n    positive_ratio = len(positive) / (len(positive) + len(negative))\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / len(nums)\n    neg_ratio = neg_count / len(nums)\n    return pos_ratio, neg_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') #initialize largest variable as negative infinity\n    for num in list1:\n        if num < 0 and num > largest: #check if current number is negative and greater than the current largest number\n            largest = num #if it is, update the largest variable with it\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize variables to keep track of the largest negative number and its index\n    largest = -1\n    largest_index = -1\n\n    # loop through each number in the list\n    for i in range(len(list1)):\n        # if the current number is negative and larger than the current largest negative number, update the variables\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n            largest_index = i\n\n    # return the largest negative number and its index\n    return largest, largest_index"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest_num = float('-inf') #initialize a variable to store the largest negative number\n    for num in lst:\n        if num < 0 and num > largest_num: #if the current number is negative and larger than the current largest negative number\n            largest_num = num #update the largest negative number to the current number\n    return largest_num #return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initialize largest as negative infinity\n    \n    for num in list1:\n        if num < 0 and num > largest: # check if current number is negative and greater than largest\n            largest = num # update largest if current number is greater than largest\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg = list1[0]\n    for i in list1:\n        if i < 0 and i > neg:\n            neg = i\n    return neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') # initial value of maximum negative number\n    for num in list1:\n        if num < 0:\n            max_neg = max(max_neg, num) # update max_neg if current number is negative\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j % K == 0:\n                test_list[i] = test_list[i][:j] + (K,) + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            if i >= K:\n                trimmed_tup += (tup[i],)\n            else:\n                trimmed_tup += (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list for i in range(len(t))]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1])\n\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][K:]))\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        trimmed_list.append(tuple(item[i:i+K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if i+j >= len(test_list):\n                break\n            for k in range(i+j+1):\n                test_list[i] = test_list[i][:k] + (test_list[i][k+1:j+k+1], test_list[i][j+k+1:])\n                break\n        else:\n            print(test_list[i])"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate through the tuple list\n    for tup in test_list:\n        # trim each tuple by k elements\n        tup = tup[K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # get the length of the tuple to get the size of the result tuple\n    size = len(test_tup1)\n    # create an empty tuple to store the result\n    result_tup = ()\n    # loop through the tuple elements and multiply the elements based on their indices\n    for i in range(size):\n        # if both tuples have the same number of elements, use the product function\n        if len(test_tup1) == len(test_tup2):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        # if either tuple has less elements than the other, use the min value\n        else:\n            result_tup += (min(test_tup1[i], test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths are not equal.\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples have different lengths\"\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # Check if the given tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The given tuples have different lengths\")\n    \n    # Initialize an empty result tuple\n    result_tup = ()\n    \n    # Perform the multiplication of each element in the tuple using index multiplication\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple length mismatch\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the list to set to remove duplicates\n    set_lst = set(lst)\n\n    # create a dictionary to store the count of each element\n    count_dict = {}\n\n    # iterate over the elements of the tuple and count their occurrence in the set_lst\n    for element in tup:\n        count_dict[element] = set_lst.count(element)\n\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst) \n    return dict(tup) == counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    \"\"\"\n    This function takes a tuple and a list as inputs and returns a dictionary containing the count of each element in the list.\n    \"\"\"\n    count_dict = Counter(lst)\n    return dict(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count = 0\n    for i in lst:\n        if i in count_dict:\n            count += count_dict[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_list = []\n    \n    for item in lst:\n        if item in count_dict:\n            count_list.append(count_dict[item])\n        else:\n            count_list.append(0)\n    \n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Creating a dictionary to store the count of each element of the list\n    count = Counter(lst)\n    \n    # Creating a dictionary to store the count of each element of the tuple\n    count_tup = Counter(tup)\n    \n    # Iterating through the keys of the count dictionary and adding the corresponding value of the count dictionary to the count_tup dictionary\n    for i in count:\n        count_tup[i] += count[i]\n        \n    # Printing the final count_tup dictionary\n    print(count_tup)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for element in lst:\n        if element in counter:\n            counter[element] += 1\n    return counter.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the list into a set to remove duplicates\n    unique_lst = list(set(lst))\n    \n    # Initialize a Counter object to count the occurrences of each element in the list\n    counter = Counter(unique_lst)\n    \n    # Count the occurrences of each element in the tuple\n    result = {}\n    for elem in tup:\n        if elem in counter:\n            result[elem] = counter[elem]\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Count the occurence of each element in the tuple\n    count_dict = Counter(tup)\n\n    # Print the result\n    print(\"The occurrence of each element in the tuple is:\")\n    for element in lst:\n        print(element, count_dict[element])"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (1/i)**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize sum variable\n    total = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Add the number to the sum\n        total += i\n\n    # Return the sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i*i*i*i*i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n\n    Parameters:\n    n: int\n        The number of terms to use in the sum.\n\n    Returns:\n    int\n        The sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (n * (n + 1)) // 2 + cal_sum(n - 1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_perrin = 0\n    for i in range(len(perrin_numbers)):\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # calculate the sum of perrin numbers using for loop\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_perrin = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_of_perrin += i\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n    # iterate through each Perrin number up to n\n    for i in range(1, n+1):\n        # calculate the Perrin number\n        perrin_num = i**i + i - 1\n        # add the Perrin number to the sum\n        total += perrin_num\n    # return the sum of the Perrin numbers\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (n - 1) * (2 * n - 1) // (2 * n) + cal_sum(n - 1)"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): A list of string values.\n    size (int): The size of the string to extract.\n\n    Returns:\n    list: A list of extracted string values.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_list.append(str_list[i][:size])\n        else:\n            extracted_list.append(str_list[i])\n    return extracted_list\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a size of string to be extracted as input.\n    It then extracts the specified size of strings from the list and returns them as a new list.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n        else:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified number of characters from a list of strings.\n\n    Args:\n    str_list (list): List of strings to extract characters from.\n    size (int): Number of characters to extract from each string.\n\n    Returns:\n    list: List of extracted characters from each string.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str)):\n        if i < l:\n            extracted_list.append(str[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings with the specified size.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of each string to extract as input,\n    and returns a list of extracted strings.\n    \"\"\"\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        extracted_str_list.append(str_list[i][:size])\n    return extracted_str_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove all double spaces\n    text = re.sub(r'\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \"\"\"\n    # Replace all whitespaces with empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        loss_amount = 0\n    else:\n        loss_amount = actual_cost - sale_amount\n\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    loss = 0\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n\n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.01 # assume loss percentage is 0.01 \n    if actual_cost >= (sale_amount + loss_percentage * sale_amount): \n        loss_amount = actual_cost - (sale_amount + loss_percentage * sale_amount) \n        return loss_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0 \n\n    for i in range(2, int(math.sqrt(n))+1) : \n\n        if n%i == 0 and i%2 == 0 : \n\n            sum += i \n\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            evenFactors.append(i)\n            n //= i\n    if n > 1:\n        evenFactors.append(n)\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n // i % 2 == 0 : \n                sum += n // i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= n: \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n        i += 1\n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Finding even factors of n\n    even_factors = []\n    for i in range(1, n+1, 2):\n        if n % i == 0:\n            even_factors.append(i)\n\n    # Summing up even factors\n    total_sum = sum(even_factors)\n\n    return total_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            count += 2\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of even factors:\", sumofFactors(n))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    match_obj = re.search(pattern, text)\n    if match_obj:\n        return match_obj.group()\n    else:\n        return \"No match found\"\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns True if the string contains a word containing 'z'.\n    '''\n    word_z = r'\\b[a-zA-Z]+z\\b'\n    pattern = re.compile(word_z)\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a list of strings containing the words containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w+z\\w+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    if len(monthnum2) == 2 and monthnum2[0].isdigit() and monthnum2[1].isdigit():\n        if int(monthnum2) >= 1 and int(monthnum2) <= 12:\n            days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            return days_in_month[int(monthnum2)-1]\n        else:\n            return \"Invalid month number.\"\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 2:\n        if year % 400 == 0 or (year % 100!= 0 and year % 4 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # check if the month has 31 days or not\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum2 in [2, 4, 6, 9, 11]:\n        if year % 4 == 0:\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    \n    # check if the month number has 31 days or not\n    if days_in_month[monthnum2-1] == 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 % 2 == 0:\n            return \"31 days\"\n        else:\n            return \"30 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum % 2 == 0:\n        return \"Invalid month number\"\n    elif monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return \"Invalid month number\"\n    elif monthnum > 12 or monthnum < 1:\n        return \"Invalid month number\"\n    elif monthnum in [4, 6, 9, 11]:\n        return 31\n    elif monthnum in [3, 5, 7, 8, 10, 12]:\n        return 30\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if (monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))) or (monthnum!= 2):\n        days_in_month[1] = 29\n    \n    if monthnum in range(1, 13):\n        if days_in_month[monthnum - 1] > 0:\n            print(f\"The month number {monthnum2} has {days_in_month[monthnum - 1]} days.\")\n        else:\n            print(f\"The month number {monthnum2} does not have any days.\")\n    else:\n        print(f\"Invalid month number {monthnum2}.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number\")\n        return\n    \n    # Check if the month number contains 31 days or not\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 3):\n        print(f\"{monthnum2} does not contain 31 days\")\n    elif monthnum2 in range(4, 7):\n        print(f\"{monthnum2} contains 31 days\")\n    else:\n        print(f\"{monthnum2} contains {days[monthnum2-4]} days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in range(1,13):\n        if monthnum == 2:\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0):\n                if monthnum % 2 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                if monthnum % 2 == 0:\n                    return False\n                else:\n                    return True\n        else:\n            return True if monthnum % 2 == 0 else False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 100000\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the smallest sublist present in the list.\n    '''\n    min_length = float('inf')\n    min_list = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_list = lst[i:j+1]\n\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    min_length = len(lst[0])\n    min_list = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_list = lst[i]\n\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the \n    minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    sublist = []\n    \n    # Iterate through the list and find the sublist with minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n    \n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        min_sublist = lst[0]\n        for i in range(1, len(lst)):\n            if len(lst[i]) < len(min_sublist):\n                min_sublist = lst[i]\n        return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n    l (float): Length of the rectangle.\n    b (float): Height of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Find all uppercase substrings in the given string\n    uppercase_substrings = re.findall(pattern, str1)\n\n    # Loop through all uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]{1}\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # remove uppercase substrings\n    string = re.sub(r'[A-Z]', '', string)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?<!\\w)(\\p{Lu})(?!\\w)'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # find all uppercase substrings in the string\n    uppercase_subs = pattern.findall(str1)\n    # loop through each uppercase substring and replace it with an empty string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Use the re.sub() function to replace uppercase substrings with an empty string\n    new_str = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'(?i)[A-Z]+')\n    result = uppercase_pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    # use the regular expression pattern to find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # remove the uppercase substrings from the string\n    for match in matches:\n        str1 = re.sub(pattern, '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expressions to remove all uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(r'(?<!\\w)([A-Z][a-z]+|[a-z][A-Z]+)')\n    return regex.sub('', string)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            lst[i] = Extract(lst[i])\n        elif isinstance(lst[i], str):\n            lst[i] = lst[i].split()[0]\n        else:\n            continue\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    if type(lst) == list: \n        for sublist in lst: \n            Extract(sublist) \n        for item in lst[0]: \n            print(item) "
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_sublist = []\n    for sublist in lst:\n        first_sublist.append(sublist[0])\n    return first_sublist"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            new_lst.append(sublist[0])\n        else:\n            new_lst.append(sublist)\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to hold the sublist elements\n    result = []\n    # Loop through each element of the input list\n    for item in lst:\n        # Check if the item is a sublist\n        if isinstance(item, list):\n            # If it is, extract the first element and add it to the result list\n            result.append(item[0])\n        # Otherwise, simply add the item to the result list as is\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize the result list to store the combinations\n    result = []\n\n    # Use a loop to iterate through each element in the list\n    for i in range(len(list1)):\n        # Use a nested loop to generate all possible combinations of the remaining elements\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the result list\n            result.append(list1[i:j])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            subset = list1[j:j+i]\n            if len(subset) == i:\n                result.append(subset)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store all combinations\n    combinations = []\n    # loop through each element of the input list\n    for i in range(len(list1)):\n        # loop through each remaining element of the input list\n        for j in range(i+1, len(list1)+1):\n            # append a tuple containing the two elements to the combinations list\n            combinations.append((list1[i], list1[j-1]))\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations of a given list.\n\n    Args:\n        lst (list): The list of elements to generate combinations of.\n\n    Returns:\n        list: A list of all possible combinations of the elements in the input list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n\n    n = len(lst)\n    res = []\n\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            res.append(lst[j:j+i])\n\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Create a copy of the list to avoid modifying the original one\n    list2 = list1.copy()\n    result = []\n    # Sort the list to make the combinations easier to find\n    list2.sort()\n    # Use a nested loop to generate all combinations of the elements of the list\n    for i in range(len(list2)):\n        for j in range(i+1, len(list2)+1):\n            # Append the combination to the result list\n            result.append(list2[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n\n    result = []\n    for i in range(len(list1)):\n        sublist = list1[:i] + list1[i+1:]\n        for combo in combinations_list(sublist):\n            result.append([list1[i]] + combo)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    '''\n    result = []\n    for i in range(1, len(lst)+1):\n        for j in range(len(lst)+1-i):\n            combination = lst[j:j+i]\n            if combination not in result:\n                result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize an empty list to store all possible combinations\n    combinations = []\n\n    # initialize an empty list to store the remaining elements of the list\n    remaining_elements = list1.copy()\n\n    # sort the remaining elements in ascending order\n    remaining_elements.sort()\n\n    # loop through the remaining elements one by one\n    for i in range(len(remaining_elements)):\n        # initialize an empty list to store the current combination\n        current_combination = []\n\n        # loop through the remaining elements starting from the next index\n        for j in range(i+1, len(remaining_elements)):\n            # append the current elements to the current combination\n            current_combination.append(remaining_elements[j])\n\n        # append the current combination to the combinations list\n        combinations.append(current_combination)\n\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        current_product = max(max_ending_here, current_product*max_ending_here)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if current_product < 0:\n            current_product = num\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n\n        if current_product < 0:\n            current_product = 1\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    curr_product = arr[0]\n    \n    for num in arr[1:]:\n        curr_product = max(curr_product*num, num)\n        max_product = max(max_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables to store the maximum product subarray ending at each index\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Calculate the maximum product ending at the current index\n        product_ending_here = max(arr[i], arr[i] * max_ending_here)\n\n        # Update the maximum product subarray ending at the current index\n        max_ending_here = max(product_ending_here, max_ending_here * arr[i])\n\n        # Update the maximum product subarray so far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # initialize variables\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n\n        # update max_ending_here and min_ending_here\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], max_ending_here * arr[i])\n\n        # update max_product\n        max_product = max(max_product, max_ending_here)\n\n    # return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return len(values) == 1 and values[0] in dict.values()"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input, and returns True if all values in the dictionary are same, and False otherwise.\n    '''\n    # If the length of the dictionary is less than n, return False\n    if len(dict) < n:\n        return False\n\n    # Initialize a variable to store the first value of the dictionary\n    first_value = next(iter(dict.values()))\n\n    # Iterate through the dictionary to check if all values are the same\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    for key, value in dict.items():\n        if key in dict:\n            if value!= dict[key]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Using a set to count the occurrences of each value in the dictionary\n    count = {}\n\n    for value in dict.values():\n        if value in count:\n            count[value] += 1\n        else:\n            count[value] = 1\n\n    # Checking if all values are same\n    for key, value in count.items():\n        if value!= n:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(n):\n        if dict[i] == dict[0]:\n            count += 1\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if len(set(value)) == 1:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if the dictionary is empty\n    if len(dict) == 0:\n        return True\n    \n    # get the first value from the dictionary\n    value = dict[list(dict.keys())[0]]\n    \n    # check if all the values are same as the first value in the dictionary\n    for key, val in dict.items():\n        if val!= value:\n            return False\n    \n    # if all the values are same, then return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the first element of the dictionary\n    value = dict.values()[0]\n    # Iterate over all the values of the dictionary\n    for i in range(1, len(dict)):\n        # If the current value is not equal to the stored value, return False\n        if dict.values()[i]!= value:\n            return False\n    # If all the values are same, return True\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Filter out empty items from the dictionary\n    filtered_dict = {key:value for key,value in dict1.items() if value!= ''}\n    return filtered_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '' or value is None:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    \n    max_ending_here = max(arr[0], arr[1])\n    min_ending_here = min(arr[0], arr[1])\n    \n    for i in range(2, n):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here, min_ending_here * arr[i])\n        min_ending_here = min(temp, min_ending_here * arr[i])\n        \n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Parameters:\n    -----------\n    arr: list\n        The list of integers that will be used to find the maximum product.\n\n    Returns:\n    --------\n    int\n        The maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    # Initialize the maximum subsequence and its index\n    max_subseq = [arr[0], arr[1]]\n    max_subseq_idx = 0\n\n    # Iterate over the remaining elements in the array\n    for i in range(2, len(arr)):\n        # If the current element is greater than the last element in the max subsequence,\n        # update the max subsequence and its index\n        if arr[i] > max_subseq[max_subseq_idx]:\n            max_subseq = [arr[i], arr[i]]\n            max_subseq_idx = 0\n        # If the current element is less than or equal to the last element in the max subsequence,\n        # append the current element to the max subsequence\n        elif arr[i] <= max_subseq[max_subseq_idx]:\n            max_subseq.append(arr[i])\n        # If the current element is equal to the last element in the max subsequence,\n        # update the max subsequence if the current element is greater than the last element or\n        # if the current element is equal to the last element and the previous element is greater than the current element\n        if arr[i] == max_subseq[max_subseq_idx] and max_subseq[max_subseq_idx - 1] < arr[i]:\n            max_subseq[max_subseq_idx] = arr[i]\n\n    # Compute the maximum product by multiplying all the numbers in the max subsequence\n    max_product = max_subseq[0]\n    for num in max_subseq:\n        max_product *= num\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list): A list of integers\n\n    Returns:\n        int: The maximum product of increasing subsequences.\n    \"\"\"\n    # Create an empty list to store the multiplied numbers\n    multiplied_numbers = []\n\n    # Initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n\n    # Loop through each element of the array\n    for i in range(len(arr)):\n        # Create an empty list to store the subsequence numbers\n        subsequence = []\n\n        # Loop through each element of the array starting from the current element\n        for j in range(i, len(arr)):\n            # Add the current element to the subsequence\n            subsequence.append(arr[j])\n\n            # Calculate the product of the subsequence numbers\n            product = 1\n            for num in subsequence:\n                product *= num\n\n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n\n            # If the current product is equal to the maximum product, check if it's an increasing subsequence\n            if product == max_product:\n                # Check if the subsequence is increasing\n                is_increasing = True\n                for k in range(len(subsequence) - 1):\n                    if subsequence[k] >= subsequence[k + 1]:\n                        is_increasing = False\n                        break\n                # If the subsequence is increasing, add the product to the multiplied numbers list\n                if is_increasing:\n                    multiplied_numbers.append(product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    # Initialize variables\n    max_product_ending_here = arr[0]\n    max_product_so_far = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update the max product ending here\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n\n        # Update the max product so far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize the maximum product and the current product to the first element of the array\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # Check if the current element is greater than the maximum product\n        if arr[i] > max_product:\n            # Update the maximum product\n            max_product = arr[i]\n            # Reset the current product to the current element\n            current_product = arr[i]\n        else:\n            # Calculate the current product by multiplying the current and the maximum product\n            current_product = max_product * arr[i]\n\n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize two pointers, one at the start and one at the end of the array.\n    i = 0\n    j = n-1\n\n    # Initialize two variables to store the maximum and minimum products formed by the increasing subsequence.\n    max_product_left = arr[i] * arr[j]\n    max_product_right = arr[i] * arr[j]\n    min_product_left = arr[i] * arr[j]\n    min_product_right = arr[i] * arr[j]\n\n    # While the pointers are not at the same index, swap the elements at the pointers and find the maximum and minimum products.\n    while i < j:\n        if arr[i] < arr[j]:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        else:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n\n        max_product_left = max(max_product_left, arr[i] * arr[j])\n        max_product_right = max(max_product_right, arr[i] * arr[j])\n        min_product_left = min(min_product_left, arr[i] * arr[j])\n        min_product_right = min(min_product_right, arr[i] * arr[j])\n\n        i += 1\n        j -= 1\n\n    # Return the maximum product formed by the increasing subsequence.\n    return max(max_product_left, max_product_right)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    # Initialize variables for the current subsequence and the maximum product\n    current_subseq = 1\n    max_product = 1\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the element is greater than the current subsequence, update the subsequence\n        if arr[i] > current_subseq:\n            current_subseq = arr[i]\n        # Otherwise, update the maximum product\n        else:\n            # If the current subsequence is greater than the maximum product, update it\n            if current_subseq > max_product:\n                max_product = current_subseq\n            # Otherwise, update the maximum product by multiplying the two subsequences\n            else:\n                max_product = max(max_product, current_subseq) * arr[i]\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Sort the array\n    arr.sort()\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is the first or last element\n        if i == 0 or i == n-1:\n            # If it's the first or last element, multiply it with the current product\n            curr_product *= arr[i]\n            max_product = max(max_product, curr_product)\n        else:\n            # If it's a middle element, multiply it with the previous product\n            curr_product *= arr[i]\n            max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # initialize a variable to store the sum of the first and second element of the tuple\n    pairwise_sum = test_tup[0] + test_tup[1]\n\n    # loop through the rest of the tuple and add each pair of neighboring elements to the sum\n    for i in range(2, len(test_tup)):\n        pairwise_sum += test_tup[i]\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables for the first and second elements\n    first = test_tup[0]\n    second = test_tup[1]\n    # initialize the result\n    result = first + second\n    # loop through the remaining elements of the tuple\n    for i in range(2, len(test_tup)):\n        # calculate the sum of the current element and the previous element\n        current = test_tup[i]\n        prev_sum = current + result\n        # update the result with the sum of the current element and the previous element\n        result = prev_sum\n    # return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i-1] + test_tup[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"The given tuple has less than two elements.\")\n        return\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        add_list = []\n        for i in range(len(test_tup)-1):\n            add_list.append(test_tup[i] + test_tup[i+1])\n        add_list.append(test_tup[-1] + test_tup[0])\n        return add_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to keep track of the sum of neighboring elements\n    sum_neighbors = 0\n    \n    # Iterate over the tuple and add the pairwise sum of the neighboring elements\n    for i in range(len(test_tup)-1):\n        sum_neighbors += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of the pairwise additions\n    return sum_neighbors"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    else:\n        return test_tup[0] + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple must have at least two elements.\")\n    \n    result = test_tup[0]\n    for i in range(1, len(test_tup)-1):\n        result += test_tup[i]\n    result += test_tup[-1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup) - 1):\n        count += test_tup[i] + test_tup[i+1]\n    return count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element of the tuple to the result\n        result += test_tup[i] + test_tup[i+1]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n\n    total = test_tup[0]\n    for i in range(1, len(test_tup)):\n        total += test_tup[i]\n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array of integers and a positive integer n as input and returns the product of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    # Return the result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product >= n:\n            product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i + 1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] == l[i-1] + 1:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    elif l[0] == l[1]:\n        return check_Consecutive(l[2:])\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1 & set2"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through each tuple in the first list\n    for tuple1 in test_list1:\n        # Check if the tuple is in the second list and add it to the intersection set if it is\n        if tuple1 in test_list2:\n            intersection.add(tuple1)\n\n    # Return the intersection set as a list of tuples\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements from the first list\n    set1 = set(test_list1)\n    \n    # Find the common elements in the second list and store in a set\n    common_elements = set1.intersection(set(test_list2))\n    \n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for element1 in test_list1:\n        for element2 in test_list2:\n            if element1 == element2:\n                result.append(element1)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for i in range(len(test_list1)):\n        if all(e in test_list2 for e in test_list1[i]):\n            result.append(test_list1[i])\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_tuples = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                common_tuples.append(t1)\n                break\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    if len(test_list1) > len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    intersection = []\n    for element in test_list1:\n        if element in test_list2 and element not in intersection:\n            intersection.append(element)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a dictionary to store the counts of elements in each list\n    count_dict = {}\n    for item in test_list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Iterate over the second list to find the tuple intersection\n    intersection = []\n    for item in test_list2:\n        if item in count_dict and count_dict[item] > 0:\n            intersection.append(item)\n            count_dict[item] -= 1\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the given tuple list\n    set1 = set(test_list1)\n    # Create an empty set for the intersection\n    set_intersect = set()\n    # Iterate through the given tuple list 1\n    for item1 in test_list1:\n        # Check if the item is present in the set 2\n        if item1 in set1 and item1 not in set_intersect:\n            # If it is present in both sets, add it to the intersection set\n            set_intersect.add(item1)\n    return tuple(set_intersect)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and sort them\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    set1.sort()\n    set2.sort()\n    \n    # Initialize an empty set to store the intersection\n    intersection = set()\n    \n    # Iterate over the sorted sets and add the common elements to the intersection\n    for element in set1:\n        if element in set2:\n            intersection.add(element)\n    \n    # Convert the intersection set back to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # convert string to list of characters\n    str1_list = list(str1)\n    # loop through each character in the list\n    for i in range(len(str1_list)):\n        # check if the character is the target character\n        if str1_list[i] == ch:\n            # replace the character with the new character\n            str1_list[i] = newch\n    # convert list of characters back to string and return\n    return ''.join(str1_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize a new string to store the modified string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the current character is equal to the character to be replaced, replace it with the new character\n        if char == ch:\n            new_str += newch\n        # Otherwise, add the current character to the new string\n        else:\n            new_str += char\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the character ch in the string str1 with the character newch.\n    '''\n    # Use a loop to replace all occurrences of ch in str1 with newch\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the character 'ch' in the string'str1' with 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.items())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert dictionary to list of tuples\n    data_list = list(dict1.items())\n    # sort the list of tuples based on values\n    data_list.sort(key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted list\n    sorted_dict = dict(data_list)\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)  # convert the dictionary to a Counter object\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)  # sort by value in reverse order\n    return dict(sorted_counter)  # convert back to a dictionary and return it"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object to count the frequency of each element in the dictionary\n    counter = Counter(dict1)\n    # Sort the counter by value in descending order and then by key in ascending order\n    sorted_counter = sorted(counter.items(), key=lambda x: (-x[1], x[0]))\n    # Create a new dictionary with the sorted counter\n    sorted_dict = {key: value for key, value in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # initialize variables for the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # loop through the array and find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        print(\"Array should have at least two elements.\")\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest values\n    sum_of_max_min = nums[0] + nums[1]\n    return sum_of_max_min"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the maximum and minimum value in the array\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Find the sum of the maximum and minimum value\n    sum_max_min = max_num + min_num\n\n    return sum_max_min"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # Return the sum of the two largest and two smallest values\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Return the lowercase string\n    return string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case.\n    '''\n    for char in string:\n        if not char.islower():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string contains only lowercase letters.\n    '''\n    lower_string = string.lower()\n    if lower_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the lowercase version of the string.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    # convert the string to lower case\n    string = string.lower()\n\n    # return the lower case string\n    return string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case using the lower() method\n    lower_string = string.lower()\n    # Return the converted string\n    return lower_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from the given string and return the modified string.\n    '''\n    # Compile a regular expression pattern for lowercase substrings\n    lowercase_pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    \n    # Replace all lowercase substrings with an empty string\n    modified_string = lowercase_pattern.sub('', string)\n    \n    return modified_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into individual words\n    words = str1.lower().split()\n    # Loop through each word and remove any lowercase substrings\n    for i in range(len(words)):\n        words[i] = re.sub(r'([a-z])', r'', words[i])\n    # Join the words back together into a string and return it\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    substrings = re.findall(pattern, str1)\n    for substr in substrings:\n        str1 = re.sub(r'\\b' + substr + r'\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    \n    # Use the pattern to find all lowercase substrings in the string\n    substrings = pattern.findall(str1)\n    \n    # Loop through each substring and remove it from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings\n    pattern = r'[a-z]+'\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the regular expression pattern to match lowercase substrings\n    pattern = r'(?i)\\b[a-z]+\\b'\n\n    # Find all the lowercase substrings in the given string using the regular expression pattern\n    lowercase_substrings = re.findall(pattern, str1)\n\n    # Remove all the lowercase substrings from the original string\n    for sub in lowercase_substrings:\n        str1 = re.sub(r'\\b' + sub + r'\\b', '', str1)\n\n    # Return the modified string with lowercase substrings removed\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define regular expression pattern for matching lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # find all the matches in the string\n    matches = pattern.findall(str1)\n    # loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings and remove them\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to a string\n    num = str(n)\n    # Return the first digit of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to a string\n    s = str(n)\n    # Return the first character of the string\n    return s[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the input to a string to allow string slicing\n    num = str(n)\n    # slice the string to get the first character\n    first = num[0]\n    # convert the first character to an integer\n    first_int = int(first)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    :param n: A number.\n    :return: The first digit of the number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** (len(str(n)) - 1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the number is a string or integer\n    if isinstance(n, str) or isinstance(n, int):\n        # convert the number to a string\n        n = str(n)\n        # check if the number is empty\n        if n == '':\n            # return an error message\n            return \"Error: The input number is empty\"\n        # check if the number has only one digit\n        elif len(n) == 1:\n            # return the first digit of the number\n            return n[0]\n        # check if the number has multiple digits\n        else:\n            # loop through each character in the number\n            for char in n:\n                # check if the character is a digit\n                if char.isdigit():\n                    # return the first digit of the number\n                    return char\n    # return an error message if the input is not a number\n    else:\n        return \"Error: The input is not a number\""
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list: \n        if i % 2!= 0: \n            odd_list.append(i) \n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store odd numbers\n    odd_list = []\n    \n    # Loop through each number in the input list\n    for num in list:\n        # If the number is odd, add it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n            \n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_lst = []\n    \n    # Loop through each number in the input list\n    for num in lst:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is odd, append it to the odd list\n            odd_lst.append(num)\n            \n    # Return the odd list\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers in the list.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # calculate difference\n    difference = sum_cubes - sum_natural\n\n    # print the difference\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(n)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(n))\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_numbers += i\n    \n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing variables\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # finding sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # finding sum of first n natural numbers\n    for j in range(1, n+1):\n        sum_natural += j\n    \n    # finding difference between sum_cubes and sum_natural\n    difference = abs(sum_cubes - sum_natural)\n    \n    # returning the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return n * (n + 1) * (2 * n + 1) / 6\n    \n    # Function to calculate the sum of the first n natural numbers\n    def sum_of_numbers(n):\n        return n * (n + 1) * (n + 2) / 6\n    \n    # Find the difference between the two sums\n    result = sum_of_cubes(n) - sum_of_numbers(n)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the difference between the sum of cubes of the first `n` natural numbers and the sum of the first `n` natural numbers.\n    \"\"\"\n    cubes = [i**3 for i in range(1, n+1)]\n    sums = [i for i in range(1, n+1)]\n    return sum(cubes) - sum(sums)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize a variable to keep track of the number of pairs whose xor value is odd\n    odd_pairs = 0\n\n    # Iterate through the array A\n    for i in range(N):\n        # Iterate through the remaining array A[i+1:]\n        for j in range(i+1, N):\n            # Calculate the xor of the current elements in A[i] and A[j]\n            xor = A[i] ^ A[j]\n\n            # If the xor is odd, increment the odd_pairs variable\n            if xor % 2!= 0:\n                odd_pairs += 1\n\n    # Return the count of odd_pairs\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_val = 0\n    for i in range(N):\n        xor_val = xor_val ^ A[i]\n        if (xor_val & 1) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A and the length N of the list.\n    It then calculates the sum of all elements in the list A and stores it in a variable called total.\n    It then iterates over the list A, starting from the first element, and calculates the xor value of each element with all the other elements in the list.\n    If the xor value is odd, it increments the count variable by 1.\n    Finally, it returns the count variable.\n    \"\"\"\n    total = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j and (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    \n    for i in range(N) : \n        for j in range(i+2,N) : \n            if A[i] ^ A[j] % 2!= 0 : \n                count += 1\n                \n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a new string with all characters in uppercase\n    uppercase_string = string.upper()\n    # create a new string with all characters in lowercase\n    lowercase_string = string.lower()\n    # combine the uppercase and lowercase strings\n    final_string = uppercase_string + lowercase_string\n    # return the final string\n    return final_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Convert all uppercase letters to lowercase\n    for i in range(len(string)):\n        if string[i] >= 'A' and string[i] <= 'Z':\n            string = string[:i] + string[i].lower() + string[i+1:]\n    \n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the toggled case of the input string\n    result = ''\n    # loop through each character in the input string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            result += char.lower()\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            result += char.upper()\n        # otherwise, leave the character as is\n        else:\n            result += char\n    # return the toggled case of the input string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.swapcase() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # iterate through each character in the string\n    for i in range(len(string)):\n        # if the character is lowercase, convert it to uppercase\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # if the character is uppercase, convert it to lowercase\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Remove leading zeros from n1 and n2\n    while n1 and n1[0] == '0':\n        n1 = n1[1:]\n    while n2 and n2[0] == '0':\n        n2 = n2[1:]\n\n    # Convert n1 and n2 to lists of digits\n    n1_list = list(map(int, n1))\n    n2_list = list(map(int, n2))\n\n    # Calculate the per-digit difference between the two lists of digits\n    digit_diff = sum(abs(a-b) for a, b in zip(n1_list, n2_list))\n\n    # Convert the digit difference to a string and return it\n    return str(digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables\n    sum_diff = 0\n    # loop through each digit in the numbers\n    for i in range(10):\n        # find the difference between the digits\n        diff = abs(n1 % 10 - n2 % 10)\n        # add the difference to the sum\n        sum_diff += diff\n        # shift the numbers to the right by one digit\n        n1 //= 10\n        n2 //= 10\n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    sum_diff = 0\n    for i in range(10):\n        sum_diff += diff % 10\n        diff //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two integers to strings so we can compare them\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # iterate over each character in the strings\n    sum_diff = 0\n    for i in range(len(str_n1)):\n        # compute the per-digit difference\n        diff = abs(ord(str_n1[i]) - ord(str_n2[i]))\n        \n        # add the difference to the running total\n        sum_diff += diff\n        \n    # return the total difference sum\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert integers to lists of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference\n    digit_diff = [abs(num1_digits[i] - num2_digits[i]) for i in range(len(num1_digits))]\n\n    # Calculate the sum of the per-digit difference\n    digit_sum = sum(digit_diff)\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = n1 - n2\n    sum_diff = 0\n\n    while difference > 0:\n        digit = difference % 10\n        difference //= 10\n        sum_diff += digit\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and split them into lists\n    num1_list = list(str(n1))\n    num2_list = list(str(n2))\n    \n    # Initialize variables to store the sum of per-digit differences\n    sum_diff = 0\n    \n    # Loop through the digits of the two numbers\n    for i in range(len(num1_list)):\n        # Calculate the absolute difference between the corresponding digits\n        diff = abs(int(num1_list[i]) - int(num2_list[i]))\n        # Add the per-digit difference to the sum of differences\n        sum_diff += diff\n    \n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    # Loop through each digit of the two numbers and calculate the per-digit difference\n    for i in range(10):\n        d1 = n1 // 10 ** i % 10\n        d2 = n2 // 10 ** i % 10\n        diff = abs(d1 - d2)\n        total += diff ** 2\n    # Calculate the sum of the squared differences and return the result\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    while n1!= 0 or n2!= 0:\n        difference += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for i in range(len(str(n1))):\n        digit_sum += abs(ord(str(n1)[i]) - ord(str(n2)[i]))\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"Size of the sublist is greater than the length of the list.\")\n    if size == 1:\n        return max(a)\n    else:\n        max_so_far = a[0]\n        max_ending_here = a[0]\n        for i in range(1, size):\n            max_ending_here = max(a[i], max_ending_here + a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list a and a size as input and returns the sum of the largest contiguous sublist in the list.\n    \n    If the size is greater than the length of the list, return 0.\n    '''\n    if size > len(a):\n        return 0\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    max_ending_here = max_sub_array_sum(a[1:], size-1)\n    max_so_far = max(max_ending_here, a[0])\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    :param a: the input list\n    :param size: the size of the sublist to consider\n    :return: the sum of the largest contiguous sublist\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for end in range(size, len(a)):\n        current_sum += a[end]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_ending_here = max(max_ending_here, current_sum)\n\n    return max_ending_here"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the input tuples to sets to remove duplicates and sort the elements\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n\n    # Combine the two sets to get the union and convert back to a list\n    union = list(set1 + set2)\n\n    # Output the union of the two input tuples\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # find the union of the two tuples\n    union = test_tup1 + test_tup2\n\n    # sort the union list in ascending order\n    union.sort()\n\n    # return the sorted union list\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Convert the tuples to sets to remove duplicates and sort the elements in ascending order\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n\n    # Find the union of the sets\n    union = set1 + set2\n\n    # Convert the union back to a tuple and sort it in ascending order\n    union_tup = tuple(sorted(union))\n\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one big tuple\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Use set() to remove duplicates from the combined tuple\n    unique_tuple = list(set(combined_tuple))\n    \n    # Sort the unique tuple in ascending order\n    unique_tuple.sort()\n    \n    # Print the sorted unique tuple\n    print(unique_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    union_tup = test_tup1 + test_tup2\n    # Convert the tuple to a set to remove duplicates\n    union_set = set(union_tup)\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n\n    # Convert the tuple to a set to eliminate duplicates\n    unique_tuple = set(combined_tuple)\n\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_tuple = tuple(sorted(unique_tuple))\n\n    # Print the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # convert the set back to a tuple and sort it\n    sorted_tup = sorted(unique_set)\n    # output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Convert the combined tuple into a set to remove duplicates\n    unique_set = set(combined_tuple)\n    \n    # Convert the set back into a tuple and sort it in ascending order\n    sorted_tuple = tuple(sorted(unique_set))\n    \n    # Return the sorted tuple as the output\n    return sorted_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n\n    # Sort the combined tuple in ascending order\n    sorted_tuple = sorted(combined_tuple)\n\n    # Output the sorted tuple\n    print(\"Union of elements in the two tuples:\", sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # flatten the tuples to get a list of elements\n    flat_tup1 = list(test_tup1)\n    flat_tup2 = list(test_tup2)\n\n    # create an empty list to hold the union of elements\n    union_list = []\n\n    # loop through each element in the two flattened tuples and add it to the union list if it doesn't already exist\n    for elem in flat_tup1:\n        if elem not in union_list:\n            union_list.append(elem)\n\n    for elem in flat_tup2:\n        if elem not in union_list:\n            union_list.append(elem)\n\n    # sort the union list in ascending order\n    union_list.sort()\n\n    # output the union list as a tuple\n    print(tuple(union_list))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the variables to store the length of the longest sublist\n    max_length = 0\n    current_length = 0\n\n    # Iterate through the list of sublists\n    for sublist in lst:\n\n        # Calculate the length of the current sublist\n        current_length = 0\n        for i in range(len(sublist)):\n            current_length += 1\n\n        # Update the max_length if necessary\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currentLength = 0\n\n    for num in lst:\n        currentLength += 1\n        maxLength = max(maxLength, currentLength)\n\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    sublist_lengths = []\n    for sublist in lst:\n        sublist_lengths.append(len(sublist))\n        if max_length < len(sublist):\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    \n    # Loop through each sublist\n    for sublist in lst:\n        # Add the length of the sublist to the current length\n        current_length += len(sublist)\n        \n        # If the current length is greater than the max length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n            \n    # Return the maximum length of all sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist present in the list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Use regular expression to find all the values between quotation marks in the string\n    values = re.findall(r'\"(.*?)\"', text)\n    \n    # Remove any extra spaces in the values and return them\n    return [value.strip() for value in values]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<=\\')([^\\']+)\\'\n\n    # use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    values = re.findall(pattern, text)\n\n    # return the list of values found\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(\"(?:[^\"\\\\]|\\\\.)*\")'\n    matches = re.findall(pattern, text)\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r\"\\\"(.*?)\\\"|\\'.*?\\'\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip() for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"([^\"]*)\"(?!\\\\)'\n    matches = re.findall(pattern, text)\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'  # match strings between double quotes\n    matches = re.findall(pattern, text)  # find all matches in the text\n    values = []\n    for match in matches:\n        value = match[1:-1]  # remove the quotes from the value\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\\\\\"]|\\\\.)*\"' # regex pattern to match values between double quotes\n    values = re.findall(pattern, text) # find all matches of the pattern in the text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # initialize a counter variable to store the count of pairs\n    count = 0\n    # loop through the array from index 0 to n-2\n    for i in range(n-2):\n        # loop through the array from index i+1 to n-1\n        for j in range(i+1, n):\n            # check if the elements at indices i and j are not equal\n            if arr[i]!= arr[j]:\n                # if they are not equal, increment the count variable\n                count += 1\n    # return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    # Initialize two variables for counting pairs\n    count = 0\n    count_pair = 0\n\n    # Traverse through the array\n    for i in range(n):\n        # Traverse through the array again from next element\n        for j in range(i+1, n):\n            # Check if the elements are unequal\n            if arr[i]!= arr[j]:\n                # Increment the count of pairs\n                count_pair += 1\n            else:\n                # Increment the count of equal pairs\n                count += 1\n\n    # Return the count of pairs\n    return count_pair"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through each digit in the string and add it to the sum\n    for digit in num_str:\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    # Loop through each character in the string\n    for digit in n_str:\n        # Convert the character to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum\n        sum_of_digits += digit_int\n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through each digit in the integer\n    while n > 0:\n        # add the current digit to the sum\n        sum += n % 10\n\n        # remove the last digit from the integer\n        n //= 10\n\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    # Loop through each digit of the number\n    while n > 0:\n        # Add the current digit to the sum\n        total += n % 10\n        # Remove the current digit from the number\n        n //= 10\n    # Return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string so that we can work with its digits\n    num_str = str(n)\n    \n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    \n    # Loop through each digit in the string and add it to the sum_digits variable\n    for digit in num_str:\n        sum_digits += int(digit)\n    \n    return sum_digits"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(x <= y for x, y in zip(list1, list1[1:]))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n\n    Args:\n        lst: A list.\n\n    Returns:\n        True if the list is sorted in ascending order, and False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # loop through each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(list1)):\n        # sort the sublist\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        list1.remove(sublist)\n        list1.append(sorted_sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        list1[list1.index(sublist)] = sorted_sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # iterate over each list in the input list\n    for lst in nums:\n        # iterate over each number in the list\n        for num in lst:\n            # add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # return the list of unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty dictionary to store unique elements and their indices\n    unique_dict = {}\n    # loop through each number in the list\n    for num in nums:\n        # if the number is already in the dictionary, add the index to the list of indices\n        if num in unique_dict:\n            unique_dict[num].append(nums.index(num))\n        # if the number is not in the dictionary, add it to the dictionary and its index to the list of indices\n        else:\n            unique_dict[num] = [nums.index(num)]\n    # create a new list to store the unique elements\n    unique_list = []\n    # loop through the unique dictionary and add the elements to the new list\n    for key, value in unique_dict.items():\n        if len(value) == 1:\n            unique_list.append(key)\n    # return the new list of unique elements\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    # Convert the lists to sets to remove duplicates\n    unique_nums = set(num for nums in nums for num in nums)\n    \n    # Convert the set back to a list and sort it\n    result = sorted(list(unique_nums))\n    \n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    # create a set to store the unique numbers\n    unique_nums = set(nums)\n\n    # convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists of integers.\n\n    Returns:\n        list: A list containing all the unique numbers from the input lists.\n    \"\"\"\n\n    unique_nums = []\n    for lst in nums:\n        unique_nums.extend(set(lst))\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # iterate over each list in the given number of lists\n    for lst in nums:\n        # iterate over each number in the list\n        for num in lst:\n            # if the number is not in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Remove duplicates from the first list\n    nums[0] = list(set(nums[0]))\n\n    # Remove duplicates from the second list\n    nums[1] = list(set(nums[1]))\n\n    # Combine the two lists\n    combined_list = nums[0] + nums[1]\n\n    return combined_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the lists to sets to remove duplicates\n    sets = [set(num) for num in nums]\n    # Convert the sets back to lists to remove duplicates\n    return [list(num) for num in sets]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]!= nums[j]:\n                unique_nums.append(nums[i])\n                break\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # create a set of unique numbers from the input list\n    product = 1  # initialize the product to 1\n    \n    # loop through the unique numbers and calculate the product\n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    unique_nums_product = 1\n    for num in unique_nums:\n        unique_nums_product *= num\n    return unique_nums_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return 1 if len(unique_numbers) == 0 else (1 if len(unique_numbers) == 1 else unique_numbers[0] * unique_product(unique_numbers[1:]))"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Define a set to store the unique numbers in the list\n    unique_set = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for num in unique_set:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set from the input list\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    # Create a set to store unique numbers\n    unique_set = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set from the input list to get the unique numbers\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Parameters:\n    list_data (list): A list of integers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r**2 + 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    # A = pi * r^2 * h\n    area = 3.14 * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    pi = 3.14159265358979323846\n    return 2*pi*r**2 + 2*pi*r*h + pi*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    surface_area = 2 * (3.14 * r * r + 3.14 * h * h)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula: A = 2 * \u03c0 * r * h\n    surface_area = 2 * math.pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h  # Formula for surface area of a cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r ** 2 + 2 * 3.14 * r * h + 2 * 3.14 * h ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a sphere using the formula:\n    # surface area = 4 * pi * r^2\n    s = (2 * r * h) + (2 * r * r)\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (3.14 * r * r) + 2 * (3.14 * r * h)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = j = 0\n    return True if j == len(B) else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # check if the list A is in list B\n    if all(x in B for x in A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if A is a sublist of B and False otherwise.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    i = 0\n    for elem in B:\n        if elem in A:\n            i += 1\n        if i == len(A):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    n=len(A)\n    m=len(B)\n    while i<n and j<m:\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i=i-j+1\n            j=0\n    if j==m:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is a sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            if B.index(A[i]) > i:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n    else:\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input and checks whether the first list is sublist of the second list or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A):\n\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = 0\n            i += 1\n\n        if j == len(B):\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Sort both the lists\n    A.sort()\n    B.sort()\n\n    # Check if lengths are equal\n    if len(A)!= len(B):\n        return False\n\n    # Check if first element of B is in first element of A\n    if B[0] not in A:\n        return False\n\n    # Check if A is a sublist of B\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the last digit of the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 0: \n        fact *= n\n        n = n // 10\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # initialize the result variable to 0\n    result = 0\n    # initialize a variable to hold the last digit of the factorial of n\n    last_digit = 0\n    # loop through each digit of the factorial of n\n    while n > 0:\n        # extract the last digit of n and add it to the result variable\n        last_digit = n % 10\n        result = result + last_digit\n        # remove the last digit from n\n        n = n // 10\n    # return the result variable\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function finds the last digit in the factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # extract the last digit from the factorial\n    last_digit = factorial % 10\n\n    # return the last digit\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial = factorial * n\n        n = n - 1\n    \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the given number to string\n    num_str = str(n)\n    # find the length of the string\n    len_num = len(num_str)\n    # find the last digit of the factorial of the number\n    last_digit = int(num_str[len_num-1])\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the interleaved list\n    result = []\n    \n    # iterate through each item in the 3 lists\n    for i in range(len(list1)):\n        # add the first item from each list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Iterate through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Create a new list of length 3n, where n is the length of the input lists\n    flat_list = list1 + list2 + list3\n\n    # Return the flat list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the final result\n    result = []\n    \n    # loop through each list and concatenate it with the previous result\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"All lists must have the same length.\"\n    \n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # Iterate through each list and append the corresponding element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[j])\n        flat_list.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Use set operations to find the elements that are present in only one of the tuples\n    diff1 = set(test_tup1).difference(set(test_tup2))\n    diff2 = set(test_tup2).difference(set(test_tup1))\n\n    # Return the elements that are present in only one of the tuples\n    return diff1.union(diff2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # If the element at index i of the first tuple is not equal to the same element at index i of the second tuple, add it to the dissimilar_list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_list.append(element)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a list containing the elements that are not present in both tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize a set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup2[i] not in test_tup1:\n            # If the element is not present, add it to the dissimilar set\n            dissimilar_set.add(test_tup1[i])\n\n    # Convert the dissimilar set to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store dissimilar elements\n    dissimilar_list = []\n    # iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # check if the element at index i in test_tup1 is different from the element at index i in test_tup2\n        if test_tup1[i]!= test_tup2[i]:\n            # if it is different, append it to the dissimilar_list\n            dissimilar_list.append(test_tup1[i])\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n\n    return dissimilar_set"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            even_elements.append(even_fnc(item))\n        else:\n            even_elements.append(item)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.append(even_fnc(item))\n        else:\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_list = []\n    \n    for sublist in test_tuple: \n        even_list.append(even_fnc(sublist)) \n        \n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Use a list comprehension to remove uneven elements from the nested tuple\n    even_tuple = [elem for elem in test_tuple if even_fnc(elem)]\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Flatten the nested tuple using a loop\n    flat_tuple = []\n    for sub_tuple in test_tuple:\n        for elem in sub_tuple:\n            flat_tuple.append(elem)\n\n    # Use the even_fnc function to filter even elements\n    result_tuple = []\n    for elem in flat_tuple:\n        if even_fnc(elem):\n            result_tuple.append(elem)\n\n    # Convert the result tuple back to a nested tuple\n    final_result = ()\n    for sub_tuple in result_tuple:\n        final_result += (sub_tuple,)\n    return final_result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_list.append(even_ele(item, even_fnc))\n        else:\n            new_list.append(even_fnc(item))\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_tuple.append(item)\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n\n    test_list = [x for sublist in test_tuple for x in sublist]\n    even_list = [x for x in test_list if is_even(x)]\n\n    if even_fnc:\n        even_list = even_fnc(even_list)\n\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    def inner_even_fnc(elem):\n        if type(elem) in (tuple, list):\n            return inner_even_fnc(elem)\n        return even_fnc(elem)\n\n    filtered_tuple = tuple(filter(inner_even_fnc, test_tuple))\n    return filtered_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function calculates the surface area of a square pyramid with the given base edge and height.\n    '''\n    surface_area = (base_edge * height) + ((base_edge**2) * (height/2))\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base\n    area_base = b * b\n    \n    # Calculate the surface area of the pyramid\n    area_pyramid = 2 * b * s\n    area_pyramid += 2 * b * b * s / 3\n    \n    # Return the surface area\n    return area_base + area_pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Base edge and height\n    area = (b**2) * s + (b**2) * b + (b**2) * (s**2)\n    \n    # Print the surface area\n    print(\"Surface Area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2 * s) + (b**2 * (s-1)) + ((b-1)**2 * s) + ((b-1)**2 * (s-1))\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of each pyramid\n    area1 = 0.5 * b * b\n    area2 = 0.5 * s * s\n    \n    # calculate the total surface area\n    surface_area = area1 + area2\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for surface area of square pyramid\n    surface_area = (b * s) * 2\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s * 2) + (b * s * 2) + ((b**2)*s**2) + ((b**2)*s**2) + ((b*s*3)*4) + ((b*s*3)*4)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Finding the surface area of a square pyramid\n    area = (b * s)/2\n    # Returning the surface area of the square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = b * s * 2  # Calculate the surface area using the given formula\n    return surface"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(d):\n    '''\n    Check if a dictionary is empty.\n    '''\n    if not d:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty.\n    '''\n\n    # Check if the dictionary is empty\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(d):\n    '''\n    Check if a dictionary is empty\n    '''\n    if len(d) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Initialize the first two terms of the series\n    catalan = [1, 1]\n\n    # Calculate the remaining terms of the series\n    for i in range(2, n+1):\n        catalan.append(2*catalan[i-1] - catalan[i-2])\n    \n    # Return the nth term of the series\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula C(n, r) = binomial(2n, r)/(r+1)\n    \"\"\"\n\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for r in range(1, n+1):\n            result += binomial(2*n, r)/(r+1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Initialize the first two terms of the sequence\n    catalan_seq = [1, 1]\n\n    # Calculate the remaining terms of the sequence\n    for i in range(2, n+1):\n        catalan_seq.append(2*i - 1)\n        for j in range(i):\n            catalan_seq[i] += catalan_seq[j] * catalan_seq[i-1-j]\n\n    # Return the nth term of the sequence\n    return catalan_seq[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \n    :param n: an integer\n    :return: the nth Catalan number\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_num = 1\n        for i in range(1, n+1):\n            catalan_num += (4*i*(n-i+1))/(i*(2*i-1))\n        return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    # Initialize catalan number array\n    catalan = [0] * (n + 1)\n\n    # Calculate catalan number recursively\n    for i in range(1, n + 1):\n        catalan[i] = i * catalan[i - 1] + i * catalan[i - 2]\n\n    return catalan[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number using recursion.\n\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(1)\n    1\n    >>> catalan_number(5)\n    10\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num # number of rows\n    a = [1] * (2 * n) # vector of n + 1 zeros\n    for i in range(2, 2 * n + 1):\n        for j in range(1, i):\n            a[i] += a[j] * a[i - j]\n    return a[2 * n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    c = [1]\n    for i in range(1, n + 1):\n        c.append(c[i - 1] * (n - i + 1) // i)\n    return c[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    # Define a recursive function to calculate the catalan number\n    def catalan(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return catalan(n, k-1) * (2*k-1) / (k + 1)\n\n    # Return the nth catalan number\n    return catalan(2*n, n)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    # Use the re.finditer() function to find all the matches in the given text\n    matches = re.finditer(pattern, text)\n    # Initialize an empty list to store the adverb positions and values\n    positions = []\n    # Loop through all the matches and add their positions and values to the list\n    for match in matches:\n        positions.append((match.start(), match.group(0)))\n    # Return the list of adverb positions and values\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r\"\\bly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[aeiou][aeiou][aeiou][aeiou]\\b'\n\n    # Find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Create a list of tuples, where each tuple contains the matched adverb and its position in the text\n    adverbs = []\n    for match in matches:\n        start_index = text.lower().find(match.lower())\n        end_index = start_index + len(match)\n        adverbs.append((match, start_index, end_index))\n\n    # Sort the list of adverbs by their starting positions in the text\n    adverbs.sort(key=lambda x: x[1])\n\n    # Return the list of adverbs with their starting positions in the text\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # Define the regular expression pattern to match the adverb ending with ly\n    pattern = r'\\b(\\w+\\s)?(a|an|the)\\s*(ly)\\b'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches are found\n    if matches:\n        # Print the positions and first adverb found\n        for i, match in enumerate(matches):\n            print(f'{i+1}. {match[0]}: {match[1]} {match[2]}')\n        \n        # Return the positions of the first adverb found\n        return [m.start() for m in matches[0]]\n    else:\n        # If no matches are found, return an empty list\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w+ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the adverbs ending with \"ly\" using a regular expression\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Loop through each adverb and its position in the string\n    for i, adverb in enumerate(adverbs):\n        # Split the adverb into its parts and check if the last part is \"ly\"\n        parts = adverb.split(' ')\n        if parts[-1] == 'ly':\n            positions.append(len(' '.join(parts[:-1])))\n    # Return the positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb ending with ly and its positions in the string.\n    '''\n    \n    # Find all the occurrences of the adverb ending with ly in the text\n    matches = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    \n    # Initialize an empty list to store the adverb and its positions in the text\n    result = []\n    \n    # Iterate over the matches and add the adverb and its position to the result list\n    for match in matches:\n        result.append((match, text.find(match)))\n        \n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+ly\\b')\n    matches = pattern.findall(text)\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the positions and adverbs\n    for i, match in enumerate(matches):\n        print(f\"Adverb {i+1}: {match} at position {text.find(match)}\")\n\n    # If no adverbs are found, print a message\n    if not matches:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and returns\n    a list of the n most expensive items in the list.\n    '''\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    \n    # Pop the n most expensive items from the heap and add them to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a heap (priority queue) to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Return the n most expensive items in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # convert the items list to a heap\n    heap = [(-item, i) for i, item in enumerate(items)]\n    heapq.heapify(heap)\n\n    # extract the n most expensive items from the heap\n    result = [heapq.heappop(heap)[1] for _ in range(n)]\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and an integer n, returns a list of the n most expensive items in the list.\n    If there are fewer than n items, returns the entire list.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, -item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [-heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns the n most expensive items in the list.\n\n    :param items: a list of items to find the n most expensive items for\n    :param n: the number of most expensive items to return\n    :return: a list of the n most expensive items in the dataset\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        min_heap.append(heapq.nsmallest())\n\n    # Loop through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items from the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap with size n to store the top n expensive items\n    min_heap = []\n    for item in items:\n        # If heap is full, remove the smallest item from heap\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n        # Add the current item to heap\n        heapq.heappush(min_heap, item)\n    # Return the top n expensive items\n    return heapq.nsmallest(n, min_heap)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Initialize the new list with the first n elements of the original list\n    new_list = l[:n]\n    # Add the remaining elements of the original list to the end of the new list\n    new_list += l[n:]\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        return [l[0], *l[1:]]\n    else:\n        return [l[0], *split_Arr(l[1:], n-1)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    l_split = l[:n] + [l[n]]\n    # Join the two parts of the list to form the new list\n    l_new = l_split[:-1] + l_split[-1]\n    return l_new"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    if n >= len(l):\n        print(\"Invalid input\")\n        return\n\n    first_part = l[:n]\n    second_part = l[n:]\n\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    mid = len(l)//2\n    first_part = l[:mid]\n    last_part = l[mid:]\n    \n    # add the first part to the end of the last part\n    last_part.extend(first_part)\n    \n    # return the last part\n    return last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        return l[:n] + [l[n]]\n    else:\n        return None"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"List length is less than the n-th element\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list should have at least 2 elements.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # Find the maximum value in the list\n    max_num = max(nums)\n    # Find the minimum value in the list\n    min_num = min(nums)\n    # Calculate the difference between the maximum and minimum value\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_num - min_num\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty!\"\n    if len(nums) == 1:\n        return \"List has only one element!\"\n    return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 1:\n        return max(nums) - min(nums)\n    else:\n        return None"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store the largest and smallest values in the list\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # loop through the list and update the max and min values\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        elif nums[i] < min_val:\n            min_val = nums[i]\n    \n    # return the difference between the max and min values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        print(i, i*i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for num in range(a, b+1):\n        square = num * num\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list to store all the perfect squares between a and b\n    perfect_squares_list = []\n    # Loop through a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i*i == i:\n            perfect_squares_list.append(i)\n    # Return the list of perfect squares\n    return perfect_squares_list\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    i = 1\n    \n    while i*i <= b:\n        if i*i == a:\n            return count\n        elif i*i > a:\n            i += 1\n        elif i*i < a:\n            i -= 1\n        count += 1\n    \n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a list of perfect squares between them.\n    \"\"\"\n    # List to store the perfect squares between a and b\n    perfect_squares_list = []\n    \n    # Iterate from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square_root = num ** 0.5\n        if square_root.is_integer():\n            perfect_squares_list.append(square_root)\n    \n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a set to store perfect squares\n    perfect_squares = set()\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of i is a perfect square\n        if i**2 == i:\n            # Add the square to the set of perfect squares\n            perfect_squares.add(i**2)\n\n    # Return the set of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n\n    # initialize a counter to keep track of the number of perfect squares\n    count = 0\n\n    # loop through the numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            # if it is, increment the counter\n            count += 1\n\n    # return the final count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize variables\n    squares = []\n    \n    # loop through a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = i*i\n        \n        # if i is a perfect square, append it to the list\n        if square == i:\n            squares.append(square)\n    \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): radius of the point\n    theta (float): angle of the point (in radians)\n\n    Returns:\n    x (float): x-coordinate of the point\n    y (float): y-coordinate of the point\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes two parameters, r and theta, which are the magnitude and angle of a point in polar coordinates.\n    It converts the point from polar to rectangular coordinates and returns the x and y coordinates.\n    \"\"\"\n    # Convert angle from degrees to radians\n    theta = theta * (cmath.pi/180)\n    # Calculate x and y coordinates from polar coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    # Return the x and y coordinates\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 2:\n        return newList\n    \n    first_element = newList[0]\n    second_element = newList[length-1]\n    newList[0] = second_element\n    newList[length-1] = first_element\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if the list is not empty\n    if len(newList) == 0:\n        print(\"Error: List is empty\")\n        return\n\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is greater than or equal to 2\n    if length >= 2:\n        # Get the second last element of the list\n        secondLast = newList[length - 2]\n        # Get the last element of the list\n        last = newList[length - 1]\n        # Set the last element as the first element of the list\n        newList[length - 1] = newList[0]\n        # Set the second last element as the last element of the list\n        newList[length - 2] = secondLast"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Get the first and last elements of the list\n        first = newList[0]\n        last = newList[-1]\n        # Interchange the first and last elements\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list is even or odd\n    if length % 2 == 0:\n        # If the list has even length, swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # If the list has odd length, swap the middle two elements\n        newList[0], newList[length//2] = newList[length//2], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #checking if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list does not have at least two elements\")\n        return\n\n    #swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function computes the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (integer): The total number of outcomes for the binomial experiment.\n    k (integer): The number of outcomes to be selected.\n\n    Returns:\n    (integer): The sum of the product of consecutive binomial co-efficients.\n\n    \"\"\"\n\n    # Compute the product of consecutive binomial coefficients\n    product = 1\n    for i in range(1, k+1):\n        product *= (n-i+1) // i\n    for i in range(k, n+1):\n        product *= i // k\n\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0 #base case\n    else: \n        return binomial_Coeff(n-1,k) + (n-k)*binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the binomial coefficient array\n    coeff = [1] * (k+1)\n\n    # Calculate the binomial coefficients\n    for i in range(1, k+1):\n        coeff[i] = coeff[i-1] * (n-i+1) // i\n\n    # Calculate the sum of the product of the binomial coefficients\n    result = 0\n    for i in range(k+1):\n        result += coeff[i]\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    \n    sum = 0\n    for i in range(1, k+1):\n        sum += (n-i+1)*binomial_Coeff(n-1, i-1)\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case\n    if k == 0 or k == n:\n        return 1\n    else:\n        # Calculate the binomial coefficient\n        c = n * binomial_Coeff(n-1, k-1)\n        return c"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: #if k is greater than n, then there is no way to form a sum of consecutive binomial co-efficients with that many terms\n        return 0\n    elif k == 0: #if k is 0, the sum of consecutive binomial co-efficients is 1\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    result = binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Find the binomial coefficient of n choose k\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    else:\n        coeff = 1\n        for i in range(1, k+1):\n            coeff *= (n-i+1) / i\n        return coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return ip.lstrip('0.')\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r\"^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$\")\n    if pattern.match(ip):\n        return ip.replace(\"0\", \"\")\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    This function takes in an ip address as a string and removes any leading zeroes.\n    \"\"\"\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address using regular expressions\n    ip = re.sub('^0+', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+\\.\\d+\\.\\d+\\.\\d+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s+|\\s+$', '', ip)  # remove leading/trailing whitespace\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\s+|\\s+\\d+\\.\\d+\\.\\d+\\.\\d+$', '', ip)  # remove leading/trailing ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each part of the ip address\n    parts = ip.split('.')\n    for i in range(len(parts)):\n        parts[i] = re.sub('^0+', '', parts[i])\n    \n    # Join the parts back into an ip address\n    ip = '.'.join(parts)\n    \n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    first_even = None\n    first_odd = None\n    \n    # iterate over the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            # if so, update the first even number\n            if first_even is None:\n                first_even = num\n            # if the current number is less than the first even number, update it\n            elif num < first_even:\n                first_even = num\n        # check if the number is odd\n        elif num % 2 == 1:\n            # if so, update the first odd number\n            if first_odd is None:\n                first_odd = num\n            # if the current number is less than the first odd number, update it\n            elif num < first_odd:\n                first_odd = num\n    \n    # return the difference of the first even and first odd numbers\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list is empty or not\n    if len(list1) == 0:\n        return None\n    \n    # check if the list contains only one element or not\n    if len(list1) == 1:\n        return None\n    \n    # find the even and odd numbers in the list\n    even = list1[0]\n    odd = list1[0]\n    \n    # loop through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n            \n    # return the difference of the even and odd numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0 and odd % 2 == 0:\n        diff = 0\n    else:\n        diff = abs(even - odd)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n\n    # Get the first even number from the list\n    even_num = next((num for num in list1 if num % 2 == 0), None)\n\n    # Get the first odd number from the list\n    odd_num = next((num for num in list1 if num % 2!= 0), None)\n\n    # Calculate the difference between the even and odd numbers\n    diff = even_num - odd_num\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns the difference between the first even and first odd number.\n    If the first even number is not found, it returns None.\n    If the first odd number is not found, it returns the difference between the last even and last odd number.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_start = None\n    odd_start = None\n\n    for i, num in enumerate(lst):\n        if num % 2 == 0:\n            even_count += 1\n            if even_start is None:\n                even_start = i\n        else:\n            odd_count += 1\n            if odd_start is None:\n                odd_start = i\n\n    if even_count == 0:\n        return None\n    elif odd_count == 0:\n        even_index = lst.index(even_start)\n        odd_index = lst.index(odd_start)\n        diff = lst[even_index - 1] - lst[odd_index + 1]\n        return diff\n    else:\n        even_index = lst.index(even_start)\n        odd_index = lst.index(odd_start)\n        diff = lst[even_index - 1] - lst[odd_index + 1]\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    even_first = lst[0]\n    odd_first = lst[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if even!= 0 and odd!= 0:\n            break\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = even - num\n        elif num % 2!= 0:\n            if odd is None:\n                odd = num\n            else:\n                odd = odd - num\n    if even is None or odd is None:\n        return \"The list does not contain any even or odd number.\"\n    else:\n        return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    if even_num == 0:\n        return \"List does not have any even number.\"\n    elif odd_num == 0:\n        return \"List does not have any odd number.\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Initialize variables to store length of both strings and number of swaps required\n    len1 = len(str1)\n    len2 = len(str2)\n    swaps = 0\n\n    # Initialize variables to store the length of the binary representation of each string\n    len1_bin = 0\n    len2_bin = 0\n\n    # Count the length of the binary representation of each string\n    for i in range(len1):\n        if str1[i] == '1':\n            len1_bin += 1\n\n    for i in range(len2):\n        if str2[i] == '1':\n            len2_bin += 1\n\n    # Compare the length of binary representation and return the minimum number of swaps required\n    if len1_bin > len2_bin:\n        swaps = len1_bin - len2_bin\n    elif len1_bin < len2_bin:\n        swaps = len2_bin - len1_bin\n    else:\n        swaps = 0\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert binary strings to lists of bits\n    bin_str1 = [int(bit) for bit in str1]\n    bin_str2 = [int(bit) for bit in str2]\n\n    # Find the length of the shorter binary string\n    min_len = min(len(bin_str1), len(bin_str2))\n\n    # Initialize variables to store the number of swaps and the number of bits swapped\n    swaps = 0\n    bits_swapped = 0\n\n    # Iterate through the binary strings and swap bits if they are different\n    for i in range(min_len):\n        if bin_str1[i]!= bin_str2[i]:\n            if bin_str1[i] == 0:\n                bin_str1[i] = 1\n                bits_swapped += 1\n                swaps += 1\n            else:\n                bin_str1[i] = 0\n                bits_swapped += 1\n                swaps += 1\n\n    # Return the minimum number of swaps required to convert the two binary strings\n    return swaps, bits_swapped"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2): \n    n = len(str1) \n    swaps = 0 \n    i = j = 0 \n  \n    while i < n and j < n: \n        if str1[i]!= str2[j]: \n            if str1[i] == '1' and str2[j] == '0': \n                str1[i], str1[j] = str1[j], str1[i] \n                str2[i], str2[j] = str2[j], str2[i] \n                swaps += 1 \n            elif str1[i] == '0' and str2[j] == '1': \n                str1[i], str1[j] = str1[j], str1[i] \n                str2[i], str2[j] = str2[j], str2[i] \n                swaps += 1 \n            i += 1 \n            j += 1 \n        elif str1[i] == str2[j]: \n            i += 1 \n            j += 1 \n  \n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables\n    count = 0\n    swaps = 0\n    carry = 0\n\n    # iterate through each bit of the binary strings\n    for i in range(31, -1, -1):\n        # if the bit is 1, perform a swap\n        if num1 & (1 << i):\n            # check if carry bit is 1\n            if carry:\n                # perform a swap and carry out the operation\n                num2 = (num2 & ~(1 << i)) | ((carry << i) & (1 << i))\n                carry = 0\n                swaps += 1\n            else:\n                # perform a swap\n                num2 = (num2 & ~(1 << i)) | ((num1 << i) & (1 << i))\n                swaps += 1\n        else:\n            # if the bit is 0, no operation is performed\n            carry = num1 & (1 << i) << 1\n\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one to the other.\n\n    Example:\n    min_Swaps(\"10101\", \"10110\") => 1\n    min_Swaps(\"10101\", \"01010\") => 3\n    '''\n\n    # Convert strings to lists of bits\n    str1_bits = [int(bit) for bit in list(str1)]\n    str2_bits = [int(bit) for bit in list(str2)]\n\n    # Find the length of the longer binary string\n    len1 = len(str1_bits)\n    len2 = len(str2_bits)\n\n    # Check if the binary strings have different lengths\n    if len1!= len2:\n        return \"Binary strings have different lengths.\"\n\n    # Initialize variables to keep track of swaps\n    swaps = 0\n\n    # Iterate over the bits of the binary strings\n    for i in range(len1):\n        # If the bits are not equal, swap them\n        if str1_bits[i]!= str2_bits[i]:\n            swaps += 1\n            str1_bits[i], str2_bits[i] = str2_bits[i], str1_bits[i]\n\n    # Return the number of swaps required to convert the binary strings\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2): \n    n=len(str1) # length of binary numbers\n    dp=[[float('inf')] * n for i in range(n+1)] # dp[i][j] represents minimum number of swaps required to convert binary number str1[:i] to str2[:j]\n    \n    # initialize first row and column\n    for i in range(n+1):\n        dp[0][i]=i\n    for j in range(n+1):\n        dp[j][0]=j\n    \n    # fill rest of dp table using dynamic programming\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j]=dp[i-1][j-1]\n            else:\n                dp[i][j]=1+min(dp[i-1][j],dp[i][j-1])\n    \n    return dp[n][n] # return minimum number of swaps required to convert binary numbers to same number"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # calculate the difference between the two numbers\n    diff = abs(num1 - num2)\n    \n    # convert the binary string of the difference to a list of integers\n    diff_list = [int(d) for d in bin(diff)[2:]]\n    \n    # count the number of 1's in the list\n    count = 0\n    for digit in diff_list:\n        count += digit\n    \n    # return the minimum number of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # initialize two arrays to store the count of swaps needed for each digit\n    swap_count1 = [0] * 10\n    swap_count2 = [0] * 10\n    # initialize a dictionary to store the swap count for each digit\n    swap_dict = {}\n    # loop through each digit of both binary numbers\n    for i in range(n):\n        # get the current digit of both binary numbers\n        digit1 = str1[i]\n        digit2 = str2[i]\n        # count the swaps needed for each digit in str1 and str2\n        if digit1!= digit2:\n            swap_count1[int(digit1)] += 1\n            swap_count2[int(digit2)] += 1\n        else:\n            swap_dict[int(digit1)] = swap_dict.get(int(digit1), 0) + 1\n    # get the minimum number of swaps needed for each digit\n    min_swaps1 = min([swap_count1[i] for i in range(10)])\n    min_swaps2 = min([swap_count2[i] for i in range(10)])\n    # return the minimum number of swaps needed for each digit\n    return min(min_swaps1, min_swaps2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    len1, len2 = len(str1), len(str2)\n    \n    # If length of the binary numbers are not equal, return -1\n    if len1!= len2:\n        return -1\n    \n    # Initialize two variables to store the value of the binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize a variable to store the count of swaps required\n    count = 0\n    \n    # Iterate through the binary numbers\n    while num1!= num2:\n        # If num1 is greater than num2, swap the two digits\n        if num1 > num2:\n            num1, num2 = num2, num1\n            count += 1\n        \n        # If num1 is smaller than num2, no swap is required\n        else:\n            break\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables for tracking the swaps\n    num1 = num1 ^ num2  # XOR to swap bits\n    swaps = 0\n    temp = 0\n\n    # iterate through the bits of the binary strings\n    while num1!= 0:\n        # check if the least significant bit is 1\n        if num1 & 1:\n            # swap the bits if the most significant bit is 1\n            if (temp & (1 << (31-swaps))) == 0:\n                num1 ^= (1 << (31-swaps))\n                str1 = format(num1, 'b')\n                swaps += 1\n        # update the temp variable\n        temp = num1\n        num1 = num1 >> 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # initialize the size of the tuple to 0\n    size = 0\n\n    # loop through each tuple in the list\n    for tuple in tuple_list:\n\n        # loop through each element in the tuple\n        for element in tuple:\n\n            # add the size of the element to the total size\n            size += sys.getsizeof(element)\n\n    # return the total size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes to calculate the size\n    size_in_bytes = sys.getsizeof(tuple_list)\n\n    # Return the size in bytes\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to store the size of the tuple\n    size = 0\n    \n    # Iterate over each element in the tuple\n    for element in tuple_list:\n        # Add the size of the element to the total size\n        size += sys.getsizeof(element)\n    \n    # Return the total size in bytes of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Size of the tuple in bytes: \")\n    sys.stdout.flush()\n    for element in tuple_list:\n        size = sys.getsizeof(element)\n        sys.stdout.write(str(size) + \" \")\n        sys.stdout.flush()\n    sys.stdout.write(\"\\n\")"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Find the size of each tuple element\n    size_list = [sys.getsizeof(x) for x in tuple_list]\n\n    # Find the total size of the tuple\n    total_size = sum(size_list)\n\n    # Return the total size of the tuple\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize the size variable to 0\n    size = 0\n    \n    # iterate over each tuple in the list\n    for t in tuple_list:\n        # add the size of each tuple to the size variable\n        size += sys.getsizeof(t)\n    \n    # return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initialize the index of the first array\n    i = 0\n    # initialize the index of the second array\n    j = 0\n    # initialize the count of elements in the arrays\n    count = len(arr1) + len(arr2)\n    # initialize the result variable\n    result = None\n    # loop until the count is zero\n    while count!= 0:\n        # if the count is less than or equal to k, add the element at the first array to the result\n        if count <= k:\n            result = result if result is not None else arr1[i]\n            i += 1\n            count -= 1\n        # if the count is greater than k, add the element at the second array to the result\n        else:\n            result = result if result is not None else arr2[j]\n            j += 1\n            count -= 1\n    # return the result\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    if k == 0:\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the minimum of the two arrays\n    if n1 < n2:\n        min_arr = arr1\n        max_arr = arr2\n    else:\n        min_arr = arr2\n        max_arr = arr1\n\n    # Find the index of the middle element in both arrays\n    mid1 = n1 // 2\n    mid2 = n2 // 2\n\n    # Compare the first middle elements of both arrays\n    if min_arr[mid1] < max_arr[mid2]:\n        return find_kth(arr1[:mid1], arr2[mid2:], k)\n    else:\n        return find_kth(arr1[mid1+1:], arr2[:mid2+1], k - mid1 - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Check if the length of the arrays are equal\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Arrays must have the same length.\")\n    \n    # Initialize variables for current index and count\n    index = 0\n    count = 0\n    \n    # Iterate through both arrays\n    while index < len(arr1):\n        # If the elements at the current indices are equal, increment both count and index\n        if arr1[index] == arr2[index]:\n            count += 1\n            index += 1\n        # If arr1[index] is smaller, increment index\n        elif arr1[index] < arr2[index]:\n            index += 1\n        # If arr2[index] is smaller, increment count\n        else:\n            count += 1\n    \n    # Check if the count is greater than or equal to k\n    if count < k:\n        raise ValueError(\"kth element does not exist in the arrays.\")\n    \n    # Return the kth element\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If one array is empty, return the other array's element\n    if n1 == 0:\n        return arr2[k-1]\n    elif n2 == 0:\n        return arr1[k-1]\n\n    # If k is greater than the sum of the two arrays' lengths, return None\n    if k > n1 + n2:\n        return None\n\n    # If k is less than or equal to the length of one array, return the element at that index\n    if k <= n1:\n        return arr1[k-1]\n    elif k <= n1 + n2:\n        return arr2[k-n1-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_length = len(num_str)\n    sum_of_squares = 0\n    \n    for i in range(num_length):\n        digit = int(num_str[i])\n        square = digit ** num_length\n        sum_of_squares += square\n    \n    return number == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n\n    number_str = str(number)\n    sum_of_powers = 0\n\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_powers += digit ** len(number_str)\n\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string to remove any non-digit characters.\n    number = str(number)\n    # Check if the length of the string is 1.\n    if len(number) == 1:\n        # If the string has length 1, it is an armstrong number.\n        return True\n    # Calculate the sum of the digits of the number.\n    sum_of_digits = 0\n    for digit in number:\n        sum_of_digits += int(digit)\n    # Check if the sum of the digits is equal to the original number.\n    if sum_of_digits == int(number):\n        # If the sum of the digits is equal to the original number, it is an armstrong number.\n        return True\n    # If the function hasn't returned yet, it is not an armstrong number.\n    return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(number):\n    # Check if the given number is less than or equal to 0\n    if number <= 0:\n        return False\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the given number to a string and reverse the string\n    number_str = str(number)[::-1]\n    \n    # Loop through each character in the reversed string\n    for char in number_str:\n        # Convert the character to an integer and add it to the sum\n        sum += int(char) ** 3\n        \n    # Check if the sum of the reversed string squared equals the original number\n    if sum ** 2 == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Calculate the sum of the squares of the digits\n    sum_of_squares = sum([int(digit)**3 for digit in number_str])\n    \n    # Check if the sum of squares equals the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number = str(number)\n    # Initialize the sum of the powers of each digit\n    sum_of_powers = 0\n    # Loop through each digit in the number and calculate its power\n    for digit in number:\n        digit = int(digit)\n        sum_of_powers += digit**len(number)\n    # If the sum of the powers is equal to the original number, it's an armstrong number\n    if sum_of_powers == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    n = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    temp = n\n    power = 0\n    while temp > 0:\n        digit = temp % 10\n        power += digit ** 3\n        temp //= 10\n    if power == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Function to check whether a number is Armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n    # Initialize the sum of digits to 0\n    sum_digits = 0\n    # Iterate over each digit of the number and add its value to the sum\n    for digit in n_str:\n        sum_digits += int(digit)\n    # Check if the sum of digits is equal to the original number\n    if sum_digits == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        print(\"Invalid input\")\n        return\n    \n    total = 0\n    for i in range(number):\n        total += i\n        \n    average = total / number\n    \n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count += 1\n    \n    average = sum_of_numbers / count\n    \n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables\n    sum_of_numbers = 0\n    count_of_numbers = 0\n    \n    # loop through first n numbers\n    for i in range(number):\n        # add the number to sum and increment count\n        sum_of_numbers += i + 1\n        count_of_numbers += 1\n    \n    # calculate the average\n    average = sum_of_numbers/count_of_numbers\n    \n    # print the sum and average\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum_of_numbers)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    # initialize sum and count to 0\n    total = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(number + 1):\n\n        # add i to sum and increment count\n        total += i\n        count += 1\n\n    # find average of first n natural numbers\n    average = total / count\n\n    # print sum and average\n    print(\"Sum of first\", number, \"natural numbers is:\", total)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers and add them to the sum\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function calculates the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize variables\n    total = 0\n    count = 0\n    sum_of_average = 0\n\n    # loop through the first n numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n        # calculate the sum of average\n        if count % number == 0:\n            sum_of_average += total / count\n            total = 0\n\n    # calculate the final sum of average\n    if count > 0:\n        sum_of_average += total / count\n\n    # return the result\n    return sum_of_average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    average = total / number\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, else returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n\n    Args:\n    str1 (string): A string.\n\n    Returns:\n    str: The first repeated character in the string.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first repeated character by looping through the dictionary and checking if the frequency is greater than 1\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the character counts\n    char_count = {}\n\n    # loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first repeated character in the dictionary\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    # initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # loop through the string again and find the first repeated character\n    for i in range(len(str1)):\n        char = str1[i]\n        if char_count[char] > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = {}\n    for char in str1:\n        if char in seen:\n            return char\n        seen[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If the string doesn't have any repeated characters, it returns None.\n    '''\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string and increment its count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    first_repeated = None\n    \n    # Loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            first_repeated = char\n            break\n    \n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a given integer is a lucid number.\n    '''\n    if n < 10:\n        return False\n    if n % 7 == 0:\n        return True\n    return is_lucid(n - 1)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 2\n    while current_number <= n:\n        lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    # initialize the lucid number to 1\n    lucid_num = 1\n\n    # loop until lucid number is greater than or equal to n\n    while lucid_num <= n:\n        # check if lucid number is prime\n        is_prime = True\n        for i in range(2, int(lucid_num**0.5)+1):\n            if lucid_num % i == 0:\n                is_prime = False\n                break\n        # if lucid number is prime, add it to the list\n        if is_prime:\n            ludic_list.append(lucid_num)\n        # increment the lucid number\n        lucid_num += 1\n\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            lucid.append(i)\n        else:\n            is_lucid = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 0\n    while i*i <= n:\n        if n % i == 0:\n            lucid_numbers.append(i)\n            n //= i\n            i = 0\n        else:\n            i += 1\n    if n > 1:\n        lucid_numbers.append(n)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_set = set()\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i**j == j**i:\n                lucid_set.add(i**j)\n    \n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    num = 1\n    \n    while num <= n:\n        if is_lucid(num):\n            lucid_list.append(num)\n        num += 1\n    \n    return lucid_list\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    return all(int(d) == 0 for d in str(num))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_list.append(i)\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucids.append(i)\n        i += 1\n        if len(lucids) == n:\n            break\n    return lucids\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1] # Reverse the list of words\n    words =''.join(words) # Join the reversed list back into a string\n    return words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces and reverse each word\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words by spaces and return the result\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using whitespace as the separator\n    words = s.split()\n    # reverse each word in the list using reverse() method\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove leading and trailing spaces\n    s = s.strip()\n    # split the string into words using the space as the separator\n    words = s.split(' ')\n    # reverse the order of the words\n    words = words[::-1]\n    # join the words back together with spaces between them\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given integer is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given integer is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the given integer is divisible by any number other than 2 and 3\n    for i in range(5, int(num**0.5) + 1, 6):\n        if num % i == 0:\n            return False\n\n    # If the given integer is not divisible by any number other than 2 and 3, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is equal to 2\n    elif num == 2:\n        return True\n\n    # Check if the given number is divisible by 2 or 1\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n\n    # Check all other numbers\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given number is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))  # Output: True\nprint(is_prime(8))  # Output: False\nprint(is_prime(9))  # Output: True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, and False otherwise.\n    \"\"\"\n    # Check if the number is less than 2 (since 0 and 1 are not prime numbers)\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2 (since 2 is the only even prime number)\n    if num == 2:\n        return True\n\n    # Check if the number is odd (since all even numbers except 2 are not prime numbers)\n    if num % 2 == 1:\n        return False\n\n    # Check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    # If we made it through all the loops, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the given number is greater than 1\n    if num <= 1:\n        return False\n    \n    # Check if the given number is divisible by any number from 2 to its square root\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Check if the number is equal to 2\n    elif num == 2:\n        return True\n    # Check if the number is divisible by any number between 2 and num-1\n    elif num % 2 == 0:\n        return False\n    elif num % 2!= 0:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the equivalent value in radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0].start(), matches[0].end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all matches using regular expression pattern\n    matches = re.finditer(pattern, text)\n    # Initialize empty list for literals\n    literals = []\n    # Iterate over matches and append matching literals to list\n    for match in matches:\n        literals.append(match.group())\n    # Return tuple of literals, start indices, and end indices\n    return tuple(literals), matches.start(), matches.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(f\"{match} found at index {start} with length {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    literal_list = []\n    for match in matches:\n        literal_list.append((match.group(), match.start(), match.end()))\n    return literal_list"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"Literal: {literal}, Start index: {start}, End index: {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern = re.compile(pattern)\n    \n    # Search the string for the pattern\n    match = pattern.search(text)\n    \n    # If there is a match, return the matching subtring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    # Use regex pattern to search for literals\n    matches = re.finditer(pattern, text)\n    # Create empty list to store matching substrings, start indices, and end indices\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group(0)\n        start = match.start()\n        end = match.end()\n        print(f\"Found literal '{literal}' at indices {start} and {end}.\")\n    return literal, start, end"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter a positive integer: \"))\n\nprint(\"The Bell number for\", n, \"is\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Define the first bell number as 1\n    bell = 1\n    # Initialize the sum of bell numbers to 0\n    bell_sum = 0\n    # Loop through all possible bell numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the i-th bell number\n        bell = bell * (n-i+1) // i\n        # Add the i-th bell number to the sum\n        bell_sum += bell\n    # Return the sum of bell numbers\n    return bell_sum"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nprint(bell_Number(5)) # Output: 6"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    # Initialize the list to store the bell numbers\n    bell_list = [1]\n\n    # Loop through the range of numbers from 2 to n\n    for i in range(2, n+1):\n        # Add the previous two bell numbers and add it to the list\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n\n    # Return the nth bell number\n    return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L[L.index(L[L.index(L.index(list1) // len(list1))]) + 1])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Get the length of the list\n    n = len(list1)\n    # Initialize the variable to keep track of the index of the k'th element\n    k = L - 1\n    # Initialize a list to store the elements of the list\n    result = []\n    # Loop through the list and add elements to the result list except for the k'th element\n    for i in range(n):\n        if i!= k:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    if k == 0:\n        return []\n    elif k == 1:\n        return list1[1:]\n    elif k == 2:\n        return [list1[0], list1[-1]]\n    else:\n        index = k - 3\n        while index < len(list1) - 1:\n            list1[index], list1[index+1] = list1[index+1], list1[index]\n            index += 2\n        return list1[:-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    if k >= len(list1):\n        return []\n    else:\n        result = [list1[i] for i in range(len(list1)) if i!= k]\n        return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # creating a copy of the list to avoid modifying the original list\n    new_list = list1.copy()\n    # finding the index of the kth element to remove\n    kth_index = L - 1\n    # iterating through the list and swapping elements with the kth element to the left\n    for i in range(len(new_list)):\n        if i == kth_index:\n            continue\n        else:\n            new_list[i], new_list[i-1] = new_list[i-1], new_list[i]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1[1:]\n    elif L < 0:\n        return remove_kth_element(list1, abs(L))\n    else:\n        return remove_kth_element(list1[1:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    n = len(list1)\n    k = L - 1\n    if k >= n:\n        return []\n    elif k == 0:\n        return list1[1:]\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    temp = list1[k]\n    list1[k] = list1[n-1]\n    list1[n-1] = temp\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(max(row[N-1]))\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    This function takes a matrix as input and returns the maximum value of the nth column.\n    \"\"\"\n    max_value = float('-inf')\n    for i in range(len(matrix)):\n        col = matrix[i]\n        max_value = max(max_value, col[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize an empty list to store the maximum values of each column\n    max_values = []\n    # Loop through each row of the matrix and add the nth column value to the max_values list\n    for row in test_list:\n        max_values.append(row[N-1])\n    # Return the maximum value in the max_values list\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the maximum value to be the first element of the nth column\n    max_value = test_list[0][N-1]\n    \n    # loop through each row of the matrix\n    for row in test_list[1:]:\n        # if the nth element is greater than the current max value, update the max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # If the matrix is empty or the length of the matrix is less than N, return None\n    if not matrix or len(matrix[0]) < N:\n        return None\n    \n    # Initialize a variable to store the maximum value found so far\n    max_value = None\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # If the length of the row is less than N, return None\n        if len(row) < N:\n            return None\n        \n        # Find then'th column\n        col = [row[i] for i in range(len(row)) if i % N == N-1]\n        \n        # If the length of the column is less than N, return None\n        if len(col) < N:\n            return None\n        \n        # Find the maximum value in the column\n        max_col = max(col)\n        \n        # If the maximum value found so far is None or the current maximum is greater than the maximum found so far, update the max_value\n        if max_value is None or max_col > max_value:\n            max_value = max_col\n    \n    # If max_value is still None at this point, there was no valid row in the matrix with at least N elements in then'th column\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max value to be negative infinity\n    max_val = float('-inf')\n\n    # iterate over all the rows of the matrix\n    for row in test_list:\n        # check if the index N is within the range of the row\n        if N >= len(row):\n            raise ValueError('Invalid index N')\n        # check if the current value is greater than the max value\n        if row[N] > max_val:\n            max_val = row[N]\n\n    # return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_value = float('-inf')\n\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, test_list[i][N-1])\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max value to be the first element of the first row\n    max_value = test_list[0][0]\n    \n    # loop through each row and check if the nth column is greater than max value\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    \n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to hold the cumulative sum\n    cumulative_sum = 0\n\n    # loop through the list and add each value to the cumulative sum\n    for item in test_list:\n        cumulative_sum += item\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Extract the value from the tuple\n        value = tup[0]\n        # Add the value to the cumulative sum\n        cum_sum += value\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the sum of the current element\n    sum_so_far = 0\n    \n    # Loop through each element in the list\n    for num in test_list:\n        # Add the current element to the sum of the previous elements\n        sum_so_far += num\n        \n    # Return the cumulative sum\n    return sum_so_far"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n    Parameters:\n    test_list (list of tuples): A list of tuples containing numbers\n\n    Returns:\n    int: The cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # Iterate over the tuples in the list\n    for tup in test_list:\n        # Iterate over the elements in each tuple\n        for elem in tup:\n            # Add the element to the cumulative sum\n            cumulative_sum += elem\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cum_sum_list = []\n    \n    # loop through each tuple in the input list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cum_sum_list\n            cum_sum_list.append(val)\n    \n    # return the cum_sum_list\n    return cum_sum_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        total = sum(num)\n        avg_list.append(total / len(num))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = 0\n        for num in num_tuple:\n            total += num\n        average = total / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup) / len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        sum = sum(num_tuple)\n        avg = sum / len(num_tuple)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        sum = 0\n        for value in num:\n            sum += value\n        averages.append(sum/len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum_num = 0\n        for j in range(len(nums[i])):\n            sum_num += nums[i][j]\n        result.append(sum_num/len(nums[i]))\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(elem % other_elem for elem, other_elem in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples are not of the same length.\"\n    \n    # Perform element wise modulo operation\n    result_tup = tuple((x % y for x, y in zip(test_tup1, test_tup2)))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples should have the same length!\")\n        return None\n\n    # Perform the element wise modulo\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples should be the same.\")\n        return\n    \n    # perform element-wise modulo and return the result\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    current_point = (0, 0)\n    steps_taken = 0\n    \n    # Loop until we reach the destination point\n    while current_point!= (d, 0):\n        \n        # Calculate the next point\n        next_point = (current_point[0] + 1, current_point[1])\n        \n        # Check if the next point is outside the grid\n        if next_point[0] > steps or next_point[1] > steps:\n            return -1\n        \n        # Increment the steps taken and update the current point\n        steps_taken += 1\n        current_point = next_point\n        \n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initializing variables\n    jumps = 0\n    index = 0\n    pos = (0, 0)\n    \n    # loop until we reach the point (d, 0)\n    while pos[0] < d:\n        if pos[0] > 0 and abs(pos[1]) == 1:\n            jumps += 1\n            index += 1\n            pos = (pos[0] + 1, pos[1])\n        elif pos[0] > 0 and abs(pos[1]) == 2:\n            jumps += 1\n            index += 2\n            pos = (pos[0] + 2, pos[1])\n        else:\n            index += 1\n            pos = (pos[0], pos[1] + 1)\n            \n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initializing variables\n    n = len(steps)\n    count = 0\n    \n    # iterating through the array\n    for i in range(1, n):\n        # checking if the distance between current point and the destination point is greater than the given distance\n        if abs(steps[i] - d) > d:\n            # if the distance is greater than the given distance, increment the count and move to the next point\n            count += 1\n            i += 1\n    \n    # returning the count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_steps = 0\n    count = 0\n\n    for i in range(1, steps + 1):\n        # if we reach the end of the array without moving\n        if i % d == 0:\n            max_steps = max(max_steps, i)\n\n            # jumping to the end of the array takes one step more\n            count += 1\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n    min_steps = 0\n\n    # Check for the number of jumps required\n    while i <= steps:\n        # If the point (i, j) is at the bottom of the plane, the number of jumps required is 0\n        if j == 0:\n            count = 0\n            break\n        # If the point (i, j) is at the left of the plane, the number of jumps required is 1\n        elif j == d:\n            count = 1\n            break\n        # If the point (i, j) is in the middle of the plane, the number of jumps required is 2\n        else:\n            count = 2\n\n        # Update the minimum number of steps\n        min_steps = min(min_steps, count + min_steps)\n\n        # Move up or down\n        if j < d:\n            j += 1\n        elif j > 0:\n            j -= 1\n        else:\n            i += 1\n\n    # Return the minimum number of steps required\n    return min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps > d:\n        return \"Steps should be less than or equal to the distance d.\"\n    else:\n        jumps = 0\n        while steps > 0:\n            if steps >= d:\n                steps -= d\n                jumps += 1\n            else:\n                steps -= 1\n                jumps += 1\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Calculate the number of jumps required to reach (d, 0) from (0, 0)\n    num_jumps = 0\n    jump = d\n    current_point = (0, 0)\n    visited = set()\n\n    while current_point not in visited and num_jumps < steps:\n        if current_point == (d, 0):\n            return num_jumps\n        visited.add(current_point)\n\n        # Calculate the next point to visit\n        next_point = (current_point[0] + jump, current_point[1])\n\n        # Check if the next point is valid\n        if 0 <= next_point[0] <= 100 and 0 <= next_point[1] <= 100:\n            num_jumps += 1\n\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # Define function to check whether a point is at point (d, 0) from origin\n    def is_zero_point(x, y):\n        return abs(x) <= d and abs(y) == 0\n\n    # Initialize variables\n    current_point = (0, 0)\n    count = 0\n\n    # Iterate through the points\n    while True:\n        # Check if current point is at point (d, 0) from origin\n        if is_zero_point(*current_point):\n            return count\n\n        # Move up, down, left or right based on current point\n        if current_point[1] > 0:\n            current_point = (current_point[0], current_point[1] - 1)\n            count += 1\n        elif current_point[1] < 0:\n            current_point = (current_point[0], current_point[1] + 1)\n            count += 1\n        elif current_point[0] > 0:\n            current_point = (current_point[0] - 1, current_point[1])\n            count += 1\n        else:\n            current_point = (current_point[0] + 1, current_point[1])\n            count += 1\n\n        # Check if we have reached end of the list\n        if current_point[0] == 0 and current_point[1] == 0:\n            return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    distance = 0\n    jumps = 0\n    \n    # Iterate through steps\n    for i in range(steps):\n        \n        # If the distance is less than or equal to the destination, increment distance and move to next step\n        if distance <= d:\n            distance += 1\n            \n        # If the distance is greater than the destination, increment the jumps and move to next step\n        else:\n            jumps += 1\n            distance -= d\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = sorted(steps)\n    jumps = 0\n    for i in range(len(steps)-1):\n        if steps[i][1] <= d:\n            jumps += 1\n        else:\n            break\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Initialize a list to store the result\n    result = []\n    \n    # Loop through each element in the first list\n    for i in range(len(nums1)):\n        # Divide the element of the first list by the corresponding element of the second list\n        result.append(nums1[i]/nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must be of the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero.\")\n            return\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            new_str += char\n    for num in nums:\n        new_str += num\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = re.findall('\\d+', test_str)\n    nums_list = list(nums)\n    nums_list.sort(reverse=True)\n    new_str = test_str.replace(nums[0], '')\n    new_str = new_str.replace(nums[1], nums[0])\n    for num in nums_list:\n        new_str = new_str.replace(num, '')\n    new_str = new_str.replace(nums[2], nums[1])\n    new_str = new_str.replace(nums[3], nums[2])\n    new_str = new_str.replace(nums[4], nums[3])\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a variable to store the number index\n    num_index = -1\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is a number, increment the number index\n        if test_str[i].isdigit():\n            num_index = i\n\n    # If no numbers were found, return the original string\n    if num_index == -1:\n        return test_str\n\n    # Move all the numbers to the end of the string\n    num_str = ''\n    for i in range(num_index + 1, len(test_str)):\n        num_str += test_str[i]\n\n    # Return the original string with the numbers moved to the end\n    return test_str[0:num_index + 1] + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables for string length and new string\n    str_length = len(test_str)\n    new_str = \"\"\n\n    # Loop through each character in the string\n    for i in range(str_length):\n        # If the character is a number, append it to the new string and move on to the next character\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n        else:\n            # If the character is not a number, append it to the new string and move on to the next character\n            new_str += test_str[i]\n\n    # Return the new string\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Add the number to the list\n            num_list.append(char)\n        else:\n            # Move the non-number character to the end of the string\n            if char!='':\n                test_str = test_str[:test_str.find(char)] + char + test_str[test_str.find(char)+1:]\n    # Combine the number list with the string to create the final result\n    return num_list + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a list of characters to iterate over\n    char_list = list(test_str)\n    \n    # Initialize a counter to keep track of the number of numbers\n    num_count = 0\n    \n    # Iterate over each character in the list\n    for char in char_list:\n        \n        # If the character is a number, move it to the end of the list\n        if char.isdigit():\n            char_list.remove(char)\n            char_list.append(char)\n            num_count += 1\n    \n    # If there are no numbers in the list, return the original string\n    if num_count == 0:\n        return test_str\n    \n    # Join the list of characters back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    result = \"\"\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_list = []\n    for char in test_str:\n        if char.isdigit():\n            number_list.append(char)\n        else:\n            continue\n    \n    new_string = ''.join(number_list)\n    return new_string"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    # Initialize a variable to keep track of the index of the last digit\n    last_digit_index = -1\n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # If the current character is a digit, set the index to the current index\n        if char_list[i].isdigit():\n            last_digit_index = i\n        # If the current character is a letter, swap it with the last digit and continue to the next character\n        elif char_list[i].isalpha():\n            char_list[i], char_list[last_digit_index] = char_list[last_digit_index], char_list[i]\n            i += 1\n            last_digit_index = i\n    # Join the list of characters into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Initialize two pointers, one for each string\n    i = 0\n    j = len(char_list) - 1\n\n    # Swap characters until the pointers meet in the middle\n    while i < j:\n        if char_list[i].isdigit() and char_list[j].isdigit():\n            # Swap the characters if they are digits\n            char_list[i], char_list[j] = char_list[j], char_list[i]\n        else:\n            # Move the pointer towards the middle until a digit is found\n            while i < j and not char_list[i].isdigit():\n                i += 1\n            while i < j and not char_list[j].isdigit():\n                j -= 1\n            # Swap the characters if they are digits\n            char_list[i], char_list[j] = char_list[j], char_list[i]\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a set to store the numbers that are divisible by 5\n    divisible_by_5 = set()\n\n    # Iterate through the list of numbers and add them to the set if they are divisible by 5\n    for num in a:\n        if num % 5 == 0:\n            divisible_by_5.add(num)\n\n    # Sort the set in descending order\n    divisible_by_5 = sorted(divisible_by_5, reverse=True)\n\n    # Initialize a variable to store the current largest subset size\n    current_size = 0\n\n    # Iterate through the list of numbers again and add the numbers to the subset if they are divisible by 5 and not in the subset\n    for num in a:\n        if num % 5 == 0 and num not in divisible_by_5:\n            divisible_by_5.append(num)\n            current_size += 1\n\n    # Return the largest subset size\n    return current_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    result = [0] * n\n    max_length = 0\n    max_start = 0\n\n    for i in range(1, n):\n        if a[i] % a[max_start] == 0:\n            result[i] = result[max_start] + 1\n        else:\n            result[i] = 1\n        if result[i] > max_length:\n            max_length = result[i]\n            max_start = i\n\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i][j] + dp[j][i - 1]\n                if dp[i][j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][j]\n\n    return dp[n - 1][0]\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in ascending order\n    a.sort()\n    # initialize the maximum subset size\n    max_size = 0\n    # loop through the input list\n    for i in range(len(a)):\n        # loop through the remaining unsorted list\n        for j in range(i+1, len(a)):\n            # if the difference between the current element and the next element is divisible by 2, update the maximum subset size\n            if a[i] % 2 == 0 and a[j] % 2 == 1:\n                max_size = max(max_size, j-i+1)\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Find the length of the input list\n    n = len(a)\n\n    # Create a boolean array to store the factors of every number in the list\n    factors = [True] * n\n\n    # Traverse through the list of numbers\n    for num in a:\n        # Find the index of the first factor of the number\n        index = num\n        while factors[index]:\n            index += 1\n\n        # Mark all the factors of the number as composite\n        for i in range(index, n):\n            factors[i] = False\n\n    # Initialize the maximum subset size\n    max_size = 0\n\n    # Traverse through the list of numbers again\n    for num in a:\n        # Find the length of the largest subset that is divisible by all numbers in the list\n        length = 1\n        while factors[num % length] and length < n:\n            length += 1\n\n        # Update the maximum subset size if the current number is divisible by all numbers in the list\n        if length > max_size:\n            max_size = length\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    # Initialize two pointers for left and right ends of the subset\n    left, right = 0, 0\n    # Initialize the maximum size of the subset to 1\n    max_size = 1\n    # Initialize the maximum subset as a list of size 1\n    max_subset = [a[left]]\n    # Loop through the list\n    while right < n:\n        # If the next number is not divisible by the maximum number in the subset,\n        # update the left pointer to the right of the current maximum number\n        if a[right] % max_subset[-1]!= 0:\n            left = right\n        # If the next number is divisible by the maximum number in the subset,\n        # update the right pointer and increase the maximum size of the subset if necessary\n        else:\n            right += 1\n            if right - left + 1 > max_size:\n                max_size = right - left + 1\n                max_subset = [a[left]] + max_subset\n        # If the maximum size of the subset is found, print it\n        if max_size == n:\n            print(max_size)\n            break\n    # If the loop is not broken, the maximum size is not found\n    else:\n        print(\"No maximum size found.\")"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # initialize max_size to 0\n    max_size = 0\n\n    # loop through the list\n    for i in range(len(a)):\n        # initialize current_size to 0\n        current_size = 0\n\n        # loop through the list again starting from the current index\n        for j in range(i + 1, len(a)):\n            # if the current number is divisible by the next number, increment the current_size\n            if a[i] % a[j] == 0:\n                current_size += 1\n\n        # if the current_size is greater than the max_size, update max_size\n        if current_size > max_size:\n            max_size = current_size\n\n    # return max_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * (n + 1)\n    max_length = 1\n\n    for i in range(2, n + 1):\n        dp[i] = max_length\n\n        for j in range(1, i):\n            if a[j - 1] % a[i - 1] == 0 and dp[j] < dp[i]:\n                dp[i] = dp[j]\n\n        max_length = max(max_length, dp[i])\n\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    m = len(a)\n    # initialize the max size as 1\n    max_size = 1\n    # initialize the current size as 1\n    current_size = 1\n    # initialize the end index of the current subset\n    start_index = 0\n    # loop through the array\n    for i in range(1, m):\n        # if the current element is not divisible by the previous element, we increase the current size and move the start index to the next index\n        if a[i] % a[start_index]!= 0:\n            current_size += 1\n            start_index = i\n        # if the current element is divisible by the previous element, we check if the current size is greater than the max size\n        if current_size > max_size:\n            max_size = current_size\n    # if the last element is not divisible by the start index, we increase the current size and move the start index to the last element\n    if a[m-1] % a[start_index]!= 0:\n        current_size += 1\n        start_index = m-1\n    # if the current size is greater than the max size, we update the max size\n    if current_size > max_size:\n        max_size = current_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # create a set to store the numbers that are divisible by 3\n    divisible_by_3 = set()\n    \n    # iterate through the list and add numbers to the set that are divisible by 3\n    for num in a:\n        if num % 3 == 0:\n            divisible_by_3.add(num)\n            \n    # create a set to store the numbers that are divisible by 2\n    divisible_by_2 = set()\n    \n    # iterate through the list and add numbers to the set that are divisible by 2\n    for num in a:\n        if num % 2 == 0 and num not in divisible_by_3:\n            divisible_by_2.add(num)\n            \n    # find the intersection of the two sets and return the length\n    return len(divisible_by_2.intersection(divisible_by_3))"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged = arr1 + arr2\n\n    # Find the middle index of the merged list\n    mid = n // 2\n\n    # If the number of elements is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged[mid]\n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        return (merged[mid] + merged[mid-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size as input and returns the median of the two lists.\n    \"\"\"\n\n    # Concatenate the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Get the length of the merged list\n    length = len(merged_list)\n\n    # Calculate the median\n    if length % 2 == 0:\n        median = (merged_list[length//2 - 1] + merged_list[length//2]) / 2\n    else:\n        median = merged_list[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists into a single list\n    merged = arr1 + arr2\n\n    # Sort the merged list\n    sorted_merged = sorted(merged)\n\n    # Find the median index\n    median_index = n // 2\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_merged[median_index - 1] + sorted_merged[median_index]) / 2\n    else:\n        median = sorted_merged[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate both lists and sort it\n    sorted_list = arr1 + arr2\n    sorted_list.sort()\n\n    # Get the length of the list\n    length = len(sorted_list)\n\n    # If the length is odd, return the middle element\n    if length % 2 == 1:\n        return sorted_list[length // 2]\n\n    # If the length is even, return the average of the middle two elements\n    else:\n        mid = length // 2\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Concatenate the two lists and sort them in ascending order\n    total_list = arr1 + arr2\n    total_list.sort()\n\n    # Get the size of the list\n    size = len(total_list)\n\n    # Find the median\n    if size % 2 == 0:\n        median = (total_list[size//2 - 1] + total_list[size//2]) / 2\n    else:\n        median = total_list[size//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments: two sorted lists and the total size of both lists.\n    It returns the median of the two sorted lists.\n    \"\"\"\n\n    # Find the middle index of the two sorted lists\n    mid1 = n // 2\n    mid2 = n - mid1 - 1\n\n    # Find the median of the two sorted lists\n    mid_arr1 = sorted(arr1)[mid1]\n    mid_arr2 = sorted(arr2)[mid2]\n\n    # Return the median of the two sorted lists\n    return (mid_arr1 + mid_arr2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Error: The two lists must have same size.\")\n        return\n    \n    arr = arr1 + arr2\n    arr.sort()\n    mid = len(arr) // 2\n    \n    if len(arr) % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays and get the final sorted array\n    sorted_arr = merge_sorted_arrays(arr1, arr2)\n    \n    # Calculate the median based on the size of the array\n    if n % 2 == 0:\n        # Find the median of the even numbered elements\n        median = (sorted_arr[n//2] + sorted_arr[n//2-1]) / 2\n    else:\n        # Find the median of the odd numbered elements\n        median = sorted_arr[n//2]\n    \n    return median\n\ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Merge two sorted arrays and return a new sorted array.\n    '''\n    i = 0\n    j = 0\n    merged_arr = []\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n    \n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Return the median\n    return arr[n]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Parameters:\n    nums (list): List of numbers\n    n (int): The power to which each number is raised\n\n    Returns:\n    list: The list of numbers raised to the nth power.\n    \"\"\"\n\n    result = []\n    for num in nums:\n        result.append(num ** n)\n\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): An integer representing the power to which each number should be raised.\n\n    Returns:\n        list: A list of the n-th power of each number in the input list.\n    \"\"\"\n\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns a list of the n-th power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # Convert the string to uppercase using the upper() method\n    uppercase_string = string.upper()\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList.pop(0)\n    newList.append(newList.pop())\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List must have at least 2 elements.\")\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        # get the last and second last element in the list\n        last = newList[-1]\n        secondLast = newList[-2]\n        # interchange the last and second last elements\n        newList[-1] = secondLast\n        newList[-2] = last\n        # return the modified list\n        return newList\n    else:\n        # return the original list if it has less than 2 elements\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return None\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Checking if the list is empty\n    if len(newList) == 0:\n        return \"The list is empty.\"\n\n    #Checking if the list contains only one element\n    if len(newList) == 1:\n        return \"The list only contains one element.\"\n\n    #Interchanging the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking the length of the list\n    if len(newList)!= 0: \n        # getting the first and last element of the list\n        first_element = newList[0] \n        last_element = newList[-1] \n\n        # swapping the first and last element\n        newList[0] = last_element \n        newList[-1] = first_element "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # compute the hypotenuse\n    h = math.sqrt(3) * r\n\n    # compute the semi-perimeter\n    sp = 2 * r * (math.sqrt(3) - 1)\n\n    # compute the area of the triangle\n    A = math.pi * sp ** 2 / 4\n\n    # compute the area of the largest triangle\n    B = math.pi * r ** 2 / 4\n\n    return max(A, B)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # area of a regular triangle\n    A = (3 * r * r) / 4\n\n    # area of a semi-circle\n    area_semi_circle = math.pi * r * r\n\n    # area of the largest triangle that can be inscribed in a semicircle\n    max_area = max(A, area_semi_circle)\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Convert the radius to radians\n    theta = r * (2 * (22/7.0) + 1/24.0)\n\n    # Calculate the semi-perimeter\n    sp = 2 * r * (2 * (22/7.0) + 1/24.0)\n\n    # Calculate the area of the largest triangle\n    A = sp * (sp - r * (2 * (22/7.0) + 1/24.0))\n\n    # Return the area of the largest triangle\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Use the formula for area of a right triangle\n    # where the base is the semi-circle and the height is sqrt(r^2 - b^2)\n    # where b is the base of the triangle\n    b = r * (3/4) ** (1/2)\n\n    # Use the formula for area of a right triangle\n    # where the base is the semi-circle and the height is sqrt(r^2 - b^2)\n    # where b is the base of the triangle\n    a = b * (2/3) ** (1/2)\n\n    # Calculate the area of the largest triangle that can be inscribed in the semi-circle\n    area = (3 * a * r) / (4 * b)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the angle between the x-axis and the point of the largest triangle\n    theta = 2*r/3\n    \n    # Find the length of the semi-perimeter of the largest triangle\n    s = (2*r*theta)**(1/3)\n    \n    # Find the area of the largest triangle\n    area = (s*(r*theta))**2\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "Area = pi * r^2 * ("
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculate the area of a triangle given the semi-circle radius.\n    \n    Args:\n    r (float): Semi-circle radius\n    \n    Returns:\n    float: Area of the triangle\n    \"\"\"\n    \n    # Use Heron's formula to calculate the semi-perimeter of the triangle\n    s = 2*r\n    area = math.sqrt(s * (s - r) * (s + r)) / (2 * math.sin(math.pi/3))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    This function takes a radius (r) as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    '''\n    area = 0.5*r**2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * math.pi * r\n    \n    # calculate the area of a triangle given its three vertices\n    # take the largest area of two triangles that can be formed with the three vertices\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    \n    # find the vertices of the largest triangle that can be inscribed in the semicircle\n    a = semi_perimeter / 2\n    b = math.sqrt(semi_perimeter ** 2 - a ** 2)\n    c = a\n    \n    # calculate the area of each triangle using Heron's formula\n    # use the vertices to determine the length of the base of each triangle\n    # calculate the area of each triangle and take the larger one\n    area1 = (a * (b + c)) / 2\n    area2 = (b * (c + a)) / 2\n    area3 = (c * (a + b)) / 2\n    \n    return max(area1, area2, area3)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n\n    # Check if the input list is empty or None\n    if not array:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    # Check if the input list is sorted\n    if not all(array[i] < array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"The input list must be sorted in ascending order.\")\n\n    # Check if the start and end indices are valid\n    if start >= len(array) or start < 0:\n        raise ValueError(\"The start index must be a valid index in the array.\")\n    if end is not None and (end >= len(array) or end < 0 or end <= start):\n        raise ValueError(\"The end index must be a valid index in the array and greater than the start index.\")\n\n    # Initialize the missing number variable\n    missing_number = start\n\n    # Loop through the list starting from the end index\n    for i in range(end-1, start-1, -1):\n        # If the current number is missing, return its value\n        if array[i] == missing_number:\n            return missing_number\n        # If the current number is present, increment the missing number variable\n        else:\n            missing_number += 1\n\n    # If the loop completes without finding the missing number, return the last missing number\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if i+1 not in array:\n            return i+1\n    \n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number from the array.\n    If the array is sorted in ascending order, the function will find the smallest missing number in O(n) time complexity.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        elif array[i] < i:\n            return i\n        else:\n            break\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers and returns the first missing number.\n    The function works by first checking if the array is sorted in ascending order. If it is, then\n    it iterates through the array and checks if each number is present in the array. If a missing number\n    is found, it returns that number. Otherwise, it returns the first missing number.\n    \"\"\"\n    # Check if the array is sorted in ascending order\n    if all(array[i] <= array[i + 1] for i in range(len(array) - 1)):\n        # Iterate through the array and check if each number is present in the array\n        for i in range(start, len(array)):\n            if array[i]!= i + 1:\n                return i + 1\n        # If no missing number is found, return the first missing number\n        return len(array) + 1\n    # If the array is not sorted, sort it in ascending order\n    array.sort()\n    # Recursively call the function with the sorted array and the start of the array and end of the array\n    return find_First_Missing(array, start, len(array))"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    while start<=end:\n        mid = (start+end)//2\n        if array[mid] == mid:\n            start = mid+1\n        elif array[mid] < mid:\n            end = mid-1\n        else:\n            start = mid+1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): List of integers to find the missing number from.\n    start (int, optional): Start index of the array. Defaults to 0.\n    end (int, optional): End index of the array. Defaults to None.\n\n    Returns:\n    int: Smallest missing number in the sorted array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    \n    return end + 1 + start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list \n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers in the input list.\n    '''\n    even_numbers = []\n    for num in lst: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x > 0 and y < 4:\n        adj.append((x-1, y+1))\n    if x < 3 and y > 0:\n        adj.append((x+1, y-1))\n    if x < 4:\n        adj.append((x+1, y))\n    if x < 3 and y < 4:\n        adj.append((x+1, y+1))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 3:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    # extract the x and y coordinates of the given element\n    x, y = ele\n    \n    # initialize an empty list to store the adjacent coordinates\n    adj = []\n    \n    # iterate over all possible directions and add adjacent coordinates to the list\n    directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]\n    for direction in directions:\n        x1, y1 = x + direction[0], y + direction[1]\n        # check if the adjacent element exists and is not already in the list\n        if 0 <= x1 < len(sub) and 0 <= y1 < len(sub[0]) and (x1, y1) not in sub[x1][y1]:\n            # add the adjacent element to the list\n            adj.append((x1, y1))\n    \n    # return the list of adjacent elements\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x - 1 >= 0 and (x, y) not in sub:\n        sub.append((x - 1, y))\n    if x + 1 < len(matrix) and (x, y) not in sub:\n        sub.append((x + 1, y))\n    if y - 1 >= 0 and (x, y - 1) not in sub:\n        sub.append((x, y - 1))\n    if y + 1 < len(matrix[0]) and (x, y + 1) not in sub:\n        sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < len(grid)-1:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < len(grid[0])-1:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    if len(sub) < 3:\n        return adjac(tuple(sorted(sub)), sub)\n    else:\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    \n    # top row\n    if y > 0:\n        adj_coords.append((x, y-1))\n        \n    # left column\n    if x > 0:\n        adj_coords.append((x-1, y))\n        \n    # bottom row\n    if y < 12:\n        adj_coords.append((x, y+1))\n        \n    # right column\n    if x < 12:\n        adj_coords.append((x+1, y))\n        \n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the coordinate from the element\n    x, y = map(int, ele.split(','))\n\n    # Initialize the adjacent list\n    adj = []\n\n    # Check the adjacent tiles and add their coordinates to the adjacent list\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 19:\n        adj.append((x, y+1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 19:\n        adj.append((x+1, y))\n\n    # Append the element to the sublist if it is not already present\n    if (x, y) not in sub:\n        sub.append((x, y))\n\n    # Return the sublist of adjacent coordinates and the element itself\n    return adj, (x, y)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    # check if the input element is a tuple\n    if isinstance(ele, tuple):\n        sub.append(ele)\n    # check if the input element is a list\n    elif isinstance(ele, list):\n        for item in ele:\n            adjac(item, sub)\n    # if the input element is not a tuple or list, return the empty list\n    else:\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Extract the x and y coordinates of the given element\n    x, y = ele\n    \n    # Add all adjacent coordinates to a list\n    adj_coords = [(x+dx, y+dy) for dx, dy in [(0,1), (1,0), (0,-1), (-1,0)]]\n    \n    # Remove duplicates by converting the list to a set and back to a list\n    adj_coords = list(set(adj_coords))\n    \n    # Add the original coordinate to the list\n    adj_coords.append(ele)\n    \n    # Return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the text to lowercase to make it case-insensitive\n    text = text.lower()\n    # Initialize an empty list to store the modified text\n    modified_text = []\n    # Iterate over each character in the text\n    for char in text:\n        # Check if the character is a whitespace\n        if char.isspace():\n            # If it is a whitespace, replace it with an underscore\n            modified_text.append('_')\n        else:\n            # If it is not a whitespace, append it as is\n            modified_text.append(char)\n    # Convert the list of modified characters back to a string and return it\n    return ''.join(modified_text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    while count < len(num_list):\n        if num_list[count] == 0:\n            num_list.pop(count)\n        else:\n            count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    # Check if the input list is empty\n    if not num_list:\n        return num_list\n    \n    # Initialize two pointers - one at the beginning and one at the end of the list\n    left = 0\n    right = len(num_list) - 1\n    \n    # Move all the non-zero elements to the right of the list\n    while left < right:\n        if num_list[left]!= 0:\n            left += 1\n        else:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            right -= 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new empty list to store the non-zero numbers\n    non_zero_list = []\n    # Loop through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Loop through the non-zero list and append all the zeroes to the end of the non-zero list\n    for i in range(len(non_zero_list)):\n        if non_zero_list[i] == 0:\n            non_zero_list.append(0)\n    # Return the non-zero list with the zeroes moved to the end\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    non_zero_index = []\n\n    # separating the zeroes and non-zeroes from the given list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n        else:\n            non_zero_index.append(i)\n\n    # moving the zeroes to the end of the non-zeroes list\n    for i in range(len(zero_index)-1, -1, -1):\n        num_list[non_zero_index.pop(zero_index.pop())] = 0\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Iterate through the list\n    for i in range(len(num_list)):\n        # If the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            # Remove the last element from the list to avoid index out of range error\n            del num_list[-1]\n            # Break the loop after the first zero has been moved to the end\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            zero_count += 1\n    return num_list, zero_count"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_indices.append(index)\n    num_list = [num for index, num in enumerate(num_list) if index not in zero_indices] + [0] * len(zero_indices)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    non_zero_index = []\n    \n    # Find all the indices of zeroes in the list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    \n    # Find all the indices of non-zeroes in the list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            non_zero_index.append(i)\n    \n    # Move the zeroes to the end of the list\n    for i in range(len(zero_index)):\n        num_list[zero_index[i]] = num_list[len(num_list)-1]\n        num_list.pop()\n    \n    # Move the non-zeroes to the end of the list\n    for i in range(len(non_zero_index)):\n        num_list[non_zero_index[i]] = num_list[len(num_list)-1]\n        num_list.pop()\n    \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        xor = arr[i] ^ arr[i+1]\n        sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n % 2!= 0:\n        n += 1\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the number of elements in the list as input and returns the sum of xor of all pairs of integers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n\n    return sum_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the list to a max heap\n    hq.heapify(iterable)\n    \n    # Sorting the max heap using heap sort algorithm\n    while hq.heapify(iterable):\n        pass\n    \n    # Extracting the sorted elements from the max heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # create a max heap from the given list\n    hq.heapify(iterable)\n    # extract elements from the heap and add them to the sorted list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    # reverse the sorted list\n    return sorted_list[::-1]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Extract and return the maximum element from the heap\n    return hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input iterable to a list\n    lst = list(iterable)\n    \n    # Build the max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i, len(lst))\n    \n    # Sort the max heap\n    for i in range(len(lst) - 1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        hq.heapify(lst, 0, i)\n    \n    # Return the sorted list\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    This function sorts a given list using the Heap Sort algorithm.\n    \"\"\"\n    # Create a max-heap from the input list\n    heap = hq.heapify(iterable)\n\n    # Remove the max element from the heap and append it to a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = iterable\n    hq.heapify(heap)\n\n    # Sort the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # create a min heap from the input iterable\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # extract and remove the minimum element from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the given list to a heap.\n    hq.heapify(iterable)\n    \n    # Sorting the heap in ascending order.\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)\n    \n    # Converting the heap to a list and returning it.\n    return [heapq.heappop(iterable) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min heap from the iterable\n    hq.heapify(iterable)\n    \n    # Remove the elements from the heap and append to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check for profit\n    if sale_amount > actual_cost:\n        return False, 'Profit'\n\n    # check for loss\n    if sale_amount < actual_cost:\n        return False, 'Loss'\n\n    # if neither profit nor loss, check for no profit or no loss\n    if actual_cost - sale_amount == 0:\n        return True, 'No profit or loss'\n\n    return None, 'Invalid input'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost: \n        return True \n    else: \n        return False "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate profit and loss\n    profit = actual_cost - sale_amount\n    \n    # Check whether profit or loss is zero\n    if profit == 0 or sale_amount == 0:\n        print(\"Profit and loss are zero.\")\n        return True\n    \n    # Check whether profit is positive or negative\n    if profit > 0:\n        print(\"Profit is positive.\")\n        return True\n    elif profit < 0:\n        print(\"Profit is negative.\")\n        return True\n    \n    # Check whether loss is positive or negative\n    if sale_amount > 0:\n        print(\"Loss is positive.\")\n        return True\n    elif sale_amount < 0:\n        print(\"Loss is negative.\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return 'No profit and no loss'\n    else:\n        return 'Profit and no loss'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    -----------\n    actual_cost: int\n        The actual cost of the sale\n    sale_amount: int\n        The sale amount\n\n    Returns:\n    --------\n    bool: True if the sale has no profit and no loss, otherwise False\n    \"\"\"\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the sale.\n    sale_amount (float): The sale amount.\n    \n    Returns:\n    bool: True if the sale amount has no profit and no loss, False otherwise.\n    \"\"\"\n\n    if actual_cost < sale_amount:\n        return False\n\n    profit_margin = actual_cost - sale_amount\n    if profit_margin > 0:\n        return False\n\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"No profit\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity and temperature to knots\n    wind_speed_knots = v * 1.9438444924406738\n    temperature_c = t - 273.15\n\n    # calculate wind chill index using the formulae from https://en.wikipedia.org/wiki/Wind_chill\n    wc_index = -42.379 + 2.04901523 * temperature_c + 10.14333127 * wind_speed_knots + -0.22475541 * temperature_c * temperature_c + 0.00683783 * temperature_c * wind_speed_knots - 0.05481717 * wind_speed_knots * wind_speed_knots\n\n    # convert the wind chill index to the nearest integer\n    wc_int = math.ceil(wc_index)\n\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wct = 25.0 * ((v/10.0)**0.16) + 15.0 * ((v/10.0)**0.16) * (t/238.0) + 25.0\n\n    # Calculate the wind chill depression index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * math.log(t) ** 2\n\n    # Calculate the wind chill index\n    wci_index = round((wct - 273.15) * wci)\n\n    # Return the wind chill index rounded to the next integer\n    return wci_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    t = t + 273.15  # Convert temperature from celsius to Kelvin\n    f = 1.8 * math.pow(t, 1.29) + 32  # Convert temperature from Kelvin to Fahrenheit\n    c = 13.12 + 0.6215 * f - 11.37 * math.pow(f, 2) + 0.3965 * math.pow(f, 3)\n    if v >= 0 and v <= 5:\n        if c >= 22:\n            wci = 100\n        else:\n            wci = int(math.floor(c))\n    elif v > 5 and v <= 10:\n        if c >= 22:\n            wci = 100\n        else:\n            wci = int(math.floor(c))\n    elif v > 10 and v <= 15:\n        wci = 100\n    elif v > 15 and v <= 20:\n        wci = 100\n    elif v > 20:\n        wci = 100\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature\n    c = (17.625 * (t + 243.125)) / (243.125 - t)\n\n    # Calculate the wind chill index using the formula:\n    # WC = 13.12 + (0.6215 * v) + (11.37 * c) - (0.3965 * c * c)\n    wc = round(13.12 + (0.6215 * v) + (11.37 * c) - (0.3965 * c * c))\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    if t < 0 or v < 0:\n        return \"Invalid input. Temperature and wind speed must be non-negative.\"\n    elif v == 0:\n        return 0\n    else:\n        g = 9.8  # Acceleration due to gravity (m/s^2)\n        c = math.sqrt(g * (t - 273.15) / 100)  # Speed of sound in air (m/s)\n        return round(35.74 + 0.6215 * v + 17.624 * (t - 273.15) / (t - 29.65) + c / 4.186)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -10 or t > 50:\n        return \"Temperature out of range. Please enter a temperature between -10 and 50.\"\n    elif v <= 0:\n        return \"Wind velocity must be a positive number.\"\n    else:\n        c = (0.5*t) + 32\n        f = c * 9/5 + 32\n        return int(math.ceil(f - 8.33333333333333 * (math.log(v/1000) / 4.16666666666667)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 1.0:\n        c = 20.0 + 0.0065 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v)\n        wci = round(c)\n    else:\n        wci = round(35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v))\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    T = t + 273.15\n\n    # Calculate the dewpoint temperature\n    D = 0.6219*T - 11.3399\n\n    # Calculate the wind chill temperature\n    wc = 13.12 + 0.621411*v + 11.34*T*(T/288.15) - 0.1903*D*(T/288.15) + 0.0062*T*T*(T/288.15) - 0.00034*T*T*T*(T/288.15)\n\n    # Calculate the wind chill index\n    wci = round(wc)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index\n    wci = (13.12 + (0.6215 * v) + (11.37 * math.log(t_f)) - (0.3965 * t_f * math.log(t_f)) + 0.14) * (v / 10) + 32\n\n    # Convert wind chill index from fahrenheit to celsius\n    wci_c = wci - 32\n\n    # Return the rounded wind chill index\n    return round(wci_c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature to Kelvin\n    temp_kelvin = t + 273.15\n\n    # Calculate the absolute wind speed in m/s\n    wind_speed_abs = v\n\n    # Calculate the dew point temperature in Kelvin\n    if v >= 10:\n        dew_point = 283.15 + (0.0065 * temp_kelvin) + ((11.3 * (temp_kelvin - 273.15)) / (273.15 - temp_kelvin))\n    else:\n        dew_point = 288.15 + (0.0065 * temp_kelvin) + (0.0039 * (temp_kelvin - 273.15))\n\n    # Calculate the wind chill index\n    if temp_kelvin < 0:\n        wci = -100\n    else:\n        wci = (dew_point - 273.15) / (temp_kelvin - 273.15) * 10\n\n    # Round the wind chill index to the nearest integer\n    if wci > 80:\n        wci = 80\n    elif wci < -80:\n        wci = -80\n    else:\n        wci = math.floor(wci + 0.5)\n\n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum of the lengths of names\n    sum_length = 0\n    \n    # iterate over the names in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and continue to the next name\n            continue\n        # if it doesn't, add the length of the name to the sum\n        else:\n            sum_length += len(name)\n            \n    # return the sum of the lengths of the non-lowercase names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the total length of names as 0\n    total_length = 0\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # if it is, skip that name and move on to the next one\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to keep track of the total length of the names\n    total_length = 0\n    \n    # iterate over each name in the sample_names list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, remove it from the list\n        if name[0].islower():\n            sample_names.remove(name)\n        else:\n            # add the length of the name to the total length variable\n            total_length += len(name)\n    \n    # return the total length of the names after removing the names with lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of lengths\n    total_length = 0\n    # iterate over the list of names\n    for name in sample_names:\n        # if the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = [name for name in sample_names if not name.startswith(name[0].lower())]\n    total_length = sum(len(name) for name in valid_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that start with a lowercase letter\n    names_with_lowercase_letters = []\n    # Iterate over each name in the input list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # Add the name to the list of names that start with a lowercase letter\n            names_with_lowercase_letters.append(name)\n    # Calculate the sum of the lengths of the names that start with a lowercase letter\n    total_length = sum([len(name) for name in names_with_lowercase_letters])\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = re.sub('\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string with parenthesis and returns a string with the parenthesis removed.\n    '''\n    # find all the parenthesis and remove them\n    pattern = re.compile(r'\\([^)]*\\)')\n    new_string = pattern.sub('', items)\n    return new_string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(([^()]+)\\)'\n    matches = re.findall(pattern, items)\n    return [item.strip() for item in matches]"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\([^()]*\\)\"\n    return re.sub(pattern, \"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    \"\"\"\n    # Using regular expressions to remove the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n\n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\" # regex pattern for matching parenthesis\n    result = re.sub(pattern, \"\", items) # using re.sub to remove the matched string from the items\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove all parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # split the string into words and remove all punctuation except for apostrophes\n    items = re.sub(r'[^\\w\\s-]', '', items)\n    items = items.lower()\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the formula for the nth nonagonal number\n    A = 1 + 5*n\n    B = 2*A - 1\n    # Use the formula to find the nth nonagonal number\n    C = int(round(B**0.5))\n    D = 2*C - 1\n    E = D + 5*C\n    # Return the nth nonagonal number\n    return E"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    for i in range(1, n+1):\n        nonagonal += (i * (i+1)) // 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    nonagonal_number = 0\n\n    for i in range(n+1):\n        nonagonal_number += i*i\n\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*is_nonagonal(n/2)\n    else:\n        return 2*is_nonagonal(n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    for i in range(1, n+1):\n        j = (i*(i+1))/2\n        yield j"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    nonagonal = 0\n    for i in range(1, n+1):\n        nonagonal += i * (n - i)\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        a = 1\n        b = 1\n        for i in range(2, n+1):\n            a = a + b\n            b = 2*a - b\n        return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return None\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    total = 0\n\n    for i in range(n):\n        count += 1\n        total += count * (count - 1)\n\n    return total\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_nonagonal(n)\nprint(\"The\", n, \"nonagonal number is:\", result)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<![a-zA-Z])(?<![\\w\\s])z(?![a-zA-Z])(?![\\w\\s])')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = re.compile(r'\\b(z)\\w+\\b')\n    match = pattern.search(text)\n\n    if match:\n        start = match.start()\n        end = match.end()\n\n        if start == 0:\n            return 'Found at the start of the word:'+ text[start:end]\n        elif end == len(text):\n            return 'Found at the end of the word:'+ text[start:end]\n        else:\n            return 'Found in the middle of the word:'+ text[start:end]\n    else:\n        return 'Word \"z\" not found in the text.'"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any non-word characters from the text\n    text = re.sub('[^a-zA-Z0-9\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Loop through each word and check if it starts with 'z' or ends with 'z'\n    for word in words:\n        if word.startswith('z'):\n            if word.endswith('z'):\n                return True\n    # If no 'z' was found in the middle of a word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the pattern to match 'z' at the middle of the word\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    \n    # Use the pattern to match the text and return the result\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regex pattern to find words containing 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    # Use regex to find all words containing 'z' in the text\n    words = re.findall(pattern, text)\n    # Loop through the words and check if they contain 'z' except at the start and end of the word\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z' and 'z' in word[1:-1]:\n            return True\n    # If no words contain 'z' except at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regular expression pattern to find 'z' at the start and end of the word\n    pattern = r'\\b[zZ]\\w+\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if matches:\n        # Return True if there are matches\n        return True\n    else:\n        # Return False if there are no matches\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?:z)\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # find the length of the input array\n    length = len(input)\n\n    # check if k is valid\n    if k < 0 or k >= length:\n        return \"Invalid position\"\n\n    # create a new array to store the reversed part of the array\n    reversed_part = []\n\n    # iterate over the input array from the end to k (k is inclusive)\n    for i in range(k, length):\n        reversed_part.append(input[i])\n\n    # iterate over the input array from the beginning to k (k is inclusive)\n    for i in range(0, k):\n        reversed_part.append(input[i])\n\n    # reverse the reversed_part array\n    reversed_part = reversed_part[::-1]\n\n    # create a new array to store the original array\n    original_array = []\n\n    # iterate over the reversed_part array and append it to original_array\n    for i in reversed_part:\n        original_array.append(i)\n\n    # return the original_array\n    return original_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0, k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize two pointers to the start and end of the array\n    start = 0\n    end = len(input) - 1\n    \n    # If the value of k is greater than or equal to the length of the array, reverse all the array\n    if k >= len(input):\n        input.reverse()\n        return input\n    \n    # Reverse the array up to k-1\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    # Reverse the rest of the array\n    input[start:], input[:k] = input[:k], input[start:]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n <= k:\n        return input\n    else:\n        for i in range(n-k):\n            input[i], input[i+k] = input[i+k], input[i]\n        return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if k is a valid index for the input array\n    if k > len(input)-1 or k < 0:\n        return input\n    \n    # reverse the part of the input array before k\n    input[:k] = input[:k][::-1]\n    \n    # reverse the part of the input array after k\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the array from index 0 to k-1\n    input = input[0:k]\n    input.reverse()\n    # reverse the array from k to end\n    input = input[k:]\n    input.reverse()\n    # concatenate the reversed arrays\n    reversed_array = input[0:k] + input[k:]\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initializing variables\n    start = 0\n    end = len(input) - 1\n\n    # while loop to reverse the array upto the given position k\n    while start < k - 1:\n        # swapping elements of the array\n        input[start], input[end] = input[end], input[start]\n        # decrementing start and incrementing end\n        start += 1\n        end -= 1\n\n    # printing the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from start to k-1\n    for i in range(0, k-1):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    # Reverse the array from k to end\n    for i in range(k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n\n    # Reverse the array from position 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = {**test_dict}\n    new_tuple = (test_tup, new_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the same keys and values as the test_dict\n    new_dict = {**test_dict}\n    # Concatenate the test_tup and new_dict to create a new tuple\n    new_tup = (test_tup + new_dict)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the values of the original dictionary and the values of the new dictionary\n    new_dict = {**test_dict, **test_tup}\n    # Convert the new dictionary into a tuple\n    result_tup = tuple(new_dict.values())\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict_list = []\n    for key, value in test_dict.items():\n        test_dict_list.append((key, value))\n    return (test_tup, *test_dict_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the key-value pairs of the original tuple\n    new_dict = {key:value for key, value in zip(test_tup, test_tup)}\n    # Add the new dictionary to the original tuple\n    new_tup = test_tup + tuple(new_dict.values())\n    # Return the modified tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Get the keys of the dictionary\n    keys = test_dict.keys()\n    # Create an empty dictionary to store the new values\n    new_dict = {}\n    # Loop through the keys of the dictionary\n    for key in keys:\n        # Check if the key already exists in the new_dict\n        if key in new_dict:\n            # If it does, update the value\n            new_dict[key] += test_dict[key]\n        else:\n            # If it doesn't, add the key and value to the new_dict\n            new_dict[key] = test_dict[key]\n    # Create a new tuple by combining the original tuple with the new dictionary\n    new_tup = (test_tup + tuple(new_dict.values()))\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    max_avg = 0.0\n    visited = [0] * (n * n)  # initialize visited cells as 0\n    \n    # compute the maximum average path starting from the top-left cell\n    for i in range(n):\n        visited[i] = 1  # mark the current cell as visited\n        avg = sum(cost[0][i:])  # compute the cost of the path up to the current cell\n        visited[i] = 2  # mark the current cell as visited and added to the visited list\n        max_avg = max(max_avg, avg)  # update the maximum average seen so far\n        \n    # compute the maximum average path starting from the bottom-right cell\n    for j in range(n-1, -1, -1):\n        visited[n * j + n - 1] = 1  # mark the current cell as visited\n        avg = sum(cost[j][:])  # compute the cost of the path up to the current cell\n        visited[n * j + n - 1] = 2  # mark the current cell as visited and added to the visited list\n        max_avg = max(max_avg, avg)  # update the maximum average seen so far\n        \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * (N + 1) for i in range(N + 1)]\n\n    # Initialize the first row and column of the dp table\n    for i in range(1, N + 1):\n        dp[i][0] = cost[i - 1][0]\n        dp[0][i] = cost[0][i - 1]\n\n    # Fill the rest of the dp table using dynamic programming\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == j:\n                dp[i][j] = cost[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i - 1][j - 1]\n\n    # Find the maximum average over all existing paths\n    max_avg = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == j:\n                avg = dp[i][j]\n            else:\n                avg = (dp[i - 1][j] + dp[i][j - 1]) / 2\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    n = len(cost)\n    max_sum = 0\n    path_sum = 0\n    num_cells = 0\n    max_avg = 0\n\n    # iterate over all possible paths from the top-left to bottom-right cell\n    for i in range(n):\n        for j in range(n):\n            # check if we are on the bottom right cell\n            if i == n-1 and j == n-1:\n                # if we are, update max_sum and num_cells\n                max_sum = max(max_sum, path_sum)\n                num_cells += 1\n                # if we are the only path, set max_avg to the sum of all costs\n                if num_cells == 1:\n                    max_avg = sum(cost[0][0], cost[0][1], cost[0][2], cost[0][3], cost[1][2], cost[2][1], cost[3][0], cost[3][1], cost[3][2])\n                # if we have multiple paths, update max_avg by adding the cost of the path we just visited to the sum of all previous paths\n                else:\n                    max_avg = sum(max_avg, sum(cost[0][0], cost[0][1], cost[0][2], cost[0][3], cost[1][2], cost[2][1], cost[3][0], cost[3][1], cost[3][2]))\n                break\n            # if we are not on the bottom right cell, move in the appropriate direction and update the path_sum and num_cells\n            else:\n                # move right\n                path_sum += cost[i][j]\n                num_cells += 1\n                # move down\n                path_sum += cost[i+1][j]\n                num_cells += 1\n\n    # return the maximum average\n    return max_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    path_max_avg = 0\n    for i in range(N):\n        path_max_avg = max(path_max_avg, sum(cost[0:i+1])/i + sum(cost[i+1:N])/N - sum(cost[0:i+1][::-1])/i)\n    return path_max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    max_cost = 0\n    for i in range(n):\n        for j in range(n):\n            max_cost = max(max_cost, dp[i][j])\n            \n    return max_cost / (n*n)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    total_cost = 0\n    visited_cells = 0\n    \n    # Compute the total cost and number of visited cells\n    for i in range(N):\n        for j in range(N):\n            total_cost += cost[i][j]\n            visited_cells += 1\n    \n    # Find the maximum average\n    max_average = total_cost / visited_cells\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    max_avg = 0\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if cost[i][j] < cost[i-1][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            if i == 0 and j == 0:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j] / (i+j-2))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = 0\n    curr_avg = 0\n    total_cost = 0\n    visited = set()\n\n    # Iterate over each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if current cell has been visited before\n            if (i, j) not in visited:\n                # Expand current path to check for maximum average\n                curr_avg, total_cost, visited = expand_path(cost, i, j, visited)\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n\n    return max_avg\n\n\ndef expand_path(cost, i, j, visited):\n    '''\n    Recursively expand a path starting from the given cell and update the maximum average and total cost and visited cells.\n    '''\n\n    # Add current cell to visited set\n    visited.add((i, j))\n\n    # Check if current cell is the bottom right cell\n    if i == len(cost) - 1 and j == len(cost[0]) - 1:\n        # Update total cost and average\n        total_cost += cost[i][j]\n        curr_avg = total_cost / len(visited)\n        return curr_avg, total_cost, visited\n\n    # Expand current path to the right\n    elif i < len(cost) - 1:\n        curr_avg, total_cost, visited = expand_path(cost, i + 1, j, visited)\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n\n    # Expand current path down\n    elif j < len(cost[0]) - 1:\n        curr_avg, total_cost, visited = expand_path(cost, i, j + 1, visited)\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n\n    # Remove current cell from visited set\n    visited.remove((i, j))\n\n    return curr_avg, total_cost, visited"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n    Args:\n        cost: A square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\n    Returns:\n        A tuple containing the maximum average and the path found with the maximum average.\n    \"\"\"\n\n    # Initialize variables\n    total_cost = 0\n    visited_cells = 0\n    max_average = 0\n    max_path = None\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Initialize variables for the current path\n            current_cost = 0\n            current_visited_cells = 0\n            path = [(i, j)]\n\n            # Move in the right direction if possible\n            if j+1 < len(cost[i]):\n                right_cost = cost[i][j] + cost[i][j+1]\n                if right_cost > current_cost:\n                    current_cost = right_cost\n                    current_visited_cells += 1\n                    path.append((i, j+1))\n\n            # Move down if possible\n            if i+1 < len(cost):\n                down_cost = cost[i][j] + cost[i+1][j]\n                if down_cost > current_cost:\n                    current_cost = down_cost\n                    current_visited_cells += 1\n                    path.append((i+1, j))\n\n            # Update the total cost and visited cells for the current path\n            total_cost += current_cost * current_visited_cells\n            visited_cells += current_visited_cells\n\n            # Check if the current path is better than the maximum average found so far\n            if current_cost > max_average:\n                max_average = current_cost\n                max_path = path\n\n    # Return the maximum average and the path found with the maximum average\n    return max_average, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == 1 or j == 1:\n                dp[i][j] = cost[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i - 1][j - 1]\n                \n    max_avg = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i == N or j == N:\n                avg = dp[i][j]\n            else:\n                avg = dp[i][j] - dp[i - 1][j] - dp[i][j - 1] + dp[i - 1][j - 1]\n            if avg > max_avg:\n                max_avg = avg\n                \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name,data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students with height and weight above the minimum\n    filtered_students = {name: height_weight for name, height_weight in students.items() if height_weight[0] > h and height_weight[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, height_weight in students.items():\n        height, weight = height_weight\n        if height > h and weight > w:\n            filtered_students[name] = height_weight\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students that have height and weight above the minimum\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create a dictionary to store the frequency of each number in both lists\n    freq = {}\n    for num in nums1 + nums2:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # count the number of indices where the values in both lists are the same\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    # return the number of indices where the values are the same\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return None\n    \n    # Initialize an empty dictionary to store the count of same values\n    same_value_count = {}\n    \n    # Loop through the lists\n    for i in range(len(nums1)):\n        # Check if the current values are the same\n        if nums1[i] == nums2[i]:\n            # If they are, add 1 to the count for the current value\n            if nums1[i] in same_value_count:\n                same_value_count[nums1[i]] += 1\n            else:\n                same_value_count[nums1[i]] = 1\n    \n    # Create an empty list to store the indices with the same value\n    same_value_indices = []\n    \n    # Loop through the same_value_count dictionary\n    for value in same_value_count:\n        # If the count for that value is greater than 1, add the index to the same_value_indices list\n        if same_value_count[value] > 1:\n            same_value_indices.append(value)\n    \n    # Return the same_value_indices list\n    return same_value_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    power_base = base ** power\n    while power_base > 0:\n        sum_digits += power_base % 10\n        power_base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    base_str = str(base)\n    base_list = [int(digit) for digit in base_str]\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate over the digits of the base and calculate the sum to the specified power\n    for digit in base_list:\n        total_sum += digit ** power\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base and power to integer values\n    base = int(base)\n    power = int(power)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the base and add it to the sum based on the power\n    while power > 0:\n        digit = base % 10  # Get the last digit of the base\n        sum += digit ** power  # Calculate the sum of the last digit raised to the power\n        base = base // 10  # Remove the last digit from the base\n        power -= 1  # Reduce the power by 1\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        base = base // 10\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    # convert the base and power to strings\n    base_str = str(base)\n    power_str = str(power)\n    # initialize the sum and carry variables\n    sum = 0\n    carry = 0\n    # loop through the digits of the base and add to the sum and carry until the carry becomes 0\n    for digit in base_str:\n        sum += int(digit)\n        carry += sum // 10\n        sum %= 10\n    # loop through the digits of the power and add the digits to the sum and carry until the carry becomes 0\n    for digit in power_str:\n        sum += int(digit)\n        carry += sum // 10\n        sum %= 10\n    # return the sum of all digits of the base raised to the specified power\n    return sum ** int(power_str)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = [int(digit) for digit in str(base)]\n    total = 0\n    \n    for i in range(len(digits)):\n        total += digits[i]**power\n    \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit ** power\n        power //= 10\n        base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    if power == 0:\n        return 0\n    \n    base_sum = 0\n    while power > 0:\n        base_sum += base % 10\n        base //= 10\n        power -= 1\n        \n    return base_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    # Use regular expression to extract values between quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.finditer(pattern, text)\n    \n    # Extract values between quotation marks\n    quotations = []\n    for match in matches:\n        quotation = match.group(0)\n        quotations.append(quotation.strip())\n    \n    # Return the list of extracted quotations\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regular expressions to extract quotation marks and values\n    pattern = r'(?<=^|\\W)\"([^\"]*)\"(?=$|\\W)'\n    result = re.findall(pattern, text1)\n\n    # Return the list of values found\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to match all the quotation marks in the string\n    pattern = re.compile(r'\"[^\"]*\"')\n    # Use findall() method to extract all the matching substrings from the pattern\n    matches = pattern.findall(text)\n    # Use a list comprehension to convert the list of matches to a list of values\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \".\n    '''\n\n    # Use regular expression to extract values between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n\n    # Find all the occurrences of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # Iterate through the matches and extract the values between quotation marks\n    quotation_values = []\n    for match in matches:\n        quotation_values.append(match.strip())\n\n    return quotation_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of all quotation marks \" \" inside the string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = []\n    \n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    \n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The length of the tuple must be even!\")\n        return None\n    else:\n        result_tup = []\n        for i in range(len(test_tup) // 2):\n            result_tup.append(test_tup[2*i] * test_tup[2*i+1])\n        return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup = result_tup + (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = (test_tup[0],) * N\n    for i in range(N):\n        result = (result[0] * result[1],) + result[2:]\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define a variable to store the length of the input tuple\n    N = len(test_tup)\n    # Create an empty tuple to store the output values\n    output_tup = ()\n    # Loop through the input tuple\n    for i in range(N):\n        # Multiply the current element with the next element and add it to the output tuple\n        output_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns the sum of the two lists as [a_1+b_1,...,a_n+b_n].\n    '''\n    # creating a new list to store the result\n    result = []\n    # iterating over both lists\n    for i in range(len(lst1)):\n        # adding the corresponding elements of the two lists and appending it to the result list\n        result.append(lst1[i] + lst2[i])\n    # returning the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    for key, group in groupby(nums):\n        if key == nums[0]:\n            yield group\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums, lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if len(list(group)) > 1:\n            continue\n        result.extend(group)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(enumerate(nums), lambda x: x[0] == x[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by consecutive duplicates and yield the keys\n    for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1):\n        yield [nums[x] for x in group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # convert list to set to remove duplicates\n    nums = set(nums)\n    # convert set back to list\n    nums = list(nums)\n    # use groupby to group numbers by the same value\n    result = [list(group) for group in groupby(nums)]\n    # return only the groups containing duplicates\n    return [group for group in result if len(group) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[0] == x[1] - 1))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(lambda x: list(x), groupby(nums)))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r*h)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h  # calculating the lateral surface area using the formula for the cone\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the side area using the formula: s = 1/2 * r^2 * h\n    side_area = 0.5 * r ** 2 * h\n\n    # Find the total surface area using the formula: A = \u03c0 * r^2 + \u03c0 * r * h + \u03c0 * h^2 + 2 * \u03c0 * r * h\n    total_area = math.pi * r ** 2 + math.pi * r * h + math.pi * h ** 2 + 2 * math.pi * r * h\n\n    # Find the lateral surface area using the formula: LSA = 2 * \u03c0 * r * h\n    lateral_area = 2 * math.pi * r * h\n\n    return side_area, total_area, lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r**2 * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2) + (h/3) * (r**2)\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+|,+|\\.\\s+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'\\s|,|\\.'\n    return re.sub(pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all non-alphanumeric characters (spaces, commas, dots)\n    text = re.sub(r'\\s+', ':', text) # replace all spaces with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Define a regular expression pattern to match any special character\n    pattern = re.compile(r'[\\s,\\.]')\n    \n    # Replace all occurrences of special characters with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, and dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Replace consecutive spaces with one space\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    # replace commas with a semicolon\n    text = re.sub(r',', ';', text)\n    # replace dots with a period\n    text = re.sub(r'\\.', '.', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'\\s+', ':', text) # replace all spaces with a colon\n    text = re.sub(r'[.,]', ':', text) # replace all commas and dots with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[-\\s]+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # initialize the index of the first occurrence to -1\n    first_occurrence_index = -1\n\n    # loop through the sorted array\n    for i in range(len(A)):\n        # if the current number is equal to the target number, update the index of the first occurrence\n        if A[i] == x:\n            first_occurrence_index = i\n\n    # return the index of the first occurrence\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index of the first occurrence to -1\n    first_occurrence = -1\n    # loop through the array\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, check if it's the first occurrence\n            if first_occurrence == -1:\n                # if it is, set the index of the first occurrence to i\n                first_occurrence = i\n            # if it's not the first occurrence, update the index of the first occurrence\n            else:\n                # if the current element is smaller than the first occurrence, update the index of the first occurrence\n                if A[i] < A[first_occurrence]:\n                    first_occurrence = i\n    # return the index of the first occurrence\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number in a sorted array.\n    If the number is not found, it returns -1.\n    \"\"\"\n    # Find the index of the first occurrence of x in the sorted array A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    # Find the index of the first element greater than or equal to x\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    return j - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A: list of integers, the sorted array\n        x: integer, the number we are looking for\n\n    Returns:\n        int, the index of the first occurrence of x in A or -1 if x is not in A\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n\n    for i in range(n):\n        prod *= arr[i]\n        sum_prod += prod\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    sub_sum = 0\n    sum_of_subarray_prod = 0\n    \n    for i in range(n):\n        prod *= arr[i]\n        sub_sum += arr[i]\n        \n        if i < n-1:\n            prod *= arr[i+1]\n            sub_sum -= arr[i]\n    \n    sum_of_subarray_prod = prod*sub_sum\n    return sum_of_subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    \n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    \n    max_product = -1\n    result = 0\n    \n    for i in range(1, n):\n        for j in range(i, n):\n            sub_array = arr[i:j+1]\n            product = 1\n            for k in range(len(sub_array)):\n                product *= sub_array[k]\n            if product > max_product:\n                max_product = product\n                result = prefix_sum[j+1] - prefix_sum[i] - max_product * product\n                \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    # Base case: if the list has only one element, then the product of the sublist is 1\n    dp[1][1] = 1\n\n    # Fill the dp array using dynamic programming approach\n    for i in range(2, n+1):\n        for j in range(i):\n            if arr[i-1] <= arr[j]:\n                dp[i][j] = arr[i-1] * dp[i-1][j]\n            else:\n                dp[i][j] = arr[j] * dp[i-1][j+1]\n\n    # Find the sum of products of all possible sublists\n    sublist_sum = 0\n    for i in range(2, n+1):\n        sublist_sum += dp[n][i-1]\n\n    return sublist_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Creating a list to store subarray products\n    subarray_products = []\n\n    # Function to find sum of products of all possible sublists of a given list\n    def find_sum(arr, start, end):\n        if start == end:\n            return 1\n\n        # If the length of the subarray is 1, then its product is 1\n        if start == end - 1:\n            return arr[start]\n\n        # If the length of the subarray is greater than 1, then we need to find the product of the subarray\n        subarray_product = 1\n\n        # We iterate through all possible sublists of the subarray\n        for i in range(start, end):\n            subarray_product *= arr[i]\n\n        return subarray_product\n\n    # Iterating through all possible subarrays of the given list\n    for start in range(len(arr)):\n        for end in range(start + 1, len(arr) + 1):\n            subarray_products.append(find_sum(arr, start, end))\n\n    # Finding the sum of products of all possible subarrays\n    return sum(subarray_products)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    product_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            product_sum += prefix_sum[j] - prefix_sum[i]\n\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # Initialize a variable to store the sum of products of all sublists\n    total_sum = 0\n    \n    # Initialize two pointers to the beginning of the array\n    left = 0\n    right = 0\n    \n    # Initialize a variable to store the current subarray product\n    subarray_product = 1\n    \n    # While there are still elements in the array to process\n    while right < n:\n        # Update the subarray_product to include the next element\n        subarray_product *= arr[right]\n        \n        # While the left pointer is less than the right pointer, add the current subarray product to the total sum\n        while left < right and right < n:\n            total_sum += subarray_product\n            \n            # Move the right pointer to the next element\n            right += 1\n        \n        # Move the left pointer to the next element\n        left += 1\n    \n    return total_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    # Initialize variables to store results\n    total = 0\n    subsum = 1\n\n    # Iterate through the array and calculate the sum of subarrays\n    for i in range(n):\n        subsum += arr[i]\n        total += subsum * arr[i]\n\n    # Return the sum of products of all possible sublists\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0]*(n+1) for i in range(n+1)]\n\n    # Initialize first column\n    for i in range(n+1):\n        dp[i][0] = 0\n        if i == 0:\n            dp[i][1] = arr[0]\n\n    # Initialize first row\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] * arr[j-1]\n\n    # Fill rest of the DP table\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] * arr[i-1]\n            dp[i][j] += dp[i][j-1] * arr[i-1]\n\n    # Find sum of products of all possible sublists\n    sublist_prod_sum = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            sublist_prod_sum += dp[i][j]\n\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # initialize result variable to 0\n    result = 0\n\n    for i in range(n):\n        # calculate products of first i elements\n        products = 1\n        for j in range(i):\n            products *= arr[j]\n        # calculate products of last (n-i) elements\n        products *= arr[n-i-1]\n        # add the products to the result variable\n        result += products\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the input number\n    binary_string = bin(n)[2:]\n    # Calculate the length of the binary string\n    length = len(binary_string)\n    # Initialize an empty list to store the modified binary string\n    modified_binary = []\n    \n    # Iterate over the binary string and toggle bits except the first and the last bit\n    for i in range(length):\n        if i == 0 or i == length - 1:\n            modified_binary.append(binary_string[i])\n        else:\n            modified_binary.append(not binary_string[i])\n            \n    # Convert the modified binary string to an integer and return it\n    return int(modified_binary[::-1], 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Change the middle bit to 1\n    n = n ^ 1\n    # Toggle the first and last bit\n    n = n ^ (n & 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b0101010101010101 # mask to remove middle bits\n    # get all bits except first and last\n    bits = bin(n)[2:-1]\n    # replace middle bits with opposite value\n    bits = bits.replace('0', '1')\n    bits = bits.replace('1', '0')\n    # convert binary string to integer\n    new_n = int(bits, 2)\n    # apply mask to remove middle bits\n    new_n &= mask\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Find the position of the first and last set bits\n    first_set_bit = n & (-n)\n    last_set_bit = -(-n)\n\n    # Find the position of the middle bits\n    middle_bit_index = first_set_bit - 1 ^ last_set_bit\n\n    # Get the middle bits by bitwise XORing with 1\n    middle_bits = n ^ (1 << middle_bit_index)\n\n    # Toggle the middle bits by bitwise XORing with 1\n    middle_bits ^= (1 << middle_bit_index)\n\n    # Combine the first and last bits with the middle bits\n    result = (n ^ first_set_bit) | middle_bits ^ last_set_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Find the number of bits in the number\n    bit_count = 0\n    while n:\n        bit_count += 1\n        n >>= 1\n    \n    # Toggle the middle bits\n    middle_bit_index = bit_count // 2\n    middle_bit = 1 << middle_bit_index\n    n ^= middle_bit\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n\n    Args:\n        n: The number whose middle bits need to be toggled.\n\n    Returns:\n        The modified number with the middle bits toggled.\n    \"\"\"\n\n    # initialize mask to toggle only the middle two bits\n    mask = 3\n\n    # get the binary representation of the given number\n    binary = bin(n)[2:]\n\n    # split the binary string into three parts - left, middle, right\n    left, mid, right = binary[:mid], binary[mid], binary[mid+1:]\n\n    # calculate the new value of the middle two bits\n    mid_bit = not int(mid[0])\n\n    # join the parts back together\n    new_binary = left + mid_bit + right\n\n    # convert the binary string back to integer\n    new_number = int(new_binary, 2)\n\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Mask for first bit\n    mask1 = 1\n    # Mask for last bit\n    mask2 = -2\n    \n    # XOR operation to toggle bits of the number except the first and last bits\n    n = n ^ ((n & mask1) ^ (n & mask2))\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # initialize variables\n    even = False\n    result = 0\n    bit = 0\n    \n    # check if the number is even\n    if n % 2 == 0:\n        even = True\n    \n    # loop through the bits of the number\n    while n:\n        # check if the current bit is the middle bit\n        if even:\n            if bit == 0 or bit == (n.bit_length() - 1):\n                # toggle the middle bit\n                result ^= 1 << bit\n            else:\n                # move on to the next bit\n                bit += 1\n        else:\n            if bit == 0 or bit == (n.bit_length() - 1):\n                # toggle the middle bit\n                result ^= 1 << bit\n            else:\n                # move on to the next bit\n                bit += 1\n        \n        # remove the current bit from the number\n        n &= (n - 1)\n    \n    # return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the leftmost bit to 0\n    n &= ~(1 << 31)\n    \n    # Set the rightmost bit to 0\n    n &= ~(1 << 0)\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert binary number to list of digits\n    binary_list = [int(x) for x in bin(n)[2:]]\n    # check if last and first bits are 1\n    if binary_list[0] == 1 and binary_list[-1] == 1:\n        # set first and last bits to 0\n        binary_list[0] = 0\n        binary_list[-1] = 0\n        # toggle all other bits\n        for i in range(len(binary_list)-2):\n            if binary_list[i] == 0:\n                binary_list[i] = 1\n            else:\n                binary_list[i] = 0\n        # convert list of digits back to binary number\n        binary_number = int(''.join(str(x) for x in binary_list), 2)\n        return binary_number\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x and returns the left insertion point for x in a.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect to locate the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If x is greater than all elements, append x at the end of the list\n    if index == len(a):\n        a.append(x)\n        return len(a) - 1\n    # If x is greater than the current element, shift all elements to the right\n    elif x > a[index]:\n        for i in range(index + 1, len(a)):\n            a[i - 1] = a[i]\n        a[index] = x\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # create a list of tuples containing the value and its index in the sorted list\n    sorted_list = [(value, index) for index, value in enumerate(a)]\n    # use the bisect library to find the index where the value should be inserted\n    index = bisect.bisect_left([t[0] for t in sorted_list], x)\n    # return the index where the value should be inserted\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the leftmost index i such that a[i] < x\n    i = bisect.bisect_left(a, x)\n    # Check if x is already in the list\n    if i!= len(a) and a[i] == x:\n        return i\n    # Otherwise, insert x at index i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left_index = bisect.bisect_left(a, x)\n    if left_index == len(a) or a[left_index]!= x:\n        left_index = bisect.bisect_left(a, x) - 1\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the left insertion point\n    i = bisect.bisect_left(a, x)\n    # If the value is found, return the left index i\n    if i!= len(a) and a[i] == x:\n        return i\n    # If the value is not found, return the left index i-1\n    elif i > 0 and a[i-1] == x:\n        return i-1\n    # If the value is not found and there is no insertion point found, return -1\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # return the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    \n    # if x is greater than all elements in the list, the index will be the length of the list\n    if index == len(a):\n        return index\n    \n    # otherwise, if x is less than the first element in the list, return 0\n    elif index == 0:\n        return index\n    \n    # otherwise, return the index of the previous element\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    return match is not None"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n\n    Args:\n    n (int): The number of terms to sum.\n\n    Returns:\n    float: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1.0\n    else:\n        return 1.0 / geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Args:\n    n (int): The number of terms in the geometric series.\n\n    Returns:\n    float: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_triangular_number = 10**(n-1)\n    triangular_numbers = []\n\n    for i in range(1, 10**(n-1)+1):\n        triangular_numbers.append(i)\n\n    for i in range(1, 10**n-1):\n        min_triangular_number = min(min_triangular_number, triangular_numbers[i])\n        j = i + 1\n        while j < len(triangular_numbers) and triangular_numbers[j] < min_triangular_number:\n            min_triangular_number = min(min_triangular_number, triangular_numbers[j])\n            j += 1\n        triangular_numbers[i] = min_triangular_number\n\n    return triangular_numbers.index(min_triangular_number)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Calculate the maximum possible value for n \n    max_value = 10**(n-1)\n\n    # Initialize a variable to store the smallest triangular number \n    smallest_num = 10**(n-1)\n\n    # Iterate over all possible values of n up to max_value \n    for i in range(1, max_value+1):\n\n        # Calculate the next triangular number \n        next_num = i * (i+1)\n\n        # If the next triangular number is smaller than the smallest triangular number, update smallest_num \n        if next_num < smallest_num:\n            smallest_num = next_num\n\n    # Calculate the index of smallest_num using math.floor() function \n    index = math.floor(math.log10(smallest_num)) + 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the number of digits in the given number\n    num_digits = len(str(n))\n\n    # initialize the sum and the index of the smallest triangular number\n    sum_of_digits = n // 10 ** (num_digits - 1) * (10 ** (num_digits - 1))\n    index_of_smallest_triangular = sum_of_digits * (10 ** (num_digits - 1))\n\n    # initialize the loop variable\n    i = index_of_smallest_triangular\n    triangular_num = i\n\n    # loop until the sum of digits is greater than n\n    while sum_of_digits <= n:\n        # if the sum of digits is greater than the given number, we need to update the sum and the index of the smallest triangular number\n        sum_of_digits += i * (10 ** (num_digits - 1))\n        index_of_smallest_triangular = sum_of_digits * (10 ** (num_digits - 1))\n        # update the loop variable\n        i = index_of_smallest_triangular\n        # update the triangular number\n        triangular_num = i\n\n    # return the index of the smallest triangular number\n    return index_of_smallest_triangular - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_triangular = 10**n\n    count = 0\n    triangular = 1\n\n    while count < max_triangular:\n        count += 1\n        triangular = int(math.sqrt(count)) * (int(math.sqrt(count)) + 1)\n        if triangular <= max_triangular:\n            return triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the smallest triangular number with n digits\n    min_triangular = 10**(n-1)\n    max_triangular = 10**n - 1\n    \n    # Initialize an empty list to store the triangular numbers\n    triangular_numbers = []\n    \n    # Iterate from min_triangular to max_triangular and check if each number is a triangular number\n    for triangular in range(min_triangular, max_triangular+1):\n        # Check if the triangular number is a triangular number\n        if triangular**2 == triangular:\n            triangular_numbers.append(triangular)\n        elif triangular**2 > triangular:\n            break\n    \n    # Sort the triangular numbers in ascending order and return the index of the smallest one\n    return triangular_numbers.index(min(triangular_numbers))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    index = 0\n    triangular_numbers = []\n    while index <= n:\n        triangular_numbers.append(math.comb(index, n - 1) * (index + 1) ** n)\n        index += 1\n    smallest_triangular_number = min(triangular_numbers)\n    for i in range(len(triangular_numbers)):\n        if triangular_numbers[i] == smallest_triangular_number:\n            return i\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize variables \n    smallest_triangular = float('inf') \n    index = 0\n    \n    # Loop through all numbers with n digits \n    for i in range(1, 10**(n+1)): \n        # Check if number is a triangular number \n        triangular_num = i * (i + 1) // 2\n        \n        # Update smallest triangular number and its index if necessary \n        if triangular_num < smallest_triangular: \n            smallest_triangular = triangular_num \n            index = i\n            \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the variables \n    min_triangular = float('inf')\n    index = 0\n\n    # Loop till the last digit of the number is n \n    for i in range(1, n+1): \n        \n        # Find the triangular number with i digits \n        triangular = i * (i+1) / 2\n        \n        # If the triangular number is smaller than the current min_triangular, update the min_triangular and index \n        if triangular < min_triangular: \n            min_triangular = triangular \n            index = i\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The smallest triangular number with n digits is 5*10^n-1\n    triangular_numbers = [5*10**i-1 for i in range(n+1)]\n\n    # Find the index of smallest triangular number\n    index = triangular_numbers.index(min(triangular_numbers))\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    triangular_num = 0\n    \n    while True:\n        index += 1\n        triangular_num = 10**n * index\n        \n        if int(math.log10(triangular_num)) == n:\n            break\n    \n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: The length of the given tuple should be even.\")\n        return None\n    else:\n        # Create an empty dictionary to store the key-value pairs\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            # Add the key-value pair to the dictionary\n            dict_obj[key] = value\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #initialize an empty dictionary\n    my_dict = {}\n    \n    #iterate through the tuple and add adjacent elements to the dictionary as key-value pairs\n    for i in range(0,len(test_tup)-1,2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    \n    #return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The given tuple should have an even number of elements\")\n    \n    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    \n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # Initialize an empty dictionary\n    result = {}\n    # Use two loops to iterate through the tuple and fill the dictionary\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    \n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    \n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # creating an empty dictionary to store the key-value pairs\n    dict = {}\n    # iterating through the tuple\n    for i in range(len(test_tup)-1):\n        # adding the adjacent pairs to the dictionary\n        dict[test_tup[i]] = test_tup[i+1]\n    # returning the final dictionary\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict[key] = value\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, else False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all the characters in the string are same or False otherwise.\n    '''\n    # initialize a variable to store the first character of the string\n    first_char = s[0]\n    # loop through all the characters of the string\n    for i in range(1, len(s)):\n        # check if the current character is the same as the first character\n        if s[i]!= first_char:\n            # if not, return False as all the characters are not same\n            return False\n    # if all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Args:\n        s (str): A string.\n\n    Returns:\n        bool: True if all characters in the string are the same, False otherwise.\n    \"\"\"\n    # Check if the string is empty\n    if len(s) == 0:\n        return True\n\n    # Initialize a variable to store the first character\n    first_char = s[0]\n\n    # Loop through the rest of the string\n    for char in s[1:]:\n        # Check if the current character is different from the first character\n        if char!= first_char:\n            return False\n\n    # If we make it through the loop without returning False, all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, else returns False.\n    \"\"\"\n    # Convert the string to a list\n    lst = list(s)\n\n    # Check if all the characters are the same in the list\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # convert the string to lowercase\n    s = s.lower()\n\n    # get the first character of the string\n    char1 = s[0]\n\n    # check whether all the characters are same or not\n    for char in s:\n        if char!= char1:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if first_char!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** (1/2)\n    area = (math.sqrt(2) / 2) * side * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron given its side length.\n    '''\n    a = side / 2\n    return math.sqrt(3) * a ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n\n    Parameters:\n    side (float): length of one side of the tetrahedron\n\n    Returns:\n    area (float): area of the tetrahedron\n    \"\"\"\n    s = side / 2\n    area = (s ** 2 + s ** 2 + s ** 2) ** 0.5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1/3 * (side**2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the perimeter of the tetrahedron\n    perimeter = 12 * side\n\n    # calculate the area of the base using the Heron's formula\n    base = perimeter ** (1/3)\n    area = math.sqrt(3) * base\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Use Heron's formula to calculate the area\n    s = (side * (side + math.sqrt(3)) * (side + math.sqrt(3))) / (4 * math.sqrt(3))\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*(side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side ** 2) * (1 + math.sqrt(5)) / 5\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by n items to the right direction.\n    \"\"\"\n    if n == 0:\n        return lst\n\n    # Get the length of the list\n    length = len(lst)\n\n    # Calculate the number of rotations required\n    rotations = n % length\n\n    # If there are no rotations required, return the original list\n    if rotations == 0:\n        return lst\n\n    # Reverse the list from 0 to rotations\n    for i in range(rotations):\n        lst.append(lst.pop(0))\n\n    # Reverse the list from rotations to the end\n    for i in range(rotations, length):\n        lst.append(lst.pop(0))\n\n    # Reverse the entire list\n    lst = lst[::-1]\n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list and the number of items to rotate by\n    n = len(list)\n    k = m % n\n    # If there are less than k items to rotate, rotate entire list by k items\n    if k == 0:\n        list = list[k:] + list[:k]\n    # Otherwise, rotate by k items and reverse the resulting list\n    else:\n        # Rotate list by k items\n        list = list[-k:] + list[:-k]\n        # Reverse the resulting list\n        list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    if m >= n:\n        return list\n    for i in range(m):\n        temp = list[i]\n        list[i] = list[n-1-i]\n        list[n-1-i] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m, n):\n        list[i-m] = list[i]\n    for i in range(n-m):\n        list[i] = list[i+m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by n items to the right.\n    \"\"\"\n    lst.extend(lst[:n])\n    lst[:n] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Base case\n    if m == 0:\n        return list\n    \n    # Handling negative values of m\n    if m > n:\n        m = m % n\n        \n    # Rotating the list to the right\n    list = list[-m:] + list[:-m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n\n    # Check if the number of rotation is greater than or equal to the length of the list\n    if m >= n:\n        return list\n\n    # Calculate the new length of the list\n    new_length = n - m\n\n    # Copy the last m items to the beginning of the list\n    for i in range(m):\n        list[i] = list[new_length+i]\n\n    # Reverse the first m items\n    for i in range(m, new_length):\n        list[i] = list[new_length-i-1]\n\n    # Reverse the remaining items\n    for i in range(new_length, n):\n        list[i] = list[m+i-new_length]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(item is None for item in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    \"\"\"\n    # define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda n: all(n % i == 0 for i in range(10))\n\n    # loop through the numbers within the given range and check if they are divisible by each digit\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digit(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = lambda x: [int(i) for i in str(x)]\n    divisible_by_digit = lambda num, digit: num % digit == 0\n    is_divisible_by_digits = lambda num: all(divisible_by_digit(num, digit) for digit in digits(num))\n    \n    result = [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits_set = set(str(num))\n    for num in range(startnum, endnum+1):\n        digits_str = str(num)\n        if all(d in digits_set for d in digits_str):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(int(d) == 0 for d in str(num))\n    \n    return filter(lambda x: startnum <= x <= endnum, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(num) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        for i in range(1, 10):\n            if i not in digits and num % i == 0:\n                return False\n        return True\n\n    result = filter(is_divisible_by_digits, range(startnum, endnum+1))\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): Starting number in the range.\n        endnum (int): Ending number in the range.\n\n    Returns:\n        list: List of numbers within the given range where every number is divisible by every digit it contains.\n    \"\"\"\n    # Helper function to check if a number is divisible by a digit\n    def is_divisible_by_digit(num, digit):\n        return num % digit == 0\n\n    # Helper function to generate digits from a number\n    def generate_digits(num):\n        return [int(d) for d in str(num)]\n\n    # Helper function to generate combinations of digits\n    def generate_combinations(digits):\n        return [(d1, d2) for d1 in digits for d2 in digits if d1!= d2]\n\n    # Generate digits from startnum and endnum\n    digits = generate_digits(startnum) + generate_digits(endnum)\n\n    # Generate combinations of digits\n    combinations = generate_combinations(digits)\n\n    # Filter numbers from startnum to endnum that are divisible by every digit combination\n    divisible_numbers = [n for n in range(startnum, endnum + 1) if all(is_divisible_by_digit(n, d) for d in digits)]\n\n    # Filter divisible numbers that are also divisible by every digit combination\n    divisible_divisible_numbers = [n for n in divisible_numbers if all(is_divisible_by_digit(n, d) for d in digits)]\n\n    return divisible_divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(num % digit == 0 for digit in range(10))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * (r**2) * (a/360)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r**2*a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = r*r*math.sin(math.radians(a/2))\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if angle is within 360 degrees\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    theta = a / 180 * math.pi\n    \n    # calculate area of sector\n    area = math.pi * r**2 * theta\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    \n    # calculate area of the sector using Pythagorean theorem\n    area = math.pi * r**2 * (a / 360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    lcs = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i-1][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Step 2\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Step 3\n    i = m\n    j = p\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Initialize a 3D list to store the lengths of the longest common subsequences for three strings\n    lengths = [[[0 for j in range(len(X[k])+1)] for k in range(len(X)+1)] for l in range(len(X[0])+1)]\n\n    # Fill the 3D list using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(X[0])+1):\n            for k in range(1, len(X)+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lengths[i][j][k] = lengths[i-1][j-1][k-1] + 1\n                else:\n                    lengths[i][j][k] = max(lengths[i-1][j][k], lengths[i][j-1][k], lengths[i-1][j][k-1])\n\n    # Print the longest common subsequence of the three strings\n    for i in range(len(X)+1):\n        for j in range(len(X[0])+1):\n            for k in range(len(X)+1):\n                if lengths[i][j][k] == lengths[i-1][j-1][k-1] + 1:\n                    print(X[i-1], end='')\n\n    print()"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes three strings X, Y, and Z as input and returns the length of the longest common subsequence of X and Y and the length of the longest common subsequence of X and Z.\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    return (p[n][m], p[n][p[n][m]-1])\n\n\nX = \"ABCDGH\"\nY = \"AEDFHR\"\nZ = \"AEDBG\"\nprint(lcs_of_three(X, Y, Z))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # create a table to store lengths of LCS of substring ending at each position in X\n    L = [[0] * (p+1) for _ in range(m+1)]\n    # fill the table L[i][j] with length of LCS of X[0:i] and Y[0:j] and Z[0:k]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # backtrack to find the LCS of X[0:i] and Y[0:j] and Z[0:k]\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i, j, k = i-1, j-1, k-1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    # reverse the order of the LCS and return it as a string\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    dp = [[[0 for j in range(o+1)] for k in range(n+1)] for i in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j][k] = dp[i-1][j][k]\n                elif Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i][j][k-1]\n                else:\n                    dp[i][j][k] = 0\n    \n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    table = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[i - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # backtracking to find the longest common subsequence\n    i, j = m, p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a dictionary to store the length of LCS of all subsequences for all possible combinations of X, Y, and Z\n    dp = {}\n    \n    # Fill the dictionary with the length of LCS of subsequences for all possible combinations of X, Y, and Z\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # Base case: LCS of an empty sequence is empty sequence\n                if i == 0 and j == 0 and k == 0:\n                    dp[(i, j, k)] = 0\n                # LCS of three strings is LCS of their subsequences\n                elif i > 0 and j > 0 and k > 0:\n                    if X[i-1] == Y[j-1] == Z[k-1]:\n                        dp[(i, j, k)] = dp[(i-1, j-1, k-1)] + 1\n                    else:\n                        dp[(i, j, k)] = max(dp[(i-1, j, k)], dp[(i, j-1, k)], dp[(i, j, k-1)])\n    \n    # Extract the LCS of the subsequences from the dictionary and return it\n    max_length = max(dp.values())\n    lcs = []\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                if dp[(i, j, k)] == max_length:\n                    lcs.append(X[i-1])\n                    i -= 1\n                    j -= 1\n                    k -= 1\n    \n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # Create a table to store lengths of longest common subsequence of prefixes of X, Y and Z \n    LCS = [[0] * (o+1) for i in range(m+1)] \n\n    # Fill d[][] in bottom up fashion \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1 \n                else: \n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1]) \n\n    # Print the length of LCS for all prefixes of X, Y and Z \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                print(\"LCS length of X[\"+str(i-1)+\"], Y[\"+str(j-1)+\"], Z[\"+str(k-1)+\"] is \" + str(LCS[i][j][k]), end='\\t')\n\n    # Return the length of LCS for the last cell in the LCS table \n    return LCS[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function returns the length of the longest common subsequence of three given strings.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # table to store length of longest common subsequence ending at each position\n    L = [[0] * (o+1) for i in range(m+1)]\n    \n    # fill table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j]\n                elif Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i][j-1]\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1])\n    \n    return L[m][n]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    words_with_spaces = [word.capitalize() if not word[0].islower() else word for word in words]\n    return''.join(words_with_spaces)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    str1 = re.sub('(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s+(?=\\w\\w\\w)', r' ', str1)\n    return str1.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regular expression to find all words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate through the words and capitalize the first letter\n    new_words = []\n    for word in words:\n        new_words.append(word.capitalize())\n    # Join the capitalized words with spaces\n    result =''.join(new_words)\n    # Return the result string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1.lower())\n    words = [word.capitalize() for word in words]\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Using regular expressions to find all the capital letters\n    words = re.findall(r'[A-Z][a-z]*', str1)\n\n    # Using a loop to iterate over the words and add spaces before them\n    for i in range(len(words)):\n        words[i] ='' + words[i]\n\n    # Joining the words with spaces and returning the final result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regex pattern\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Capitalize the first word and join the rest of the words with spaces\n    capitalized_words = [words[0].capitalize()] + [''+ word.capitalize() for word in words[1:]]\n    \n    # Join the capitalized words with spaces\n    return ''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # create a regular expression to match capital letters and non-capital letters\n    pattern = re.compile('([A-Z][a-z]+)|([a-z]+)')\n    \n    # split the string into words\n    words = pattern.findall(str1)\n    \n    # join the words back into a string with spaces between each capital letter\n    result =''.join(words)\n    \n    # return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Initialize a variable to store the capitalized words\n    capitalized_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first character of the word is uppercase\n        if word[0].isupper():\n            # If it is, add a space to the beginning of the word and add the rest of the word to the list\n            capitalized_words.append(''+ word)\n        else:\n            # If it's not, just add the word to the list\n            capitalized_words.append(word)\n    # Join the capitalized words into a single string with spaces\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Split the string into words using regular expression\n    words = re.findall('\\b[a-z][a-z\\']*\\b', string.lower())\n    # Initialize an empty list to store the capitalized words with spaces\n    capitalized_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # Append the word to the list of capitalized words with spaces\n            capitalized_words.append(word)\n        else:\n            # Otherwise, add a space and the first letter of the word to the list of capitalized words with spaces\n            capitalized_words.append(''+ word[0] + word[1:])\n    # Join the list of capitalized words with spaces and return the result\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match any word starting with a capital letter\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # Use the re.sub() function to replace all occurrences of the pattern with a space\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n\n    # Split the strings into lists of numbers\n    nums = [list(map(int, num_str.split(','))) for num_str in nums_str]\n\n    # Sort the lists of numbers numerically\n    nums = sorted(nums, key=lambda x: x)\n\n    # Join the sorted lists of numbers into strings\n    sorted_nums = [','.join(map(str, num_list)) for num_list in nums]\n\n    # Return the sorted list of strings of numbers\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Splitting the strings into numbers and strings\n    nums = [int(num_str) for num_str in nums_str]\n    strs = [str(num_str) for num_str in nums_str]\n    \n    # Sorting the numbers and strings\n    nums.sort()\n    strs.sort()\n    \n    # Joining the sorted numbers and strings\n    sorted_nums_str = []\n    for num_str in nums:\n        sorted_nums_str.append(str(num_str))\n    sorted_strs = []\n    for str_ in strs:\n        sorted_strs.append(str_)\n    \n    return sorted_nums_str + sorted_strs"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the list of strings to a list of floats\n    nums = [float(num) for num in nums_str]\n    \n    # Sort the list of floats using the built-in sorted function\n    nums.sort()\n    \n    # Convert the list of floats back to a list of strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str = sorted(nums_str, key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str: A list of strings of numbers.\n\n    Returns:\n    A sorted list of strings of numbers.\n    \"\"\"\n    nums = [float(n) for n in nums_str]  # Convert strings to floats\n    nums.sort()  # Sort the list numerically\n    return [str(n) for n in nums]  # Convert floats back to strings"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (float('inf') if x == '' else float(x.replace(',', ''))))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # split each string of numbers into a list of individual numbers\n    nums = [int(n) for n in nums_str.split()]\n    # sort the list of numbers in ascending order\n    nums.sort()\n    # join the sorted numbers back into a string and return it\n    return ''.join(str(n) for n in nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert all the strings in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # Use the sort() method to sort the list of integers in numerical order\n    nums.sort()\n\n    # Convert the sorted list of integers back to strings\n    sorted_nums = [str(num) for num in nums]\n\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    # Remove non-numeric characters from the list of strings\n    nums_str = [num.replace(',', '') for num in nums_str]\n    nums_str = [num.replace('.', '') for num in nums_str]\n    nums_str = [num.replace('-', '') for num in nums_str]\n    nums_str = [num.replace('+', '') for num in nums_str]\n\n    # Convert the list of strings of numbers to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums.sort()\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    # Return the sorted list of strings of numbers\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The modified list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)\n\nif __name__ == \"__main__\":\n    arr = [12, 11, 13, 5, 6, 7]\n    if check_min_heap(arr):\n        print(\"The given array represents min heap.\")\n    else:\n        print(\"The given array does not represent min heap.\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if not arr:\n        return True\n\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] <= min_val:\n            return False\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] > min_val:\n            min_val = arr[i]\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n        return check_min_heap_helper(arr, i + 1)\n    return True\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes the given array and index i of the root node of the heap.\n    It then checks if the left child of the root node is smaller than the root node.\n    If it is, then the array represents a min heap.\n    '''\n    if 2 * i + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    This function takes the given array and checks if it represents a min heap or not.\n    It does this by calling the check_min_heap_helper function for each element of the array.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # check if the root is greater than its children\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n\n    # check if the left child is less than its parent\n    if i*2+1 < len(arr) and arr[i] > arr[i*2+1]:\n        return False\n\n    # check if the right child is less than its parent\n    if i*2+2 < len(arr) and arr[i] > arr[i*2+2]:\n        return False\n\n    # if all the children are valid, then the node itself is valid\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n\n    # base case for an empty array\n    if len(arr) == 0:\n        return True\n\n    # loop through the array\n    for i in range(len(arr)-1):\n        # check if the current node is a valid min heap node\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # if the loop completes, then the array represents a valid min heap\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        # Base case: if i is greater than or equal to len(arr)//2, then the array is a max heap\n        return True\n    \n    # If the parent of i is greater than i, then the array is not a min heap\n    if arr[i] > arr[arr[i]]:\n        return False\n    \n    # Recursively check the children of i\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if the root is smaller than its children\n    if arr[i] > arr[2 * i + 1] or (arr[i] > arr[2 * i + 2] and arr[2 * i + 2]!= -1):\n        return False\n\n    # Recursively check if the children are min heaps\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    jacob = 0\n    lucas = 1\n    for i in range(n):\n        jacob = jacob + lucas\n        lucas = 2*lucas + 1\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return jacobsthal_num(n//2) + 1\n    else: \n        return 2*jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        j = 1\n        for i in range(2, n+1):\n            j += i\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    jacobsthal_numbers = []\n    \n    jacobsthal_numbers.append(0)\n    jacobsthal_numbers.append(1)\n    \n    for i in range(2, n+1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n        \n    return jacobsthal_numbers[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two numbers to 0 and 1\n    a, b = 0, 1\n    # Initialize the first n-2 numbers to 0\n    for i in range(2, n-2):\n        # Compute the next number in the sequence\n        c = a + b\n        # Update the values of a and b\n        a, b = b, c\n    # The nth number is the last value in the sequence\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        jacobsthal_prev = 0\n        jacobsthal_curr = 1\n        jacobsthal_sum = 0\n        for i in range(2, n + 1, 2):\n            jacobsthal_sum += jacobsthal_curr\n            jacobsthal_prev = jacobsthal_curr\n            jacobsthal_curr += 2 * jacobsthal_prev\n        return jacobsthal_sum\n    else:\n        jacobsthal_prev = 1\n        jacobsthal_curr = 2\n        jacobsthal_sum = 0\n        for i in range(2, n + 1, 2):\n            jacobsthal_sum += jacobsthal_curr\n            jacobsthal_prev = jacobsthal_curr\n            jacobsthal_curr += 2 * jacobsthal_prev\n        return jacobsthal_sum\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize the first two numbers\n    a = 0\n    b = 1\n    # Initialize the jacobsthal number\n    j = 0\n\n    # Generate the remaining numbers\n    for i in range(2, n + 1):\n        # Calculate the next number\n        c = a + b\n        # Update the numbers\n        a = b\n        b = c\n        # Update the jacobsthal number\n        j += b\n\n    return j"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sorting the tuple list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # keeping track of the count of current minimum k records\n    count = 0\n    # keeping track of the minimum k records so far\n    min_records = []\n\n    # iterating over the sorted tuple list\n    for i in range(len(test_list)):\n        # checking if the current minimum k records count is less than K\n        if count < K:\n            # checking if the current minimum k records count is less than or equal to i\n            if count <= i:\n                # appending the current tuple to the list of minimum k records\n                min_records.append(test_list[i])\n                # incrementing the count of current minimum k records\n                count += 1\n        else:\n            # checking if the current tuple is not in the list of minimum k records\n            if test_list[i] not in min_records:\n                # appending the current tuple to the list of minimum k records\n                min_records.append(test_list[i])\n                # checking if the list of minimum k records has length greater than k\n                if len(min_records) > K:\n                    # removing the minimum element from the list of minimum k records\n                    min_records.pop(0)\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    min_value = None\n    min_count = 0\n\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            if min_value is None or min_count > test_list[i].count(min_value):\n                min_value = min_count = test_list[i].count(min_value)\n\n    return min_value if min_count > 0 else None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Create a dictionary to store the count of records for each value in the first element of the tuple\n    count_dict = {}\n\n    # Iterate through the test list and update the count dictionary\n    for tup in test_list:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n\n    # Create a list to store the tuples with their count\n    sorted_list = sorted(test_list, key=lambda x: x[0], reverse=True)\n\n    # Initialize the minimum count to the maximum integer value\n    min_count = float('inf')\n\n    # Iterate through the sorted list and update the minimum count if the count is less than K\n    for tup in sorted_list:\n        if count_dict[tup[0]] < K:\n            min_count = min(min_count, count_dict[tup[0]])\n            break\n\n    return min_count\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    count_dict = {}\n    min_count = float('inf')\n    min_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] in count_dict:\n            count_dict[test_list[i][0]] += 1\n        else:\n            count_dict[test_list[i][0]] = 1\n        if count_dict[test_list[i][0]] <= min_count:\n            min_count = count_dict[test_list[i][0]]\n            min_list = [test_list[i]]\n        elif count_dict[test_list[i][0]] == min_count:\n            min_list.append(test_list[i])\n        if len(min_list) == K:\n            break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a variable to keep track of the minimum k records\n    minimum = float('inf')\n\n    # Initialize a variable to keep track of the count of minimum k records\n    count = 0\n\n    # Traverse through the sorted list\n    for i in range(len(sorted_list)):\n        # If we have found k records, break out of the loop\n        if count == K:\n            break\n\n        # If the first element of the current tuple is greater than or equal to the minimum,\n        # update the minimum and increment the count\n        if sorted_list[i][0] >= minimum:\n            minimum = sorted_list[i][0]\n            count += 1\n\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list based on the second element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize the minimum k value as the first k records in the sorted list\n    minimum = test_list[:K]\n    # Initialize an empty list to store the rest of the records\n    remaining_records = []\n    # Iterate over the remaining records in the list\n    for record in test_list[K:]:\n        # If the current record is greater than the minimum k value,\n        # append it to the remaining_records list and update the minimum k value\n        if record[1] > minimum[-1][1]:\n            minimum.append(record)\n        # If the length of the remaining_records list is greater than or equal to k,\n        # remove the smallest element from it and append the current record to the list\n        elif len(remaining_records) >= K:\n            remaining_records.pop(0)\n            remaining_records.append(record)\n    # Return the minimum k value as the first K records in the remaining_records list\n    return minimum[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_records = []\n    count = 0\n    for record in test_list:\n        if len(min_records) < K:\n            min_records.append(record)\n            count += 1\n        elif count == K:\n            min_records.remove(min_records[0])\n            min_records.append(record)\n            count = 1\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    min_val = float('inf')\n    min_list = []\n    for i in range(K):\n        min_val = min(min_val, min(test_list[i][1]))\n        min_list.append((i, min_val))\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sorting the list based on the second element of each tuple (the value of the tuple)\n    test_list.sort(key=lambda x: x[1])\n\n    # printing the minimum k records\n    for i in range(K):\n        print(test_list[i])"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate over each element in the first list\n    for i in range(len(l1)):\n        # Check if the element is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the common elements list\n            common_elements.append(l1[i])\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common.append(l3[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty dictionary to store the common elements\n    common_dict = {}\n    # loop over all indices in l1\n    for i in range(len(l1)):\n        # check if the current element is also in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # check if the current element is already in the dictionary\n            if l1[i] in common_dict:\n                # if it is, increment its count in the dictionary\n                common_dict[l1[i]] += 1\n            else:\n                # if not, add it to the dictionary with a count of 1\n                common_dict[l1[i]] = 1\n    # create an empty list to store the common elements\n    common_list = []\n    # loop over all keys in the dictionary\n    for key in common_dict:\n        # check if the count is greater than 1 (i.e. if the element is not common)\n        if common_dict[key] > 1:\n            # if it is, add it to the common list\n            common_list.append(key)\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize variables to keep track of the smallest and second smallest numbers\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # Iterate through the list of numbers and update the smallest and second smallest numbers\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    \n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[0]\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # Sort the list in ascending order\n    return numbers[1]  # Return the second smallest element"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # return the second element in the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        first_smallest = second_smallest(numbers[1:])\n        if first_smallest is None:\n            return None\n        else:\n            return min(numbers[0], first_smallest)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b.*')\n    return pattern.match(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b.*')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?P<zero_or_more_bs>.*b)'\n    match = re.search(pattern, text)\n    if match:\n        zero_or_more_bs = match.group('zero_or_more_bs')\n        print('Found {}b(s) in the text'.format(len(zero_or_more_bs.split('b')) - 1))\n    else:\n        print('No \"b\"' in the text')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w{1,}b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    # Create an empty dictionary to store the count of reverse pairs\n    reverse_count = {}\n\n    # Iterate through the given string list\n    for i in range(len(test_list)):\n        # Convert the current string to a list of characters\n        current_str = list(test_list[i])\n\n        # Reverse the current string\n        current_str.reverse()\n\n        # Check if the reversed string is in the dictionary\n        if current_str in reverse_count:\n            # If it is, increment the count by 1\n            reverse_count[current_str] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            reverse_count[current_str] = 1\n\n    # Initialize the count of reverse pairs to 0\n    count = 0\n\n    # Iterate through the dictionary\n    for value in reverse_count.values():\n        # If the value is even, increment the count by the value\n        if value % 2 == 0:\n            count += value\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    # Create an empty dictionary to store the frequency of each character in the test_list\n    char_freq = {}\n\n    # Loop through each character in the test_list\n    for char in test_list:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in char_freq:\n            char_freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            char_freq[char] += 1\n\n    # Create an empty list to store the pairs of reverse strings\n    reverse_pairs = []\n\n    # Loop through each character in the test_list\n    for char in test_list:\n        # If the frequency of the character is odd, it means the character can be reversed to form another character\n        if char_freq[char] % 2 == 1:\n            # Loop through each possible character that can be reversed to the current character\n            for i in range(len(char)):\n                # Get the reversed character from the current character and store it in a new variable\n                new_char = char[len(char)-i-1]\n                # If the new character is already in the dictionary, append the pair of reversed characters to the reverse_pairs list\n                if new_char in char_freq:\n                    reverse_pairs.append(char + new_char)\n\n    # Return the length of the reverse_pairs list\n    return len(reverse_pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n\n    # Create a dictionary to store the reverse of each string\n    for string in test_list:\n        reverse = string[::-1]\n        if reverse in reverse_dict:\n            reverse_dict[reverse] += 1\n        else:\n            reverse_dict[reverse] = 1\n\n    # Count the number of reverse pairs\n    count = 0\n    for value in reverse_dict.values():\n        count += value * (value - 1) // 2\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # initialize two empty lists to store the pairs of reverse strings\n    reverse_pairs = []\n    count = 0\n\n    # loop through each string in the list\n    for string in test_list:\n\n        # if the string is empty or only contains one character, it is not a reverse string\n        if len(string) <= 1:\n            continue\n\n        # loop through each character in the string\n        for i in range(len(string)-1):\n\n            # check if the reversed substring is present in the list\n            if string[i:][::-1] in test_list:\n                count += 1\n                # add the pair to the list of reverse pairs\n                reverse_pairs.append((string[i], string[i:][::-1]))\n\n    # return the count of reverse pairs and the list of pairs\n    return count, reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create an empty dictionary to store the count of each string\n    count_dict = {}\n    # Iterate through the list of strings\n    for string in test_list:\n        # Convert the string to a list of characters and sort it in descending order\n        sorted_chars = sorted(string, reverse=True)\n        # Convert the sorted list of characters back to a string and store it as the key in the dictionary\n        key = ''.join(sorted_chars)\n        # If the key is already in the dictionary, increment its value by 1\n        if key in count_dict:\n            count_dict[key] += 1\n        # If the key is not in the dictionary, add it with a value of 1\n        else:\n            count_dict[key] = 1\n    # Initialize variables to store the count of pairs\n    pair_count = 0\n    # Iterate through the dictionary to count the pairs\n    for key, value in count_dict.items():\n        # If the value is greater than 1, it means that the key has multiple pairs\n        if value > 1:\n            pair_count += value * (value - 1) // 2\n    # Return the count of pairs\n    return pair_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            sublist = list1[i:j+1]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple not in sublist_count:\n                sublist_count[sublist_tuple] = 1\n            else:\n                sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list in the list1 to a tuple and count the number of occurences\n    count_dict = {}\n    for sublist in list1:\n        count = 0\n        for item in sublist:\n            count += list1.count(item)\n        count_dict[tuple(sublist)] = count\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list to a tuple\n    list1_tuples = [(tuple(x), list1.count(x)) for x in list1]\n    # Group the tuples based on their tuples\n    grouped_tuples = {}\n    for tup in list1_tuples:\n        if tup[0] in grouped_tuples:\n            grouped_tuples[tup[0]][1] += tup[1]\n        else:\n            grouped_tuples[tup[0]] = tup[1]\n    # Convert the grouped tuples back to lists and return the dictionary\n    return {list(x[0]): x[1] for x in grouped_tuples.items()}"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuple = tuple(list1) # convert the list to tuple to avoid the counts of lists being off\n    sublist_count = {}\n    for sublist in list1_tuple:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the sublist counts\n    sublist_counts = {}\n    \n    # Iterate through the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in sublist_counts:\n            # Increment the count for the tuple in the dictionary\n            sublist_counts[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublist_counts[tuple(sublist)] = 1\n            \n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store the counts of each sublist\n    counts = {}\n    \n    # Loop through each element of the list\n    for elem in lst:\n        # Convert the element to a tuple and check if it's already a key in the dictionary\n        if tuple(elem) in counts:\n            # If it is, increment its count\n            counts[tuple(elem)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[tuple(elem)] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts the number of unique sublists of a list.\n\n    Args:\n    lst (list): The list for which we need to count unique sublists.\n\n    Returns:\n    dict: A dictionary where the keys are the unique sublists of the input list and the values are the count of such sublists.\n    \"\"\"\n    # Create a set to store the unique sublists\n    unique_sublists_set = set()\n\n    # Loop through each element of the input list\n    for i in range(len(lst)):\n        # Loop through each element of the input list after the current element\n        for j in range(i+1, len(lst)):\n            # Check if the sublist is a unique sublist\n            sublist = lst[i:j+1]\n            if sublist not in unique_sublists_set:\n                # Add the sublist to the set of unique sublists and its count\n                unique_sublists_set.add(sublist)\n                unique_sublists_set.add((len(sublist),))\n\n    # Convert the set of unique sublists to a dictionary\n    unique_sublists_dict = {}\n    for sublist in unique_sublists_set:\n        if isinstance(sublist, tuple):\n            sublist_count = sublist[0]\n        else:\n            sublist_count = 1\n        unique_sublists_dict[(sublist,) if isinstance(sublist, tuple) else sublist] = sublist_count\n\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the unique sublists\n    unique_sublist_dict = {}\n\n    # Iterate over the list1\n    for i in range(len(list1)):\n        # Extract the sublist for this index\n        sublist = list1[i]\n\n        # Convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in unique_sublist_dict:\n            # Increment the count of this tuple\n            unique_sublist_dict[tuple(sublist)] += 1\n        else:\n            # Add the sublist to the dictionary with a count of 1\n            unique_sublist_dict[tuple(sublist)] = 1\n\n    return unique_sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store unique sublists and their counts\n    counts = {}\n    # Iterate over the lists in the given list\n    for i in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        if tuple(sorted(i)) in counts:\n            counts[tuple(sorted(i))] += 1\n        else:\n            counts[tuple(sorted(i))] = 1\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if tuple(sublist) not in sublist_count:\n                sublist_count[tuple(sublist)] = sublist.count(sublist)\n                \n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        decimal = float(num)\n        if decimal - int(decimal) <= 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the input is a string\n    if type(num)!= str:\n        return False\n\n    # remove any non-digit characters from the string\n    num = ''.join(filter(str.isdigit, num))\n\n    # check if the string is less than 2 characters long\n    if len(num) < 2:\n        return False\n\n    # check if the string is a valid decimal number\n    try:\n        decimal.Decimal(num)\n        return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # remove any non-digit characters from the string\n    num = ''.join(filter(str.isdigit, num))\n    \n    # check if the string is equal to 2 digits or less\n    if len(num) <= 2:\n        # split the string into two parts separated by a decimal point\n        parts = num.split('.')\n        \n        # check if there are exactly two parts\n        if len(parts) == 2:\n            # check if the first part is zero\n            if parts[0]!= '0':\n                # check if the second part is 00\n                if parts[1] == '00':\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    num_list.reverse()\n    num_str = ''.join(num_list)\n\n    if num_str == '0':\n        return True\n    else:\n        num_list = list(num)\n        if num_list[-1] == '.':\n            return False\n        else:\n            num_list.pop()\n            num_str = ''.join(num_list)\n            num_list = list(num_str)\n            for i in range(len(num_list)-1):\n                if num_list[i] == '0':\n                    num_list.pop(i)\n                    num_list.insert(i, '0')\n                else:\n                    break\n            num_str = ''.join(num_list)\n            if num_str.startswith('0'):\n                return False\n            else:\n                return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        num_str = str(num)\n        if '.' not in num_str:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num.is_integer():\n            if len(str(num)) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    else:\n        arr = num.split('.')\n        if len(arr[0]) == 0 or len(arr[1])!= 2:\n            return False\n        for digit in arr[0]:\n            if not digit.isdigit():\n                return False\n        for digit in arr[1]:\n            if not digit.isdigit():\n                return False\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    for i in num:\n        if not i.isdigit():\n            return False\n    if len(num) == 1:\n        return False\n    count = 0\n    for i in num:\n        if i == '.':\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef is_decimal(num):\n    # Check if the string contains only digits and a decimal point\n    if re.match('^[-+]?\\d+(?:\\.\\d{1,2})?$', num):\n        # Check if the decimal point is followed by exactly two digits\n        if re.match('^\\d+\\.\\d{2}$', num):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)): # check if all elements are unique\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_set = set(arr)\n    \n    # If the length of the set is equal to 1, then the array contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    # Create a set from the array to remove duplicates\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1, indicating that there is only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        print(\"Yes, it contains 29 days\")\n    elif monthnum3 % 2 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        print(\"Yes, it contains 30 days\")\n    else:\n        print(\"No, it doesn't contain 30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and year % 4 == 0:\n        if year % 100 == 0 and year % 400 == 0:\n            if monthnum3 == 2 and day <= 29:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 == 2 and day <= 28:\n                return True\n            else:\n                return False\n    else:\n        if monthnum3 == 2 and day <= 28:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100 == 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            print(\"30 days in month\", monthnum3)\n        else:\n            print(\"31 days in month\", monthnum3)\n    else:\n        if monthnum3 == 2:\n            print(\"28 days in month\", monthnum3)\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            print(\"30 days in month\", monthnum3)\n        else:\n            print(\"31 days in month\", monthnum3)"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"30 days in this month\")\n    else:\n        print(\"31 or 30 days in this month\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        if monthnum3 % 2 == 0:\n            return '30 days'\n        else:\n            return '28 days'\n    elif monthnum3 in [4, 6, 9, 11]:\n        return '30 days'\n    else:\n        return 'invalid month'"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum, 'contains 30 days.')\n    elif monthnum in [4, 6, 9, 11]:\n        print(monthnum, 'contains 31 days.')\n    else:\n        print(monthnum, 'is not a valid month number.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in range(1,13):\n        if monthnum % 2 == 0:\n            if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n                return True\n            else:\n                return False\n        else:\n            if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n                return False\n            else:\n                return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Iterate through the array and compare the difference between adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum and maximum difference if the difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # Update the maximum difference if the difference is larger\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize minimum difference and current minimum\n    min_diff = float('inf')\n    curr_min = float('inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if current element is less than current minimum\n        if arr[i] < curr_min:\n            # Update current minimum and update minimum difference if current minimum is smaller\n            curr_min = arr[i]\n            min_diff = curr_min - arr[i]\n\n    # Return minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    The function uses a two-pointer approach to find the minimum difference between any two elements in the array.\n    The idea is to sort the array first and then find the difference between the maximum and minimum elements in the array.\n    '''\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # get the maximum and minimum elements in the array\n    max_elem = arr[-1]\n    min_elem = arr[0]\n\n    # calculate the minimum difference between any two elements in the array\n    min_diff = max_elem - min_elem\n\n    # return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum values\n    min_diff = float('inf')\n    max_val = arr[n-1]\n\n    # Traverse the array and calculate the minimum difference between any two elements\n    for i in range(n-1):\n        diff = max_val - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize variables\n    min_diff = arr[1] - arr[0]\n    # Traverse the array\n    for i in range(1, n-1):\n        # Calculate the difference between current element and the next element\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two arguments - an array 'arr' and its size 'n'. \n    It then calculates the minimum difference between any two elements in the array,\n    which is calculated as the absolute value of the difference between adjacent elements.\n    '''\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n\n    :param arr: List of integers.\n    :param n: Size of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize minimum difference variable\n    min_diff = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Iterate over the next i elements of the array\n        for j in range(i+1, n):\n            # Compute the difference between the elements at indices i and j\n            diff = arr[i] - arr[j]\n\n            # Update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array \n    arr.sort() \n    # Initialize the minimum difference to be the difference of the first and last elements \n    min_diff = abs(arr[n-1] - arr[0]) \n    # Loop through the array and calculate the difference between adjacent elements \n    for i in range(1, n-1): \n        diff = abs(arr[i] - arr[i-1]) \n        if diff < min_diff: \n            min_diff = diff \n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 20\n    elif n == 6:\n        return 25\n    elif n == 7:\n        return 30\n    elif n == 8:\n        return 35\n    elif n == 9:\n        return 40\n    elif n == 10:\n        return 45\n    else:\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input\"\n\n    # initialize the count and current polite number\n    count = 1\n    current_polite = 1\n\n    # loop until the count reaches n\n    while count < n:\n        # increment the count and update the current polite number\n        count += 1\n        current_polite += 1\n\n        # check if the current polite number is less than or equal to the square root of n\n        if current_polite <= math.sqrt(n):\n            # check if the current polite number is prime\n            if is_prime(current_polite):\n                # return the current polite number if it is prime\n                return current_polite\n\n        # check if the current polite number is greater than the square root of n\n        else:\n            # check if the current polite number is prime\n            if is_prime(current_polite):\n                # return the current polite number if it is prime\n                return current_polite\n\n    # if the count reaches n, return the last polite number\n    return current_polite - 1\n\ndef is_prime(num):\n    \"\"\"\n    Write a function to check if a given number is prime or not.\n    \"\"\"\n    # check if the input is a positive integer\n    if type(num)!= int or num <= 1:\n        return False\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n\n    # if the number is prime, return True\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Initialize the sum of squares of digits to 0\n    sum_of_squares = 0\n\n    # Iterate over the digits of n\n    for digit in str(n):\n        # Calculate the square of the digit\n        digit_square = math.pow(int(digit), 2)\n        # Add the square to the sum of squares\n        sum_of_squares += digit_square\n\n    # Check if the sum of squares is a power of 2\n    if sum_of_squares == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    A function to find the nth polite number. \n    '''\n    # Initialize the polite number counter\n    count = 0\n\n    # Initialize the base of the polite number\n    base = 1\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a polite number\n        if i == base:\n            # If it is, increment the count\n            count += 1\n        # If the current number is not a polite number\n        else:\n            # Calculate the next number in the sequence\n            base += 1\n            # Check if the next number is a polite number\n            if is_polite(base):\n                # If it is, increment the count\n                count += 1\n    \n    # Return the count of polite numbers found\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite_number(n):\n        \"\"\"\n        Find the nth polite number.\n        \"\"\"\n        # Initialize variables\n        count = 0\n        polite = 1\n        prime = 2\n        while prime <= n:\n            count += 1\n            if is_prime(prime):\n                polite *= prime\n            prime += 1\n        return polite\n\n    def is_prime(n):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Call the nth_polite_number function with n as argument\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else: \n        return 1 + (2 * math.log(n, 2))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    n is an integer greater than or equal to 2.\n    '''\n    # initialize count and max_count\n    count = 1\n    max_count = 2\n\n    # calculate the nth polite number\n    while count <= n:\n        # if count is odd, multiply by 3 and add 1\n        if count % 2!= 0:\n            count = 3 * count + 1\n        else:\n            # if count is even, multiply by 5\n            count = 5 * count\n\n        # update max_count if current count is greater\n        if count > max_count:\n            max_count = count\n\n    return max_count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns True if n is a polite number, False otherwise. \n    A polite number is defined as a number which is divisible by 10 and has 0 as the last digit.\n    '''\n    # Initialize variables\n    is_polite = False\n    polite_number = 0\n\n    # Generate the first 10 polite numbers\n    if n <= 10:\n        for i in range(1, n+1):\n            polite_number = i * 10\n            if polite_number % 10 == 0 and polite_number!= 0:\n                is_polite = True\n            else:\n                break\n    \n    # Generate the remaining polite numbers\n    else:\n        for i in range(11, n+1):\n            polite_number = i * 10\n            if polite_number % 10 == 0 and polite_number!= 0:\n                is_polite = True\n            else:\n                break\n\n    # Return the result\n    return is_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 5, 10, 20, 50, 100, 200, 500, 1000]\n    for i in range(1, len(polite_numbers)):\n        if n % polite_numbers[i] == 0:\n            return polite_numbers[i]\n    return polite_numbers[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n\n    The nth polite number is a positive integer that is equal to the sum of the squares of the first n odd integers.\n\n    For example, the first polite number is 25 = 5^2 + 7^2 + 9^2, and the second polite number is 49 = 17^2 + 19^2 + 21^2.\n\n    We can define a function is_polite(n) that takes an integer n as input and returns the nth polite number.\n\n    The function first initializes a variable i to 1, which will keep track of the current odd integer. We then loop until i is equal to n. For each iteration, we calculate the sum of the squares of odd integers starting from i and add them up. This gives us the nth odd integer. We then square this odd integer and add it to the sum of squares of all previous odd integers. This gives us the nth polite number.\n\n    Note that we start counting the odd integers starting from 1 instead of 0, because we want to exclude the first odd integer (which is 1) in our sum.\n    \"\"\"\n\n    i = 1\n    polite_sum = 0\n    while i <= n:\n        odd_sum = 0\n        for j in range(i, 2*i, 2):\n            odd_sum += j*j\n        polite_sum += odd_sum*odd_sum\n        i += 2\n\n    return math.sqrt(polite_sum)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        result = []\n        for i in range(len(l1)-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list and returns a list of all pairs of consecutive items in the list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            pairs.append((l1[i], None))\n        else:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers as input and the target sum as a parameter. It returns the count of all pairs\n    in the list whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not present in the second list.\n    '''\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains the elements that are present in li1 but not in li2.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = set(li1) - set(li2)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(li1)\n    set2 = set(li2)\n    # Use set subtraction to get the difference between the two sets\n    diff_set = set1 - set2\n    # Convert the set back to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        sum += i*i*i*i\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum_of_powers += i ** 4\n        i += 1\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Enter a positive integer greater than 0.\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        sum_of_fourth_power += (i ** 4)\n    return sum_of_fourth_power\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum_of_pow = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            count += 1\n            sum_of_pow += i ** 4\n    \n    return sum_of_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum_of_powers = 0\n\n    # calculate the sum of fourth power of odd numbers\n    while count < n:\n        power = (count + 1) ** 4\n        sum_of_powers += power\n        count += 1\n\n    return sum_of_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum() or char in ['+', '-', '*', '/', '(', ')']:\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            elif top_char in ['+', '-']:\n                continue\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n    for char in exp:\n        if char.isalnum() or char in ['+', '-', '*', '/', '^']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                return False  # Unmatched ')'\n            top = stack.pop()\n            if i - top - 1!= 0:\n                return False  # Mismatched ')' and '('\n\n    return not stack  # All ')' have been matched"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for i in exp:\n        if i.isalnum():\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    parentheses = {'(': ')', '{': '}', '[': ']'}\n    for i in exp:\n        if i in parentheses:\n            stack.append(parentheses[i])\n        elif i == ')' and not stack or i == ']' and not stack or i == '}' and not stack:\n            return False\n        elif i == ')' and stack[-1] == '(' or i == ']' and stack[-1] == '[' or i == '}' and stack[-1] == '{':\n            stack.pop()\n        elif i in ['+', '-', '*', '/']:\n            if not stack:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Iterate over the words\n    for i in range(len(words)):\n        # If the length of the word is less than K, remove it\n        if len(words[i]) < K:\n            del words[i]\n\n    # Join the remaining words into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)\n\ntest_str = \"This is a test string with 3 words and another word with 5 length\"\nK = 5\nprint(remove_length(test_str, K))"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # remove all the words with k length\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    # join the new words with space\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Remove words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    try:\n        matches = re.finditer(pattern, text)\n        result = []\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            result.append((start, end))\n        return result\n    except re.error:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # search for pattern in text\n    match = re.search(pattern, text)\n    \n    # check if match found\n    if match:\n        # get position and occurrence of match\n        position = match.start()\n        occurrence = match.group()\n        return [position, occurrence]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for i in range(len(matches)):\n            print(f\"Match {i+1}: {matches[i]}\")\n            print(f\"Position: {text.find(matches[i])}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Found match at position {match.start()}, length {len(match.group())}\")\n            print(f\"Match is '{match.group()}'\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern,text)\n\n    # If no matches found, return None\n    if not matches:\n        return None\n\n    # Initialize variables to store the matches and positions\n    occurrence = []\n    position = []\n\n    # Iterate through each match found and add its occurrence and position to the respective lists\n    for match in matches:\n        occurrence.append(match.count(match))\n        position.append(text.find(match))\n\n    # Return a dictionary containing the occurrence and position of each match\n    return {'occurrence': occurrence, 'position': position}"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use re.finditer() to iterate over all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        # Loop over all the matches and extract the position and the number of occurrences\n        for match_num, match in enumerate(matches, start=1):\n            # Extract the position of the match and the number of occurrences of the pattern\n            match_start = match.start()\n            match_end = match.end()\n            match_count = match.re.groupcount\n            # Return the position, number of occurrences, and the match itself\n            return match_start, match_count, text[match_start:match_end]\n        # This code block should never be reached\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            for j in range(i, len(nums)):\n                if j % 2!= 0:\n                    if nums[i] % 2 == 0 or nums[j] % 2 == 0:\n                        return False\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a list to store the odd positions\n    odd_positions = []\n\n    # Iterate through each number in the list\n    for i, num in enumerate(nums):\n        # If the current number is odd and its index is odd, add its index to the list\n        if num % 2!= 0 and i % 2!= 0:\n            odd_positions.append(i)\n\n    # If there are no odd positions, return True\n    if not odd_positions:\n        return True\n\n    # Otherwise, return False\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(0, n, 2):\n        count = 0\n        for j in range(i, n, 2):\n            if nums[j] % 2 == 0:\n                count += 1\n            else:\n                break\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # initialize the count of odd numbers in each position\n    count = [0] * len(nums)\n\n    # loop over the numbers in the list\n    for num in nums:\n        # if the number is odd, increment the corresponding position in the count list\n        if num % 2 == 1:\n            count[num-1] += 1\n\n    # loop over the count list and check that every odd position has at least one odd number\n    for i in range(len(count)):\n        if count[i] % 2 == 0:\n            return False\n\n    # if we reach this point, all odd positions have at least one odd number\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n    if odd_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Initialize a variable to store the result\n    result = True\n\n    # Loop through the list\n    for i in range(len(nums)):\n        # If the index is odd and the number at that index is odd, return False\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n\n    # If we get to here, every odd index contains odd numbers\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        elif test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    # Initialize an empty list to store the count of vowels\n    vowels_count = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        \n        # Check if the character is a vowel\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            \n            # Check if the character has a vowel as its neighbor\n            if char + char.lower() in test_str:\n                vowels_count.append(char)\n    \n    # Return the count of vowels\n    return vowels_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n            if i > 0 and test_str[i-1] in vowels:\n                count -= 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count -= 1\n                \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to store the elements of the array\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated_elements = 0\n    # Iterate over the unique set and add the values to the sum_of_non_repeated_elements variable\n    for num in unique_set:\n        sum_of_non_repeated_elements += num\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_list = list(set(arr))\n    return sum(unique_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))  # create a set of unique elements from the list\n    sum_of_unique = sum(unique_elements)  # calculate the sum of the unique elements\n    \n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Remove duplicates from the list using set()\n    arr_unique = list(set(arr))\n    # Initialize the sum variable to 0\n    sum_unique = 0\n    # Iterate over the list and add the unique elements to the sum\n    for num in arr_unique:\n        sum_unique += num\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate through the dictionary and add up all the non-repeated elements\n    for elem in arr:\n        if freq[elem] == 1:\n            sum += elem\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to keep track of the non-repeated elements\n    unique_elements = set(arr)\n\n    # Calculate the sum of the unique elements\n    total_sum = sum(unique_elements)\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a dictionary to store unique elements and their counts\n    counts = {}\n\n    # iterate over the array and update the count for each unique element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # initialize a variable to store the sum of unique elements\n    sum_unique = 0\n\n    # iterate over the dictionary to find the sum of unique elements\n    for num in counts:\n        if counts[num] == 1:\n            sum_unique += num\n\n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # Iterate over the keys in the dictionary and add their values to the sum\n    for key in freq:\n        non_repeated_sum += freq[key]\n    \n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements in the list\n    unique_elements = set(arr)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the unique elements and add their value to the sum\n    for element in unique_elements:\n        sum += element\n        \n    # Return the sum of the unique elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a set of non-repeated elements in the list\n    unique_elements = set(arr)\n\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(unique_elements))\n\n    # initialize the sum variable to 0\n    total_sum = 0\n\n    # iterate over the sorted list and add the elements to the sum\n    for element in sorted_list:\n        total_sum += element\n\n    # return the sum of non-repeated elements\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0] + 1):\n        group_list = [list1[i] for i in range(key, key+len(group))]\n        grouped_list.append(group_list)\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive elements\n    grouped = groupby(list1)\n    # Iterate over the grouped objects and create sublists for consecutive duplicates\n    return [list(g) for k, g in grouped if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(sorted(list1)) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i, item in enumerate(list1):\n        group = groupby(list1[i:])\n        group = list(group)\n        if len(group) > 1:\n            result.append([item])\n            for sub_group in group:\n                result.append(sub_group[1])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Create a dictionary to store the counts of each element in the list\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    # Create a list of lists to store the consecutive duplicates\n    grouped_counts = [list(group) for key, group in groupby(counts.items()) if key[1] > 1]\n\n    # Flatten the list of lists to get the final sublists of consecutive duplicates\n    result = [item[0] for sublist in grouped_counts for item in sublist]\n\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the list to a tuple\n        tup = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if tup not in count_dict:\n            # if it's not, add it with a count of 1\n            count_dict[tup] = 1\n        else:\n            # if it is, increment the count\n            count_dict[tup] += 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Loop through each element in the list\n    for sublist in list1:\n        # If the sublist is not a tuple, convert it to a tuple\n        if not isinstance(sublist, tuple):\n            sublist = tuple(sublist)\n\n        # Check if the sublist is already a key in the dictionary\n        if sublist not in count_dict:\n            # If it's not, add it as a key with a count of 1\n            count_dict[sublist] = 1\n        else:\n            # If it is, increment the count by 1\n            count_dict[sublist] += 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of each unique sublist\n    count_dict = {}\n    # Loop through each list in the input list\n    for item in list1:\n        # Convert the list to a tuple and check if it is already in the dictionary\n        if tuple(item) in count_dict:\n            # Increment the count of the tuple in the dictionary\n            count_dict[tuple(item)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tuple(item)] = 1\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublists = {}\n    # Iterate through each element in the list\n    for element in list1:\n        # If the element is a list, turn it to a tuple and add it to the dictionary\n        if isinstance(element, list):\n            sublists[tuple(element)] = sublists.get(tuple(element), 0) + 1\n    # Return the dictionary\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the count of each unique sublist\n    sublist_dict = {}\n    # Iterate through each list in the input list\n    for sublist in list1:\n        # Turn the list into a tuple and add it to the dictionary if it hasn't been seen before\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    sublist_counts = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Check if the list is already in the dictionary\n            if element not in sublist_counts:\n                # If not, add it with a count of 1\n                sublist_counts[element] = 1\n            # If the list is already in the dictionary, increment its count by 1\n            else:\n                sublist_counts[element] += 1\n    # Return the dictionary\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist_tuple = tuple(item)\n            if sublist_tuple not in sublists:\n                sublists[sublist_tuple] = 1\n            else:\n                sublists[sublist_tuple] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            item = tuple(item)\n            if item not in sublists:\n                sublists[item] = 0\n            sublists[item] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    count = {}\n    \n    for lst in list1:\n        lst = tuple(sorted(lst))\n        if lst in count:\n            count[lst] += 1\n        else:\n            count[lst] = 1\n    \n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) and sum(test_list[i]) == sum(test_list[k]):\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb.append(tuple(sorted((test_list[i][0]+test_list[j][0], test_list[i][1]+test_list[j][1]))))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # creating a list of tuples from the given tuple list\n    tuples_list = [tuple(x) for x in test_list]\n    # finding the combinations of sums with tuples\n    combinations_of_sums = combinations(tuples_list, r=2)\n    # converting the combinations to list of tuples\n    list_of_tuples = [tuple(x) for x in combinations_of_sums]\n    return list_of_tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Function to find the sum of a tuple\n    def sum_of_tuple(t):\n        return sum(t)\n\n    # Find all combinations of tuples in the given list\n    combinations_of_tuples = combinations(test_list, len(test_list))\n\n    # Find the combinations of sums with tuples\n    combinations_of_sums = set()\n    for combination in combinations_of_tuples:\n        combination_sum = sum_of_tuple(combination)\n        combinations_of_sums.add(combination_sum)\n\n    return combinations_of_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for tup in test_list:\n        sums.append(sum(tup))\n\n    return combinations(set(sums), len(set(sums)))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Find all possible combinations of sums that can be formed from a given tuple list.\n    \"\"\"\n    # Sort the tuples in the list in ascending order\n    test_list.sort()\n\n    # Generate all possible combinations of pairs of tuples\n    pairs = combinations(test_list, 2)\n\n    # Iterate through the combinations and calculate their sums\n    for pair in pairs:\n        # Calculate the sum of the pair of tuples\n        sum_pair = pair[0] + pair[1]\n\n        # Check if the sum is present in the test list\n        if sum_pair in test_list:\n            # If it is present, print the pair of tuples and their sum\n            print(pair, sum_pair)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize variables\n    total_sum = sum(test_list)\n    result = []\n    \n    # Find the combinations of sums with tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum is valid\n            if test_list[i] + test_list[j] == total_sum:\n                # Append the combination to the result list\n                result.append((test_list[i], test_list[j]))\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Convert the given tuple list to a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Use the combinations function from the itertools module to find all combinations of sums with tuples\n    for combination in combinations(unique_tuples, r=2):\n        # Check if the sum of the two tuples in the combination is equal to the first tuple in the combination\n        if sum(combination) == combination[0]:\n            # If the sum is equal, print the combination\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combination = tuple(combinations(test_list[i], j))\n            combination_list.append(combination)\n    return combination_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Use itertools to generate all possible combinations of sums with tuples\n    # This generates a list of tuples, where each tuple contains a combination of sums with tuples in the given list\n    combinations_list = list(combinations(test_list, len(test_list[0])))\n\n    # Remove duplicates by converting the list to a set and then back to a list\n    unique_combinations = list(set(combinations_list))\n\n    return unique_combinations"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # Count the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    \n    # Check if count of divisors is even\n    count_div = len(divisors)\n    if count_div % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if n / i!= i: \n                count += 1 \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 2:\n        print(n, \"has even count of divisors\")\n    else:\n        print(n, \"has odd count of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even, otherwise False.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        divisors = 0\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                divisors += 1\n        return divisors % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    # Calculate the sum of all numbers from 1 to n.\n    total = sum(range(1, n+1))\n    \n    # Calculate the number of divisors of n.\n    num_divisors = total - n\n    \n    # Check if the number of divisors is even or odd.\n    if num_divisors % 2 == 0:\n        print(f'{n} has an even number of divisors.')\n    else:\n        print(f'{n} has an odd number of divisors.')\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    # Find the number of divisors\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    num_divisors = len(divisors)\n    \n    # Check if the count of divisors is even\n    if num_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number n.\n    If the number of divisors is even, it returns True, otherwise it returns False.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors of n\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    \n    # Check if the count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    # Iterate through the array and calculate the sum of odd length subarrays\n    for i in range(n):\n        left = i\n        right = i\n        while right < n and (right-left+1)%2!= 0:\n            right += 1\n        ans += arr[left:right+1].sum()\n    return ans"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if j-i == 1: # check if length of subarray is odd\n                sum += arr[j] # add all odd-length subarray elements\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            for j in range(i, n, 2):\n                result += arr[j]\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(1, len(arr)):\n        if i % 2 == 0:\n            sum_odd += arr[i]\n        else:\n            subarray = sum(arr[i-j] for j in range(2, i+1, 2))\n            sum_odd += subarray\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i == 1:\n                sum += arr[i]\n            elif j-i == 3:\n                sum += arr[i] + arr[i+2] + arr[i+1] + arr[j-1]\n            elif j-i == 5:\n                sum += arr[i] + arr[i+2] + arr[i+1] + arr[i+3] + arr[i+4]\n            else:\n                pass\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    total = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i + 1, min(i + 3, n)):\n            total += arr[j]\n\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the sum of odd length subarrays from i to j\n            temp = sum(arr[i:j+1])\n            if j-i+1 % 2!= 0:\n                # check if the length of the subarray is odd\n                sum_odd += temp\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    sum = 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is odd, then check if the next element is odd or not\n        if arr[i] % 2!= 0 and i + 2 < n and arr[i + 1] % 2!= 0:\n            # If both conditions are true, then add the current element to the sum and increment the count\n            sum += arr[i]\n            count += 1\n\n        # If the count reaches 2 (i.e., we have found two odd length subarrays), then add the sum and reset the count\n        if count == 2:\n            sum += arr[i]\n            count = 0\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_arr = arr[i:j+1]\n            if sum_is_odd(sub_arr):\n                sum += sum_subarray(sub_arr)\n    return sum\n\n\ndef sum_subarray(arr):\n    '''\n    Write a python function to find the sum of a subarray.\n    '''\n    return sum(arr)\n\n\ndef sum_is_odd(arr):\n    '''\n    Write a python function to check if a subarray is odd or not.\n    '''\n    return all(num % 2!= 0 for num in arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd = 0\n    for i in range(n):\n        if i == 0 or (i > 0 and arr[i-1] % 2 == 1):\n            count += 1\n            sum_odd += arr[i]\n        if count > 0 and count % 2 == 0:\n            if sum_odd % 2 == 1:\n                sum_odd += arr[i]\n            else:\n                sum_odd -= arr[i-count]\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    v = max_val\n    \n    h, s, v = int(h), int(s*100), int(v*100)\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    del_max = cmax - cmin\n    if cmax == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = ((g - b) / del_max) % 6\n        elif cmax == g:\n            h = (b - r) / del_max + 2\n        else:\n            h = (r - g) / del_max + 4\n        h = h/6\n    if cmax == 0:\n        s = 0\n    else:\n        s = del_max / cmax\n    if cmax == 0:\n        v = 0\n    else:\n        v = cmax\n    # Convert HSV to RGB\n    h, s, v = h*65535, s*255, v*255\n    r, g, b = 0, 0, 0\n    if h < 65535:\n        i = int(h)\n        f = h - i\n        p = v * (1 - s)\n        q = v * (1 - s * f)\n        t = v * (1 - s * (1 - f))\n        if i == 0:\n            r, g, b = v, t, p\n        elif i == 1:\n            r, g, b = q, v, p\n        elif i == 2:\n            r, g, b = p, v, t\n        elif i == 3:\n            r, g, b = p, q, v\n        elif i == 4:\n            r, g, b = t, p, v\n        elif i == 5:\n            r, g, b = v, p, q\n    return int(r), int(g), int(b)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV (Hue, Saturation, Value) color model.\n    \n    :param r: Red color component in [0, 255]\n    :param g: Green color component in [0, 255]\n    :param b: Blue color component in [0, 255]\n    :return: HSV (Hue, Saturation, Value) tuple\n    \"\"\"\n    # Convert RGB to HSV values\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    if delta_rgb == 0:\n        h = 0\n    elif max_rgb == r:\n        h = (g - b) / delta_rgb\n    elif max_rgb == g:\n        h = 2 + (b - r) / delta_rgb\n    else:\n        h = 4 + (r - g) / delta_rgb\n    if h < 0:\n        h += 6\n    h /= 6\n    \n    # Convert HSV to Saturation and Value\n    if delta_rgb == 0:\n        s = 0\n    else:\n        s = delta_rgb / (1 - abs(2 * h - 1))\n    \n    v = max_rgb / 255\n    \n    # Convert to HSV values and return tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    h = None\n    s = None\n    v = None\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = 60 * ((g - b) / delta)\n        elif max_val == g:\n            h = 60 * ((b - r) / delta + 2)\n        else:\n            h = 60 * ((r - g) / delta + 4)\n        \n        if h < 0:\n            h += 360\n        \n        s = delta / max_val\n    \n    if max_val == 0:\n        v = 0\n    else:\n        v = max_val\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to floats to make the calculations easier\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the maximum and minimum values in the RGB color space\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    # Calculate the chroma and hue\n    if max_rgb == min_rgb:\n        hue = 0\n    else:\n        delta = max_rgb - min_rgb\n        if r == max_rgb:\n            hue = 60 * (((g - b) / delta) % 6)\n        elif g == max_rgb:\n            hue = 60 * (((b - r) / delta) + 2)\n        else:\n            hue = 60 * (((r - g) / delta) + 4)\n        hue = round(hue, 2)\n\n    # Calculate the saturation\n    if max_rgb == 0:\n        saturation = 0\n    else:\n        delta = max_rgb - min_rgb\n        saturation = delta / max_rgb\n\n    # Calculate the value\n    value = max_rgb\n\n    # Return a tuple of the hue, saturation, and value\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Convert R, G, B to float values\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n    \n    # Find max and min values of the color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find difference between max and min values\n    delta = max_val - min_val\n    \n    # Handle case of max value being 0\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate hue\n        if delta == 0:\n            h = 0\n        elif r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Convert hue from degrees to fraction\n        h = (h * 60) % 360\n        \n        # Adjust hue value to be between 0 and 360\n        if h < 0:\n            h += 360\n    \n    # Calculate saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Calculate value\n    v = max_val\n    \n    # Return hsv tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color using the following formulas:\n\n    h = (max(r, g, b) + min(r, g, b))/2\n    s = (max(r, g, b) - min(r, g, b))/max(r, g, b)\n\n    v = max(r, g, b)\n\n    hsv = (h, s, v)\n\n    :param r: Red channel value (0-255)\n    :param g: Green channel value (0-255)\n    :param b: Blue channel value (0-255)\n    :return: HSV color tuple (float in range [0, 1], float in range [0, 1], float in range [0, 1])\n    \"\"\"\n    # Get maximum value\n    max_value = max(r, g, b)\n\n    # Get minimum value\n    min_value = min(r, g, b)\n\n    # Calculate hue\n    h = (max_value + min_value) / 2\n\n    # Calculate saturation\n    if max_value == min_value:\n        s = 0.0\n    else:\n        s = (max_value - min_value) / max_value\n\n    # Calculate value\n    v = max_value\n\n    # Return HSV color tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert r,g,b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Calculate max, min and delta\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate hue and saturation\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h % 6\n    \n    if h < 0:\n        h += 6\n    \n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate value\n    value = max_val\n    \n    # Return hsv tuple\n    return h, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val / 255\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * max_val - 1))\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to HSV color value.\n\n    :param r: Integer, range 0-255. Red channel value.\n    :param g: Integer, range 0-255. Green channel value.\n    :param b: Integer, range 0-255. Blue channel value.\n    :return: A tuple representing the HSV color value. The first element is the hue value (in degrees), the second element is the saturation value (in percentage), and the third element is the value (in percentage).\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_val\n\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    if h < 0:\n        h += 6\n\n    h = h * 60\n    s = delta / (1 - abs(2 * max_val - 1))\n\n    if s == 0:\n        v = max_val * 100\n\n    return (h, s * 100, v * 100)\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= (2*num + 1)\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count == 0:\n        print(\"List does not contain any even numbers.\")\n    else:\n        if odd_count == 0:\n            print(\"List does not contain any odd numbers.\")\n        else:\n            print(\"Product of even and odd numbers:\", even_product * odd_product)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_prod = 1\n    odd_prod = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_prod *= num\n        else:\n            odd_count += 1\n            odd_prod *= num\n    \n    if even_count == 0 and odd_count == 0:\n        return None\n    else:\n        return even_prod * odd_prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= num\n    if even_count == 0:\n        return product\n    elif odd_count == 0:\n        return 0\n    else:\n        return product // even_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of the first even and first odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return None\n    elif odd_count == 0:\n        return None\n    else:\n        return list1[0] * list1[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function finds the product of first even and odd numbers of a given list.\n    \"\"\"\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2!= 0]\n    if even:\n        even_product = reduce(lambda x, y: x * y, even)\n        return even_product\n    else:\n        return None\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= list1[0]\n            break\n\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Check if input is a tuple string\n    if not isinstance(test_str, tuple):\n        # If not, check if input is a list of tuples\n        if not all(isinstance(x, tuple) for x in test_str):\n            # If not, return a message\n            return \"Input is not a valid tuple string or a list of tuples.\"\n        else:\n            # If input is a list of tuples, convert each tuple in the list to a list of integers\n            return tuple(int(x) for x in test_str)\n    else:\n        # If input is already a tuple, convert each integer in the tuple to an integer\n        return tuple(int(x) for x in test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to a list of strings\n    str_list = test_str.split(',')\n    \n    # create an empty integer tuple\n    int_tuple = ()\n    \n    # loop through each string in the list and append its integer value to the tuple\n    for string in str_list:\n        int_tuple += (int(string),)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for item in str_list:\n        int_list.append(int(item))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for i in str_list:\n        int_list.append(int(i))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings separated by commas\n    str_list = test_str.split(',')\n    # Convert each string in the list to an integer\n    int_list = [int(x.strip()) for x in str_list]\n    # Convert the integer list to a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(int(i) for i in test_str.strip('()').replace(' ', '').split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of integers\n    int_list = [int(i) for i in test_str]\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the given string into a list of words\n    words = test_str.split()\n    \n    # Convert each word to an integer and append to a list\n    int_list = [int(word) for word in words]\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        # Convert the string to a tuple of integers\n        test_tuple = tuple(map(int, test_str.split()))\n        return test_tuple\n    except ValueError:\n        print(\"Invalid input. Please provide a tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        # Split the input string into a list of strings\n        str_list = test_str.split(',')\n        \n        # Initialize an empty list to store the converted tuples\n        int_list = []\n        \n        # Loop through the list of strings\n        for str_item in str_list:\n            # Convert the string to an integer and append to the list\n            int_list.append(int(str_item.strip()))\n        \n        # Return the converted list as a tuple\n        return tuple(int_list)\n    \n    except ValueError:\n        # If the input is not a tuple string, return an error message\n        return \"Error: Input is not a tuple string.\""
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index of the rightmost element smaller than x\n    i = bisect.bisect_right(a, x)\n\n    # if x is greater than the rightmost element, return len(a)\n    if i == len(a):\n        return i\n\n    # if x is less than the leftmost element, return i-1\n    if x < a[i-1]:\n        return i-1\n\n    # if x is between elements a[i-1] and a[i], return i\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the insertion index for x in a\n    index = bisect.bisect_right(a, x)\n    # If x is already in the list, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    # If x is less than or equal to the last element, return the insertion index\n    elif index == len(a):\n        return index\n    # If x is greater than the last element, return the insertion index plus one\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif x == a[index]:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): A sorted list of elements.\n        x (int): A value to be inserted in the sorted list.\n\n    Returns:\n        int: The index of the right insertion point of the value in the sorted list.\n\n    Examples:\n        >>> right_insertion([1, 3, 4, 6, 7], 5)\n        2\n        >>> right_insertion([1, 3, 4, 6, 7], 1)\n        0\n        >>> right_insertion([1, 3, 4, 6, 7], 8)\n        5\n        >>> right_insertion([], 1)\n        0\n        >>> right_insertion([1], 2)\n        0\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif x > a[i]:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the index of the rightmost element in the sorted list\n    index = bisect.bisect_right(a, x)\n    # If x is already in the list, return the index\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, search for the first index where x should be inserted\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\b(a)b{3}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)b{3}')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{3}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = r\"a\\s*b{3}\"\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text)\n\ntext = \"abcabcabc\"\nresult = text_match_three(text)\nif result:\n    print(\"Match found!\")\nelse:\n    print(\"No match found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.*b{3}\"\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.*b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list from the given test_list\n    new_list = list(test_list)\n    # Create a new string from the given test_str\n    new_str = ''.join(test_str)\n    # Combine the two lists into a new tuple\n    new_tuple = tuple(new_list + new_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Combine the list and tuple using the string\n    new_tuple_str = test_str.join(test_tuple)\n    # Convert the new tuple string back to a tuple\n    new_tuple = tuple(new_tuple_str.split())\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists and the string\n    concatenated_list = test_list + [test_str]\n    # Return the concatenated list as a tuple\n    return tuple(concatenated_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Split the string into a list of characters\n    chars = list(test_str)\n    # Reverse the order of the characters in the list\n    chars.reverse()\n    # Combine the list of characters with the list of items in the list\n    combined = chars + test_list\n    # Return the combined tuple\n    return tuple(combined)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Split the given string into a list of words\n    words = test_str.split()\n\n    # Join the words into a string\n    new_str =''.join(words)\n\n    # Convert the new string back to a tuple\n    new_tuple = tuple(new_str.split())\n\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the given string and list into a single string\n    concatenated_str = test_str + str(test_list)\n    \n    # Convert the concatenated string into a tuple using the tuple() function\n    new_tuple_str = tuple(concatenated_str)\n    \n    # Return the new tuple\n    return new_tuple_str"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple((test_str, test_list))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_list = tuple(test_list)\n    # concatenate the list and the string\n    new_str = test_str + ''.join(str(x) for x in new_list)\n    # convert the concatenated string to a tuple\n    new_tuple = tuple(new_str)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # loop through each index\n    for i in range(len(nums)):\n        # if the index is even, check if its value is even\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n                if count == 2:\n                    return True\n            else:\n                count = 0\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and (i % 2 == 1 or (i == len(nums)-1 and nums[i] == 0)):\n            print(f\"The {i+1}th even index contains even numbers.\")\n        else:\n            print(f\"The {i+1}th even index does not contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of integers and returns True if every even index contains even numbers.\n    If there is an odd number at an even index, the function returns False.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    even_count += 1\n            if even_count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)//2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether all even indices contain even numbers\n    all_even = True\n\n    # Loop through the list and check whether each even index contains an even number\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            # If the number at the even index is not even, set all_even to False and break out of the loop\n            all_even = False\n            break\n\n    return all_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len([num for num in nums[i:i+2] if num % 2 == 0]) == 2:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while len(test_tup) > 1:\n        if isinstance(test_tup[0], tuple):\n            test_tup = test_tup[0]\n        else:\n            test_tup = ()\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup.extend(remove_nested(elem))\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for tup in test_tup for item in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(x for sub_tup in test_tup for x in sub_tup if not isinstance(x, tuple))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(item) for item in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n            count += count_list(item) \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n\ninput_list = [1, 2, [3, 4], [5, 6, 7], [8, 9, [10, 11], 12]]\nprint(count_lists(input_list)) # Output: 4"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return high if high >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the leftmost index of x in the sorted array\n    left = 0\n    right = len(arr)-1\n    \n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments:\n    arr: The sorted array in which we are searching for the last occurrence of the element x.\n    x: The element whose last occurrence we want to find in the sorted array.\n    '''\n    # Find the last occurrence of x in the sorted array using binary search\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and an element x.\n    It returns the last position of the element x in the array, if it exists.\n    Otherwise, it returns -1.\n    \"\"\"\n    # Initialize a variable to keep track of the last position of x\n    last_pos = -1\n    \n    # Iterate through the array from the last element to the first element\n    for i in range(len(arr)-1, -1, -1):\n        # If the current element is equal to x, update the last position\n        if arr[i] == x:\n            last_pos = i\n    \n    # Return the last position of x or -1 if x is not found in the array\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input, and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if left >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if arr[0] == x:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    i = bisect_left(arr, x)\n    if i == len(arr) or arr[i]!= x:\n        return -1\n    # Find the index of the last element less than x\n    j = bisect_right(arr, x) - 1\n    if j == -1 or arr[j]!= x:\n        return -1\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the left and right pointers to the beginning and end of the array, respectively\n    left = 0\n    right = len(arr) - 1\n    \n    # keep track of the last position of the element we are searching for\n    last_pos = -1\n    \n    # iterate through the array using a while loop\n    while left <= right:\n        \n        # calculate the middle index of the current range\n        mid = (left + right) // 2\n        \n        # if the middle element is equal to the element we are searching for, update the last_pos variable\n        if arr[mid] == x:\n            last_pos = mid\n        \n        # if the middle element is greater than the element we are searching for, update the right pointer to mid-1\n        elif arr[mid] > x:\n            right = mid - 1\n        \n        # if the middle element is less than the element we are searching for, update the left pointer to mid+1\n        else:\n            left = mid + 1\n    \n    # return the last position of the element we are searching for\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    #initialize the last position as -1\n    last_pos = -1\n\n    #traverse the array from the beginning to the end\n    for i in range(len(arr)):\n\n        #if the current element is equal to x, update the last position to i\n        if arr[i] == x:\n            last_pos = i\n\n    #return the last position\n    return last_pos"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[a-z]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'Not found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        start_index = result.start()\n        end_index = result.end()\n        return text[start_index:end_index]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    result = pattern.match(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.+b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'\\ba\\w*b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n\n    print(\"The sum of all odd natural numbers within the given range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    odd_sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            odd_sum += l\n        l += 1\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2 == 1:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1, n*2, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initializing the sum variable\n    sum = 0\n    # iterating through the range l to r (inclusive)\n    for i in range(1, n+1, 2):\n        # adding the current odd natural number to the sum variable\n        sum += i\n    # returning the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in arr:  \n        sum += i  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    # create a mask of d bits with all bits set to 1\n    mask = (1 << d) - 1\n    # perform left rotation by shifting all bits to the left by d bits\n    # and masking out the leftmost d bits\n    return ((n << d) & mask) | ((n >> (32 - d)) & ~(mask << d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert number to binary string\n    binary_str = bin(n)[2:]\n    # Append 0's at the beginning of the string until the length of the binary string becomes equal to d\n    while len(binary_str) < d:\n        binary_str = '0' + binary_str\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in binary_str]\n    # Reverse the list of bits\n    bits.reverse()\n    # Convert the list of bits back to a binary string\n    rotated_binary_str = ''.join(map(str, bits))\n    # Convert the rotated binary string to an integer and return it\n    return int(rotated_binary_str, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    # Convert the binary number to a list of digits\n    digits = [int(digit) for digit in binary]\n    # Rotate left by d bits\n    digits = digits[-d:] + digits[:-d]\n    # Convert the list of digits back to a binary number\n    binary = ''.join(str(digit) for digit in digits)\n    # Convert the binary number back to an integer\n    n = int(binary, 2)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Pad the binary string with leading zeros to d bits\n    padded_binary = binary.zfill(d)\n    # Convert the padded binary string back to integer\n    rotated_binary = int(padded_binary, 2)\n    # Return the rotated binary integer\n    return rotated_binary"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates the bits of a given number left by d bits. It assumes that the number is 32 bits.\n    \"\"\"\n    # Get the number of bits in the number\n    bits = 32\n    \n    # Get the number of bits to rotate\n    rotate_bits = d % bits\n    \n    # Get the number of bits to rotate the number\n    rotate_num_bits = bits - rotate_bits\n    \n    # Get the number of bits to shift the number\n    shift_num_bits = bits - d\n    \n    # Rotate the number\n    rotated_num = (n >> rotate_bits) | (n << rotate_num_bits)\n    \n    # Shift the rotated number to the left\n    shifted_num = rotated_num << shift_num_bits\n    \n    return shifted_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the number to binary\n    binary_n = bin(n)[2:]\n\n    # rotate left by d bits\n    rotated_binary = binary_n[-d:] + binary_n[:-d]\n\n    # convert the binary string back to decimal\n    rotated_n = int(rotated_binary, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the binary representation of n to a list of digits\n    n_list = [int(digit) for digit in bin(n)[2:]]\n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = d % 32\n    # If d is greater than 31, then rotate left d-32 bits\n    if num_bits_to_rotate > 31:\n        num_bits_to_rotate = num_bits_to_rotate - 32\n        d = d - num_bits_to_rotate\n    # Reverse the list of digits\n    n_list.reverse()\n    # Rotate the digits by num_bits_to_rotate positions\n    for i in range(num_bits_to_rotate):\n        n_list.append(n_list.pop(0))\n    # Reverse the rotated digits and convert them back to a number\n    n = int(''.join(str(digit) for digit in n_list), 2)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d > 0:\n        # Check if d is odd or even\n        if d % 2 == 0:\n            # If even, shift left by 1 bit\n            n <<= 1\n        else:\n            # If odd, shift left by 1 bit and then shift right by 1 bit\n            n = (n << 1) | (n >> 31)\n        d = d >> 1\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert the integer to a list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n    # rotate the bits to the left by d bits\n    for i in range(d):\n        bits.append(bits.pop(0))\n    # convert the list of bits back to an integer\n    result = int(\"\".join(str(bit) for bit in bits), 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary string\n    bin_str = bin(n)[2:]\n    # Calculate the number of bits to shift\n    shift_num = d % 32\n    # Calculate the number of bits to rotate\n    rotate_num = 32 - shift_num\n    # Calculate the shifted binary string\n    shifted_str = bin_str[:shift_num] + bin_str[shift_num:]\n    # Calculate the rotated binary string\n    rotated_str = shifted_str[-rotate_num:] + shifted_str[:-rotate_num]\n    # Convert the rotated binary string back to decimal\n    rotated = int(rotated_str, 2)\n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # Use a set to store the unique values in the list\n    unique_values = set([x, y, z])\n    # Count the number of equal values in the set\n    equal_count = len(unique_values)\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(3):\n        if x == y:\n            count += 1\n        if x == z:\n            count += 1\n        if y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and y!= z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and y == z:\n        count += 1\n    if x!= y and y!= z:\n        count += 1\n    if x!= y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z)):\n        if x == i and y == i and z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif y == z == x:\n        count += 1\n    elif x == z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(n-1):\n            if arr[j] > arr[j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    # Calculate the difference between the maximum and minimum values in the array\n    diff = arr[-1] - arr[0]   \n    # Initialize a variable to store the count of rotations required\n    count = 0   \n    # Check for any occurrence of a value greater than the maximum value\n    for i in range(len(arr)):   \n        if arr[i] > arr[-1]:   \n            count += 1   \n    # Check for any occurrence of a value less than the minimum value\n    for i in range(len(arr)-1, -1, -1):   \n        if arr[i] < arr[0]:   \n            count += 1   \n    # Return the count of rotations required\n    return count   "
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    i = 0\n    while i < n - 1:\n        if arr[i] > arr[i + 1]:\n            i += 1\n        else:\n            j = i + 1\n            while j < n and arr[j] < arr[i]:\n                j += 1\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n            i = j - 1\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] > arr[i + n // 2]:\n            return i + 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Initialize variables\n    n = len(arr)\n    count = 0\n    \n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Find the first occurrence of a non-increasing subsequence\n    i = 0\n    j = 0\n    while j < n - 1:\n        if arr[j] < arr[j+1]:\n            i = j\n            break\n        j += 1\n        \n    # If the array has a subarray with only one element, it is already sorted\n    if i == j:\n        return 0\n    \n    # Count the number of rotations required to sort the array\n    count += 1\n    while True:\n        # Find the first occurrence of a non-increasing subsequence\n        i = 0\n        j = 0\n        while j < n - 1:\n            if arr[j] < arr[j+1]:\n                i = j\n                break\n            j += 1\n        \n        # If the array has a subarray with only one element, it is already sorted\n        if i == j:\n            return count\n        \n        # Count the number of rotations required to sort the array\n        count += 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # if array is already sorted\n    if n <= 1:\n        return 0\n    \n    # find the minimum element in the array\n    min_elem = min(arr)\n    \n    # check if the array is already sorted in ascending order\n    if arr[0] < min_elem:\n        return 0\n    \n    # find the index of the minimum element in the array\n    min_elem_index = arr.index(min_elem)\n    \n    # create a new array with the minimum element at its last position\n    new_arr = arr[:min_elem_index] + [min_elem] + arr[min_elem_index:]\n    \n    # sort the new array\n    new_arr.sort()\n    \n    # count the number of rotations required to generate the sorted array\n    count = 0\n    while new_arr!= arr:\n        arr = new_arr\n        new_arr = arr[:min_elem_index] + [min_elem] + arr[min_elem_index:]\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] > arr[i+n//2]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    max_element = max(arr)\n    count = 0\n    \n    for i in range(1, max_element+1):\n        count += sum(arr[j] > arr[j-i] for j in range(n-i+1))\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    min_val = min(arr)\n    max_val = max(arr)\n    count = 0\n    for i in range(min_val, max_val+1):\n        if i not in arr:\n            count += 1\n            arr.append(i)\n        if i == arr[n-1]:\n            count -= 1\n            arr.pop()\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize a variable to store count of rotations required\n    count = 0\n    # Traverse through each sub-array of size 2, which represents a rotation\n    for i in range(n-1):\n        # If the sum of the elements in the sub-array is not increasing, then there is a rotation required\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    largest_perfect_square = n**2\n    while largest_perfect_square > n:\n        largest_perfect_square = largest_perfect_square // 2\n    while largest_perfect_square >= n:\n        if largest_perfect_square * largest_perfect_square == n:\n            return True\n        largest_perfect_square = largest_perfect_square - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    if n < 0:\n        return False\n    \n    # using the trial division method to check if the number is a perfect square or not\n    sqrt_n = int(n ** 0.5)\n    i = 1\n    while i <= sqrt_n:\n        if n % i == 0 and n // i == i:\n            return True\n        i += 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n ** 0.5) + 1\n    return x * x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return \"Number should be a non-negative integer.\"\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(int(n**0.5)+1):\n            if n - i**2 == 0:\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using the Babylonian method to check if the number is a perfect square\n    low, high = 1, n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n\n    # Check if n is a square number\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n\n    # If n is not a square number, then it is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is greater than the square root of the number\n    elif n > int(n**0.5) + 1:\n        return False\n    # Check if the number is a perfect square\n    else:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is greater than 0\n    if n <= 0:\n        return False\n    \n    # Calculate the square root of the given number\n    root = n ** 0.5\n    \n    # Check if the square root is an integer\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Initialize a variable to store the square root of the input number\n    sqrt_n = 0\n\n    # Check if the input number is a perfect square\n    while n > 0:\n        sqrt_n += 1\n        n -= sqrt_n * sqrt_n\n\n    # Check if the square root of the input number is an integer\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product is even.\"\n    else:\n        return \"The product is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and the list of lists that achieve it\n    max_sum = float('-inf')\n    max_lists = []\n    \n    # Iterate through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize variables to keep track of the current sum and the list of elements in the current list\n        current_sum = 0\n        current_list = []\n        \n        # Iterate through each element in the current list and add it to the sum\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n            current_list.append(lists[i][j])\n        \n        # If the current sum is greater than the maximum sum found so far, update the maximum sum and the list of lists that achieve it\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [current_list]\n        elif current_sum == max_sum:\n            max_lists.append(current_list)\n    \n    # Return the list in the list of lists that achieves the maximum sum\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        sum = sum(sublist)\n        if sum > max_sum:\n            max_sum = sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a function to calculate the sum of elements in a list\n    def sum_list(lst):\n        return sum(lst)\n    \n    # Calculate the sum of the first element of each list in the list of lists\n    sums = [sum_list(lst) for lst in lists]\n    \n    # Find the index of the maximum sum\n    max_index = sums.index(max(sums))\n    \n    # Return the list in the list of lists with the maximum sum\n    return lists[max_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables\n    max_sum = 0\n    result = []\n\n    # Iterate through each list in the input list of lists\n    for sublist in lists:\n        # Calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the current maximum sum, update the result and maximum sum\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = sublist\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate over each list in the input list of lists\n    for i, lst in enumerate(lists):\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n\n        # Check if the sum of the elements is greater than the current maximum sum\n        if sum_lst > max_sum:\n            # Update the maximum sum and the list with the maximum sum\n            max_sum = sum_lst\n            max_list = lst.copy()\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the max sum to zero and the list to None\n    max_sum = 0\n    max_list = None\n    \n    # Iterate through each list in the list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        # Check if the current sum is greater than the max sum\n        if sum_lst > max_sum:\n            # Update the max sum and the list with the new values\n            max_sum = sum_lst\n            max_list = lst\n    \n    # Return the max sum and list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through each list in the list of lists\n    for num_list in lists:\n        # Calculate the sum of the elements in the list\n        sum_list = sum(num_list)\n        # Check if the current sum is greater than the maximum sum found so far\n        if sum_list > max_sum:\n            # If it is, update the maximum sum and list\n            max_sum = sum_list\n            max_list = num_list\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        total_sum = sum(sublist)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables for start and end indices of the maximum run of uppercase characters\n    max_run_start = 0\n    max_run_end = 0\n\n    # Loop through the string and check if each character is uppercase\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # If the character is uppercase, check if it is the first character in the run or not\n            if i == 0 or not test_str[i-1].isupper():\n                # If the character is the first character in the run or the previous character is not uppercase,\n                # update the start and end indices of the run\n                max_run_start = i\n                max_run_end = i\n            else:\n                # If the character is not the first character in the run and the previous character is uppercase,\n                # update the end index of the run\n                max_run_end = i\n\n    # Return the maximum run of uppercase characters\n    return test_str[max_run_start:max_run_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    current_run = ''\n    for char in test_str:\n        if char.isupper():\n            current_run += char\n            run_length += 1\n        else:\n            if current_run:\n                if run_length > max_run_length:\n                    max_run_length = run_length\n                current_run = ''\n                run_length = 0\n    if current_run:\n        if run_length > max_run_length:\n            max_run_length = run_length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase = False\n\n    for char in test_str:\n        if char.isupper():\n            if uppercase:\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 1\n            uppercase = True\n        else:\n            if uppercase:\n                max_run = max(max_run, current_run)\n                current_run = 0\n            uppercase = False\n\n    if uppercase:\n        max_run = max(max_run, current_run)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    current_run = 0\n    max_run = 0\n    prev_char = None\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase and the previous character was not uppercase,\n        # update the current run count\n        if char.isupper() and prev_char is not None and prev_char.islower():\n            current_run += 1\n        else:\n            # If the current run count is greater than the maximum run count, update the max run count\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run count\n            current_run = 1\n        # Update the previous character for the next iteration\n        prev_char = char\n    \n    # If the current run count is greater than the maximum run count, update the max run count\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the max run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    start_index = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n                start_index = i\n        else:\n            uppercase_count = 0\n\n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > current_run:\n                max_run = current_run\n            current_run = 0\n            uppercase_count = 0\n    if uppercase_count > current_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            uppercase_count = 0\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    uppercase_count = 0\n    current_run_length = 0\n    max_run_length = 0\n\n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase, increment the count and update the run length if necessary\n        if char.isupper():\n            uppercase_count += 1\n            if current_run_length == 0:\n                current_run_length = 1\n            else:\n                current_run_length += 1\n\n            # Update the maximum run length if necessary\n            if current_run_length > max_run_length:\n                max_run_length = current_run_length\n\n        # If the character is not uppercase, reset the count and run length\n        else:\n            uppercase_count = 0\n            current_run_length = 0\n\n    # Return the maximum run length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i, max_len, max_run = 0, 0, 0\n    while i < len(test_str):\n        if test_str[i] == test_str[i].upper():\n            max_run += 1\n            if max_run > max_len:\n                max_len = max_run\n            i += 1\n        else:\n            max_run = 0\n            i += 1\n    return max_len"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd numbers are found in the list, it will return None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums (list of int): A list of integers.\n\n    Returns:\n    int: The first odd number in the list. If the list is empty or all integers in the list are even,\n    the function returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    raise ValueError(\"List does not contain any odd numbers\")"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[1] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(item in test_tup for item in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    It takes two parameters:\n    - test_tup (tuple): The tuple to check.\n    - K (int): The value to check for.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a number K as input. It checks if the tuple contains the number K or not.\n    If the tuple contains K, it returns True, otherwise it returns False.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup[0] == K:\n            count += 1\n    if count == 0:\n        return \"The tuple does not contain the k.\"\n    else:\n        return \"The tuple contains the k.\""
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two arguments, test_tup and K, and returns True if\n    the given tuples contain K or False otherwise.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n\n    :param test_tup: a tuple of tuples, where each inner tuple represents a set of elements.\n    :type test_tup: List[List[int]]\n    :param K: the value of k to check for.\n    :type K: int\n    :return: a boolean indicating whether the given tuple contains k or not.\n    :rtype: bool\n    \"\"\"\n    for inner_tup in test_tup:\n        if K in inner_tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n\ntest_tup = (1, 2, 3, 4, 5)\nK = 3\n\nprint(check_K(test_tup, K))"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    # Check if the length of the tuple is K+1 (i.e., it contains the value for K)\n    if len(test_tup) == K + 1:\n        # Check if the value for K is in the tuple\n        if test_tup[K]!= 0:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Check if all elements of the first tuple are smaller than their corresponding elements in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths.\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same number of elements.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element in the first tuple is greater than the corresponding element in the second tuple.\")\n            return\n    \n    print(\"The two tuples are equal.\")\n    return"
    }
]