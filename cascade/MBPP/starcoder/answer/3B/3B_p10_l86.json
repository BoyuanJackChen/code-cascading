[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert both tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples into lists\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    \n    # Initialize variables to store the count of elements and the elements\n    count = 0\n    shared_elements = []\n    \n    # Loop through the first list\n    for element in tup1:\n        # Check if the element is present in the second list\n        if element in tup2:\n            # Increment the count of shared elements\n            count += 1\n            # Add the element to the shared_elements list\n            shared_elements.append(element)\n    \n    # Check if there are any shared elements in the first list\n    if count > 0:\n        return shared_elements\n    else:\n        return None"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create a set of elements from each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Getting the sets of unique elements from both lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Finding the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Converting the intersection set back to a list\n    shared_elements = list(intersection)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Loop through the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the shared elements between the two sets\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Initialize an empty set to store the shared elements\n    shared_elements = set()\n    \n    # Iterate over each element in the two tuples\n    for element in test_tup1:\n        # Check if the element is also in the second tuple\n        if element in test_tup2:\n            # If it is, add it to the shared_elements set\n            shared_elements.add(element)\n    \n    # Return the shared elements set\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is 2\n    if n == 2:\n        return True\n\n    # Check for even numbers\n    if n % 2 == 0:\n        return False\n\n    # Check for odd numbers greater than 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the given number is less than or equal to 1\n    if n <= 1:\n        return True\n    \n    # Check if the given number is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If the above loop completes without returning True, then n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Check whether a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the list of numbers\n    max_heap = hq.nlargest(n,nums)\n    \n    # extract the n largest elements from the heap and return them as a list\n    return list(max_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap and push the first n elements\n    heap = hq.heapify(nums[:n])\n\n    # Pop and append the next element to the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n\n    # Return the n largest elements\n    return list(hq.nlargest(n, heap))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap\n    max_heap = [None]*n\n    for i in range(n):\n        max_heap[i] = nums[i]\n    hq.heapify(max_heap)\n    \n    # Extract the largest n numbers from the heap\n    result = []\n    for i in range(n):\n        result.append(max_heap[0])\n        hq.heappop(max_heap)\n        \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(nums)\n    # Remove the largest element and add it to the result list\n    for i in range(n-1):\n        hq.heappop(nums)\n        hq.heappush(nums,nums[0])\n    # Return the result list\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap\n    heap = nums\n    \n    # heapify the heap to arrange it in descending order\n    hq.heapify(heap)\n    \n    # extract the n largest integers from the heap and return them in a list\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a min heap\n    nums_heap = hq.nsmallest(n, nums)\n    # reverse the min heap and return the elements\n    return list(hq.nlargest(len(nums)-n, -nums_heap))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the first n numbers in the list\n    max_heap = hq.nlargest(n, nums)\n    # remove the smallest number from the heap and add it to the result list\n    result = []\n    while max_heap:\n        result.append(hq.heappop(max_heap))\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x and returns True if there exists a single bit that differs in the binary representation of x, and False otherwise.\n    \"\"\"\n    # Convert the given integer to binary string\n    bin_str = bin(x)[2:]\n    # Check if the binary string contains only one character\n    if len(bin_str)!= 1:\n        return False\n    # Convert the binary string to an integer\n    binary = int(bin_str, 2)\n    # Check if the binary integer is a power of 2\n    if binary == 1:\n        return True\n    # If the binary integer is not a power of 2, check if it's a power of 4\n    if binary & 1 == 0 and binary!= 1:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # check if x is power of 2 or not\n    if x < 0 or x & (x - 1)!= 0:\n        return False\n    \n    # check if x is same as 2^n (n is the number of bits in x)\n    n = 0\n    while x!= 1:\n        x = x >> 1\n        n += 1\n    \n    # check if n is equal to the number of bits in x\n    if n == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if the two numbers differ at one bit position\n    if x & (x - 1):\n        return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the input integer to binary format\n    binary_x = bin(x)[2:]\n    \n    # Check if the length of binary_x is 1\n    if len(binary_x)!= 1:\n        return False\n    \n    # Convert the last bit of binary_x to decimal format\n    last_bit = int(binary_x[-1])\n    \n    # Check if the last bit of binary_x is 0\n    if last_bit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    # Finding the binary representation of x using the bin() function\n    binary_x = bin(x)[2:]\n    # Counting the number of set bits in the binary representation of x\n    count = 0\n    for i in binary_x:\n        if i == '1':\n            count += 1\n    # If count is 1, then x is a power of 2 and their binary representation differ at one bit position only.\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x and returns True if it is a power of two, and False otherwise.\n    A power of two is a number that is a power of 2 (2, 4, 8, 16,...) and has a single one bit in its binary representation.\n    \"\"\"\n    if x == 0:\n        return False\n    else:\n        return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0: # if x is 0, then the answer is always false\n        return False\n    else:\n        # if x is not 0, then check if it's a power of 2 using binary exponentiation\n        y = x\n        count = 0\n        while y!= 1:\n            count += 1\n            y <<= 1\n        if count == 1: # if x is a power of 2, then the answer is always true\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Count the number of bits set to 1 in the binary representation of x\n    count = 0\n    while x > 0: \n        count += x & 1\n        x >>= 1\n    # Check if the difference between count of 1s in binary representations of x and y is 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x & (x - 1) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert x to binary representation\n    binary_x = bin(x)[2:]\n    # Convert y to binary representation\n    binary_y = bin(y)[2:]\n    # Check if both binary strings have the same length\n    if len(binary_x)!= len(binary_y):\n        return False\n    # Compare the binary strings\n    for i in range(len(binary_x)):\n        if binary_x[i]!= binary_y[i]:\n            return False\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # matches any word that has 4 or more characters\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function will find all words in a given string which are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define the regular expression pattern to match words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the `re.findall()` method to find all the words in the string that match the pattern\n    words = re.findall(pattern, text)\n    # Return the list of words that match the pattern\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('\\w{4,}')\n    words = pattern.findall(text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the string\n    long_words = [word for word in words if len(word) >= 4] # filter out words that are less than 4 characters\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    # define regular expression pattern to match words at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # find all non-overlapping matches of the pattern in the text using finditer() method\n    matches = re.finditer(pattern, text)\n    \n    # store all words that match the pattern in a list\n    char_long_words = []\n    \n    # iterate over the matches and add each matched word to the list of words that are at least 4 characters long\n    for match in matches:\n        char_long_words.append(match.group())\n    \n    # return the list of words that are at least 4 characters long\n    return char_long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                count += 1\n                if count > 1:\n                    return count\n                else:\n                    break\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the count of characters in the string\n    char_count = {}\n\n    # Iterate through each character in the string and count the frequency of each character in the string\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n\n    # Iterate through each possible rotation of the string and count the frequency of each character in the rotated string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            rotated_str = str[i:j]\n            count_rotated = {}\n\n            # Count the frequency of each character in the rotated string\n            for char in rotated_str:\n                if char in count_rotated:\n                    count_rotated[char] += 1\n                else:\n                    count_rotated[char] = 1\n\n            # Calculate the number of rotations required to get the same string\n            rot_count = 0\n            for key in count_rotated:\n                if char_count[key] < count_rotated[key]:\n                    rot_count += 1\n\n            # Update the minimum number of rotations required to get the same string if the current rotation is smaller\n            if rot_count < min_rotations:\n                min_rotations = rot_count\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n < 2:\n        return 0\n\n    # If string is even, find minimum rotations for even length strings\n    if n % 2 == 0:\n        rotations = 0\n        for i in range(n//2):\n            if str[i] == str[n-i-1]:\n                break\n            else:\n                rotations += 1\n        return rotations\n\n    # If string is odd, find minimum rotations for odd length strings\n    else:\n        rotations = 0\n        for i in range(n//2):\n            if str[i] == str[n-i-1]:\n                break\n            else:\n                rotations += 1\n        rotations += 1\n        return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        if str[i] == str[len(str)-1-i]:\n            rotations += 1\n        else:\n            break\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Calculate the length of the string\n    n = len(str)\n\n    # Initialize variables\n    min_rotations = 0\n    i = 0\n    j = n - 1\n\n    # Check for even length string\n    if n % 2 == 0:\n        # Initialize variables\n        even_rotations = 0\n        temp_str = \"\"\n\n        # Iterate through the string\n        while i < j:\n            # Append the characters in the string to a temporary string\n            temp_str += str[i] + str[j]\n\n            # Check if the temporary string is the same as the original string\n            if temp_str == str:\n                # Increment the minimum number of rotations\n                min_rotations += even_rotations\n                # Update the variables\n                i += 1\n                j -= 1\n                temp_str = \"\"\n                even_rotations = 0\n            else:\n                # Increment the even rotations\n                even_rotations += 1\n\n                # Swap the characters in the string\n                str[i], str[j] = str[j], str[i]\n                i += 1\n                j -= 1\n\n    # Check for odd length string\n    else:\n        # Initialize variables\n        odd_rotations = 0\n        temp_str = \"\"\n\n        # Iterate through the string\n        while i < j:\n            # Append the characters in the string to a temporary string\n            temp_str += str[i] + str[j]\n\n            # Check if the temporary string is the same as the original string\n            if temp_str == str:\n                # Increment the minimum number of rotations\n                min_rotations += odd_rotations\n                # Update the variables\n                i += 1\n                j -= 1\n                temp_str = \"\"\n                odd_rotations = 0\n            else:\n                # Increment the odd rotations\n                odd_rotations += 1\n\n                # Swap the characters in the string\n                str[i], str[j] = str[j], str[i]\n                i += 1\n                j -= 1\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Initialize a set to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate through the string and update the frequency of each character\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize a list to store the sorted characters\n    sorted_chars = sorted(freq.keys())\n\n    # Initialize a variable to store the minimum number of rotations\n    min_rotations = float('inf')\n\n    # Iterate through the sorted characters\n    for i in range(len(sorted_chars)):\n        # Get the frequency of the current character\n        freq_i = freq[sorted_chars[i]]\n\n        # Iterate through the characters to the left of the current character\n        for j in range(i):\n            # Get the frequency of the current character\n            freq_j = freq[sorted_chars[j]]\n\n            # Update the minimum number of rotations if the frequency of the current character is greater than the frequency of the characters to the left of the current character\n            if freq_i > freq_j:\n                min_rotations = min(min_rotations, abs(j - i))\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string to lowercase\n    str = str.lower()\n    # Find the length of the string\n    n = len(str)\n    # Initialize two variables to keep track of the frequency of characters in the string\n    freq = [0] * 26\n    # Initialize a variable to keep track of the minimum number of rotations required\n    min_rotations = 0\n    # Loop through each character in the string\n    for i in range(n):\n        # Find the index of the current character in the frequency list\n        index = ord(str[i]) - ord('a')\n        # Increase the frequency count of the current character\n        freq[index] += 1\n        # Find the index of the current character in the frequency list that has the minimum frequency count\n        new_index = freq.index(min(freq))\n        # Swap the current character and the character at the new index\n        str = str[:i] + str[i+1] + str[i] + str[i+1] + str[i] + str[i+1] + str[i] + str[i+1]\n        # Update the minimum number of rotations required\n        min_rotations += 1\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Initialize the min_rotations variable to 0\n    min_rotations = 0\n    \n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        # Loop through all possible rotations of the string without including i\n        for j in range(n):\n            # Check if the i-th character is smaller than the j-th character\n            if str[i] < str[j]:\n                # If the i-th character is smaller, increment min_rotations\n                min_rotations += 1\n                \n    # Return the minimum number of rotations\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str) \n    if n <= 1: \n        return 0 \n    else: \n        # initialize the min count as 0 \n        min_count = 0 \n  \n        # loop through all possible rotations of the string \n        for i in range(n): \n            for j in range(i+1, n): \n                for k in range(j+1, n): \n                    if str[i:j] == str[j:k] and str[j:k] == str[k:n]: \n                        min_count = max(min_count, k - j) \n  \n        # return the minimum count \n        return min_count "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[j] < str[i]:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()\n    if ch in s:\n        if s.startswith(ch):\n            s = s[ch.count(ch):]\n        else:\n            s = s[:s.index(ch)]\n        if s.endswith(ch):\n            s = s[:len(s)-ch.count(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s:\n        # find the index of the first occurrence of the character in the string\n        index = s.find(ch)\n        # remove the first occurrence\n        s = s[:index] + s[index+1:]\n        # find the index of the last occurrence of the character in the string\n        index = s.rfind(ch)\n        # remove the last occurrence\n        s = s[:index] + s[index+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, '')\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            if i == 0:\n                del s[i]\n            elif i == len(s)-1:\n                del s[i]\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0 or len(ch) == 0:\n        return \"\"\n    if s[0] == ch and s[-1] == ch:\n        return remove_Occ(s[1:-1],ch)\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize variables\n    index = 0\n    count = 0\n    # loop through the string\n    for i in range(len(s)-1): \n        # if the current character is not equal to the given character\n        if s[i]!= ch: \n            # if the index is equal to the count\n            if index == count: \n                # move the index to the next character\n                index += 1\n            else: \n                # increment the count\n                count += 1\n                # store the current character in the output string\n                output += s[i]\n    # if the count is odd, add the last character to the output string\n    if count % 2!= 0: \n        output += s[-1]\n    # return the output string\n    return output"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize two pointers to the beginning and end of the string respectively\n    i = 0\n    j = len(s)-1\n\n    # check if the first character matches the given character\n    if s[i] == ch:\n        # increment the pointer to the right until a non-matching character is found\n        while i < j and s[i] == ch:\n            i+=1\n        \n        # move the pointer to the right by the number of matching characters found so far\n        i-=1\n    \n    # check if the last character matches the given character\n    if s[j] == ch:\n        # decrement the pointer to the left until a non-matching character is found\n        while i < j and s[j] == ch:\n            j-=1\n        \n        # move the pointer to the left by the number of matching characters found so far\n        j+=1\n    \n    # if both pointers have moved the same way, the character is found and removed from the string\n    return s[:i] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()  # remove leading and trailing whitespaces\n    if len(s) <= 1:  # check if the length of the string is less than or equal to 1, i.e. only one character\n        return s\n\n    index = s.find(ch)  # find the index of the first occurrence of the character\n\n    # if the character is not found, return the string as it is\n    if index == -1:\n        return s\n\n    # if the character is the first character in the string, remove it and return the remaining string\n    if index == 0:\n        return s[1:]\n\n    # if the character is the last character in the string, remove it and return the remaining string\n    if index == len(s) - 1:\n        return s[:index]\n\n    # if the character is found in the middle of the string, remove both occurrences and return the remaining string\n    return s[:index] + s[index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    lst = list(s)\n\n    # Find the index of the first occurrence of the character\n    index = lst.index(ch)\n\n    # Remove the first occurrence\n    lst.pop(0)\n\n    # Find the index of the last occurrence of the character\n    last_index = lst.rindex(ch)\n\n    # Remove the last occurrence\n    lst.pop(last_index)\n\n    # Join the list of characters into a string\n    result = ''.join(lst)\n\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a list of tuples for each row with the row index as the first element and the row sum as the second element\n    rows = [(i, sum(M[i])) for i in range(n)]\n    # sort the list of tuples in ascending order based on the second element (row sum)\n    rows.sort(key=lambda x: x[1])\n    # create a new matrix with the sorted rows\n    sorted_M = [[0 for j in range(n)] for i in range(n)]\n    for row in rows:\n        i, row_sum = row\n        for j in range(n):\n            sorted_M[j][i] = M[j][i]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # find the maximum sum row-wise\n    max_sum = 0\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        max_sum = max(max_sum, row_sum)\n\n    # create a new matrix with the same dimensions as the original matrix\n    sorted_M = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n\n    # sort the matrix row-wise based on the maximum sum\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        if row_sum == max_sum:\n            sorted_M[i] = M[i]\n        else:\n            # check if any element of the row exceeds the maximum sum\n            for j in range(len(M[i])):\n                if M[i][j] > max_sum:\n                    sorted_M[i][j] = max_sum\n                else:\n                    sorted_M[i][j] = M[i][j]\n\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row using the built-in sum() function\n        row_sum = sum(row)\n        \n        # Append the row to the sorted_M list if the sum is greater than or equal to zero\n        if row_sum >= 0:\n            sorted_M.append(row)\n    \n    # Return the sorted_M list\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums in ascending order\n    row_sums.sort()\n    # Iterate through the rows of the matrix and fill in the sorted row sums\n    for row_index in range(len(M)):\n        row = M[row_index]\n        sorted_row = [row_sums[i] for i in range(len(row))]\n        M[row_index] = sorted_row\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    # Initialize the matrix to be sorted in ascending order\n    sorted_M = []\n\n    # Initialize the list of row sums\n    row_sums = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n\n        # Add the row sum to the list of row sums\n        row_sums.append(row_sum)\n\n    # Sort the list of row sums in ascending order\n    row_sums.sort()\n\n    # Loop through each row of the matrix again and place the row in the sorted matrix\n    for i in range(len(M)):\n        row = M[i]\n        row_sum = row_sums[i]\n\n        # Loop through each element in the row and replace it with the appropriate element in the sorted matrix\n        for j in range(len(row)):\n            element = row[j]\n            sorted_M.append(row_sum - element)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the matrix in descending order according to each row's sum\n    for i in range(len(M)):\n        M[i] = sorted(M[i], reverse=True)\n\n    # Transpose the sorted matrix\n    M = [list(map(sum, zip(*row))) for row in M]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    # Initialize the sum of the first row\n    row_sum = sum(M[0])\n    # Loop through the rows of the matrix\n    for row in M:\n        # Calculate the sum of the current row\n        current_row_sum = sum(row)\n        # If the sum is less than the sum of the first row, swap the rows\n        if current_row_sum < row_sum:\n            sorted_M.append(row)\n            sorted_M.append(M.pop(0))\n        # If the sum is equal to the sum of the first row, append the row to the sorted matrix\n        elif current_row_sum == row_sum:\n            sorted_M.append(row)\n        # If the sum is greater than the sum of the first row, append the row to the sorted matrix\n        else:\n            sorted_M.append(M.pop(0))\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # initialize a list to store the indices of the first element of each row\n    row_starts = [0] * n\n    # loop through the rows of the matrix\n    for i in range(1, n):\n        # loop through the current row and its elements\n        for j in range(row_starts[i-1], len(M[i])):\n            # loop through the previous rows and compare the sum of their elements with the sum of the current row's element\n            for k in range(i-1, -1, -1):\n                row_sum = sum(M[k][row_starts[k]:row_starts[k+1]])\n                if row_sum > sum(M[i][j-1:j+1]):\n                    # if the sum of the current row's elements is greater than the sum of the elements of the previous rows, swap the rows\n                    M[k], M[i] = M[i], M[k]\n                    # update the row start indices of the previous rows\n                    row_starts[k+1], row_starts[i] = row_starts[i], row_starts[k+1]\n                    # exit the inner loop\n                    break\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # create a new matrix by iterating through the rows of the original matrix and sorting them according to the row sums\n    sorted_M = [[0] * len(M[0]) for _ in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(row_sums)):\n                if row_sums[k] > M[i][j]:\n                    sorted_M[i][j] = row_sums[k]\n                    break\n        else:\n            raise ValueError(\"Row sums do not add up to 0\")\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and returns a sorted matrix in ascending order \n    according to the sum of its rows. The sorting is done using the merge sort algorithm.\n    '''\n    # Recursive function to merge two sorted matrices\n    def merge(arr1, arr2):\n        i, j = 0, 0\n        result = []\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] <= arr2[j]:\n                result.append(arr1[i])\n                i += 1\n            else:\n                result.append(arr2[j])\n                j += 1\n        result += arr1[i:]\n        result += arr2[j:]\n        return result\n    \n    # Helper function to count the sum of all the rows in a matrix\n    def count_sum(matrix):\n        count = 0\n        for row in matrix:\n            count += sum(row)\n        return count\n    \n    # Helper function to divide the matrix into two halves and recursively sort them\n    def divide_sort(matrix):\n        n = len(matrix)\n        mid = n // 2\n        left_matrix = matrix[:mid]\n        right_matrix = matrix[mid:]\n        \n        left_sum = count_sum(left_matrix)\n        right_sum = count_sum(right_matrix)\n        \n        if left_sum <= right_sum:\n            left_matrix = divide_sort(left_matrix)\n            return merge(left_matrix, matrix[mid:])\n        else:\n            right_matrix = divide_sort(right_matrix)\n            return merge(matrix[:mid], right_matrix)\n    \n    # Sort the matrix using the merge sort algorithm\n    sorted_matrix = divide_sort(M)\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 0.5 * l * b * h  # Formula to calculate the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l * b * h\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculating the volume of the prism\n    volume = l*b*h\n\n    # Returning the volume of the prism\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n\n    '''\n    This function takes three parameters: length of base and height of prism.\n    It calculates the volume of the prism and returns it as a float.\n    '''\n\n    # Formula to calculate volume of a prism\n    volume = (1/3) * l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the triangular prism\n    V = (1/2)*l*b*h\n    # Print the volume of the triangular prism\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the area of the prism\n    area = 0.5 * l * b * h\n    # calculate the volume of the prism\n    volume = area * l\n    # return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h) / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # Formula for the volume of a triangular prism\n    return V\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'[a-z]*_[a-z]*'\n    underscore_match = re.search(underscore_pattern, text)\n    if underscore_match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Removing any leading or trailing whitespaces\n    text = text.strip()\n    # Splitting the text into individual words\n    words = text.split()\n    # Looping through each word\n    for word in words:\n        # Removing any leading or trailing underscores\n        word = re.sub('^_+|_+$', '', word)\n        # Checking if the word contains only lowercase letters and underscores\n        if re.match(\"^[a-z_]+$\", word):\n            # If the word contains only lowercase letters and underscores, returning True\n            return True\n    # If no words in the text contain only lowercase letters and underscores, returning False\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b)([a-z]+)_+(?=\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regular expression pattern that matches sequences of lowercase letters followed by an underscore\n    pattern = r'[a-z][a-z_]*'\n    # Use the re.search() function to search for the pattern in the input text\n    result = re.search(pattern, text)\n    # Check if the result is not None, i.e. if a match was found\n    if result:\n        # If a match was found, return True\n        return True\n    else:\n        # If a match was not found, return False\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+[_-]+[a-z]+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=[a-z])[a-z](?=[A-Z])')\n    matches = pattern.finditer(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.remove(char_list[i])\n    return ''.join(char_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list('abcdefghijklmnopqrstuvwxyz')[:NO_OF_CHARS]\n    for char in list1:\n        if char in list2:\n            list1.remove(char)\n    return ''.join(list1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = string\n    char_list = list(char_set)\n    for char in char_list:\n        if char in string:\n            char_set.remove(char)\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # split the string into two parts\n    list_of_chars = list(string)\n    filter_list = []\n    \n    # loop through each character in the first string\n    for char in list_of_chars:\n        # if the character is not in the second string\n        if char not in filter_list:\n            # add it to the filter list\n            filter_list.append(char)\n    \n    # join the characters in the filter list back into a string\n    filtered_string = ''.join(filter_list)\n    \n    # return the filtered string\n    return filtered_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(NO_OF_CHARS): \n        if i not in string: \n            list.append(chr(i)) \n    return list \n\ndef main():\n    string1 = \"Hello World\"\n    string2 = \"Hello\"\n    print(\"Original string: \", string1)\n    print(\"String without characters from string2: \", str_to_list(string1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n    # create an empty list to store the remaining characters\n    remaining_list = []\n    # loop through each character in the first list\n    for char in list1:\n        # check if the character is not present in the second list\n        if char not in list2:\n            # if not, add it to the remaining list\n            remaining_list.append(char)\n    # convert the remaining list back to a string and return it\n    return ''.join(remaining_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            lst.append(chr(i))\n    return lst"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            result.append(chr(i))\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Converting string to list\n    list_string = list(string)\n    # Converting list to set\n    set_chars = set(list_string)\n    # Converting set to list\n    char_list = list(set_chars)\n    # Removing characters from list_string which are present in char_list\n    for i in range(len(list_string)):\n        if list_string[i] in char_list:\n            list_string.pop(i)\n            i -= 1\n    # Converting list back to string and returning\n    return ''.join(list_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if the set has any duplicate elements\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements\n    unique_set = set()\n    # loop through the array\n    for num in arraynums:\n        # if the number is already in the set, return True\n        if num in unique_set:\n            return True\n        # otherwise, add the number to the set\n        unique_set.add(num)\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is not in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n        # If the element is already in the set, return True\n        else:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    nums_set = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the original array\n    if len(nums_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    \n    # loop through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n        \n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return len(unique_nums)!= len(arraynums)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 and x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 7 or x == 11 or x == 13 or x == 17 or x == 19 or x == 23 or x == 29 or x == 31 or x == 37 or x == 41 or x == 43 or x == 47 or x == 53 or x == 59 or x == 61 or x == 67 or x == 71 or x == 73 or x == 79 or x == 83 or x == 89 or x == 97 or x == 101 or x == 103 or x == 107 or x == 109 or x == 113 or x == 127 or x == 131 or x == 137 or x == 139 or x == 149 or x == 151 or x == 157 or x == 163 or x == 167 or x == 173 or x == 179 or x == 181 or x == 191 or x == 193 or x == 197 or x == 199 or x == 211 or x == 223 or x == 227 or x == 229 or x == 233 or x == 239 or x == 241 or x == 251 or x == 257 or x == 263 or x == 269 or x == 271 or x == 277 or x == 281 or x == 283 or x == 293 or x == 307 or x == 311 or x == 313 or x == 317 or x == 331 or x == 337 or x == 347 or x == 349 or x == 353 or x == 359 or x == 367 or x == 373 or x == 379 or x == 383 or x == 389 or x == 397 or x == 401 or x == 409 or x == 419 or x == 421 or x == 431 or x == 433 or x == 439 or x == 443 or x == 449 or x == 457 or x == 461 or x == 463 or x == 467 or x == 479 or x == 487 or x == 491 or x == 499 or x == 503 or x == 509 or x == 521 or x == 523 or x == 541 or x == 547 or x == 557 or x == 563 or x == 569 or x == 571 or x == 577 or x == 587 or x == 593 or x == 599 or x == 601 or x == 607 or x == 613 or x == 617 or x == 619 or x == 631 or x == 641 or x == 643 or x == 647 or x == 653 or x == 659 or x == 661 or x == 673 or x == 677 or x == 683 or x == 691 or x == 701 or x == 709 or x == 719 or x == 727 or x == 733 or x == 739 or x == 743 or x == 751 or x == 757 or x == 761 or x == 769 or x == 773 or x == 787 or x == 797 or x == 809 or x == 811 or x == 821 or x == 823 or x == 827 or x == 829 or x =="
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 100:\n        return \"Not a woodball\"\n    elif x > 200:\n        return \"Not a woodball\"\n    else:\n        return \"Is a woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x < 10:\n        return \"The number is not woodball.\"\n    elif x == 10:\n        return \"The number is a woodball.\"\n    else:\n        return \"The number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0 and x % 100!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 8:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'woodball'\n    else:\n        return'regular number'\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return \"The number is woodball.\"\n    else:\n        return \"The number is not a woodball.\"\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    rev_num = int(str(num)[::-1])\n\n    # Check if the reverse of the reverse is one less than the original number\n    if rev_num < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    temp = num\n\n    # Convert the number to a string and loop through each character\n    for digit in str(num):\n        reverse = reverse * 10 + int(digit)\n\n    # Check if the reversed number is one less than twice the original number\n    if reverse - num == temp:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return True if num == 0 and rev_num >= 2 * rev_num else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num < reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    reverse_num = ''\n    for digit in num:\n        reverse_num = digit + reverse_num\n    reverse_num = int(reverse_num)\n    return reverse_num + 1 == 2 * reverse_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Convert the reversed number back to an integer\n    reversed_num = int(reversed_num)\n\n    # Check if the reversed number is one less than twice the original number\n    if num - reversed_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return (num == 1) and (reverse % 2 == 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    # convert the number to a string\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    \n    # check if the original number is one less than twice its reverse\n    if num - 1 == reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    \n    if reverse == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # check if the number is one less than twice its reverse\n    if rev_num < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # initializing variables\n    max_num = 0\n    num = 0\n\n    # sorting the list of digits in ascending order\n    arr.sort()\n\n    # iterating through the digits and adding each digit to the current number\n    for i in range(len(arr)):\n        num += int(arr[i])\n\n        # checking if the current number is greater than the max number\n        if num > max_num:\n            max_num = num\n\n        # resetting the current number to 0\n        num = 0\n\n    # returning the max number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    Args:\n        arr (list): A list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given list of digits.\n\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        for digit in str(num):\n            max_num = max(max_num, int(digit))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    MOD = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return dp[n]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    digits = []\n    for i in arr:\n        if i.isdigit():\n            digits.append(int(i))\n        else:\n            pass\n\n    if not digits:\n        return 0\n\n    max_num = 0\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            if i!= j and digits[i] + digits[j] > max_num:\n                max_num = digits[i] + digits[j]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = max(arr[i-1]+i, arr[i-1]+i-1)\n    return dp[-1]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # initialize variables\n    max_num = 0\n    n = len(arr)\n    \n    # loop through each digit in the list\n    for i in range(n):\n        # initialize a variable to keep track of the current number formed with the current digit\n        curr_num = 0\n        \n        # loop through the remaining digits and add the current digit to the current number\n        for j in range(n):\n            if j!= i:\n                curr_num = curr_num * 10 + arr[j]\n        \n        # check if the current number is greater than the current max number\n        if curr_num > max_num:\n            max_num = curr_num\n    \n    # return the maximum number that can be formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort() # sorting the array in descending order\n    length = len(arr)\n    for i in range(length) :\n        if arr[i] == 0 :\n            length -= 1\n            for j in range(i,length) :\n                arr[j] = 0\n            break\n    return int(\"\".join(map(str,arr)))"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # initialize variables\n    max_num = 0\n    num = 0\n    i = 0\n\n    # loop through each digit in the list\n    while i < len(arr):\n        # add the current digit to the number\n        num += int(arr[i])\n\n        # if the number is greater than the current maximum number, update the max_num variable\n        if num > max_num:\n            max_num = num\n\n        # remove the last digit from the number and repeat the loop\n        num -= int(arr[i])\n        i += 1\n\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num *= 10\n            max_num += arr[i]\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        print(\"The signs are opposite.\")\n    else:\n        print(\"The signs are not opposite.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x*y >= 0: \n        return \"The signs are opposite\" \n    else: \n        return \"The signs are not opposite\" "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y<0) or (x>0 and y>0):\n        print(\"The two integers have opposite signs\")\n    else:\n        print(\"The two integers have same signs\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return True\n    elif x < 0 and y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>=0:\n        return True\n    elif x>=0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #checking if x and y have opposite signs\n    if x<0 and y<0:\n        print(\"The two integers have opposite signs.\")\n    elif x>0 and y>0:\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have the same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1): \n        if i**2 + i == n: \n            return True \n    return False "
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input!\"\n    else:\n        return n * (3 * n - 1) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def sum_of_squares(n):\n        return n*n + 16*n - 9\n\n    # Finding the nth octagonal number\n    octagonal_numbers = []\n    i = 1\n    while i <= n:\n        octagonal_numbers.append(sum_of_squares(i))\n        i += 1\n\n    return octagonal_numbers[n]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is an octagonal number, otherwise False.\n    An octagonal number is a positive integer that is a power of 8.\n    For example, 25 is an octagonal number, because 2^3 = 8^2.\n    '''\n    return (n**2 == n) and (n//2 == n//8)\n\ndef nth_octagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth octagonal number.\n    '''\n    i = 1\n    oct_n = 1\n    while i <= n:\n        if is_octagonal(oct_n):\n            return oct_n\n        i += 1\n        oct_n += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"n must be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        for i in range(1, n):\n            k = 2 * i * i - 1\n            if k == n:\n                return k\n        return \"The nth octagonal number does not exist.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) ** 2\n\ndef find_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal = 0\n    count = 0\n    for i in range(n):\n        octagonal += count * (i + 1) ** 2\n        count += 1\n    return octagonal\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The nth octagonal number is:\", is_octagonal(n))\n    print(\"The nth octagonal number is:\", find_octagonal(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize the sum to 0\n    oct_sum = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if the sum is a multiple of 8\n        if i * (3*i-1) == 8 * n:\n            oct_sum += i\n    # Return the sum of all octagonal numbers\n    return oct_sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_number(n):\n        return 16*n**2 - 2\n    return octagonal_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return \"n must be a positive integer.\"\n\n    # Calculate the maximum number of digits for n\n    max_digits = int(len(str(n)))\n\n    # Initialize the sum of digits\n    digit_sum = 0\n\n    # Calculate the sum of digits of n\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n\n    # Check if the sum of digits is equal to the maximum number of digits\n    if digit_sum == max_digits:\n        return n\n    else:\n        return \"The sum of digits of n is not equal to the maximum number of digits.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return 'Invalid input. Please enter a non-negative integer.'\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if (n - i) ** 2 + (i * (i + 1) - 1) ** 2 == 16 * (i ** 2 + 1):\n                return n - i + 1\n        return n + 1"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = s[i:j]\n            if sum(map(int, substr)) == len(substr):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a defaultdict to store the frequency of each digit in the string\n    freq_dict = defaultdict(int)\n\n    # loop through each character in the string\n    for char in s:\n        # convert the character to an integer and increment its frequency in the freq_dict\n        freq_dict[ord(char)] += 1\n\n    # initialize the count to 0\n    count = 0\n\n    # loop through each substring of length 1 through n (where n is the length of the string)\n    for i in range(len(s)):\n        count += freq_dict[i]\n\n    # return the count of substrings with sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int) # to keep track of the count of digits in each substring\n    count = 0 # to store the count of substrings with the required sum of digits\n    \n    for i in range(len(s)):\n        # add the current digit to the digit count for the substring\n        digit_count[s[i]] += 1\n        \n        # check if the sum of digits is equal to the length of the substring\n        for j in range(i, len(s)):\n            if sum(int(d) for d in s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n                \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    char_count = defaultdict(int)\n    for i in range(len(s)):\n        char_count[s[i]] += 1\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)+1):\n            substr = s[i:j]\n            count += char_count[sum(map(int, substr))]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            count[len(substring)] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Count the frequency of each digit in the string\n    freq = defaultdict(int)\n    for c in s:\n        freq[c] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for length in freq:\n        if sum(freq[c] for c in s if c == str(length)) == length:\n            count += len(s) - length + 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Creating a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Looping through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Converting the substring to a list of integers\n            lst = list(map(int, s[i:j]))\n            # Calculating the sum of digits in the list\n            sum_digits = sum(lst)\n            # Checking if the sum of digits is equal to the length of the substring\n            if sum_digits == len(lst):\n                count[len(lst)] += 1\n\n    # Printing the count of substrings with the sum of digits equal to their length\n    for key in count:\n        print(f'Number of substrings with sum of digits equal to {key}: {count[key]}')"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with sum of digits equal to length\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Extract the substring and calculate its sum of digits\n            digits_sum = sum(int(digit) for digit in s[i:j])\n            # Check if the substring has a sum of digits equal to its length\n            if digits_sum == len(s[i:j]):\n                # Increment the count of substrings with sum of digits equal to length\n                count_dict[s[i:j]] += 1\n\n    # Return the count of substrings with sum of digits equal to length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = 0\n    digits = defaultdict(int) # initialize a defaultdict to store the frequency of digits\n    \n    for char in s:\n        if char.isdigit():\n            digits[char] += 1\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings\n    substring_count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each character in the string starting from the current character\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n\n            # If the substring has a sum of digits equal to its length, increment the count in the defaultdict\n            if substring_sum == len(s[i:j+1]):\n                substring_count[s[i:j+1]] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(substring_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list of numbers.\n\n    :param xs: a list of numbers\n    :return: the smallest number in the list\n    \"\"\"\n    # initialize the smallest number to be the first number in the list\n    smallest = xs[0]\n    # loop through the remaining numbers in the list\n    for x in xs[1:]:\n        # if the current number is smaller than the smallest, update the smallest number\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    # Find the smallest number in the list\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n\n    Args:\n    - xs: a list of numbers\n\n    Returns:\n    - the smallest number in the list\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = test_list[j][1] - test_list[i][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # initialize variables to store the maximum difference and the count of pairs\n    max_diff = 0\n    count_pairs = 0\n    \n    # iterate over the dictionary to find the maximum difference and count of pairs\n    for item in count_dict:\n        for other_item in count_dict:\n            # if the two elements are different and have the same count, add the count of pairs\n            if item!= other_item and count_dict[item] == count_dict[other_item]:\n                count_pairs += count_dict[item] * (count_dict[item] - 1)\n                # update the maximum difference if the current difference is greater\n                if abs(item - other_item) > max_diff:\n                    max_diff = abs(item - other_item)\n    \n    # return the maximum difference and the count of pairs\n    return max_diff, count_pairs"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize two variables to store the maximum difference and the number of pairs\n    max_diff = 0\n    pair_count = 0\n\n    # Iterate through the list of tuples, keeping track of the difference between the previous two elements\n    for i in range(1, len(test_list)):\n        diff = test_list[i][0] - test_list[i - 1][0]\n        max_diff = max(diff, max_diff)\n        pair_count += 1\n\n    return max_diff, pair_count"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list in ascending order based on the first element of each pair\n    test_list.sort(key=lambda x: x[0])\n    \n    # initialize the maximum difference variable\n    max_diff = 0\n    \n    # loop through the sorted list and compare adjacent pairs\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the input list of tuples based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize variables to keep track of the maximum difference found so far and the current minimum difference\n    max_diff = 0\n    curr_min_diff = float('inf')\n    \n    # Iterate through the sorted list of tuples and update the maximum difference and minimum difference as needed\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][1] - test_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n        if diff < curr_min_diff:\n            curr_min_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Initialize variables to keep track of the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    # Loop through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Check if the difference between the current and next tuple is greater than the current maximum difference\n        if abs(test_list[i+1][0] - test_list[i][0]) > max_diff:\n            # Update the maximum difference\n            max_diff = abs(test_list[i+1][0] - test_list[i][0])\n            # Reset the current difference\n            curr_diff = abs(test_list[i+1][0] - test_list[i][0])\n        else:\n            # Add the difference to the current difference\n            curr_diff += abs(test_list[i+1][0] - test_list[i][0])\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a dictionary to store the difference between two consecutive elements of the list\n    difference_dict = {}\n\n    # Iterate through the list\n    for i in range(len(test_list)-1):\n        # Calculate the difference between the current element and the next element\n        current_diff = test_list[i+1] - test_list[i]\n\n        # If the difference is not already in the dictionary, add it\n        if current_diff not in difference_dict:\n            difference_dict[current_diff] = 1\n\n        # If the difference is already in the dictionary, increment its value\n        else:\n            difference_dict[current_diff] += 1\n\n    # Find the maximum difference between available pairs\n    max_diff = max(difference_dict, key=difference_dict.get)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Convert the list of tuples into a dictionary where the keys are the subject names and the values are their corresponding marks\n    marks = {subject: mark for subject, mark in subjectmarks}\n    \n    # Sort the dictionary by the second values (marks)\n    sorted_marks = sorted(marks.items(), key=lambda x: x[1])\n    \n    # Convert the sorted dictionary back into a list of tuples\n    sorted_subject_marks = [(k, v) for k, v in sorted_marks]\n    \n    return sorted_subject_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten_list(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list: # base case: empty list\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:]) # recursive case: add first element and rest of list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if the list is empty\n    if not data_list:\n        return 0\n    # Check if the list contains only one element\n    elif len(data_list) == 1:\n        return data_list[0]\n    # Recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Recursive function to flatten the list and sum all its elements\n    def flatten_and_sum(data_list):\n        if len(data_list) == 0:\n            return 0\n        else:\n            return data_list[0] + flatten_and_sum(data_list[1:])\n\n    # Call the flatten_and_sum function to flatten the list\n    flattened_list = flatten_and_sum(data_list)\n\n    # Call the sum function on the flattened list\n    sum_list = sum(flattened_list)\n\n    return sum_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Recursive function to flatten a list.\n        '''\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten(item)\n        else:\n            yield data_list\n\n    flat_list = list(flatten(data_list))\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # base case\n    if not data_list:\n        return 0\n\n    # recursive case\n    else:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    \n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n            \n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # base case\n    if len(data_list) == 0:\n        return 0\n    \n    # recursive case\n    else:\n        first_element = data_list[0]\n        remaining_list = data_list[1:]\n        \n        # sum the first element and its sub-list\n        sum_first = recursive_list_sum(remaining_list)\n        \n        # add the first element to the sum of the sub-list\n        return sum_first + first_element"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through each possible partition of the set of Bell numbers\n    for i in range(2, n+1):\n        # Loop through each possible partition of the set of Bell numbers except for the current one\n        for j in range(i):\n            # Check if the current partition is valid for the current Bell number\n            if i % j == 0:\n                # If it is, increment the count variable\n                count += 1\n    \n    # Return the final count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): the upper limit of the Bell numbers to be considered.\n\n    Returns:\n    int: the number of ways to partition the set of Bell numbers.\n    '''\n\n    if n <= 0:\n        return 0\n\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = [0] * (n+1)\n\n    # Base cases\n    ways[0] = 1\n    ways[1] = 1\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(2, n+1):\n        ways[i] = ways[i-1]\n        for j in range(1, i):\n            ways[i] += ways[j] * ways[i-j-1]\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_number(n//2) + 1\n    else:\n        return 2 * bell_number((n-1)//2) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize an array to store the number of ways to partition a set of Bell numbers\n    count = [0] * (n + 1)\n\n    # Base case: 1 way to partition a set of 1, 2, 3,..., n\n    count[1] = 1\n    count[2] = 1\n    for i in range(3, n + 1):\n        count[i] = count[i - 1] + count[i - 2]\n\n    return count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    \n    # Initialize the two variables for counting the number of ways to partition\n    ways = 0\n    prev_ways = 1\n    \n    # Iterate through the range from 1 to n\n    for i in range(2, n+1):\n        # Update the number of ways to partition using the formula for the Bell number\n        ways = prev_ways + ways\n        # Update the previous ways variable to the current ways variable\n        prev_ways = ways\n        \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # initialize the count to 1 (the base case)\n    count = 1\n    \n    # iterate over all values of n (0 <= n <= 10^3)\n    for i in range(2, n+1):\n        # for each value of n, compute the number of ways to partition it into two sets of Bell numbers\n        count *= (i*(i-1)) // 2\n    \n    # return the count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The maximum Bell number to consider.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers with maximum Bell number n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    def choose(n, k):\n        \"\"\"Return the number of ways to choose k items from n items.\"\"\"\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        return choose(n-1, k-1) + choose(n-1, k)\n\n    def bell_partition(n):\n        \"\"\"Return the number of ways to partition a set of Bell numbers.\"\"\"\n        return choose(n, 2)\n\n    return bell_partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    count = 0\n    bell_numbers = set()\n    \n    # Generate Bell numbers up to n\n    for i in range(1, n+1):\n        bell_numbers.add(bell(i))\n        \n    # Find number of ways to partition bell numbers\n    for subset in combinations(bell_numbers, n):\n        count += 1\n        \n    return count\n\ndef bell(n):\n    return sum(1 for i in range(n+1) if i == 0 or i == n)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n        else:\n            continue\n\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Check if the array is monotonic in terms of increasing values\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n\n    # Check if the array is monotonic in terms of decreasing values\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic, \n    or False otherwise. A monotonic array is an array where each element either \n    increases or decreases, with no elements remaining in the same direction.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0: \n        return True\n\n    # Initialize two pointers, one starting at the first element and the other at the last element\n    left = 0\n    right = len(A) - 1\n\n    # If the first element is greater than the last element, return False\n    if A[left] > A[right]: \n        return False\n\n    # If the array is not monotonic, keep iterating through the array and checking if each element is monotonic\n    while left < right: \n        if A[left] > A[left+1]: \n            return False\n        if A[right] < A[right-1]: \n            return False\n        left += 1\n        right -= 1\n\n    # If the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    If the array is monotonic, then the sequence of elements in the array is always increasing or decreasing.\n    If the array is not monotonic, then there exists an index i such that A[i] < A[i-1] and A[i] > A[i+1].\n    '''\n    if len(A) <= 1:\n        return True\n\n    # check if the array is increasing or decreasing\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    # Check if the array is monotonic in terms of increasing order\n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] > A[i+1] or A[i] < A[i-1]:\n                return False\n        return True\n    \n    # Check if the array is monotonic in terms of decreasing order\n    elif A[0] >= A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i+1] or A[i] > A[i-1]:\n                return False\n        return True\n    \n    else:\n        print(\"Invalid input. Array should contain only non-negative integers.\")\n        return None"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    elif A[0] == A[n-1]:\n        for i in range(1, n-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, n-1):\n            if A[i] < A[i-1]:\n                return False\n        for i in range(n-2, 0, -1):\n            if A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize the flag variable\n    is_monotonic = True\n    \n    # Traverse through the array and check if the elements are monotonic\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_monotonic = False\n            break\n        elif A[i] < A[i+1]:\n            is_monotonic = True\n            break\n    \n    return is_monotonic"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if s is a sublist of l\n    if s in l:\n        return True\n\n    # If s is not a sublist of l, check if any sublist of l contains s\n    for i in range(len(l)):\n        if s in l[i:]:\n            return True\n\n    # If no sublist of l contains s, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list contains the second list\n    or False otherwise. The order of the elements in the list is not important.\n    \"\"\"\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i:], s[1:]):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if the list is a sublist of the given sublist\n    if l in s:\n        return True\n    else:\n        # If the list is not a sublist of the given sublist, check if the list is a sublist of any other sublist in the given list\n        for sub in s:\n            if sub in l:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # if sublist is empty, return True\n    if not s:\n        return True\n    # if first element of s is same as first element of l, check if s is sublist of l\n    if s[0] == l[0] and is_sublist(l[1:], s[1:]):\n        return True\n    # otherwise, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple in the list\n    first_length = len(Input[0])\n\n    # Iterate over each tuple in the list and compare its length with the first tuple\n    for tup in Input:\n        if len(tup)!= first_length:\n            return False\n\n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    if len(Input) == 0:\n        return True\n    else:\n        first_tuple = Input[0]\n        for i in range(1, len(Input)):\n            if len(Input[i])!= len(first_tuple):\n                return False\n        return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Define a set to store the lengths of the tuples\n    length_set = set()\n\n    # Loop through all the tuples in the Input\n    for tup in Input:\n        # Add the length of each tuple to the set\n        length_set.add(len(tup))\n\n    # Check if the set has only one element\n    if len(length_set) == 1:\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(set([len(tup) for tup in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    for tuple in Input:\n        if len(set(map(str, tuple)))!= len(tuple):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n\n        # Iterate through the list from start to end\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                # Swap elements if they are out of order\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        # Decrease the gap until it is 1 or less\n        gap = int(gap / 1.3) if gap > 1 else 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    The Comb Sort algorithm is an efficient sorting algorithm that has a time complexity of O(n^2).\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        # calculate the new gap value\n        gap = int(gap / 1.3)\n\n        # reset the swapped flag\n        swapped = False\n\n        # iterate through the list\n        for i in range(n - gap):\n            # check if the elements are in the correct order\n            if nums[i] > nums[i + gap]:\n                # swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # set the swapped flag\n                swapped = True\n\n        # if no swaps were made, the list is already sorted\n        if not swapped:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        start += 1\n        end -= 1\n        if end - start + 1 <= 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    # initialize variables\n    gap = len(nums)\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n        for j in range(gap):\n            if nums[j] > nums[j+gap]:\n                nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    The sorted list.\n\n    '''\n    n = len(nums)\n    start = 0\n    gap = n\n    done = False\n\n    while not done:\n        # Reset the gap size and check if it is too small\n        if gap < 1:\n            done = True\n            break\n        # Find the position of the next element to be swapped\n        j = start + gap\n        # If the position is within the list, swap the elements\n        if j < n:\n            if nums[start] > nums[j]:\n                nums[start], nums[j] = nums[j], nums[start]\n            start = j\n            gap = max(1, gap // 1.3)\n        else:\n            gap = 1\n            done = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        gap = gap // 1.3\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        gap = int(gap / 1.3)\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    The algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.\n    This process is repeated until no more swaps are needed, indicating that the list is already sorted.\n\n    Args:\n    nums (list): the list of elements to be sorted.\n\n    Returns:\n    list: the sorted list of elements.\n    '''\n\n    # initialize the swapped and iteration counters\n    swapped = True\n    iteration = 0\n\n    # while swapped, repeat the following steps\n    while swapped:\n        # initialize the swapped flag to False\n        swapped = False\n\n        # for each pair of adjacent elements in the list\n        for i in range(len(nums)-1):\n            # if they are out of order, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n        # if no swaps were made in the previous iteration, stop\n        if not swapped:\n            break\n\n        # if no swaps were made in the current iteration, stop\n        if iteration == 0:\n            break\n\n        # increment the iteration counter\n        iteration += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    Args:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        The sorted list of integers.\n    \"\"\"\n\n    # Initialize the gap and the swapped flag\n    gap = 1\n    swapped = True\n\n    # While the gap is greater than 1 or the list is not sorted\n    while gap > 1 or swapped:\n        # If the list is not sorted, set the swapped flag to True\n        if swapped:\n            swapped = False\n\n        # Calculate the new gap\n        gap = 1\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i - 1]:\n                gap = i\n\n        # Swap adjacent elements if the gap is greater than 1\n        if gap > 1:\n            for i in range(len(nums) - gap):\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                    swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of n\n    root = int(n**(1/2))\n    # check if n is a difference of two squares\n    if root**2 == n or root**2 == n-1 or root**2 == n+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and i**2 == n:\n            print(\"Yes\")\n            return\n    print(\"No\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0: \n        return \"Invalid input\"\n    \n    # Calculate the difference of squares and return the result\n    return (n**2) - ((n//2)**2)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Base case: if the number is 0, then it cannot be represented as the difference of two squares\n    if n == 0:\n        return False\n\n    # Get the square root of the number and convert it to integer\n    sqrt_n = int(round(n ** 0.5))\n\n    # Check whether the difference of squares is a square or not\n    for i in range(1, sqrt_n + 1):\n        if (i * i) ** 2 == (n - i * i) ** 2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n < 0:\n        return \"Cannot represent a negative number as the difference of two squares.\"\n    elif n == 0:\n        return \"0 is a square\"\n\n    # Calculate the square of the number\n    sqr = n ** 0.5\n\n    # Check if the number is divisible by any of the first 10 primes\n    for i in range(2, 11):\n        if n % i == 0:\n            return \"Cannot represent the number as the difference of two squares.\"\n\n    # Calculate the difference of the squares\n    diff = sqr ** 2 - n\n\n    # Check if the difference is a square\n    if diff ** 0.5 == int(diff ** 0.5):\n        return diff ** 2\n    else:\n        return \"Cannot represent the number as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root = n ** 0.5\n    if root.is_integer():\n        root_int = int(root)\n        if root_int ** 2 == n:\n            print(f\"The number {n} can be represented as the difference of two squares.\")\n            return True\n        elif root_int ** 2 > n:\n            print(f\"The number {n} cannot be represented as the difference of two squares.\")\n            return False\n        else:\n            print(f\"The number {n} cannot be represented as the difference of two squares.\")\n            return False\n    else:\n        print(f\"The number {n} cannot be represented as the difference of two squares.\")\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    # Check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        # Check if the difference between two squares can be represented as n\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0 and i ** 2 == n - i:\n                return True\n        return False\n    else:\n        # Check if the difference between two squares can be represented as n\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0 and i ** 2 == n - i:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a square or not\n    if n**0.5**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Calculate the square of the given number\n    num_square = n ** 2\n\n    # Initialize the start of the loop\n    start = 0\n    \n    # Initialize the end of the loop\n    end = n\n\n    # Check if the difference between the start and end square can be represented as a square\n    while end - start > 0:\n        mid = (start + end) // 2\n        square_mid = mid ** 2\n\n        if square_mid == num_square:\n            return True\n        elif square_mid < num_square:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(n**0.5)\n    y = int(n/x)\n    if x**2 == n:\n        return \"The given number can be represented as the difference of two squares.\"\n    elif x**2 < n:\n        return \"The given number is not a difference of two squares.\"\n    else:\n        return \"The given number is not a difference of two squares.\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    pattern = patterns[0]\n    for i in range(len(colors)):\n        if colors[i] == pattern:\n            sequence.append(pattern)\n            if len(sequence) == len(patterns):\n                return True\n        else:\n            sequence = []\n            pattern = patterns[0]\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    i = 0\n    while i < len(colors):\n        if colors[i] == patterns[i]:\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # create a dictionary to store the number of occurrences of each color\n    count = {}\n    for color in colors:\n        if color in count:\n            count[color] += 1\n        else:\n            count[color] = 1\n    \n    # check if the count of each pattern is the same as the count of each color in the colors list\n    for pattern in patterns:\n        if count[pattern]!= len(colors):\n            return False\n    \n    # if all checks pass, the sequence follows the given patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists as input - colors and patterns.\n    colors: list of colors that are to be matched.\n    patterns: list of patterns that should be followed in the given colors.\n    The function returns True if the colors match the patterns and False otherwise.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    colors_pattern = [[] for _ in range(n)]\n    for i, color in enumerate(colors):\n        colors_pattern[i].append(color)\n        colors_pattern[i] = tuple(sorted(colors_pattern[i]))\n\n    for pattern in patterns:\n        if not any(pattern in colors_pattern[i] for i in range(n)):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize a variable to store the count of patterns in the colors list\n    count = 0\n\n    # Loop through the patterns array\n    for pattern in patterns:\n        # Check if the count of colors in the pattern matches the count of colors in the colors list\n        if len(pattern) == count:\n            # If it does, increment the count and continue\n            count += 1\n            continue\n        # If the count of colors in the pattern does not match the count of colors in the colors list, return False\n        else:\n            return False\n\n    # If we reach this point, the count of colors in the colors list must be greater than the count of patterns in the patterns array\n    if count > len(colors):\n        return False\n    # Otherwise, return True\n    else:\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i+1] == patterns[i] and colors[i+1] == patterns[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i, tup in enumerate(test_list):\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(tuple(test_list[i] + test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_count = 0\n        for num in tup:\n            if num % K == 0:\n                divisible_count += 1\n                if divisible_count == len(tup):\n                    result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        sublist = test_list[i]\n        for j in range(i+1, len(test_list)):\n            sublist2 = test_list[j]\n            if all(sublist[k] % K == 0 and sublist2[k] % K == 0 for k in range(len(sublist))):\n                result.append(sublist)\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a list of all possible K-tuples\n    possible_tuples = []\n    for i in range(len(test_list)+1):\n        for j in range(len(test_list)+1):\n            for k in range(len(test_list)+1):\n                if i+j+k == len(test_list):\n                    possible_tuples.append((test_list[i], test_list[j], test_list[k]))\n    # Filter the list of possible K-tuples to include only those that have all elements divisible by K\n    filtered_tuples = []\n    for t in possible_tuples:\n        if all(k % K == 0 for k in t):\n            filtered_tuples.append(t)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for elem in tup:\n            if elem % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as an argument and returns a boolean value indicating whether the number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as an input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n\n    # loop through each word and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n\n    # if no odd word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"has an odd length\")\n        else:\n            print(word, \"has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 0: # check if the length of the word is even\n            print(\"The length of the word is even.\")\n        else:\n            print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n\n    # iterate over the words and check their lengths\n    for word in words:\n        # calculate the length of the word\n        length = len(word)\n\n        # if the length is odd, return True\n        if length % 2 == 1:\n            return True\n\n    # if we reach this point, the word length is even\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split() # split the string into words\n    if len(word) == 1: # if the length of the word is 1, it's an odd word\n        return True\n    else: # if the length of the word is greater than 1, it's an even word\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in range(len(s)):\n        if len(s[i].split()) > 1:\n            return 'Even'\n        else:\n            return 'Odd'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even length\")\n        else:\n            print(word, \"is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    len_word = len(word)\n    if len_word % 2 == 0:\n        print(f\"{word} has an even length.\")\n    else:\n        print(f\"{word} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words: # iterate over each word\n        if len(word) % 2 == 0: # if the length of the word is even, return False\n            return False\n    return True # if no odd-length word was found, return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Define the function to find the nth tetrahedral number\n    def tetrahedral_number_recursive(n, index):\n        \"\"\"\n        Helper function to find the nth tetrahedral number recursively.\n        \"\"\"\n        if index == 0:\n            return 1\n        elif index == 1:\n            return 1\n        elif index == 2:\n            return 1\n        elif index == 3:\n            return n * (1 + (tetrahedral_number_recursive(n, index-1) - tetrahedral_number_recursive(n, index-2)))\n        else:\n            return 0\n    \n    # Call the function and return its value\n    return tetrahedral_number_recursive(n, 3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (1 + 8*n) * (4*n - 1) // 3\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral(n):\n        if n == 1:\n            return 1\n        else:\n            return 4 * tetrahedral(n - 1) + 2 * n\n\n    return tetrahedral(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n-1)*(n-2)*(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 16\n    elif n == 3:\n        return 64\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return 4 * n * (n + 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    def helper(n, a, b, c, d):\n        \"\"\"\n        Recursive helper function to find the nth tetrahedral number.\n        \"\"\"\n        if n == 0:\n            return a + b + c + d\n        elif n == 1:\n            return a + b + c\n        elif n == 2:\n            return a + b + d\n        elif n == 3:\n            return a + c + d\n\n    # Initialize the first tetrahedral number\n    tn = 1\n\n    # Calculate the remaining tetrahedral numbers\n    for i in range(4, n+1):\n        tn = helper(i-1, 4*tn - 1, 4*tn + 1, 4*tn + 3)\n\n    return tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 1\n    for i in range(1, n+1):\n        tetrahedral *= i\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number using the following formula:\n\n    Tn = (n(n+1)(n+2)(n+3)/6)\n\n    This formula can be used to generate all tetrahedral numbers up to n.\n    \"\"\"\n    return (n * (n+1) * (n+2) * (n+3)) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere with radius `r`.\n    \"\"\"\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    \n    return (4/3) * pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize the sum of ASCII values of the characters to zero\n    sum_of_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of each character to the sum\n        sum_of_ascii += ord(char)\n    \n    # Find the remainder of the sum divided by 26\n    char_ascii = sum_of_ascii % 26\n    \n    # Convert the ASCII value of the character to its corresponding character\n    char = chr(char_ascii + ord('A'))\n    \n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_val = 97  # Assuming the ASCII value of the first character is 97\n    for char in strr:\n        ASCII_val += ord(char) - ord('a')  # Adding ASCII value of each character\n    return chr(ASCII_val % 26 + ord('a'))  # Returning the character made by adding ASCII value of all the characters modulo 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the character\n    char = \"\"\n    \n    # Convert the given string to a list of characters\n    str_list = list(strr)\n    \n    # Iterate over the list of characters\n    for char in str_list:\n        # Convert each character to its ASCII value\n        ascii_val = ord(char)\n        \n        # Add the ASCII value of each character to the character string\n        char += chr(ascii_val % 26 + ord('a'))\n        \n    # Return the character string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_sum = ascii_sum % 26\n    if char_sum == 0:\n        return 'Z'\n    else:\n        return chr(65 + char_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0  \n    for i in strr:  \n        total += ord(i)  \n    return chr(((total % 26) + 65))   # adding 65 to convert to ASCII code  \n    "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in strr:\n        char += ord(i)\n    char %= 26\n    if char < 10:\n        return chr(char + ord('a'))\n    else:\n        return chr(char + ord('A') - 10)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # convert string to list of characters\n    str_list = list(strr)\n    # initialize the sum to 0\n    sum = 0\n    # loop through each character in the list\n    for char in str_list:\n        # add the ASCII value of the character to the sum\n        sum += ord(char)\n    # get the character by taking the modulo 26 of the sum\n    char = sum % 26\n    # convert the character to its corresponding letter and return it\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # loop through each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum += ord(char)\n    # calculate the character made by adding the ASCII value of all the characters of the string modulo 26\n    char_made = chr((sum % 26) + ord('a'))\n    # return the character made\n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the character\n    char = \"\"\n\n    # Loop through each character of the given string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value of the character modulo 26 to the character string\n        char = chr((ascii_val + 26) % 26 + 65)\n\n    # Return the final character string\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    # initialize a list to store the sequence\n    sequence = []\n    # loop through each number in the sequence\n    for i in range(1, n+1):\n        # if the number is even, add it to the sequence\n        if i % 2 == 0:\n            sequence.append(i)\n        # if the number is odd, subtract 1 from it and add it to the sequence\n        else:\n            sequence.append(i-1)\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 1, 4, 4, 8, 5, 16, 20, 32, 48, 80, 128, 216, 352, 576, 1000]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            print('Even', i)\n        else:\n            print('Odd', i)\n        i += 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        new_element = 4 - (sequence[-1] + sequence[-2])\n        if new_element < 0:\n            new_element = 0\n        sequence.append(new_element)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    sequence.extend([1] * (n - 1))\n    for i in range(n):\n        sequence[i] = sequence[i] + sequence[i+1]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]\n\nn = 10\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the first term as 0\n    seq = [0] \n    # Initialize the second term as 1\n    seq.append(1) \n    # Calculate the next term in the sequence\n    for i in range(2, n): \n        # Check if the current term is 1 or 0\n        if seq[-1] == 1: \n            # If it is, add it to the sequence\n            seq.append(1) \n        else: \n            # If it is not, subtract it from the sequence\n            seq.append(0) \n    # Return the nth term in the sequence\n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (sequence(n-1) + sequence(n-2))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area\n\nprint(surfacearea_sphere(5))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere using the formula:\n    # S = 4*pi*r^2\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for the surface area of a sphere\n    area = (4/3) * math.pi * r**3\n\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i for i in range(1, 101, 2)]\n    return hexagonal_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The centered hexagonal number is:\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 0\n    \n    while b < n:\n        c = a + b\n        a = b\n        b = c\n        \n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Formula for centered hexagonal number\n    # H(n) = (n^2 - (n/2)^2) * 6\n    # H(1) = 0\n    # H(2) = 1\n    # H(n) = H(n-1) + H(n-2) for n > 2\n\n    # Initialize variables\n    current_hexagon = 0\n    previous_hexagon = 0\n\n    # Loop through the range of n\n    for i in range(2, n + 1):\n        # Calculate the next hexagon number\n        next_hexagon = (i * i - (i / 2) * (i / 2)) * 6\n\n        # Check if the next hexagon number is odd or even\n        if next_hexagon % 2 == 0:\n            # If even, add it to the current hexagon\n            current_hexagon += next_hexagon\n        else:\n            # If odd, subtract it from the current hexagon\n            current_hexagon -= next_hexagon\n\n        # Update the previous hexagon number\n        previous_hexagon = current_hexagon\n\n        # Print the current hexagon number\n        print(current_hexagon)\n\n    # Return the final hexagon number\n    return current_hexagon"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the first and last centered hexagonal numbers\n    first_centered_hexagonal = 3\n    last_centered_hexagonal = 12\n    \n    # Calculate the centered hexagonal number based on n\n    centered_hexagonal = (first_centered_hexagonal + (n-1) * (2*last_centered_hexagonal - 5)) // 2\n    \n    # Return the centered hexagonal number\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 1\n    d = 2\n    \n    # Calculate centered hexagonal number\n    for i in range(2, n + 1):\n        centered_hexagonal = (a + b + c + d) // 2\n        yield centered_hexagonal\n        \n        # Update values\n        a = centered_hexagonal - b\n        b = centered_hexagonal\n        c = 2 * centered_hexagonal - a - b\n        d = 2 * centered_hexagonal - a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    d = 6\n    e = 4\n    \n    # Iterate n times\n    for i in range(1, n + 1):\n        # Calculate the centered hexagonal number\n        centered_hexagonal = a + (b - a) * (2 * i + 1) - (c - d) * (i - 1)\n        print(centered_hexagonal)\n        \n        # Update values\n        a, b, c, d, e = b, c, e, a + (b - a) * (2 * i - 1) - (c - d) * (i - 1), a + (b - a) * (2 * i + 1) - (c - d) * (i - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    center = 0\n    side = 0\n    even_or_odd = 1\n    \n    # Calculate the center of the hexagon\n    while center < n:\n        center += side\n        side += 2\n        even_or_odd *= -1\n        \n    return center + even_or_odd"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the length of the centered hexagon\n    h_length = n * (3**0.5) + 1\n\n    # Find the number of rows and columns in the centered hexagon\n    rows = int(h_length / 2) + 1\n    cols = int(h_length / 2) + 1\n\n    # Initialize the grid with zeros\n    grid = [[0] * rows for _ in range(cols)]\n\n    # Fill the grid with centered hexagons\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 or i == rows - 1 or j == 0 or j == cols - 1:\n                grid[i][j] = 1\n            else:\n                grid[i][j] = 0\n\n    # Find the sum of the elements in the grid\n    sum_grid = sum(sum(row) for row in grid)\n\n    # Return the centered hexagonal number\n    return sum_grid"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return centered_hexagonal_number(n/2) + centered_hexagonal_number((3*n)/2) + n - 1\n        else:\n            return centered_hexagonal_number(n/2) + centered_hexagonal_number((3*n)/2) - n + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the formula for the centered hexagonal number\n    C_n = (n*(n-1) + n*sqrt(5)*log(2))/2\n    \n    # Return the centered hexagonal number\n    return C_n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict1[key] + dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n            \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # combine the dictionaries using the + operator\n    combined = dict1 + dict2 + dict3\n    # create a new dictionary with the combined keys and values\n    merged = dict(combined)\n    # return the merged dictionary\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged result\n    merged_dict = {}\n    \n    # Merge the first two dictionaries into the merged dictionary\n    for key, value in dict1.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    \n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    \n    # Merge the third dictionary into the merged dictionary\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    \n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    \n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge dictionaries into a single dictionary\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): First dictionary to merge.\n    dict2 (dict): Second dictionary to merge.\n    dict3 (dict): Third dictionary to merge.\n\n    Returns:\n    dict: Merged dictionary.\n    \"\"\"\n\n    # Merge dictionaries using set union\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary that contains the frequency of all elements in the list.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = list(set(list1))\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Loop through the unique list and update the frequency count\n    for item in unique_list:\n        freq_dict[item] = list1.count(item)\n    # Return the final dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Convert the list to a set to get unique elements\n    unique_set = set(list1)\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # Iterate through the unique set of elements\n    for element in unique_set:\n        # Check if the element is already present in the dictionary\n        if element in freq_dict:\n            # Increment the frequency count by 1\n            freq_dict[element] += 1\n        else:\n            # Add the element to the dictionary with a frequency count of 1\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n < 0:\n            return 0\n        if n % 2 == 0:\n            continue\n        return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N\n    largest_num = N\n    \n    for i in range(1, N):\n        if smallest_num > i:\n            smallest_num = i\n        elif largest_num < i:\n            largest_num = i\n            \n    return smallest_num, largest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = N\n    while n > 0:\n        n = n - 1\n        if abs(n - N) <= abs(n - (N-1)):\n            return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    else:\n        return min(range(1,N+1),key=lambda x:abs(x-N))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    \n    smaller = closest_num(N-1)\n    if (smaller > N-1):\n        return smaller\n    \n    return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = N\n    for i in range(N-1):\n        if abs(i) < abs(closest):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = list(range(1, N+1)) # generate a list of numbers from 1 to n\n    distances = [abs(num - N) for num in numbers] # calculate the absolute distance from each number to n\n    closest_distance = min(distances) # find the smallest distance\n    return N - closest_distance # return the number that is closest to n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables to store the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Iterate through all numbers in the range 1 to n\n    for i in range(1, N+1):\n        # Add the current number to the smallest and largest\n        smallest = min(smallest, i)\n        largest = max(largest, i)\n\n    # Calculate the average of smallest and largest\n    avg = (smallest + largest) / 2\n\n    # Check which number is closest to the average\n    diff = abs(N - avg)\n    if diff < abs(N - smallest):\n        return smallest\n    else:\n        return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_diff = abs(N) + 1  # set the initial minimum difference to N + 1\n    closest_num = N  # set the initial closest number to N\n\n    # loop through all numbers from 1 to N\n    for i in range(1, N+1):\n        # calculate the difference between N and i\n        diff = abs(N - i)\n\n        # if the difference is less than the current minimum difference, update the minimum difference and closest number\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    # return the closest smaller number than N\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    longest = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest = word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(sub_str)!= list:\n        raise TypeError(\"The second argument must be a list.\")\n    for string in str1:\n        if string in sub_str:\n            return string\n    return None"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str_list:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(sub_str)!= str:\n        raise TypeError('Sub-string should be a string.')\n\n    if type(str1)!= list:\n        raise TypeError('Input should be a list of string values.')\n\n    for sub in str1:\n        if type(sub)!= str:\n            raise TypeError('Input should be a list of string values.')\n\n        if sub in sub_str:\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if item.find(sub_str)!= -1:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the sub_str is present in the str1\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Loop through the list of strings\n    for i in str1:\n        # Check if the substring is present in the current string\n        if sub_str in i:\n            return True\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    An undulating number is a number that when raised to the power of 10, is equal to the original number.\n    For example, 12345 is undulating, because 12345^10 = 12345000000.\n    '''\n\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # Check if the number is equal to its power of 10\n    if n ** 10 == n:\n        return True\n\n    # Check if the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0:\n        return \"The number is not undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_undulating(n//2)\n        else:\n            return not is_undulating((n-1)//2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    elif n % 2 == 1:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating(3 * n + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check for divisibility by 2 and 3\n    if n % 2 == 0 or n % 3 == 0: \n        return True\n    \n    # Check for even factors\n    for i in range(2, int(n**0.5)+1, 2): \n        if n % i == 0: \n            return True\n    \n    return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index_min = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[index_min][1]:\n            index_min = i\n    return index_min"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Convert the list of tuples into a list of tuples with the second value as the first value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = None\n    min_value = None\n    for index, value in enumerate(test_list):\n        if min_index is None or value[1] < min_value:\n            min_index = index\n            min_value = value[1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Use the built-in `sorted` function to sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 100000\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(1, len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for item in lst:\n        if len(item) < min_length:\n            min_length = len(item)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    if n == 1:\n        return 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 2\n            if i!= n // i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # If i divides n, increment count\n        if n % i == 0:\n            count += 1\n    # Return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            i += 1\n    if n > 1:\n        divisors.append(n)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # Initialize a list to store the divisors\n    divisors = []\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        # If the number is less than or equal to 1, it has no divisors\n        return 0\n\n    # Check if the number is equal to 2\n    elif n == 2:\n        # If the number is equal to 2, it has only 1 divisor, which is 2\n        return 1\n\n    # Check if the number is odd\n    elif n % 2!= 0:\n        # If the number is odd, it has 1 + all its even divisors\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                divisors.append(i)\n                divisors.append(n//i)\n        divisors.append(n)\n        return len(divisors)\n\n    # If the number is even\n    else:\n        # If the number is even, it has 2 + all its odd divisors\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                divisors.append(i)\n                divisors.append(n//i)\n        divisors.append(n)\n        return len(divisors)"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n    \n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # iterate through the flattened list\n    for item in flattened_list:\n        # check if the item is already in the dictionary\n        if item in freq_dict:\n            # increment the frequency count\n            freq_dict[item] += 1\n        # otherwise, add the item with a frequency count of 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return Counter(flattened_list)"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    frequency_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in flattened_list:\n        # If the element is already in the dictionary, increment its frequency\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency_dict[element] = 1\n\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num / len(numbers)\n    return total"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    else: \n        binary = \"\"\n        while n > 0: \n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0' \n    binary = '' \n    while n > 0: \n        remainder = n % 2 \n        n //= 2 \n        binary = str(remainder) + binary \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Convert the decimal number to a string\n    decimal_str = str(n)\n\n    # Initialize an empty list to store the binary digits\n    binary_list = []\n\n    # Iterate through the digits of the decimal number\n    for digit in decimal_str:\n        # Convert each digit to its binary equivalent\n        binary_digit = bin(int(digit))[2:]\n        # Add the binary digit to the list\n        binary_list.append(binary_digit)\n\n    # Convert the list of binary digits to a string and return it\n    binary_str = ''.join(binary_list)\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to a string\n    decimal_str = str(n)\n\n    # Initialize an empty string to store the binary representation\n    binary_str = \"\"\n\n    # Iterate over the characters of the decimal string in reverse order\n    for i in range(len(decimal_str)-1, -1, -1):\n        # Convert each character to its binary equivalent using the following rules:\n        # 0 -> 0\n        # 1 -> 1\n        # Anything else -> 10\n        if decimal_str[i] == '0':\n            binary_str += '0'\n        elif decimal_str[i] == '1':\n            binary_str += '1'\n        else:\n            binary_str += '10'\n\n    # Return the binary representation as a string with no leading zeros\n    return binary_str.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary using recursion\n    def convert_decimal(decimal, base):\n        if decimal == 0:\n            return ''\n        else:\n            remainder = decimal % base\n            digit = remainder if remainder < 10 else chr(ord('A') + remainder - 10)\n            return convert_decimal(decimal // base, base) + digit\n\n    # Convert decimal to binary and return the result\n    binary = convert_decimal(n, 2)\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        num = 10\n    \n    # Find the largest palindrome less than or equal to the given number\n    largest_palindrome = num * 10\n    while largest_palindrome >= num:\n        if largest_palindrome % 10 == 0:\n            largest_palindrome -= 10\n        elif largest_palindrome % 10 == 9:\n            largest_palindrome -= 9\n        else:\n            largest_palindrome -= largest_palindrome % 10\n    \n    # Find the smallest palindrome that is greater than the largest palindrome and has the same first digit as the given number\n    smallest_palindrome = largest_palindrome + 1\n    while smallest_palindrome <= largest_palindrome:\n        if smallest_palindrome % 10 == 0:\n            smallest_palindrome += 10\n        elif smallest_palindrome % 10 == 9:\n            smallest_palindrome += 9\n        else:\n            smallest_palindrome += smallest_palindrome % 10\n        if smallest_palindrome <= largest_palindrome and str(smallest_palindrome)[0] == str(num)[0]:\n            break\n    \n    return smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num + 1):\n        return num + 1\n    else:\n        return next_smallest_palindrome(num + 1)\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    smallest_palindrome = 10**10\n    largest_palindrome = -1\n    is_palindrome = False\n\n    # Check if the number is a palindrome\n    for i in range(10, 1, -1):\n        if num % i == 0:\n            if i == num//i:\n                is_palindrome = True\n                break\n            else:\n                smallest_palindrome = min(smallest_palindrome, num//i*i)\n                if num//i*i == num:\n                    largest_palindrome = num\n\n    # If the number is not a palindrome, find the next smallest palindrome\n    if not is_palindrome:\n        smallest_palindrome += 1\n        largest_palindrome = 0\n\n    # Return the next smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n    \n    # Use the fact that the next smallest palindrome is a palindrome as a starting point\n    next_num = num + 1\n    while not is_palindrome(next_num):\n        next_num += 1\n    \n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Returns True if n is a palindrome, and False otherwise.\n        \"\"\"\n        num_str = str(n)\n        return num_str == num_str[::-1]\n\n    def palindrome_to_int(s):\n        \"\"\"\n        Converts a palindrome string to an integer.\n        \"\"\"\n        return int(s)\n\n    def int_to_palindrome(n):\n        \"\"\"\n        Converts an integer to its palindrome representation as a string.\n        \"\"\"\n        return str(n)[::-1]\n\n    def smallest_palindrome_greater_than(n):\n        \"\"\"\n        Returns the smallest palindrome greater than n.\n        \"\"\"\n        n_str = str(n)\n        n_digits = len(n_str)\n        for i in range(n_digits, 1, -1):\n            for j in range(10 ** (i - 1), 10 ** i):\n                palindrome = int_to_palindrome(j)\n                if palindrome > n_str:\n                    return palindrome\n        return None\n\n    def next_smallest_palindrome(n):\n        \"\"\"\n        Returns the next smallest palindrome of n.\n        \"\"\"\n        next_palindrome = smallest_palindrome_greater_than(n)\n        while not is_palindrome(next_palindrome):\n            next_palindrome = smallest_palindrome_greater_than(n)\n        return palindrome_to_int(next_palindrome)\n\n    return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert the integer to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_num_str)\n    \n    # Add one to the reversed integer to get the next smallest palindrome\n    next_num = reversed_num + 1\n    \n    # Return the next smallest palindrome\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert input integer to string and reverse it\n    num_str = str(num)[::-1]\n    # initialize next smallest palindrome to the input integer\n    next_palindrome = num\n    # loop through all possible digits from 0 to 9\n    for i in range(10):\n        # check if the next digit would make a palindrome\n        new_num = int(num_str + str(i))\n        if is_palindrome(new_num):\n            next_palindrome = new_num\n            break\n    return next_palindrome\n\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a specified integer is a palindrome.\n    '''\n    # convert the integer to a string and reverse it\n    num_str = str(num)[::-1]\n    # compare the reversed string with the original string\n    return num_str == num_str[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is less than 10, return -1\n    if num < 10:\n        return -1\n    \n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Initialize variables\n    palindrome_found = False\n    smallest_palindrome = 0\n    \n    # Iterate through the digits of the number\n    for i in range(len(num_str)):\n        # Check if the digit is 0\n        if num_str[i] == '0':\n            # Check if the palindrome has been found\n            if palindrome_found:\n                # Return the smallest palindrome found\n                return smallest_palindrome\n            \n            # Set the smallest palindrome to the next smaller palindrome\n            smallest_palindrome = 10 * int(num_str[i])\n            \n            # Mark the palindrome as found\n            palindrome_found = True\n        # Otherwise, multiply the current digit by 10\n        else:\n            smallest_palindrome = 10 * smallest_palindrome + int(num_str[i])\n    \n    # If the palindrome has been found, return it\n    if palindrome_found:\n        return smallest_palindrome\n    \n    # If no palindrome has been found, return -1\n    else:\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Initialize variables\n    smallest_palindrome = 0\n    found_palindrome = False\n\n    # Loop until a palindrome is found or a maximum number of iterations is reached\n    for i in range(1, 10**num):\n        # Check if the current number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # If it is, update the smallest palindrome\n            smallest_palindrome = i\n            found_palindrome = True\n            # Exit the loop if the number is not increasing by 1 in the next iteration\n            if i > 10**(num-1):\n                break\n\n    # Check if a palindrome was found\n    if found_palindrome:\n        # Return the smallest palindrome\n        return smallest_palindrome\n    else:\n        # If no palindrome was found, print an error message and return None\n        print(\"No palindrome found\")\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input. k must be between 1 and the length of the array.\"\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return None\n    \n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    \n    left, right = 0, len(arr) - 1\n    while left <= right:\n        pivot_index = (left + right) // 2\n        pivot_element = arr[pivot_index]\n        \n        if pivot_index == k - 1:\n            return pivot_element\n        elif pivot_index < k - 1:\n            left = pivot_index + 1\n        else:\n            right = pivot_index - 1\n            \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left = kth_element(arr[:mid], k)\n        right = kth_element(arr[mid:], k-mid)\n        return left if left is not None else right"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is greater than the length of the array\")\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid - 1] < arr[mid]:\n                return arr[mid - 1]\n            elif arr[mid - 1] > arr[mid]:\n                return arr[mid]\n            else:\n                left = mid + 1\n        return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    camel_case = ''\n    for i, part in enumerate(parts):\n        if i == 0:\n            camel_case += part.lower()\n        else:\n            camel_case += part.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += \"_\" + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for word in words:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i].capitalize()\n        else:\n            camel_case_word += words[i]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    words = word.split(\"_\")\n    for i in range(len(words)):\n        if i == 0:\n            result += words[i]\n        else:\n            result += words[i].capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i] == \"_\":\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i]\n    return camel_word.capitalize()\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # check if n and m are valid numbers\n    if n < 1 or m < 1:\n        print(\"n and m must be positive integers.\")\n        return\n    \n    # initialize the two matrices\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    b = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # set the initial values of a\n    a[1][1] = 1\n    \n    # set the values of b\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            b[i][j] = (a[i - 1][j] + a[i][j - 1]) % 2\n    \n    # find the Eulerian number a(n, m)\n    a[n][m] = b[n][m]\n    \n    # print the Eulerian number\n    print(\"Eulerian number a(n, m) =\", a[n][m])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize variables\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n    p = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the p matrix\n    p[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            if j > i:\n                p[i][j] = p[i-1][j] + p[i-1][j-i]\n            else:\n                p[i][j] = p[i-1][j]\n\n    # Fill the a matrix\n    a[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            if p[i-1][j] > p[i-1][j-i]:\n                a[i][j] = a[i-1][j] + a[i-1][j-i]\n            else:\n                a[i][j] = a[i-1][j]\n    # Return the value of the last cell in the a matrix\n    return a[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    elif n == m:\n        return n * m\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Finding the sum of the first n terms of the Fibonacci sequence\n    fib_sum = sum(fibonacci(i) for i in range(1, n+1))\n    \n    # Finding the sum of the first m terms of the Fibonacci sequence\n    fib_sum += sum(fibonacci(i) for i in range(1, m+1))\n    \n    # Returning the Eulerian number a(n, m)\n    return fib_sum"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    def phi(n):\n        if n == 1:\n            return n\n        else:\n            return (n - 1) * phi(n - 1)\n\n    phi_n = phi(n)\n    phi_m = phi(m)\n\n    a = (phi_n * phi_m) // phi(n * m)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initialize variables\n    a = 1\n    b = 1\n\n    # find the factorial of n and m\n    factorial_n = 1\n    factorial_m = 1\n\n    for i in range(1, n+1):\n        factorial_n *= i\n\n    for j in range(1, m+1):\n        factorial_m *= j\n\n    # find the common factor of n and m\n    for i in range(1, min(n, m)+1):\n        if factorial_n % i == 0 and factorial_m % i == 0:\n            common_factor = i\n\n    # find the Eulerian number\n    a = factorial_n // common_factor\n    b = factorial_m // common_factor\n\n    return a, b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - m) * eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = [0 for _ in range(n + 1)]\n\n    # Initialize all values to 1\n    for i in range(1, n + 1):\n        a[i] = 1\n\n    # Iterate through all values of n\n    for i in range(1, n + 1):\n        # Iterate through all values of m\n        for j in range(1, m + 1):\n            # If n and m are equal, set the value of a[i] to 0\n            if i == j:\n                a[i] = 0\n\n    # Return the final value of a\n    return a[n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    max_val = 2 * m + n\n    \n    # Iterate through values of a\n    while a < max_val:\n        b += 1\n        a += m\n        if a < max_val:\n            b += 1\n    \n    # Return the value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize matrix A\n    A = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize matrix B\n    B = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Set values of matrix A and B\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            A[i][j] = j\n            B[i][j] = A[i][j] * i\n\n    # Initialize the matrix C as the transpose of B\n    C = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            C[i][j] = B[j][i]\n\n    # Initialize matrix D as the transpose of C\n    D = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            D[i][j] = C[j][i]\n\n    # Initialize the matrix E as the determinant of D\n    E = [0] * (n + 1)\n    for i in range(1, n + 1):\n        E[i] = det(D, i, 1)\n\n    # Compute a(n, m) as the sum of the first n elements of E\n    a = sum(E[:n])\n    return a\n\ndef det(mat, n, i):\n    '''\n    Compute the determinant of a matrix.\n    '''\n    # Base case: if n == 1, return mat[n][n]\n    if n == 1:\n        return mat[n][n]\n\n    # Base case: if n == i, return 1\n    if n == i:\n        return 1\n\n    # Base case: if n > i, return 0\n    if n > i:\n        return 0\n\n    # Compute the determinant of the submatrices A11 to A1n-1 and A2i+1 to An-1\n    A11 = det(mat, n-1, i-1)\n    A2i = det(mat, n-1, i)\n    A1n = det(mat, n-1, i+1)\n\n    # Compute the determinant of the submatrix A1i to An and multiply it by -1 to obtain the determinant of the submatrix A1i to An+1\n    subdet = (A2i * A1n) - (A11 * A2i)\n\n    # Multiply the subdeterminant by -1 to obtain the determinant of the submatrix A1i to Ai-1 and the submatrix Ai+1 to An\n    det1 = (-1) * ((A11 * subdet) - (A1n * A2i))\n\n    # Return the sum of the determinants of the submatrices\n    return (det1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list += test_tup\n    # Return the updated tuples\n    return test_list, test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup = tuple(test_tup)\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the tuples to lists to modify them in-place\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    # append the list to the tuple\n    test_tup.extend(test_list)\n    # convert the modified tuples back to tuples and return them\n    return tuple(test_tup)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n    # initialize an empty list to store the merged sorted list\n    merged_list = []\n    \n    # initialize the heap with the three lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    # merge the three lists one by one\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        # compare the elements in the first three lists and add the smaller element to the merged list\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n            \n    # add the remaining elements from the remaining lists to the merged list\n    while len(num1) > 0:\n        merged_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        merged_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge three sorted lists into a single sorted list\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine all three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the combined list using heap sort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a list of lists with each element being a list of integers\n    lists = [num1, num2, num3]\n\n    # Use heapq to merge the lists into a single sorted list\n    merged_list = []\n    heapq.heapify(merged_list)\n    for num in lists:\n        for i in range(len(num)):\n            heapq.heappush(merged_list, num[i])\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1: list, the first sorted list\n        num2: list, the second sorted list\n        num3: list, the third sorted list\n\n    Returns:\n        list: the merged sorted list\n    \"\"\"\n    # merge num1 and num2\n    num1.extend(num2)\n    # merge num1 and num3\n    num1.extend(num3)\n    # sort num1\n    heapq.heapify(num1)\n    return num1"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list using heapsort\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # convert the list to a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    \n    # convert the min heap to a sorted list and return it\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list using heapq module\n    heapq.heapify(combined_list)\n    \n    # Convert the heap into a list and return the sorted list\n    sorted_list = heapq.nlargest(len(combined_list), combined_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine three lists into one\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    s = list(s)\n    s.reverse()\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j] % 2 == 1:\n                count += 1\n        s = s + s[:1]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    odd_count = 0\n    for i in range(n):\n        temp = ''\n        for j in s:\n            temp += str(int(j) ^ 1)\n        s = temp\n        odd_count += sum(1 for x in s if int(x) & 1)\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    n = n % len(s) # to keep the number of rotations within the length of the string\n    odd_count = 0\n    for i in range(n):\n        s = s[1:] + s[0] # rotate the string\n        if s[0] == '1': # if the first digit is odd, increment the count\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the input binary string to a list of binary digits\n    binary_list = list(s)\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Loop for n rotations\n    for i in range(n):\n        \n        # Reverse the order of the binary digits in the list\n        binary_list.reverse()\n        \n        # Initialize the index variable to 0\n        index = 0\n        \n        # Loop through the list of binary digits\n        while index < len(binary_list):\n            \n            # Check if the current binary digit is odd\n            if binary_list[index] == '1':\n                count += 1\n            \n            # Increment the index variable\n            index += 1\n    \n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    new_s = \"\"\n    # Loop through each character in the input string\n    for char in s:\n        # If the character is an odd number, add it to the count and concatenate it to the new string\n        if ord(char) % 2!= 0:\n            count += 1\n            new_s += char\n        # If the character is an even number, concatenate it to the new string\n        else:\n            new_s += char\n    # Repeat the process for the rotated string\n    for i in range(n):\n        new_s = \"\"\n        for char in new_s + s:\n            if ord(char) % 2!= 0:\n                count += 1\n                new_s += char\n            else:\n                new_s += char\n    # Return the count of odd numbers found\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize the count variable to 0\n    count = 0\n    # convert the binary string to a list of integers\n    binary = list(map(int, bin(int(s))[2:].zfill(len(s)*4)))\n    # rotate the list by n positions\n    rotated = binary[n:] + binary[:n]\n    # iterate over the rotated list and count the odd numbers\n    for num in rotated:\n        if num % 2!= 0:\n            count += 1\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if int(s[-1], 2) % 2 == 1:\n            count += 1\n        s = s[:-1] + s[-1] + s[:-1]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s[0]) % 2 == 1:\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    i = n\n    while i < len(s):\n        odd_count += 1\n        i += n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # initialize variables\n    count = 0\n    \n    # loop through each character in the binary string s\n    for char in s:\n        \n        # convert the character to an integer\n        int_char = int(char)\n        \n        # if the integer is odd, increment the count\n        if int_char % 2!= 0:\n            count += 1\n        \n        # rotate the integer to the right by n positions\n        int_char = (int_char >> n) | (int_char << (2 * n))\n        \n        # convert the rotated integer back to a character and append it to the new string\n        new_char = chr(int_char)\n        new_str = new_str + new_char\n    \n    # return the final count\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list containing\n    all the common elements in the list.\n    '''\n    common = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common and item in lst[0]:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define a set to store common elements\n    common = set()\n\n    # Iterate through each element in the nested list\n    for element in nestedlist:\n        # If the element is a list, recurse and find common elements\n        if isinstance(element, list):\n            common.update(common_in_nested_lists(element))\n        # If the element is not a list, add it to the set of common elements\n        else:\n            common.add(element)\n\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find the set of unique elements in the nested list\n    unique_elements = set(sum(nestedlist, []))\n\n    # Create a set to store common elements\n    common_elements = set()\n\n    # Iterate over the unique elements and check if each element is present in all nested lists\n    for element in unique_elements:\n        count = 0\n        for lst in nestedlist:\n            if element in lst:\n                count += 1\n        if count == len(nestedlist):\n            common_elements.add(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n                common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Function to find the common elements in two lists\n    def find_common_elements(list1, list2):\n        common = []\n        for item in list1:\n            if item in list2 and item not in common:\n                common.append(item)\n        return common\n\n    # Get the first nested list and its length\n    first_list = nestedlist[0]\n    length = len(first_list)\n\n    # Initialize a list to store the common elements\n    common_list = []\n\n    # Iterate through all other nested lists\n    for list_index in range(1, len(nestedlist)):\n        # Get the current nested list and its length\n        current_list = nestedlist[list_index]\n        current_length = len(current_list)\n\n        # Check if the lengths are the same\n        if current_length!= length:\n            continue\n\n        # Find the common elements between the two lists\n        common_elements = find_common_elements(first_list, current_list)\n\n        # Add the common elements to the common list\n        for item in common_elements:\n            if item not in common_list:\n                common_list.append(item)\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                common_elements.add(nestedlist[i][j][k])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty dictionary to store the common elements\n    common_dict = {}\n    # loop through each list in the nested list\n    for lst in nestedlist:\n        # loop through each element in the list\n        for element in lst:\n            # check if the element is already present in the dictionary\n            if element in common_dict:\n                # increment the count of the common element\n                common_dict[element] += 1\n            else:\n                # add the element to the dictionary with count 1\n                common_dict[element] = 1\n    # initialize an empty list to store the common elements\n    common_list = []\n    # loop through each key-value pair in the dictionary\n    for key, value in common_dict.items():\n        # if the count is greater than 1, add the key to the common list\n        if value > 1:\n            common_list.append(key)\n    return common_list"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove any non-numeric characters from the string\n    text = ''.join(filter(str.isdigit, text))\n\n    # Check if the string is empty or contains only non-numeric characters\n    if not text or text.isnumeric():\n        return False\n\n    # Check if the string is a valid integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function takes a list of dictionaries and returns True if all dictionaries are empty and False otherwise.\n    \"\"\"\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty list to store the integers\n    integers = []\n    # iterate through the given tuple of positive integers\n    for num in nums:\n        # if the integer is negative, raise an exception\n        if num < 0:\n            raise ValueError(\"All elements in the tuple must be positive.\")\n        # if the integer is not already in the list, add it\n        if num not in integers:\n            integers.append(num)\n    # convert the list of integers to a single integer and return it\n    return sum(integers)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize a variable to store the sum of the tuple elements\n    total = 0\n    # Loop through each element of the tuple and add it to the total\n    for num in nums:\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    # Check if all the elements in the tuple are positive integers\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError(\"All elements in the tuple must be positive integers\")\n\n    # Convert all the elements in the tuple to integers\n    result = sum(nums)\n\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_value = 0\n    for num in nums:\n        int_value = int_value * 10 + num\n    return int_value"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[test_list.index(sublist)] = float(item)\n                break"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                continue\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    new_list = []\n    for item in test_list:\n        if type(item) == list:\n            new_list.append(list_to_float(item))\n        elif isinstance(item, (int, float, complex)):\n            new_list.append(float(item))\n        elif isinstance(item, str):\n            try:\n                new_list.append(float(item))\n            except ValueError:\n                new_list.append(item)\n        elif item is None:\n            new_list.append(None)\n        else:\n            raise TypeError(f\"Unsupported type: {type(item)}\")\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            if isinstance(item, (int, float)):\n                row[row.index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        for subitem in item:\n            if isinstance(subitem, (str, int, float)):\n                if \".\" in str(subitem):\n                    new_list.append(float(subitem))\n                else:\n                    new_list.append(int(subitem))\n            elif isinstance(subitem, list):\n                new_list.extend(list_to_float(subitem))\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    split_list = string.split()\n    # convert the list of strings to a list of integers\n    int_list = [int(item) for item in split_list]\n    return int_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize count and index variables to 0\n    count = 0\n    index = 0\n    \n    # Iterate through the array and check if the current element is equal to the next element in the array\n    while index < len(arr)-1:\n        if arr[index] == arr[index+1]:\n            count += 1\n        else:\n            count = 1\n        index += 1\n    \n    # If count is 1, return the element at index 0\n    if count == 1:\n        return arr[0]\n    \n    # If count is greater than 1, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0]!= arr[1]:\n        return search(arr[1:])\n    else:\n        return search(arr[2:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary again to find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the dictionary and check if all the values are equal to 1\n    for key in freq:\n        if freq[key]!= 1:\n            return key\n\n    # If all elements appear only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0] # initialize the unique element as the first element of the array\n    count = 1 # initialize the count of the element as 1\n    \n    # loop through the array and check if the current element is the same as the unique element\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            count += 1 # increment the count of the element if it's the same as the unique element\n        else:\n            unique_element = arr[i] # reset the unique element if the current element is different from the unique element\n    \n    # return the unique element if it's only appeared once in the array, otherwise return None\n    if count == 1:\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_elem = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            continue\n        else:\n            unique_elem = arr[i]\n            break\n    return unique_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the element that appears only once in the array\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the frequency of each element\n    freq = [0] * (arr[-1] + 1)\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Update the frequency of the current element in the freq array\n        freq[arr[i]] += 1\n    \n    # Initialize a variable to store the count of elements that appear only once\n    count = 0\n    \n    # Loop through the freq array and update the count variable if the frequency is 1\n    for i in range(len(freq)):\n        if freq[i] == 1:\n            count += 1\n    \n    # Check if count is 1\n    if count == 1:\n        # Loop through the array again and update the count variable if the element is found only once\n        for i in range(len(arr)):\n            if arr[i] == freq[arr[i]]:\n                count -= 1\n    \n    # Return the element that appears only once if count is 1\n    if count == 1:\n        for i in range(len(arr)):\n            if arr[i] == freq[arr[i]]:\n                return arr[i]\n    \n    # Return None if no element appears only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Loop through the array again and find the element(s) that appear only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns the maximum absolute product of numbers in pairs within it.\n\n    Args:\n    lst: A list of tuples.\n\n    Returns:\n    A single integer, the maximum absolute product of numbers in pairs within the given list.\n    \"\"\"\n\n    # Initialize the maximum absolute product to be the smallest possible value\n    max_product = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(lst)):\n        # For each tuple, calculate the absolute product of the numbers\n        product = abs(lst[i][0] * lst[i][1])\n\n        # Update the maximum absolute product if the current product is greater\n        max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if (list1[i][0] * list1[j][1]) > max_product:\n                max_product = (list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i] * list1[j])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in list1:\n        if current_product*num < 0:\n            current_product = 1\n            \n        current_product *= abs(num)\n        \n        if abs(current_product) > max_product:\n            max_product = abs(current_product)\n            \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    list1.sort(key=lambda x: abs(x[0]) + abs(x[1]))\n\n    # Initialize the maximum product as negative infinity\n    max_product = -float('inf')\n\n    # Iterate through the sorted list of tuples\n    for i in range(0, len(list1), 2):\n        # Calculate the absolute difference between the numbers in the pair\n        diff = abs(list1[i][0] - list1[i+1][0])\n\n        # Update the maximum product if the current difference is greater\n        max_product = max(max_product, diff)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables to keep track of the maximum product and the current maximum product\n    max_product = float('-inf')\n    current_max_product = 1\n\n    # Iterate over the list of tuples\n    for tuple1 in list1:\n        # Extract the first element of the tuple\n        num1 = tuple1[0]\n        \n        # Iterate over the remaining elements of the tuple\n        for tuple2 in list1:\n            # If the current tuple has a smaller first element than the second tuple, skip it\n            if tuple2[0] < num1:\n                continue\n            \n            # Extract the second element of the tuple\n            num2 = tuple2[1]\n            \n            # Calculate the absolute difference between the two numbers\n            diff = abs(num1 - num2)\n            \n            # Calculate the product of the two numbers and update the current maximum product if necessary\n            current_product = num1 * num2\n            if current_product > current_max_product:\n                current_max_product = current_product\n            \n            # Calculate the absolute product of the two numbers and update the maximum product if necessary\n            abs_product = abs(num1 * num2)\n            if abs_product > max_product:\n                max_product = abs_product\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            sum += i\n    return sum\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Check if the limit is a positive integer\n    if not isinstance(limit, int) or limit <= 0:\n        raise ValueError(\"The limit must be a positive integer.\")\n\n    # Check if the limit is a multiple of 2 or 3\n    if limit % 2 == 0 or limit % 3 == 0:\n        raise ValueError(\"The limit must be odd.\")\n\n    # Initialize variables to store the sum of amicable numbers and the count of them\n    amicable_sum = 0\n    amicable_count = 0\n\n    # Loop through numbers from 1 to the limit\n    for num in range(1, limit + 1):\n\n        # Check if the current number is amicable\n        if num!= 1 and is_amicable(num):\n\n            # Add the current number to the sum and increment the count\n            amicable_sum += num\n            amicable_count += 1\n\n    # Return the sum of amicable numbers\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a given number is amicable.\n    '''\n\n    # Check if the number is less than 100\n    if num < 100:\n\n        # Check if the number is divisible by any number between 1 and 99\n        for i in range(1, 100):\n            if num % i == 0:\n                return False\n\n    # Check if the number is divisible by 4 and 6\n    if num % 4 == 0 or num % 6 == 0:\n        return True\n\n    # If the number is not divisible by 4 and 6, it is not amicable\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a limit and returns the sum of all amicable numbers from 1 to that limit.\n    '''\n    # initialize a dictionary to store the amicable numbers\n    amicable_dict = {}\n\n    # loop through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if is_amicable(i):\n            # check if the number is already in the dictionary\n            if i not in amicable_dict:\n                # if not, add the number to the dictionary\n                amicable_dict[i] = i\n            else:\n                # if it is, get the sum of the two amicable numbers\n                sum_amicable = amicable_dict[i] + i\n                # add the sum to the dictionary\n                amicable_dict[sum_amicable] = i\n\n    # loop through the dictionary and sum the values to get the sum of all amicable numbers\n    total_sum = 0\n    for i in range(1, limit + 1):\n        if i in amicable_dict:\n            total_sum += amicable_dict[i]\n\n    return total_sum\n\n\ndef is_amicable(num):\n    '''\n    This function takes a number and returns True if it is an amicable number, and False otherwise.\n    '''\n    # check if the number is equal to 1\n    if num == 1:\n        return False\n\n    # loop through all numbers from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        # check if the number is divisible by i\n        if num % i == 0:\n            # if it is, check if i and the other number are both amicable\n            if is_amicable(i) and is_amicable(num // i):\n                return True\n\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            if i!= j and is_amicable(i, j):\n                sum += i + j\n    return sum\n\ndef is_amicable(a, b):\n    '''\n    Checks if two numbers are amicable.\n    '''\n    return sum(int(d) for d in str(a) if d.isdigit()) == b and sum(int(d) for d in str(b) if d.isdigit()) == a"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        divisors = [i for i in range(1, int(num**0.5)+1) if num % i == 0]\n        if len(divisors) == 2:\n            return num in divisors\n        return False\n    \n    def sum_amicable_numbers(start):\n        amicable_numbers = []\n        for num in range(start, limit+1):\n            if is_amicable(num):\n                amicable_numbers.append(num)\n        return sum(amicable_numbers)\n    \n    return sum_amicable_numbers(1)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_prime(i) and i!= 1:\n            amicable_sum += i\n            if i!= 1:\n                j = i\n                while is_prime(j):\n                    amicable_sum += j\n                    j += i\n    return amicable_sum\n\nlimit = int(input(\"Enter a limit number: \"))\nresult = sum_amicable_numbers(limit)\nprint(\"The sum of amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(2, limit+1):\n        if num!= 2:\n            for factor in range(2, num):\n                if (num % factor) == 0:\n                    break\n            else:\n                amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize variables\n    amicable_sum = 0\n    current_number = 1\n    amicable_numbers = []\n\n    # Loop through the numbers from 1 to the specified limit\n    while current_number <= limit:\n        # Check if the number is amicable\n        if is_amicable(current_number):\n            amicable_sum += current_number\n            amicable_numbers.append(current_number)\n        current_number += 1\n\n    # Return the sum of all amicable numbers\n    return amicable_sum, amicable_numbers\n\n\ndef is_amicable(number):\n    '''\n    Helper function to check if a number is amicable or not.\n    '''\n\n    # Check if the number is divisible by any number from 1 to its square root\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n\n    # If the number is divisible by any number from 1 to its square root, it's not amicable\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    a = 1\n    sum_of_amicable_numbers = 0\n    \n    while a <= limit:\n        b = 1\n        while b <= a:\n            if a!= b and is_amicable(a, b):\n                sum_of_amicable_numbers += a + b\n                break\n            b += 1\n        a += 1\n    \n    return sum_of_amicable_numbers\n\ndef is_amicable(a, b):\n    \"\"\"\n    Check if two numbers are amicable or not.\n    \"\"\"\n    return is_abundant(a) and is_abundant(b)\n\ndef is_abundant(n):\n    \"\"\"\n    Check if a number is abundant or not.\n    \"\"\"\n    abundant_numbers = [12, 22, 32, 42]\n    for abundant_number in abundant_numbers:\n        if n % abundant_number == 0:\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a list of all prime numbers up to the specified limit\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n\n    # Find all pairs of prime numbers that are both amicable to each other\n    pairs = []\n    for i in range(2, limit + 1):\n        if primes[i]:\n            for j in range(2, i):\n                if primes[j] and i + j == 2 * j:\n                    pairs.append((i, j))\n                    pairs.append((j, i))\n\n    # Sum up all amicable pairs\n    result = 0\n    for pair in pairs:\n        result += pair[0] + pair[1]\n\n    return result"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = cmath.phase(a+b*1j)*180/cmath.pi\n    print(\"The angle of the complex number\", a+b*1j, \"in radians is\", angle_rad, \"and in degrees is\", angle_deg)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input, calculates the angle of the complex number, and returns it in radians.\n    '''\n    modulus = cmath.sqrt(a.real**2 + a.imag**2)\n    angle = cmath.phase(a)\n    return angle * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return 0\n    else:\n        angle = cmath.phase(complex(a,b))\n        return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes in two complex numbers as input, a and b, and returns the angle of the complex numbers.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    # Initialize two variables to store the count of 0s and 1s in the first character of the string\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through each character of the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count_1 += 1\n        # If the character is neither a 0 nor a 1, reset the count of 0s and 1s to 0\n        else:\n            count_0 = 0\n            count_1 = 0\n\n    # Initialize the maximum difference between the number of 0s and number of 1s in any sub-string to be 0\n    max_diff = 0\n\n    # Iterate through each substring of the string\n    for i in range(len(string)):\n        # If the length of the substring is 1, continue to the next iteration\n        if i == len(string) - 1:\n            break\n\n        # Initialize two variables to store the count of 0s and 1s in the current substring\n        substring_count_0 = 0\n        substring_count_1 = 0\n\n        # Iterate through each character of the substring\n        for j in range(i, len(string) + 1):\n            # If the character is a 0, increment the count of 0s in the current substring\n            if string[j] == '0':\n                substring_count_0 += 1\n            # If the character is a 1, increment the count of 1s in the current substring\n            elif string[j] == '1':\n                substring_count_1 += 1\n            # If the character is neither a 0 nor a 1, reset the count of 0s and 1s in the current substring to 0\n            else:\n                substring_count_0 = 0\n                substring_count_1 = 0\n\n        # Calculate the difference between the number of 0s and number of 1s in the current substring and the maximum difference found so far\n        diff = abs(substring_count_0 - substring_count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables for the count of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            one_count += 1\n        # If the character is neither a 0 nor a 1, reset the count of 0s and 1s and move on to the next character\n        else:\n            zero_count = 0\n            one_count = 0\n    \n    # If there are no 0s or 1s in the string, return 0\n    if zero_count == 0 and one_count == 0:\n        return 0\n    \n    # Calculate the maximum difference between the count of 0s and 1s\n    max_diff = abs(zero_count - one_count)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    # initialize variables\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    # iterate through each character in the string\n    for char in string:\n        # if the character is a 0, increment the number of zeros\n        if char == '0':\n            zeros += 1\n        # if the character is a 1, increment the number of ones\n        else:\n            ones += 1\n        # calculate the maximum difference between the number of zeros and ones\n        diff = abs(zeros - ones)\n        # update the maximum difference if the current difference is greater than the previous maximum\n        if diff > max_diff:\n            max_diff = diff\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # create a dictionary to store the count of 0s and 1s in each sub-string\n    count_dict = {}\n    \n    # loop through each character in the string\n    for i in range(len(string)):\n        # get the current character\n        c = string[i]\n        \n        # if the character is 0, increment the count of 0s in the current sub-string\n        if c == '0':\n            if i-1 in count_dict:\n                count_dict[i-1]['0'] += 1\n            else:\n                count_dict[i] = {'0': 1}\n        # if the character is 1, increment the count of 1s in the current sub-string\n        else:\n            if i-1 in count_dict:\n                count_dict[i-1]['1'] += 1\n            else:\n                count_dict[i] = {'1': 1}\n                \n    # find the maximum difference between the number of 0s and number of 1s in any sub-string\n    max_diff = 0\n    for i in range(len(string)):\n        if i-1 in count_dict:\n            diff = count_dict[i-1]['0'] - count_dict[i]['1']\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    max_length = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n            count_1 = 0\n        elif string[i] == '1':\n            count_1 += 1\n            count_0 = 0\n        else:\n            continue\n        \n        length = i - count_0 + count_1\n        if length > max_length:\n            max_diff = max(max_diff, length - max_length)\n            max_length = length\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    if string == \"\":\n        return 0\n    length = 1\n    count_0 = 0\n    count_1 = 0\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            length += 1\n            if string[i] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n        else:\n            if length > max_length:\n                max_length = length\n            if string[i] == '0':\n                count_0 = 1\n            else:\n                count_1 = 1\n            length = 1\n    if length > max_length:\n        max_length = length\n    if count_0 > max_count_0:\n        max_count_0 = count_0\n    if count_1 > max_count_1:\n        max_count_1 = count_1\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initialize variables to store number of 0s and 1s in the binary string\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    # loop through each character in the binary string\n    for char in string:\n        # if the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # if the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n        # calculate the difference between the counts of 0s and 1s\n        diff = abs(count_0 - count_1)\n        # update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_0s += 1\n        elif char == '1':\n            count_1s += 1\n        else:\n            raise ValueError(\"Invalid character in the string\")\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a set of common divisors of a and b\n    common_divisors = set(divisors(a)) & set(divisors(b))\n\n    # calculate the sum of common divisors\n    return sum(common_divisors)\n\ndef divisors(n):\n    '''\n    Generate all divisors of a given number using the Sieve of Eratosthenes algorithm.\n    '''\n    # initialize a list of numbers to check for divisibility\n    divisors = [i for i in range(1, n+1)]\n\n    # use the Sieve of Eratosthenes algorithm to generate all divisors\n    for i in range(2, int(n**0.5)+1):\n        if divisors[i-1] == i:\n            # mark all multiples of i as composite\n            for j in range(i*i, n+1, i):\n                divisors[j-1] = 0\n\n    # return a list of divisors\n    return [i for i in divisors if i!= 0]"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # calculate common divisors of a and b\n    common = set(divisors(a)) & set(divisors(b))\n    # find the sum of common divisors\n    result = sum(common)\n    return result\n\ndef divisors(n):\n    \"\"\"\n    Calculate the set of common divisors of a given number.\n    \"\"\"\n    div = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div.add(i)\n            if n//i!= i:\n                div.add(n//i)\n    return div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = [i for i in range(1, b+1) if b % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    # Find all common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Calculate the sum of common divisors\n    total = 0\n    for num in common_divisors:\n        total += num\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    This function takes two numbers as input and returns their sum.\n    It also prints the sum of their common divisors.\n    '''\n    # Finding common divisors of a and b\n    common = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            common.append(i)\n    # Finding the sum of common divisors\n    sum_common = sum(common)\n    print(f\"The sum of common divisors of {a} and {b} is {sum_common}.\")"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    if len(divisors) > 0:\n        return sum(divisors)\n    else:\n        return \"No common divisors found.\""
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # To store the factors of each number\n    factors_a = []\n    factors_b = []\n\n    # Finding the factors of the first number\n    for i in range(1, a+1):\n        if a % i == 0:\n            factors_a.append(i)\n\n    # Finding the factors of the second number\n    for j in range(1, b+1):\n        if b % j == 0:\n            factors_b.append(j)\n\n    # Finding the common factors\n    common_factors = list(set(factors_a) & set(factors_b))\n\n    # Returning the sum of common factors\n    return sum(common_factors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    num = a\n    while num <= b:\n        if a % num == 0 and b % num == 0:\n            divisors.append(num)\n        num += 1\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the GCD of the two numbers\n    gcd = __gcd__(a, b)\n\n    # find the sum of all common divisors of the two numbers\n    sum_of_common_divisors = sum([i for i in range(1, gcd+1) if gcd % i == 0 and a % i == 0 and b % i == 0])\n\n    # return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    print(f\"The product of {x} and {y} is {result}.\")"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes a list of words and an integer n as input and returns a list of words longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): the maximum length of a word to be considered.\n    str (list): a list of words.\n\n    Returns:\n    list: a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the rows and columns\n    row_sum = 0\n    col_sum = 0\n    for i in range(len(my_matrix)):\n        row_sum += my_matrix[i][i]\n        col_sum += my_matrix[i][len(my_matrix)-i-1]\n\n    # Check if the sum is equal to the determinant of the matrix\n    det = 1\n    for i in range(len(my_matrix)):\n        det *= my_matrix[i][i]\n        det *= my_matrix[i][len(my_matrix)-i-1]\n\n    if row_sum == det and col_sum == det:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(set([len(row) for row in my_matrix]))!= 1:\n        return False\n\n    # Check if the matrix is a magic square\n    # Check diagonals (top left to bottom right)\n    if my_matrix[0][0]!= my_matrix[0][1] or my_matrix[0][1]!= my_matrix[0][2]:\n        return False\n    if my_matrix[1][0]!= my_matrix[1][1] or my_matrix[1][1]!= my_matrix[1][2]:\n        return False\n    if my_matrix[2][0]!= my_matrix[2][1] or my_matrix[2][1]!= my_matrix[2][2]:\n        return False\n\n    # Check diagonals (top right to bottom left)\n    if my_matrix[0][2]!= my_matrix[1][1] or my_matrix[1][1]!= my_matrix[2][0]:\n        return False\n    if my_matrix[0][0]!= my_matrix[1][0] or my_matrix[1][0]!= my_matrix[2][2]:\n        return False\n    if my_matrix[0][2]!= my_matrix[1][2] or my_matrix[1][2]!= my_matrix[2][0]:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the input matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the sum of each row, column, and diagonal are equal\n    row_sum = sum(row)\n    col_sum = sum(col)\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if row_sum!= col_sum!= diag_sum:\n        return False\n    \n    # Check if the sum of the diagonal elements is equal to the product of the elements on the main diagonal\n    main_diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if main_diag_sum!= my_matrix[0][0] * my_matrix[1][1] * my_matrix[2][2]:\n        return False\n    \n    # Check if the matrix contains all unique elements\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n    \n    # All tests passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row_sum = [0] * n\n    col_sum = [0] * n\n    \n    # Calculate row and column sums\n    for i in range(n):\n        for j in range(n):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n    \n    # Check for diagonal sum\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += my_matrix[i][i]\n    \n    # Check for magic square\n    if row_sum == col_sum == diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is 3x3\n    if len(my_matrix)!= 3 or not all(len(row) == 3 for row in my_matrix):\n        return \"Error: The matrix must be 3x3\"\n    \n    # Calculate the sum of the diagonals\n    diagonal_sum = sum(my_matrix[i][i] for i in range(3))\n    \n    # Check if the sum of the diagonals is equal to the sum of the rest of the matrix\n    if diagonal_sum!= sum(sum(row) for row in my_matrix):\n        return \"Error: The matrix is not a magic square\"\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        for j in range(3):\n            # Check if the current element is equal to the sum of its row and column indices\n            if my_matrix[i][j]!= i + j:\n                return \"Error: The matrix is not a magic square\"\n    \n    return \"The matrix is a magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    sum_of_diagonal = sum(my_matrix[i][i] for i in range(n))\n    sum_of_antidiagonal = sum(my_matrix[i][n-i-1] for i in range(n))\n    if sum_of_diagonal == sum_of_antidiagonal:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and checks if it is a magic square or not.\n    A magic square is a square where the sum of the diagonal elements is equal to the sum of the other elements.\n    '''\n    \n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Calculate the sum of the other elements of the matrix\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    \n    # Check if the diagonal sum and the row sum are equal to each other and the column sum is equal to the diagonal sum\n    if diagonal_sum == row_sum[0] == col_sum[0]:\n        return True\n    elif diagonal_sum == row_sum[1] == col_sum[1]:\n        return True\n    elif diagonal_sum == row_sum[2] == col_sum[2]:\n        return True\n    elif diagonal_sum == col_sum[0] == row_sum[1] == col_sum[2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check for duplicates in each row and column\n    for i in range(len(my_matrix)):\n        if len(set(my_matrix[i]))!= len(my_matrix[i]):\n            return False\n    \n    # Check for duplicates in each diagonal\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the diagonal sum is equal to the product of the matrix size\n    if diagonal_sum == (len(my_matrix) ** 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    n = len(my_matrix)\n    if n**2!= sum(map(sum, my_matrix)):\n        return False\n    \n    # Check if each row, column, and main diagonal are magic squares\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        if row_sum!= col_sum:\n            return False\n        if i < n-1 and my_matrix[i][i]!= my_matrix[i+1][i]:\n            return False\n        if i > 0 and my_matrix[i][n-i-1]!= my_matrix[i-1][n-i]:\n            return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    \n    for num in freq:\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq.values())\n    for num in freq:\n        if freq[num] == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)  # use a defaultdict to count the occurrences of each item\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_count:\n            max_count = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = Counter(nums)\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Use a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, freq in freq.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Given a list of integers, return the item with the maximum frequency.\n    \"\"\"\n    # Count the frequency of each item in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    # Find the item with the maximum frequency\n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_num = None\n    max_count = 0\n\n    for num in nums:\n        frequency[num] += 1\n\n        if frequency[num] > max_count:\n            max_num = num\n            max_count = frequency[num]\n\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # set of vowels\n    result = []\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in string:\n        if char in vowels and char not in result:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_reverse = ''\n    \n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            vowel_reverse += str1[i]\n            \n    return vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.extend(['A', 'E', 'I', 'O', 'U'])\n    vowels.sort()\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str1 = str1.lower()\n    reversed_str = []\n    for char in str1:\n        if char not in vowels:\n            reversed_str.append(char)\n    reversed_str = ''.join(reversed_str)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    reversed_str = ''\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    for i in range(len(vowel_indices)-1, -1, -1):\n        reversed_str += str1[vowel_indices[i]]\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ','.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n    - tup1: a tuple of values\n\n    Returns:\n    - str: a string representation of the tuple\n    \"\"\"\n    return ', '.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for i in tup1:\n        string += str(i) + \", \"\n    return string[:-2] # remove the extra comma and space from the end of the string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"The input number must be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 6 * (n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        hex_num = 1\n        for i in range(1, n+1):\n            hex_num += 2 * (n - i)\n        return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the variables\n    total = 1\n    counter = 1\n    # Loop through the number of iterations\n    for i in range(n):\n        # Calculate the next hexagonal number\n        next_hex = total + 2 * counter\n        # Update the variables\n        total = next_hex\n        counter += 1\n    # Return the final result\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize variables\n    prev = 0\n    curr = 1\n    next = 0\n\n    # Calculate and return the nth hexagonal number\n    for i in range(n):\n        # Calculate the next hexagonal number\n        next = curr + prev\n\n        # Update the variables for the next iteration\n        prev = curr\n        curr = next\n\n    return next"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    c = 15\n    for i in range(n): \n        print(a, end=\" \") \n        a, b, c = b, c, 2*a + b - c "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    \n    # Calculate and return the nth hexagonal number\n    for i in range(n):\n        a, b = b, 3*a + b\n    \n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n    zero_count = (len(zeros) / len(nums))\n    non_zero_count = (len(non_zeros) / len(nums))\n    return zero_count, non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)  # convert the list to an array of integers\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        count.append(num)\n    zero_count = count.count(0)\n    non_zero_count = len(nums) - zero_count\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    zero_non_zero_ratio = zero_count / non_zero_count\n    return zero_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns a tuple containing\n    the count of zeroes and the count of non-zeroes.\n    '''\n    zero_count = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    zero_count = sum(zero_count)\n    non_zero_count = len(nums) - zero_count\n    return (zero_count, non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    \n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zeros == 0:\n        ratio = 0\n    else:\n        ratio = zeros / non_zeros\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Use array to store integers in the list\n    arr = array('i', nums)\n\n    # Find the sum of all non-zero integers in the array\n    non_zero_sum = sum(x for x in arr if x!= 0)\n\n    # Find the number of non-zero integers in the array\n    non_zero_count = sum(x!= 0 for x in arr)\n\n    # Calculate the ratio of non-zero integers to total integers\n    ratio = non_zero_count / non_zero_sum\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    ratio = 0.0\n    if non_zero_count!= 0:\n        ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_non_zero = 0\n    for num in nums:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n    return num_zero / num_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:\n        return None\n    \n    zeroes = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeroes[zeroes.index(0)] += 1\n    \n    non_zero_count = len(nums) - sum(zeroes)\n    return zeroes[zeroes.index(max(zeroes))] / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def power_of_two(x):\n        return 1 if x == 0 else 2 ** (x - 1)\n    \n    # check if n is a power of 2\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2 or n == power_of_two(2):\n        return True\n    \n    # check if n is a sum of powers of 2\n    for i in range(3, int(n ** 0.5) + 1):\n        if n == power_of_two(i) + power_of_two(n - power_of_two(i)):\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the number is even\n    if n % 2 == 0:\n        return False\n\n    # check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # check if the number is divisible by 5\n    if n % 5 == 0:\n        return True\n\n    # check if the number is divisible by 7\n    if n % 7 == 0:\n        return True\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n\n    # check if the number is divisible by 13\n    if n % 13 == 0:\n        return True\n\n    # check if the number is divisible by 17\n    if n % 17 == 0:\n        return True\n\n    # check if the number is divisible by 19\n    if n % 19 == 0:\n        return True\n\n    # check if the number is divisible by 23\n    if n % 23 == 0:\n        return True\n\n    # check if the number is divisible by 29\n    if n % 29 == 0:\n        return True\n\n    # check if the number is divisible by 31\n    if n % 31 == 0:\n        return True\n\n    # check if the number is divisible by 37\n    if n % 37 == 0:\n        return True\n\n    # check if the number is divisible by 41\n    if n % 41 == 0:\n        return True\n\n    # check if the number is divisible by 43\n    if n % 43 == 0:\n        return True\n\n    # check if the number is divisible by 47\n    if n % 47 == 0:\n        return True\n\n    # check if the number is divisible by 53\n    if n % 53 == 0:\n        return True\n\n    # check if the number is divisible by 59\n    if n % 59 == 0:\n        return True\n\n    # check if the number is divisible by 61\n    if n % 61 == 0:\n        return True\n\n    # check if the number is divisible by 67\n    if n % 67 == 0:\n        return True\n\n    # check if the number is divisible by 71\n    if n % 71 == 0:\n        return True\n\n    # check if the number is divisible by 73\n    if n % 73 == 0:\n        return True\n\n    # check if the number is divisible by 79\n    if n % 79 == 0:\n        return True\n\n    # check if the number is divisible by 83\n    if n % 83 == 0:\n        return True\n\n    # check if the number is divisible by 89\n    if n % 89 == 0:\n        return True\n\n    # check if the number is divisible by 97\n    if n % 97 == 0:\n        return True\n\n    # check if the number is divisible by 101\n    if n % 101 == 0:\n        return True\n\n    # check if the number is divisible by 103\n    if n % 103 == 0:\n        return True\n\n    # check if the number is divisible by 107\n    if n % 107 == 0:\n        return True\n\n    # check if the number is divisible by 109\n    if n % 109 == 0:\n        return True\n\n    # check if the number is divisible by 113\n    if n % 113 == 0:\n        return True\n\n    # check if the number is divisible by 127\n    if n % 127 == 0:\n        return True\n\n    # check if the number is divisible by 131\n    if n % 131 == 0:\n        return True\n\n    # check if the number is divisible by 137\n    if n % 137 == 0:\n        return True\n\n    # check if the number is divisible by 139\n    if n % 139 == 0:\n        return True\n\n    # check if the number is divisible by 149\n    if n % 149 == 0:\n        return True\n\n    # check if the number is divisible"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if the number is a power of 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    \n    # loop through odd numbers from 3 to n/2 and check if they can be represented as a sum of powers of 2\n    for i in range(3, n//2+1, 2):\n        # check if i^2 can be represented as a sum of powers of 2\n        if n - i**2 == 0:\n            return True\n        # check if i^2 - n can be represented as a sum of powers of 2\n        elif n - i**2 == i**2:\n            return True\n    \n    # if no odd numbers can be represented as a sum of powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 0:\n        n = abs(n)\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i * i == n:\n                return True\n            elif i * i < n:\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            power = 0\n            while n % i == 0:\n                power += 1\n                n //= i\n            if power % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the given number is a power of 2\n    if n == 1 or n == 2:\n        return True\n    \n    # iterate over all possible powers of 2\n    for i in range(2, n+1):\n        # check if the given number can be represented as sum of non-zero powers of 2\n        if (n - i) % i == 0:\n            return True\n        \n    # if no such combination was found, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    if n == 1:\n        return True\n\n    power = 1\n    while power * power <= n:\n        if n % power == 0:\n            return True\n        power += 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert number to binary string\n    binary_str = bin(n)[2:]\n    # Check for zero length binary string\n    if len(binary_str) == 0:\n        return False\n    # Calculate the power of 2 for each binary digit\n    power_of_two = 1\n    for digit in binary_str:\n        if digit == '1':\n            power_of_two *= 2\n        else:\n            power_of_two = 1\n            break\n    # Calculate the sum of all powers of 2\n    sum_of_powers = 0\n    while power_of_two > 0:\n        sum_of_powers += power_of_two\n        power_of_two = power_of_two // 2\n    # Check if the number is equal to the sum of powers of 2\n    return n == sum_of_powers"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # If n is not a power of 2, then check if it can be represented as sum of non-zero powers of 2\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return is_Sum_Of_Powers_Of_Two(n//i)\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_2 = 0\n    \n    # Loop through all the digits of the number\n    for digit in str(n):\n        # If the digit is not 0, add it to the sum of powers of 2\n        if digit!= '0':\n            sum_of_powers_of_2 += 2**int(digit)\n    \n    # Check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers_of_2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flattened_list.append(num)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def pancake_sort_helper(arr):\n        n = len(arr)\n\n        for i in range(n-1, 0, -1):\n            heapify(arr, n, i)\n\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n    pancake_sort_helper(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i+1\n\n    def quicksort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quicksort(arr, low, pi-1)\n            quicksort(arr, pi+1, high)\n\n    quicksort(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def _pancake_sort(nums, k):\n        if k == 1:\n            return nums[0], nums[k-1]\n        pivot = nums[k-1]\n        left = nums[:k-1]\n        right = nums[k:]\n        left_sorted = _pancake_sort(left, k-1)\n        right_sorted = _pancake_sort(right, len(nums)-k)\n        return left_sorted + [pivot] + right_sorted\n\n    return _pancake_sort(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    \n    def sort_one_pass(nums):\n        \"\"\"\n        Sorts a list of elements using the pancake sort algorithm.\n        \"\"\"\n        \n        def heapify(arr, n, i):\n            \"\"\"\n            Heapifies the subtree rooted at index i of the array arr.\n            \"\"\"\n            \n            largest = i\n            l = 2*i + 1\n            r = 2*i + 2\n            \n            if l < n and arr[l] > arr[largest]:\n                largest = l\n                \n            if r < n and arr[r] > arr[largest]:\n                largest = r\n                \n            if largest!= i:\n                arr[i], arr[largest] = arr[largest], arr[i]\n                heapify(arr, n, largest)\n        \n        n = len(arr)\n        for i in range(n//2-1, -1, -1):\n            heapify(arr, n, i)\n        \n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n        \n        return arr\n    \n    sorted_nums = sort_one_pass(nums)\n    \n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # find the largest element in the first i elements\n        largest = nums[i-1]\n        for j in range(i):\n            if nums[j] > largest:\n                largest = nums[j]\n        # swap the largest element with the i-th element\n        nums[i-1], nums[largest_index] = nums[largest_index], nums[i-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all elements\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the remaining elements\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the element at the beginning of the sub-array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def heapify(nums, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and nums[left] > nums[largest]:\n            largest = left\n\n        if right < n and nums[right] > nums[largest]:\n            largest = right\n\n        if largest!= i:\n            swap(nums, i, largest)\n            heapify(nums, n, largest)\n\n    def build_max_heap(nums):\n        n = len(nums)\n\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(nums, n, i)\n\n    def sort_helper(nums, n):\n        build_max_heap(nums)\n        i = n - 1\n\n        while i >= 0:\n            swap(nums, i, 0)\n            heapify(nums, i, 0)\n            i -= 1\n\n        return nums\n\n    return sort_helper(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # using a nested loop, we iterate through the list and swap the elements\n    for i in range(n-1):\n        # we swap the first element with the last element\n        # we swap the second element with the second to last element\n        # and so on until we have swapped the first element with the nth-1 element\n        for j in range(i, n-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number items that are identical in the same position of three given lists.\n    '''\n\n    # Initialize counter\n    count = 0\n\n    # Loop through each element in the lists\n    for i in range(len(list1)):\n        # If the elements at the same position are identical\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            # Increment the counter\n            count += 1\n\n    # Return the counter\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Initialize a dictionary to store the count of identical items in the same position\n    count_dict = {}\n    # Loop through each list and count the identical items\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                if list3[i] == list2[j]:\n                    count_dict[(i, j)] = count_dict.get((i, j), 0) + 1\n    # Return the total count of identical items in the same position of the three given lists\n    return sum(count_dict.values())"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n\n    for i in Input:\n        if type(i) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists in it.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)): \n        temp_diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, temp_diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') # initialize max_diff to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize maximum difference to be the difference between the first and second elements\n    max_diff = abs(arr[1] - arr[0])\n\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Find the absolute difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n        # If the absolute difference is greater than the current maximum difference, update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference between any two elements in the array\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a or b is zero, which means there is no solution\n    if a == 0 or b == 0:\n        return None\n\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * n\n\n    # If discriminant is less than zero, there is no solution\n    if discriminant < 0:\n        return None\n\n    # Calculate the roots\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n\n    # Check if both roots are integers\n    if int(root1) ** 2 + int(root2) ** 2!= n:\n        return None\n\n    # Return the solution as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        x = (-n + b**0.5) / a\n        y = (-n - b**0.5) / a\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = a * b - n\n    if d == 0:\n        return (int(-b / a), int(-b / a))\n    else:\n        x1 = (b + d) / (a * 2)\n        x2 = (b - d) / (a * 2)\n        y1 = (-x1 - b) / a\n        y2 = (-x2 - b) / a\n        return (int(x1), int(y1), int(x2), int(y2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Compute the discriminant\n    d = b**2 - 4*a*n\n    \n    # If the discriminant is non-positive, there is no real solution\n    if d < 0:\n        return None\n    \n    # If the discriminant is zero, there is one real solution x\n    if d == 0:\n        return ((-b) // (2*a),)\n    \n    # Otherwise, there are two real solutions x and y, with x < y\n    return ((-b + d**0.5) // (2*a), (-b - d**0.5) // (2*a))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if a*x + b*n == n:\n            return (x, n/x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the input is valid\n    if a == 0 or b == 0:\n        return None\n\n    # Initialize the variables for x and y\n    x = 0\n    y = 0\n\n    # Calculate the value of y\n    y = (n - a * x) // b\n\n    # Check if the equation is valid\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the quadratic formula\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    \n    # compute the roots of the quadratic formula\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # check if the roots are integers\n    if not (x1.is_integer() and x2.is_integer()):\n        return None\n    \n    # return the solution as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            if n % 2 == 0:\n                return (n // 2, n // 2)\n            else:\n                return (n // 2 + 1, n // 2)\n        else:\n            return None\n    else:\n        d = b**2 - 4*a*n\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5)/(2*a)\n            x2 = (-b - d**0.5)/(2*a)\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 or b == 0:\n        return None\n    x = (n - b) // a\n    y = (n - a * x) // b\n    if x >= 0 and y >= 0:\n        return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x1 = (-b + n // a) // a\n        x2 = (-b - n // a) // a\n        y1 = x1 // b\n        y2 = x2 // b\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set of elements in list2 to check against list1\n    set2 = set(list2)\n    # Create a new list to store the elements not in list2\n    result = []\n    # Loop through each element in list1\n    for element in list1:\n        # If the element is not in set2, add it to the result list\n        if element not in set2:\n            result.append(element)\n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set from list2 to remove duplicates\n    set2 = set(list2)\n\n    # Iterate through list1 and remove elements that are present in set2\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the first list and remove any elements that are present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    while i <= n // 2:\n        sum += (n - 2*i)\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        print(\"Sorry, the function is not suitable for even values of n.\")\n        return None\n    \n    sum_lst = []\n    i = 0\n    while i < n // 2:\n        sum_lst.append(n - 2 * i)\n        i += 1\n        \n    return sum(sum_lst)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n    sum_val = n\n    i = 0\n    while n - 2*i >= 0:\n        sum_val += (n - 2*i)\n        i += 1\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += (n - 2 * i)\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += (s*tan(angle))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the angle of the polygon in radians\n    angle = 2 * pi / l\n    \n    # calculate the area of the polygon\n    area = 0.5 * s * (tan(angle) ** 2)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    # Calculate the length of a side of the polygon\n    side_length = s / l\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (1 / 2) * s * l * math.tan(math.pi / l)\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s/2) * (l**2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s/tan(pi/l)\n        area += r\n    area *= s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0\n    angle = 360 / l\n    \n    for i in range(l):\n        angle_radian = (i * angle * pi) / 180\n        side = s * tan(angle_radian)\n        area += side\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l)) / (2 * math.tan(math.pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter\n    sp = (s * (l-2)) / l\n    \n    # Calculate the area of the polygon using the formula for a regular polygon\n    area = 0.5 * s * tan(pi / l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    p = s * tan(pi/l)\n\n    # Calculate the area of the polygon\n    area = (p * (l+1)) / 2\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n using trial division\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_div += i + n//i\n    \n    # Check if the sum of the divisors of n and its square root are the same\n    if sum_div == n**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if n // i!= i:\n                divisor_sum += n // i\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n    for i in range(int(math.sqrt(n))+1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    div_sum = sum(divisors)\n    return div_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(range(1, int(math.sqrt(n)) + 1))\n    # check if the sum of the divisors of n is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = 0\n    div2 = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1 += i\n            if n // i!= i:\n                div2 += n // i\n    if div1 == n:\n        return True\n    elif div2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisor_sum = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisor_sum += i\n        i += 1\n    if divisor_sum == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n using list comprehension\n    div_sum = sum([i for i in range(1, int(n**0.5)+1) if n % i == 0])\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of {} is equal to {}\".format(n, div_sum))\n    else:\n        print(\"The sum of the divisors of {} is not equal to {}\".format(n, div_sum))\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # Check if the sum of the divisors of n is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                divisors.append(num // i)\n        return divisors\n\n    def sum_of_integers(num):\n        return sum(range(1, num + 1))\n\n    div1 = sum_of_divisors(n)\n    div2 = sum_of_divisors(sum_of_integers(n))\n\n    return div1 == div2"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str2[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(65 + i)] = 0\n        \n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n            \n    result = 0\n    for count in count_dict.values():\n        result += count\n        \n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str1 = str1.lower()\n    for char in str1:\n        if char in english_alphabet:\n            index = english_alphabet.index(char)\n            if index == len(str1) - 1:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n    \n    # count the frequency of characters in the string\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count_dict[char] = count_dict.get(char, 0) + 1\n            \n    # count the frequency of characters at the same position in the English alphabet\n    count = 0\n    for char in english_alphabet:\n        if char in count_dict:\n            count += count_dict[char]\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a list of all the lowercase English alphabet characters\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # Initialize a counter for each character in the alphabet\n    char_count = [0] * 26\n\n    # Iterate through the input string\n    for char in str1.lower():\n        # Check if the character is in the alphabet\n        if char in alphabet:\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Increment the counter at that index\n            char_count[index] += 1\n\n    # Calculate the total count of characters that occur at the same position in the string as in the alphabet\n    total_count = sum(char_count)\n\n    # Print the result\n    print(\"The total count of characters that occur at the same position in the string as in the English alphabet is:\", total_count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize an empty dictionary to store the character counts\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        \n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Initialize an empty dictionary to store the letter positions\n    letter_positions = {}\n    \n    # Iterate over each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        \n        # If the character has a count greater than 0, add it to the dictionary with the position of the letter\n        if chr(i) in char_count and char_count[chr(i)] > 0:\n            if chr(i) in letter_positions:\n                letter_positions[chr(i)] += char_count[chr(i)]\n            else:\n                letter_positions[chr(i)] = char_count[chr(i)]\n    \n    # Initialize a counter to keep track of the total number of matches\n    match_count = 0\n    \n    # Iterate over each character in the string\n    for char in str1:\n        \n        # If the character is a letter and it occurs at the same position in the string as the letter in the English alphabet, increment the counter\n        if char.isalpha() and char in letter_positions and letter_positions[char] == i-ord('a'):\n            match_count += 1\n    \n    return match_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if alphabet[i].lower() in str1.lower():\n            count += str1.lower().count(alphabet[i].lower())\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a list of English alphabets (case insensitive)\n    english_alphabets = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    # Initialize a dictionary to store the count of characters at the same position in the English alphabet\n    char_count = {}\n    \n    # Loop through the characters in the string\n    for char in str1:\n        # Convert the character to lowercase (case insensitive)\n        char = char.lower()\n        \n        # Check if the character is present in the list of English alphabets\n        if char in english_alphabets:\n            # If it is, add it to the dictionary with a count of 1\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of each character in the alphabet\n    char_count = {}\n    \n    # Loop through the string\n    for char in str1:\n        # If the character is in the alphabet, increment its count in the dictionary\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            # Otherwise, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # Initialize a variable to store the total count of characters\n    total_count = 0\n    \n    # Loop through the dictionary and add up the counts of characters that occur at the same position in the string as in the English alphabet\n    for i in range(26):\n        if i in char_count:\n            total_count += char_count[i]\n    \n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            \n            if xor_sum == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    This function takes a list A and returns the number of pairs of integers in the list that xor to an even number.\n    '''\n\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use binary exponentiation to find the next power of 2\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # find the binary representation of n\n    binary_representation = bin(n)[2:]\n\n    # count the number of 1's in the binary representation\n    count = binary_representation.count('1')\n\n    # if n is already a power of 2, return n\n    if 2 ** count == n:\n        return n\n\n    # if n is not a power of 2, return the smallest power of 2 greater than or equal to n\n    else:\n        return 2 ** count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n-1): \n        n = n | (n-1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n & (n - 1) == 0:\n        return n * 2\n    else:\n        return 2 * next_power_of_2(n - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes a positive integer n as input and returns the smallest power of 2 greater than or equal to n.\n\n    For example:\n    next_power_of_2(4) -> 8\n    next_power_of_2(1024) -> 1024\n    '''\n    # Check if n is 0 or 1\n    if n <= 1:\n        return n\n    \n    # Find the index of the last set bit (MSB) in binary representation of n\n    i = 0\n    while n % 2 == 0:\n        n //= 2\n        i += 1\n    \n    # Calculate the next power of 2 to the power of i\n    return 2**i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return 1 << n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # loop until we find the first power of 2 greater than or equal to n\n    while n & (n-1)!= 0:\n        n = n | (n & -n)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use the binary search algorithm to find the smallest power of 2 greater than or equal to n\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return 1 << left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 16\n    elif n == 8:\n        return 32\n    elif n == 9:\n        return 32\n    elif n == 10:\n        return 64\n    elif n == 11:\n        return 64\n    elif n == 12:\n        return 128\n    elif n == 13:\n        return 128\n    elif n == 14:\n        return 256\n    elif n == 15:\n        return 256\n    elif n == 16:\n        return 512\n    elif n == 17:\n        return 512\n    elif n == 18:\n        return 1024\n    elif n == 19:\n        return 1024\n    elif n == 20:\n        return 2048\n    elif n == 21:\n        return 2048\n    elif n == 22:\n        return 4096\n    elif n == 23:\n        return 4096\n    elif n == 24:\n        return 8192\n    elif n == 25:\n        return 8192\n    elif n == 26:\n        return 16384\n    elif n == 27:\n        return 16384\n    elif n == 28:\n        return 32768\n    elif n == 29:\n        return 32768\n    elif n == 30:\n        return 65536\n    elif n == 31:\n        return 65536\n    elif n == 32:\n        return 131072\n    elif n == 33:\n        return 131072\n    elif n == 34:\n        return 262144\n    elif n == 35:\n        return 262144\n    elif n == 36:\n        return 524288\n    elif n == 37:\n        return 524288\n    elif n == 38:\n        return 1048576\n    elif n == 39:\n        return 1048576\n    elif n == 40:\n        return 2097152\n    elif n == 41:\n        return 2097152\n    elif n == 42:\n        return 4194304\n    elif n == 43:\n        return 4194304\n    elif n == 44:\n        return 8388608\n    elif n == 45:\n        return 8388608\n    elif n == 46:\n        return 16777216\n    elif n == 47:\n        return 16777216\n    elif n == 48:\n        return 33554432\n    elif n == 49:\n        return 33554432\n    elif n == 50:\n        return 67108864\n    elif n == 51:\n        return 67108864\n    elif n == 52:\n        return 134217728\n    elif n == 53:\n        return 134217728\n    elif n == 54:\n        return 268435456\n    elif n == 55:\n        return 268435456\n    elif n == 56:\n        return 536870912\n    elif n == 57:\n        return 536870912\n    elif n == 58:\n        return 1073741824\n    elif n == 59:\n        return 107374182"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize result as the input number itself\n    result = n\n    \n    # Perform bitwise AND operations until the result is less than 2\n    while result >= 2:\n        result = result & (result - 1)\n    \n    # Return the result (which is the smallest power of 2 greater than or equal to n)\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    freq = {}\n    for i in a:\n        if i == x:\n            freq[x] = freq.get(x, 0) + 1\n    return freq"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x): \n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if input indices are within range of the list\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        raise ValueError(\"Indices out of range.\")\n    # initialize the sum to zero\n    total = 0\n    # iterate over the list using indices m and n (inclusive)\n    for i in range(m, n+1):\n        total += list1[i]\n    # return the total sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable\n    sum = 0\n    # iterate over the list from the first index to the second index\n    for i in range(m, n+1):\n        # add the current element to the sum variable\n        sum += list1[i-1]\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Use list comprehension to create a new list with numbers in the specified range\n    new_list = [num for num in list1 if m <= num <= n]\n    # Use the sum() function to find the sum of the new list\n    return sum(new_list)\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # check if the indices are valid\n    if m < 0 or m > len(list1) or n < 0 or n > len(list1):\n        return \"Invalid indices\"\n\n    # initialize the sum variable\n    sum_val = 0\n\n    # iterate through the list from index m to index n\n    for i in range(m, n+1):\n        sum_val += list1[i]\n\n    # return the sum value\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (a + math.sqrt(3) * a**2) / 2 # Using the Heron's formula for the perimeter of a regular pentagon\n    return math.ceil(s)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the base of the pentagon\n    base = 5 * a / 4\n    \n    # Calculate the perimeter using Heron's formula\n    perimeter = 5 * (a**2 + base**2) ** 0.5\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of the pentagon using Heron's formula\n    s = (5*a**2 + 5*a + 5) / 2\n    perimeter = math.sqrt(s) * 2\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    s = (5 * a) / 4\n    \n    # Calculate the area of the pentagon using Heron's formula\n    area = (5 * s * s) / (24 * math.tan(math.pi / 5))\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * s\n    \n    # Return the calculated values\n    return area, perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the side of the pentagon\n    side = 2 * a\n    # Use the formula for the perimeter of a polygon to find the perimeter of the pentagon\n    perimeter = 5 * side\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the tuple is empty\n    if not test_tuple:\n        return True\n\n    # get the first element in the tuple\n    first_elem = type(test_tuple[0])\n\n    # check if all the elements have the same data type\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Use a set to get the unique data types in the tuple\n    unique_data_types = set(type(t) for t in test_tuple)\n    \n    # Check if there is only one data type in the set\n    if len(unique_data_types) == 1:\n        # If there is only one data type in the set, return True\n        return True\n    else:\n        # If there are more than one data types in the set, return False\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for i in test_tuple:\n        types.append(type(i))\n    return all(t == types[0] for t in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_elem = test_tuple[0]\n    # iterate over the tuple and check if all elements have the same data type as the first element\n    for elem in test_tuple:\n        if not isinstance(elem, type(first_elem)):\n            return False\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # get the first element's data type\n    for element in test_tuple:\n        if type(element)!= data_type: # check if element's data type is different from the first element's data type\n            return False # if not, return False\n    return True # if all elements have the same data type, return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n        print(\"All elements in the tuple have same data type.\")\n    else:\n        print(\"All elements in the tuple have different data types.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to keep track of the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # loop through all the elements in the tuple\n    for element in test_tuple:\n        # check if the current element has a different data type than the first one\n        if type(element)!= data_type:\n            # if any element has a different data type than the first one, return False\n            return False\n    # if all elements have the same data type as the first one, return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize variables for counting occurrences of x\n    count_x = 0\n    count_other = 0\n    \n    # Iterate over the array\n    for i in range(n):\n        if arr[i] == x:\n            count_x += 1\n        else:\n            count_other += 1\n            \n    # Calculate the percentage of x\n    percentage_x = count_x / n\n    \n    # Check if x is the majority element\n    if percentage_x > 0.5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n//2:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count of x to 0\n    count = 0\n    \n    # Traverse through array\n    for i in range(n):\n        # If current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n        \n        # If count becomes equal to n/2, return True\n        if count == n//2:\n            return True\n    \n    # If count does not become equal to n/2, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the number of set bits in n.\n    A set bit is a binary digit with a value of 1.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in that number.\n    A set bit is a binary digit with a value of 1.\n    '''\n    count = 0\n    while n > 0: \n        n &= (n - 1) # Clears the rightmost set bit\n        count += n & 1 # Counts the number of set bits in the current binary digit\n        n >>= 1 # Shifts the rightmost binary digit one position to the left\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Remove odd index characters from a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2!= 0:\n            result += s[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(string):\n    # create an empty list to store the characters\n    result = []\n    # loop through each character in the string\n    for char in string:\n        # if the index value of the character is odd, append it to the result list\n        if len(result) % 2!= 0:\n            result.append(char)\n    # join the characters in the result list into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    # initialize an empty string to hold the odd-indexed characters\n    odd_indexed_chars = ''\n    # iterate through each character in the given string\n    for char in str:\n        # if the index of the character is odd, append it to the odd_indexed_chars string\n        if str.index(char) % 2!= 0:\n            odd_indexed_chars += char\n    # return the odd-indexed characters as a new string\n    return odd_indexed_chars"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with all the odd-indexed characters removed.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i in range(len(str)) if i % 2 == 1]\n    return \"\".join([str[i] for i in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create an empty string to store the odd indexed characters\n    odd_indexed_str = \"\"\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the index is odd, add it to the odd_indexed_str\n        if i % 2 == 1:\n            odd_indexed_str += str[i]\n    # Return the modified string\n    return odd_indexed_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # loop through each character in the string\n    for char in str:\n        # if the index is odd, add it to the new string\n        if char!= str[int(len(str)/2)]:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i).count('1') < 2**n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to binary string\n    binary_n = bin(n)[2:]\n    # Initialize count variable to store count of set bits\n    count = 0\n    # Loop through all the bits in the binary string\n    for bit in binary_n:\n        # If the bit is 1, increment the count\n        if bit == '1':\n            count += 1\n        # If the count exceeds the range, return False\n        if count > r - l + 1:\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & i).count('1')!= len(bin(n & i)):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0 and r == 0:\n        return True\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 1:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r) and (l & (1 << r)) == 0\n    else:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r) and (r & (1 << l)) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Loop through the range\n    for i in range(l, r + 1):\n        # XOR the bits of n with i and check if the result is 0\n        count += n ^ i\n        # If the count is greater than 0, the bits are unset in the given range\n        if count > 0:\n            return False\n    # If no bits are unset, the function returns True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    unset_bits = n ^ (l | r)\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    # check if the bits set in the leftmost bit of n are unset in the given range\n    if n & (1 << l):\n        return False\n    return all_Bits_Set_In_The_Given_Range(n >> 1, l+1, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0:\n        return n & (1 << r) == 0\n    else:\n        return n & (1 << r) == 0 and all_Bits_Set_In_The_Given_Range(n & (n-1), l-1, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check whether all the bits are unset in the given range or not, we need to check whether all the bits are set in the range n&(2^i) for all i in range(l,r+1)\n    for i in range(l, r+1):\n        if n & (1 << i)!= (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check if n is a power of 2\n    if n & (n - 1)!= 0:\n        return False\n\n    # Initialize variables\n    bit_mask = (1 << n) - 1\n\n    # Loop through the range and check if all the bits are unset\n    for i in range(l, r + 1):\n        if (bit_mask & i)!= 0:\n            return False\n\n    # If all the bits are unset, return True\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            pos.insert(0, arr[i])\n        else:\n            neg.insert(0, arr[i])\n    \n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Helper function to swap elements of the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to find the minimum element in the array\n    def find_min(arr, i, j):\n        min_val = arr[i]\n        for k in range(i+1, j+1):\n            if arr[k] < min_val:\n                min_val = arr[k]\n        return min_val\n\n    # Helper function to find the minimum element between i and j\n    def find_min_between(arr, i, j):\n        min_val = arr[i]\n        min_pos = i\n        for k in range(i+1, j):\n            if arr[k] < min_val:\n                min_val = arr[k]\n                min_pos = k\n        return min_val, min_pos\n\n    # Traverse the array in reverse order\n    for i in range(n-2, -1, -1):\n        # Find the first non-negative element after i\n        j = i+1\n        while j < n and arr[j] < 0:\n            j += 1\n\n        # If no such element exists, then the array is already sorted\n        if j == n:\n            continue\n\n        # Find the first non-negative element before j\n        k = j-1\n        while k >= i and arr[k] >= 0:\n            k -= 1\n\n        # Swap the first non-negative element after i with the minimum element between i and j\n        if k < i:\n            swap(arr, i, k)\n            continue\n\n        # Swap the first non-negative element before j with the minimum element between i and j\n        min_val, min_pos = find_min_between(arr, i, j)\n        if min_val!= arr[i]:\n            swap(arr, i, min_pos)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists for negative and positive elements\n    negative_elements = []\n    positive_elements = []\n    \n    # Loop through the array and add elements to the appropriate lists\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n    \n    # Loop through the negative elements and add them to the front of the positive elements\n    for element in negative_elements:\n        positive_elements.insert(0, element)\n    \n    # Return the re-arranged array\n    return positive_elements[:n] + negative_elements[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two empty lists to store negative and positive elements respectively\n    negative_list = []\n    positive_list = []\n\n    # Loop through the given array\n    for element in arr:\n\n        # If the element is positive, add it to the positive_list\n        if element > 0:\n            positive_list.append(element)\n\n        # If the element is negative, add it to the negative_list\n        elif element < 0:\n            negative_list.append(element)\n\n    # Combine the two lists into one and shuffle it using the Fisher-Yates shuffle algorithm\n    combined_list = negative_list + positive_list\n    for i in range(len(combined_list)):\n        j = i + randint(0, len(combined_list) - 1)\n        combined_list[i], combined_list[j] = combined_list[j], combined_list[i]\n\n    # Extract the first n elements of the combined list\n    first_n_elements = combined_list[:n]\n\n    # Print the first n elements of the combined list\n    print(\"Rearranged array:\", first_n_elements)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables for negative and positive elements\n    negative = []\n    positive = []\n    \n    # Separate negative and positive elements from the array\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Reverse the order of negative elements and add them to the end of the positive list\n    negative.reverse()\n    for i in range(len(negative)):\n        positive.append(negative[i])\n    \n    # Reverse the order of the positive elements and add them to the end of the negative list\n    positive.reverse()\n    negative.extend(positive)\n    \n    # Convert the negative list to a string and join it with the positive list\n    result = ''.join(map(str, negative)) + ''.join(map(str, positive))\n    \n    # Convert the result to a list of integers and return it\n    return list(map(int, result))"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize three variables to keep track of the count of negative elements, positive elements, and total elements\n    negative_count = 0\n    positive_count = 0\n    total_count = 0\n    \n    # Iterate through the array and update the counts\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n        total_count += 1\n    \n    # Calculate the indices of the negative and positive elements in the original array\n    negative_indices = []\n    for i in range(n):\n        negative_indices.append(i)\n    positive_indices = []\n    for i in range(n, len(arr)):\n        positive_indices.append(i)\n    \n    # Sort the negative indices based on the values in the original array\n    negative_indices.sort(reverse=True, key=lambda x: arr[x])\n    \n    # Merge the negative and positive indices into a single list\n    merged_indices = negative_indices + positive_indices\n    \n    # Replace the elements in the original array with the merged indices\n    for i in range(len(arr)):\n        arr[i] = merged_indices.pop(0)\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive elements and one for negative elements\n    i, j = 0, 0\n    \n    # Loop through the array and swap elements according to the given rules\n    while j < n:\n        # If the current element is positive\n        if arr[j] > 0:\n            # Swap the current element with the element at the positive pointer\n            arr[i], arr[j] = arr[j], arr[i]\n            # Increment the positive pointer\n            i += 1\n            # Increment the negative pointer\n            j += 1\n        # If the current element is negative\n        else:\n            # Increment the negative pointer\n            j += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # check if n is greater than the length of the array\n    if n > len(arr):\n        print(\"n should be less than or equal to the length of the array\")\n        return\n    \n    # initialize two pointers, one for negative and one for positive\n    neg = 0\n    pos = n-1\n    \n    # swap the elements of the array until the negative pointer reaches the position of the first negative element\n    while neg < pos:\n        if arr[neg] >= 0:\n            neg += 1\n        else:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            pos -= 1\n    \n    # check if there are any negative elements left in the array after swapping all negative elements to the beginning\n    if neg < len(arr):\n        print(\"Not possible to re-arrange the array\")\n        return\n    \n    # reverse the remaining elements of the array\n    arr = arr[neg:] + arr[:neg]\n    \n    # print the re-arranged array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to count the number of negative and positive elements\n    negative_count = 0\n    positive_count = 0\n    # Loop through the array and count the number of negative and positive elements\n    for num in arr:\n        if num < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n    # Check if the number of elements is less than n\n    if negative_count + positive_count < n:\n        return \"Error: There is not enough space to re-arrange the elements.\"\n    # Initialize variables to store the indices of the negative and positive elements\n    negative_indices = []\n    positive_indices = []\n    # Loop through the array again and find the indices of the negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative_indices.append(i)\n        else:\n            positive_indices.append(i)\n    # Check if the number of negative elements is less than n\n    if negative_count < n:\n        # Append the remaining negative indices to the positive indices\n        while negative_count < n:\n            negative_indices.append(negative_count)\n            negative_count += 1\n    # Sort the negative indices and the positive indices by their values\n    negative_indices.sort(reverse=True)\n    positive_indices.sort()\n    # Create a new array with the negative elements at the beginning of the array followed by the positive elements\n    new_arr = negative_indices + positive_indices\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"%s\" % char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(string, char):\n    '''\n    This function replaces blank spaces in a given string with the specified character and returns the modified string.\n    '''\n    # use a list comprehension to replace all blank spaces in the string with the specified character\n    modified_string = ''.join([char if char!='' else string[i] for i in range(len(string))])\n    return modified_string"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # convert the list to a min heap\n    heap = [x for x in list1]\n    heapq.heapify(heap)\n    \n    # extract the largest n elements from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]  # initialize the heap with the first n elements of the list\n    heapq.heapify(heap)  # convert the heap into a heap structure\n\n    for i in range(n, len(list1)):\n        if heapq.heappop(heap) < list1[i]:\n            heapq.heappush(heap, list1[i])  # if the smallest element of the heap is smaller than the current element, add it to the heap\n\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list into a set to remove duplicates\n    list1 = list(set(list1))\n    \n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    \n    # Return the first n largest items from the list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a min heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n\n    # Extract the top n largest numbers from the min heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a min heap of size n\n    max_heap = []\n    # iterate over the list and add the largest n elements to the heap\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            # if the heap is full and the current number is larger, pop the smallest element\n            if num > heapq.heappop(max_heap):\n                heapq.heappush(max_heap, num)\n    # extract the largest n elements from the heap\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert list to a heap (max-heap)\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n\n    # Remove and return the n largest items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list into a heap\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    \n    # Extract the top n items from the heap and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[i] for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Use the formula for lateral surface area of a sphere\n    lateral_area = 2 * r * h\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculating the lateral surface area of the cylinder\n    return (2*math.pi*r**2*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h  # Lateral surface area of a cylinder\n    print(\"Lateral surface area of a cylinder is:\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h  # lateral surface area = 2*radius*height"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 + 2 * math.pi * r * h + math.pi * h**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_area = 2 * math.pi * r * h\n    \n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * r * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n\n    return l**3 # This is the formula for the volume of a cube.\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n % 2 == 0:\n            even_bits |= 1 << (n % 8)\n        n //= 2\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0: \n        count += n & 1\n        n >>= 1\n    for i in range(count): \n        n |= 1<<i\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    \n    # Loop through each bit of the input number\n    for i in range(32): \n        # Check if the current bit is even\n        if (n & (1 << i)): \n            # If it is, set the corresponding bit in the even_bits variable\n            even_bits |= 1 << i\n            \n    # Return the updated number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0 \n    while i < len(bin(n)[2:]): \n        n = n | (1 << i) \n        i += 1 \n    return n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to keep track of the number of even bits set\n    even_count = 0\n    \n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, set it to 1\n        if int(bit) == 0:\n            n |= 1 << int(bit)\n            even_count += 1\n    \n    # return the updated number of even bits set\n    return even_count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the input number to a string\n    n = str(n)\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the string\n    for char in n:\n        # Convert each character to an integer\n        char = int(char)\n        # Check if the current character is even\n        if char % 2 == 0:\n            # Set the current character to 1\n            char = 1\n        else:\n            # Set the current character to 0\n            char = 0\n        # Convert the integer back to a character and append to the result string\n        result += str(char)\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # Check if the bit is even\n        if int(bit) % 2 == 0:\n            # If the bit is even, add it to the even_bits list\n            even_bits.append(int(bit))\n    # Convert the even_bits list to an integer and return it\n    return int(''.join(map(str, even_bits)))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n    # Set all even bits to 1\n    even_bits = ['0' if bit == '0' else '1' for bit in binary_num]\n    # Convert the even_bits list back to a binary string\n    even_bits_binary = ''.join(even_bits)\n    # Convert the binary string back to an integer\n    result = int(even_bits_binary, 2)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n | (n >> 1)\n        else:\n            n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result \n    result = 0 \n\n    # loop through each bit of the given number \n    for bit in bin(n)[2:]: \n        # if the current bit is even, set it to 1 \n        if int(bit) % 2 == 0: \n            result += 2 ** int(bit) \n\n    # return the result \n    return result "
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counts = Counter(test_list)\n    \n    # Return the dictionary with counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of unique tuple counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter class to count occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    \n    # Returning the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    count = Counter(test_list)\n    # Create an empty dictionary to store the results\n    result = {}\n    # Loop over the keys of the Counter object\n    for key in count:\n        # If the key is not already in the result dictionary, add it and set its value to the count of occurrences\n        if key not in result:\n            result[key] = count[key]\n        # If the key is already in the result dictionary, add its count to its value\n        else:\n            result[key] += count[key]\n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        count = count_dict.get(tup, 0) + 1\n        count_dict[tup] = count\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # increment the count for the tuple\n            count_dict[tup] += 1\n        else:\n            # otherwise, add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n    # return the dictionary with the count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter class from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str) + 1):\n        for j in range(i, len(str) + 1):\n            if j - i > 0 and all(str[k] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' for k in range(i, j)):\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    count = 0 \n    n = len(str) \n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j] and str[i:j]!= str[i] and str[i:j]!= str[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        count += m\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Create a list of all possible sequences of length n, where each element is a positive integer\n    sequences = []\n    for i in range(2, m+1):\n        for j in range(i, m+1):\n            sequences.append(i)\n            sequences.append(j)\n    # Filter out sequences that don't meet the given conditions\n    total_sequences = len([s for s in sequences if s >= 2*sequences[-1] and s <= m])\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Create a dictionary to store the previous number and its count\n    prev_count_dict = {}\n\n    # Iterate through the range of numbers from 2 to m\n    for num in range(2, m + 1):\n        # Check if the number is divisible by 2\n        if num % 2 == 0:\n            # If it is, add it to the count for the previous number\n            if num - 2 in prev_count_dict:\n                prev_count_dict[num] = prev_count_dict[num] + prev_count_dict[num - 2]\n            else:\n                prev_count_dict[num] = 1\n        else:\n            # If it's not, add it to the count for the previous odd number\n            if (num - 1) // 2 in prev_count_dict:\n                prev_count_dict[num] = prev_count_dict[num] + prev_count_dict[(num - 1) // 2]\n            else:\n                prev_count_dict[num] = 1\n\n    # Multiply the count of the last number by the number of sequences with length n\n    result = prev_count_dict[m] * (m + 1) // 2\n\n    return result"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2 or n < 1:\n        return 0\n\n    # Initialize the first row of the table\n    row = [1] * n\n\n    # Fill in the table\n    for i in range(2, m + 1):\n        prev = 0\n        for j in range(1, n):\n            if i - 2 * prev <= m:\n                row[j] += row[j - 1]\n            prev = i\n        if row[n - 1] > 1:\n            return 1\n    return 0"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(2, m):\n        if i < m // 2:\n            total += (m - i) // i\n        else:\n            total += (i - m) // i\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    for i in range(m + 1):\n        if i % 2 == 0:\n            total_sequences += (m - i) // 2\n        else:\n            total_sequences += (m - i) // 2 + 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = []\n    for i in range(m, 0, -1):\n        if i < 2 * sequence[-1]:\n            break\n        sequence.append(i)\n    return len(sequence)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    last_element = 0\n    for i in range(2, n + 1):\n        total_sequences += m - last_element\n        last_element = i\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Initialize the last element to None\n    last_element = None\n    \n    # Loop through each possible starting element\n    for i in range(2, m+1):\n        \n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2*last_element and i <= m:\n            \n            # If the current element is equal to the previous element, there are no sequences of length n\n            if i == last_element:\n                count += 0\n            \n            # Otherwise, there are sequences of length n\n            else:\n                count += i\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    previous_element = 0\n    sequence_length = 1\n    \n    while sequence_length <= n:\n        next_element = min(m, previous_element * 2 + 1)\n        if next_element <= previous_element:\n            break\n        previous_element = next_element\n        sequence_length += 1\n        total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        for i in range(len(list1) - len(list2)):\n            list1.pop()\n    else:\n        for i in range(len(list2) - len(list1)):\n            list2.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[::-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[::-1] # Replace the last element of list1 with the elements of list2 in reverse order"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == len(list2):\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2\n    else:\n        print(\"Lists must be of the same length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n    :param list1: A list containing elements to be replaced.\n    :param list2: A list containing elements to replace the last element of the first list.\n    :return: A list containing the modified elements of the first list.\n    \"\"\"\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1 = list1 + list2 * (len(list1) - len(list2))\n    else:\n        list1 = list1 * (len(list2) // len(list1)) + list2[:len(list2) % len(list1)]\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = len(str1)\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_square(num):\n        return num == int(num ** 0.5 + 0.5) ** 2\n\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        return is_square(num) and int(num ** 0.5 + 0.5) ** 2 == num\n\n    def is_valid_next_square(num):\n        next_square = int(num ** 0.5 + 0.5) ** 2\n        return is_perfect_square(next_square)\n\n    next_square = N\n    while True:\n        if is_valid_next_square(next_square):\n            return next_square\n        else:\n            next_square += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N + 1\n    while True:\n        x = int(math.sqrt(x))\n        if x*x == N:\n            break\n    return x + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Initialize the variable to store the next perfect square greater than N\n    next_square = None\n\n    # Check if N is already a perfect square\n    if N**2 == N:\n        # If it is, then we need to find the next perfect square greater than N\n        next_square = N + math.sqrt(N**2 + 4*N)\n    else:\n        # If it's not a perfect square, then we need to find the largest perfect square less than N\n        next_square = math.floor(math.sqrt(N))\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function calculates the next perfect square greater than a given number N.\n    '''\n    def is_square(num):\n        '''\n        This function checks if a given number is a perfect square or not.\n        '''\n        return num == int(num**0.5)**2\n    \n    def next_square(num):\n        '''\n        This function calculates the next perfect square greater than a given number.\n        '''\n        sqrt_num = int(num**0.5)\n        return 2*sqrt_num + 1\n    \n    def is_valid_next(num):\n        '''\n        This function checks if a given number is a valid next perfect square.\n        '''\n        return num >= 0 and is_square(num)\n    \n    next_num = next_square(N)\n    while not is_valid_next(next_num):\n        next_num = next_square(next_num)\n    \n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next positive perfect square\n    greater than N.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    if sqrt_N % 1 == 0:\n        sqrt_N += 1\n    else:\n        sqrt_N = int(sqrt_N + 1)\n    return int(sqrt_N ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # find the integer part of the square root\n    sqrt_int = math.floor(sqrt_N)\n    \n    # find the square root of the next perfect square\n    next_sqrt_N = sqrt_int**2 + 1\n    \n    # check if the next perfect square is greater than N\n    if next_sqrt_N > N:\n        # if it is, find the square root of the next perfect square\n        return next_sqrt_N\n    else:\n        # if not, find the next perfect square by incrementing sqrt_int\n        return next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # check if the given number is already a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        return N\n    else:\n        # find the next perfect square greater than sqrt(N)\n        x = math.ceil(math.sqrt(N))\n        y = (x * x) + N\n        while y <= N:\n            x += 1\n            y = (x * x) + N\n        return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return None\n\n    # Check if N is already a perfect square\n    square = int(math.sqrt(N))\n    if square * square == N:\n        return N + 1\n\n    # Find the previous prime number less than N\n    prev_prime = N - 1\n    while not is_prime(prev_prime):\n        prev_prime -= 1\n\n    # Find the next prime number greater than N\n    next_prime = prev_prime + 1\n    while not is_prime(next_prime):\n        next_prime += 1\n\n    # Return the square of the next prime number\n    return next_prime * next_prime"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Function to check if a number is a perfect square\n    def is_square(num):\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    # Function to find the next perfect square greater than a given number\n    def next_square(num):\n        while True:\n            num += 1\n            if is_square(num):\n                return num\n\n    # Function to find the next perfect square greater than a given number\n    def next_perfect_square(num):\n        next_sq = next_square(num)\n        if next_sq > N:\n            return N\n        return next_sq\n\n    # Main function\n    next_num = N\n    while True:\n        next_num = next_perfect_square(next_num)\n        if next_num > N:\n            return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        N = (sqrt_N + 1) ** 2\n        if N > sqrt_N + 1:\n            return N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return arr[0]\n    \n    max_sum = float('-inf')\n    prev_max = float('-inf')\n    max_decreasing = float('-inf')\n    max_increasing = float('-inf')\n\n    for i in range(n):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            if arr[i] > prev_max:\n                max_sum = arr[i]\n                max_decreasing = arr[i]\n            elif arr[i] > max_increasing:\n                max_sum = max_sum + arr[i] - prev_max\n                max_increasing = arr[i]\n        else:\n            max_sum = max(max_sum, max_decreasing)\n            max_decreasing = max(max_decreasing, max_increasing)\n            max_increasing = max(max_increasing, arr[i])\n            prev_max = max_sum\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n    \n    # Initialize the max sum\n    max_sum = float('-inf')\n    \n    # Check the increasing and decreasing subsequences\n    for i in range(n):\n        # Check for increasing subsequence\n        inc_sum = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < inc_sum:\n                break\n            inc_sum += arr[j]\n        else:\n            max_sum = max(max_sum, inc_sum)\n        \n        # Check for decreasing subsequence\n        dec_sum = arr[i]\n        for j in range(i+1, n):\n            if arr[j] > dec_sum:\n                break\n            dec_sum += arr[j]\n        else:\n            max_sum = max(max_sum, dec_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables for maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse the array and find the maximum sum of bitonic subsequence\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        elif arr[i] < arr[i-1]:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum = 0\n            \n    # Add the last subsequence to the total sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum_left = arr[0]\n    max_sum_right = arr[n-1]\n    current_sum_left = 0\n    current_sum_right = 0\n\n    for i in range(1, n-1):\n        current_sum_left += arr[i]\n        current_sum_right += arr[n-1-i]\n\n        if current_sum_left > current_sum_right:\n            max_sum_left = max(max_sum_left, current_sum_left)\n        else:\n            max_sum_right = max(max_sum_right, current_sum_right)\n\n    return max(max_sum_left, max_sum_right)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = max_so_far\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Check if the array is a bitonic sequence\n    if arr[0] < arr[1] and arr[n-1] > arr[n-2]:\n        # If the array is a bitonic sequence, find the maximum sum\n        max_sum = arr[0] + arr[1]\n        for i in range(2, n-1):\n            if arr[i] > arr[i-1]:\n                max_sum += arr[i]\n            else:\n                max_sum -= arr[i-1]\n        return max_sum\n    else:\n        return -1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Check if the input array is valid\n    if len(arr) < 3:\n        raise ValueError(\"Input array must have at least 3 elements\")\n\n    # Initialize variables to store the maximum sum and its ending index\n    max_ending_sum = arr[0]\n    max_ending_index = 0\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing\n        if arr[i] > arr[i - 1]:\n            # Check if the ending sum is increasing\n            if max_ending_sum < arr[i]:\n                max_ending_sum = arr[i]\n                max_ending_index = i\n        # Check if the current element is decreasing\n        elif arr[i] < arr[i - 1]:\n            # Check if the ending sum is decreasing\n            if max_ending_sum > arr[i]:\n                max_ending_sum = arr[i]\n                max_ending_index = i\n\n    return max_ending_sum, max_ending_index"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 2: \n        return max(arr)\n\n    # First, find the increasing subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            arr[i] += arr[i-1]\n    \n    # Now, find the decreasing subsequence\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            arr[i] += arr[i+1]\n    \n    # Finally, find the maximum sum of all increasing and decreasing subsequences\n    max_sum_inc = max(arr[1:])\n    max_sum_dec = max(arr[:-1])\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables for the maximum subsequence sum and its starting index\n    max_sum = float('-inf')\n    max_start = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        \n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            \n            # If it's increasing, check if the sum of the subsequence from the previous element to this element is greater than the current maximum subsequence sum\n            if i-1 >= 0 and arr[i-1] < arr[i]:\n                subsequence_sum = arr[i-1] + arr[i]\n                if subsequence_sum > max_sum:\n                    max_sum = subsequence_sum\n                    max_start = i-1\n            \n            # If it's decreasing, check if the sum of the subsequence from the previous element to this element is greater than the current maximum subsequence sum\n            if i-2 >= 0 and arr[i-2] > arr[i-1]:\n                subsequence_sum = arr[i-2] + arr[i-1] + arr[i]\n                if subsequence_sum > max_sum:\n                    max_sum = subsequence_sum\n                    max_start = i-2\n    \n    return max_sum, max_start"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables for bitonic subsequence\n    inc = 0\n    dec = 0\n    # Initialize variables for maximum sum\n    max_inc = 0\n    max_dec = 0\n    max_sum = 0\n    # Iterate through the array and update the variables for bitonic subsequence and maximum sum\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            inc += arr[i] - arr[i+1]\n            max_inc = max(max_inc, inc)\n        elif arr[i] < arr[i+1]:\n            dec += arr[i+1] - arr[i]\n            max_dec = max(max_dec, dec)\n        else:\n            inc += arr[i]\n            dec += arr[i+1]\n        max_sum = max(max_sum, max_inc, max_dec)\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Find the square root of the given number using the babylonian method\n    guess = number / 2  # Start with an initial guess of half the number\n    while True:\n        # Check if the guess is within the desired accuracy\n        if abs(guess * guess - number) < 0.0001:\n            return guess\n        # Update the guess using the babylonian method\n        guess = (guess + number / guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    z = 0\n\n    while abs(y-x) > 0.00001:\n        z = x\n        x = y/x\n        y = z\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        x = 0.5 * (number + 1.0 / number)\n        for i in range(10):\n            x = 0.5 * (x + (number / x))\n        return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables to keep track of the current guess and the previous guess\n    current_guess = number / 2\n    prev_guess = 0\n    \n    # loop until the current guess is within a certain tolerance (epsilon) of the square root of the number\n    while abs(current_guess * current_guess - number) > 0.0001:\n        # update the previous guess and current guess\n        prev_guess = current_guess\n        current_guess = (current_guess + number / current_guess) / 2\n    \n    # return the last guess as the square root of the number\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    while abs(high - low) >= 0.000001:\n        mid = (high + low) / 2\n        if number / mid < mid:\n            high = mid\n        else:\n            low = mid\n    return low"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    y = number\n    while abs(y - x) > 0.0001:\n        x = y\n        y = (x + number / x) / 2.0\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    start = 0\n    end = number // 2\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * mid == number:\n            return mid\n        elif mid * mid < number:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    guess = number / 2\n    while abs(guess**2 - number) > 0.001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    y = x + number / x\n    while abs(y - x) > 1e-6:\n        x = y\n        y = x + number / x\n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    n = len(string)\n    # Initialize a 2D table to store lengths of longest palindromic subsequences ending at each position\n    dp = [[0] * n for _ in range(n)]\n\n    # If the length of the string is 1 or 0, the longest palindromic subsequence is itself\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for palindromic subsequences of length 2 to n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            # If the characters at i and j are same, then we can include both characters in the subsequence and get a palindrome\n            if string[i] == string[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            # If the characters at i and j are not same, then we can either include one character in the subsequence or not include it at all\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return max(dp[0][n-1], dp[0][n-2])"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    # create a dictionary to store the length of the longest palindromic subsequence ending at each index\n    dp = {0: 1}\n    max_length = 1\n    # iterate over the string\n    for i in range(1, len(s)):\n        # check if the current index is a palindrome\n        if s[i] == s[i-1]:\n            # if so, add 2 to the length of the longest palindromic subsequence ending at the previous index\n            dp[i] = dp[i-1] + 2\n            # update the maximum length if this length is greater\n            max_length = max(max_length, dp[i])\n        else:\n            # if not, check if the previous index is also a palindrome\n            if s[i] == s[i-2] and dp.get(i-2) > 0:\n                # if so, add the length of the longest palindromic subsequence ending at the previous index and the current index\n                dp[i] = dp[i-2] + 2\n                # update the maximum length if this length is greater\n                max_length = max(max_length, dp[i])\n            else:\n                # if not, start a new subsequence\n                dp[i] = 1\n                max_length = 1\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Create a 2D array to store the length of the longest palindromic subsequence for every prefix of the string\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    # Initialize the first column and the first row\n    for i in range(n):\n        dp[i][i] = 1\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 2\n\n    # Fill the remaining cells in the matrix in bottom-up manner\n    for i in range(2, n+1):\n        for j in range(i):\n            if s[j] == s[i-1]:\n                dp[j][i] = dp[j+1][i-1] + 2\n            else:\n                dp[j][i] = max(dp[j][i-1], dp[j+1][i])\n\n    return dp[0][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    # Initialize a table to store the length of longest palindromic subsequence ending at each position\n    dp = [[0] * n for _ in range(n)]\n    # Fill the table using dynamic programming\n    for i in range(n):\n        dp[i][i] = 1\n        if i > 0 and s[i] == s[i-1]:\n            dp[i][i-1] = 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # Find the length of the longest palindromic subsequence ending at each position\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, dp[i][i])\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    # Create a 2D table to store lengths of LPS for all prefixes\n    table = [[0] * n for _ in range(n)]\n    # Initialize LPS values for all prefixes\n    for i in range(n):\n        table[i][i] = 1\n    # Fill in the table in bottom-up manner\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position in the string\n    table = [[0]*n for i in range(n)]\n\n    # Initialize the table with the values of the first row and column\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the remaining values in the table using dynamic programming approach\n    for length in range(3, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str) \n    # Create a table to store the length of longest palindromic subsequence ending at i\n    table = [[0 for j in range(n)] for i in range(n)] \n    # Initialize table[i][i] to 1 \n    for i in range(n): \n        table[i][i] = 1 \n\n    # Find the length of longest palindromic subsequence ending at i for all i from 2 to n-1 \n    for length in range(2, n+1): \n        # Find the length of longest palindromic subsequence ending at i-1 and j-1 \n        for i in range(n-length+1): \n            j = i+length-1 \n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n            else: \n                table[i][j] = max(table[i+1][j], table[i][j-1]) \n\n    # Return the length of the longest palindromic subsequence ending at n-1 \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a 2D array to store the lengths of palindromic subsequences\n    lps_arr = [[0 for j in range(len(str))] for i in range(len(str))]\n    \n    # initialize the length of the longest palindromic subsequence to 1\n    lps_arr[0][0] = 1\n    \n    # loop through the string and check for palindromic subsequences\n    for i in range(1, len(str)):\n        for j in range(1, len(str) - i + 1):\n            # check if the current substring is a palindrome and update the length of the longest palindromic subsequence\n            if str[j] == str[j + i - 1]:\n                lps_arr[i][j] = lps_arr[i - 1][j - 1] + 2\n            else:\n                lps_arr[i][j] = max(lps_arr[i - 1][j], lps_arr[i][j - 1])\n    \n    # return the length of the longest palindromic subsequence\n    return lps_arr[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    This function computes the length of the longest palindromic subsequence of a given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # length of longest palindromic subsequence ending at i\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n\n    max_len = 1\n    max_start = 0\n\n    # find the length of longest palindromic subsequence ending at j\n    for j in range(2, n):\n        for i in range(n - j):\n            k = i + j - 1\n            if str[i] == str[k]:\n                dp[i][k] = 2 + dp[i + 1][k - 1]\n            else:\n                dp[i][k] = max(dp[i + 1][k], dp[i][k - 1])\n\n            if dp[i][k] > max_len:\n                max_len = dp[i][k]\n                max_start = i\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    lps_table = [[0] * n for _ in range(n)]\n\n    # find the length of the longest palindromic subsequence for all possible substrings\n    for i in range(n):\n        lps_table[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n    return lps_table[-1][-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return 1/n * (n * (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # initialize the sum to 0\n    sum_of_harmonic_numbers = 0\n\n    # iterate from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic number of i\n        harmonic_number = 1/i\n\n        # add the harmonic number to the sum\n        sum_of_harmonic_numbers += harmonic_number\n\n    # return the sum of harmonic numbers\n    return sum_of_harmonic_numbers"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_ = 0\n    for i in range(1, n):\n        sum_ += 1/i\n    return sum_"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # calculate harmonic sum of n-1\n    h = 1.0 / (1.0/n + 1.0/n-1)\n    return h"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize a counter variable and a variable to store the sum of harmonic series\n    i = 1\n    harmonic_sum = 0\n    \n    # Calculate the sum of harmonic series using a loop\n    while i <= n:\n        harmonic_sum += 1/i\n        i += 1\n        \n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Use a loop to iterate over each number from 1 to n\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        # Calculate the harmonic sum of the current number\n        harmonic_sum += 1.0/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1,n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to remove duplicates\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    # Find the intersection of the sets\n    intersection = nums1.intersection(nums2)\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_set = set()\n    \n    # Loop through each element in array_nums1\n    for num in array_nums1:\n        # If the element exists in array_nums2, add it to the common set\n        if num in array_nums2:\n            common_set.add(num)\n    \n    # Return the common set as a list\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of the unique elements in array_nums1\n    set1 = set(array_nums1)\n    # Create an empty set to store the intersection\n    intersection = set()\n    # Iterate through the unique elements in array_nums2 and check if they are in set1\n    for element in array_nums2:\n        if element in set1:\n            intersection.add(element)\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing only the elements that are present in both arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize empty lists for intersection and non-intersection elements\n    intersection = []\n    non_intersection = []\n\n    # Iterate through both arrays simultaneously\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            # If two elements are equal, add them to intersection list\n            if num1 == num2:\n                intersection.append(num1)\n            # If two elements are not equal, add them to non-intersection list\n            else:\n                non_intersection.append(num1)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of the elements in array_nums1\n    set1 = set(array_nums1)\n    # create an empty set to hold the common elements\n    common = set()\n    # iterate over array_nums2 and check if each element is in set1\n    for num in array_nums2:\n        if num in set1:\n            common.add(num)\n    # convert the common set back to a list and return it\n    return list(common)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of the first array and convert to a list\n    set1 = set(array_nums1)\n    list1 = list(set1)\n\n    # Create a set of the second array and convert to a list\n    set2 = set(array_nums2)\n    list2 = list(set2)\n\n    # Find the intersection of the two sets\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create a new list with the element inserted before each element in the original list\n    result = [element] + list\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = [element]\n    for i in range(len(list)):\n        result.insert(i,list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list and return the resulting list.\n    \"\"\"\n    new_list = []\n    for i in lst:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n            result.append(list[i])\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        result.append(element)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[:i])\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        # Complex number input\n        z = complex(number[0], number[1])\n\n        # Convert to polar coordinates\n        r = abs(z)\n        phi = cmath.phase(z)\n\n        # Print the polar coordinates\n        print(f\"({r:.2f}, {phi:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        try:\n            complex_numbers.append(cmath.polar(complex(num)))\n        except:\n            print('Invalid input.')\n            return\n    return complex_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # create an empty list to store the polar coordinates\n    polar_list = []\n\n    # iterate over the input list of complex numbers\n    for number in numbers:\n\n        # convert the complex number to polar coordinates\n        real, imag = cmath.polar(number)\n\n        # create a tuple containing the polar coordinates\n        polar_tuple = (real, imag)\n\n        # append the polar tuple to the list\n        polar_list.append(polar_tuple)\n\n    # return the list of polar tuples\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, converts them to polar coordinates, and returns the result as a list of tuples.\n    Each tuple contains the polar coordinates of a complex number as (magnitude, phase) in the form (r, theta).\n    '''\n    result = []\n    for number in numbers:\n        magnitude = cmath.sqrt(number.real ** 2 + number.imag ** 2)\n        phase = cmath.phase(number)\n        result.append((magnitude, phase))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(complex(real, imag))\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # print the result\n        print(f\"r = {r}, theta = {cmath.phase(number)}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            phi = cmath.phase(number)\n            result.append((r, phi))\n        else:\n            result.append(number)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Add the polar coordinates to the list\n        polar_coords.append((r, theta))\n    \n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a Python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        polar_num = (magnitude, angle)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            color_combinations.append(tuple(j))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combo = tuple(l[i:i+n])\n        result.append(combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combo = tuple(sorted(l[i:j]))\n            color_combinations.append(combo)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use the combinations_with_replacement function from the itertools module to generate all possible combinations of length n with replacement\n    all_combinations = list(combinations_with_replacement(l, n))\n    \n    # Convert each combination to a tuple and return the list of tuples\n    return [(tuple(combination)) for combination in all_combinations]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    combs = []\n    for i in range(1, len(colors) - n + 1):\n        for comb in combinations_with_replacement(colors, i):\n            combs.append((colors[0],) + tuple(comb))\n    return combs"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            if count == n:\n                break\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize a list to store prime numbers\n    primes = []\n\n    # check if n is prime and add it to the list if it is\n    if is_prime(n):\n        primes.append(n)\n\n    # loop through all numbers from 2 to n\n    for i in range(2, n):\n        # check if i is prime and add it to the list if it is\n        if is_prime(i):\n            primes.append(i)\n\n    # return the length of the list which contains all prime numbers less than n\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function is used to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_value = 0\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if test_tup1[i] > max_value:\n                max_value = test_tup1[i]\n                max_tup = test_tup1\n        else:\n            if test_tup2[i] > max_value:\n                max_value = test_tup2[i]\n                max_tup = test_tup2\n            \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tuple = test_tup1\n    for i in test_tup2:\n        if i > max_tuple[i]:\n            max_tuple = i\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the maximum element in each list\n    max_list1 = max(list1)\n    max_list2 = max(list2)\n\n    # Compare the maximum elements and return the larger one\n    if max_list1 > max_list2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return None\n    \n    # create a list with the values of the tuples\n    tup_list = []\n    for i in range(len(test_tup1)):\n        tup_list.append(test_tup1[i])\n        tup_list.append(test_tup2[i])\n    \n    # sort the list in descending order\n    tup_list.sort(reverse=True)\n    \n    # create a new tuple from the sorted list\n    max_tup = tuple(tup_list)\n    \n    # return the new max_tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    # initialize variables to store the max values of each tuple element\n    max1 = None\n    max2 = None\n\n    # iterate over each element of the tuples and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if max1 is None or test_tup1[i] > max1:\n                max1 = test_tup1[i]\n        else:\n            if max2 is None or test_tup2[i] > max2:\n                max2 = test_tup2[i]\n\n    # return the tuple with the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1, max2 = max(test_tup1), max(test_tup2)\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    else:\n        max_tup = test_tup1\n        for i in range(len(test_tup1)):\n            if test_tup2[i] > max_tup[i]:\n                max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    if max_1 > max_2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the first tuple is longer than the second\n    if len(test_tup1) > len(test_tup2):\n        # Use the first tuple as the max\n        return test_tup1\n    else:\n        # Use the second tuple as the max\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"n must be a positive integer\"\n    # start with 2 as the first prime number\n    i = 2\n    # check for primality up to the square root of n\n    while i * i <= n:\n        # if n is divisible by i, it is not prime\n        if n % i == 0:\n            return \"n is not prime\"\n        # check the next number\n        i += 1\n    # n is prime if it reaches this point\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    for i in range(2, n+1):\n        if is_prime[i]:\n            p = i\n            break\n\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime.\n        '''\n        if num < 2: \n            return False \n        for i in range(2, num): \n            if num % i == 0: \n                return False \n        return True\n\n    # Check if n is valid\n    if n < 1: \n        raise ValueError('n must be a positive integer')\n\n    # Initialize variables\n    current_num = 2\n    count = 0\n\n    # Iterate until count reaches n\n    while count < n: \n        # Check if current_num is prime\n        if is_prime(current_num): \n            count += 1\n\n        # Increment current_num\n        current_num += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return current_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        if is_newman_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_newman_prime(num):\n    \"\"\"\n    This function checks if a given number is a newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize the list of primes to check\n    primes = []\n\n    # initialize the current prime number to 2\n    current_prime = 2\n\n    # initialize the number of primes found so far\n    count = 0\n\n    # loop until the number of primes found so far is equal to n\n    while count < n:\n\n        # check if the current prime is prime and is greater than 1\n        if is_prime(current_prime) and current_prime > 1:\n\n            # add the current prime to the list of primes to check\n            primes.append(current_prime)\n\n            # increment the count of primes found so far\n            count += 1\n\n            # find the next prime number\n            current_prime = next_prime(current_prime)\n\n        # if the current prime is not prime, increment it by 1\n        else:\n            current_prime += 1\n\n    # return the nth prime in the list of primes found so far\n    return primes[n-1]\n\n\ndef is_prime(n):\n    '''\n    Determine whether a number is prime.\n    '''\n    # if n is less than 2, it is not prime\n    if n < 2:\n        return False\n\n    # loop from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        # if n is divisible by i, it is not prime\n        if n % i == 0:\n            return False\n    # if n is not divisible by any number, it is prime\n    return True\n\n\ndef next_prime(n):\n    '''\n    Find the next prime number after a given number.\n    '''\n    # initialize the next prime number to check\n    current_prime = n + 1\n\n    # loop until the current prime is not prime\n    while not is_prime(current_prime):\n\n        # increment the current prime by 1\n        current_prime += 1\n\n    # return the next prime number\n    return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # initialize variables\n    p = 2\n    count = 0\n\n    # loop through numbers from 3 to sqrt(n)\n    while count < n:\n        # if the number is prime, check if it's a newman\u2013shanks\u2013williams prime\n        if is_prime(p) and is_newman_prime(p):\n            count += 1\n\n        # increment p by 1\n        p += 1\n\n    # raise a ValueError if we didn't find the nth newman\u2013shanks\u2013williams prime\n    if count!= n:\n        raise ValueError(\"n doesn't exist in the sequence\")\n\n    return p\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef is_newman_prime(n):\n    \"\"\"\n    Check if a number is a newman\u2013shanks\u2013williams prime.\n    \"\"\"\n    # check if n is a prime number\n    if not is_prime(n):\n        return False\n\n    # initialize variables\n    p = 2\n    count = 0\n\n    # loop through numbers from 2 to n-1\n    while p <= n - 2:\n        # check if p is a newman\u2013shanks\u2013williams prime\n        if is_prime(p) and is_newman_prime(p):\n            count += 1\n\n        # increment p by 1\n        p += 1\n\n    # return True if we found the nth newman\u2013shanks\u2013williams prime\n    return count == n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    prime = False\n    i = 2\n\n    # Loop through numbers to find the nth newman\u2013shanks\u2013williams prime number\n    while prime is False and i <= n:\n        if i == 2 or i == 3 or i % 2 == 0:\n            i += 1\n        else:\n            for j in range(3, int(i**0.5) + 1, 2):\n                if i % j == 0:\n                    prime = True\n                    break\n            if prime is False:\n                i += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2: \n        return \"Invalid input. Please enter a positive integer greater than or equal to 2.\"\n\n    # Initialize count and current number to 1\n    count = 1\n    current = 1\n\n    # Loop until n is reached\n    while count < n: \n        # If current number is prime, increment count and update current number\n        if is_prime(current): \n            count += 1\n            current += 1\n        # If current number is composite, increment current number\n        else: \n            current += 1\n\n    # Return nth newman-shanks-williams prime number\n    return current"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    while True:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if n == 1:\n                return p\n            else:\n                n -= 1\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    limit = 100\n    prime_list = []\n\n    # Loop through the numbers from 2 to 99\n    for num in range(2, limit):\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            prime_list.append(num)\n            if count == n:\n                return prime_list[-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Checking if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    # Performing element-wise division across the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            raise ValueError(\"The tuple elements cannot be zero.\")\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples have different lengths.'\n    \n    # Divide each element in the tuples element-wise\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # iterate over the elements of the first tuple and perform element-wise division with the corresponding element of the second tuple\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] / test_tup2[i])\n        return result\n    else:\n        raise ValueError(\"The length of the two tuples is not equal.\")"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples have different lengths.\")\n        return\n    \n    # Perform element-wise division of the two tuples\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Get the first L elements of the list\n        first_part = list1[:L]\n        # Get the remaining elements of the list\n        second_part = list1[L:]\n        # Return the two parts in a tuple\n        return (first_part, second_part)\n    else:\n        # If the length of the list is less than or equal to L, return an error message\n        print(\"Error: List length must be greater than or equal to L.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        raise ValueError('Length of list is less than the length of the split')\n    mid = len(lst) // 2\n    part1 = lst[:mid]\n    part2 = lst[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Get the length of the original list\n    original_length = len(list1)\n    \n    # Check if L is greater than or equal to the length of the original list\n    if L >= original_length:\n        # If L is greater than or equal to the length of the original list, raise an error\n        raise ValueError(\"L must be less than or equal to the length of the original list\")\n    \n    # Split the original list into two parts based on L\n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        return lst, []\n    else:\n        return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than length of the list\n    if L > len(lst):\n        return \"Error: L is greater than the length of the list.\"\n    # Divide the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L == 0:\n        n = len(list1) // L\n        part1 = list1[:n*L]\n        part2 = list1[n*L:]\n        return part1, part2\n    else:\n        n = len(list1) // L\n        part1 = list1[:n*L]\n        part2 = list1[n*L:]\n        return part1, part2 + [list1[-1]]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts with length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list.\")\n        return\n    \n    # Split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if L > length:\n        raise ValueError(\"Length of first part cannot be greater than length of original list\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7*h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) + 3"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age < 6:\n        dog_years = 1\n    elif h_age < 12:\n        dog_years = 2\n    elif h_age < 18:\n        dog_years = 3\n    elif h_age < 24:\n        dog_years = 4\n    elif h_age < 30:\n        dog_years = 5\n    else:\n        dog_years = 6\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    # convert height in inches to centimeters\n    h_age_cm = h_age * 2.54\n    # calculate age in dog's years\n    age_dogs = h_age_cm / 200.0\n    # return age in dog's years\n    return age_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in days\n    days = h_age * 365\n\n    # calculate dog's age in years\n    years = days / 365\n\n    # round the dog's age to the nearest integer\n    age = int(years)\n\n    # return the dog's age\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = h_age / 7\n    \n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years based on their height in inches.\n\n    Args:\n        h_age (int): The height of the dog in inches.\n\n    Returns:\n        int: The age of the dog in dog's years.\n    \"\"\"\n    # Calculate the dog's age in dog's years based on their height in inches\n    years = h_age / 70\n    return years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the list to a list of lists\n    S_list = [S[i:i+step] for i in range(0, len(S), step)]\n    # Flatten the list of lists\n    return [item for sublist in S_list for item in sublist]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    # use a for loop to iterate through the input list\n    for i in range(0, len(S), step):\n        # use a slice to extract the nth element from the input list\n        n = S[i:i+step]\n        # add the extracted n-th element to the result list\n        result.append(n)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError('S must be a list')\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError('step must be a positive integer')\n    n = len(S)\n    if step > n:\n        raise ValueError('step cannot be greater than the length of the list')\n    \n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        result = [S[i:i+step] for i in range(0, len(S), step)]\n        return result\n    else:\n        remainder = len(S) % step\n        if remainder == 0:\n            result = [S[i:i+step] for i in range(0, len(S), step)]\n            result.append(S[-1:])\n            return result\n        else:\n            result = [S[i:i+step] for i in range(0, len(S), step)]\n            last_half = S[-remainder:]\n            result.append(last_half)\n            return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l**2  # Cube lateral surface area is 6 times the square of the side length"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l * l * 6  # lateral surface area of a cube is 6 times the square of the side length\n    print(\"Lateral surface area of a cube with side length\", l, \"is\", area, \"square units\")"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i*i*2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    num = 1\n    \n    while num <= n:\n        sum_of_squares += num**2\n        num += 2\n    \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0  \n    i = 1  \n    while i <= n:  \n        if i % 2!= 0:  \n            sum_of_squares += i**2  \n        i += 1  \n    return sum_of_squares  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # iterate over the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current odd natural number to the sum variable\n        sum += i**2\n\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return \"*\"\n    elif n == 2: \n        return \"**\"\n    elif n == 3: \n        return \"***\"\n    else: \n        # Using recursion to calculate the nth star number\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # define the star number sequence\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255]\n    \n    # if n is greater than the length of the sequence, return None\n    if n > len(sequence):\n        return None\n    \n    # otherwise, return the nth star number\n    else:\n        return sequence[n-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the result to 1\n    result = 1\n    # loop n-1 times\n    for i in range(n-1): \n        # add the current result to the previous result\n        result += result\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the counter variable\n    count = 0\n    # loop through the number of times the user wants to find then'th star number\n    while count < n:\n        # add a new line to the output\n        print()\n        # loop through the number of stars in each line\n        for i in range(1, count+1):\n            # print a star at each position\n            print('*', end='')\n        # add a new line to the output\n        print()\n        # increment the counter variable\n        count += 1\n    # return the final count variable\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to store the star number\n    num = 0\n    \n    # iterate n times to generate the star number\n    for i in range(n):\n        # check if the current number is odd or even\n        if i % 2 == 0:\n            # if it's even, multiply it by 3 and add 1\n            num = (num * 3) + 1\n        else:\n            # if it's odd, add 1 to it\n            num += 1\n    \n    # return the final value of the star number\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable to 1\n    count = 1\n\n    # loop until count equals n\n    while count <= n:\n        # print the current count value\n        print(count)\n        # increment the count variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer argument 'n' and returns then'th star number.\n    '''\n    # initialize variables to keep track of the first star and the number of stars\n    first_star = 1\n    number_of_stars = 1\n    \n    # loop through the number of stars\n    while number_of_stars <= n:\n        # print the current number of stars\n        print('*' * number_of_stars)\n        \n        # update the first star and the number of stars\n        first_star += number_of_stars\n        number_of_stars += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '****'\n    elif n == 2:\n        return '*****'\n    else:\n        return '*' + find_star_num(n - 1) + '*'\n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return ascii_value(k[1:]) + 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total_sum = 0\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # Check if the current number is even\n        if arr[i] % 2 == 0:\n            # If it is even, check if its position is even\n            if i % 2 == 0:\n                # If it is, add it to the total sum\n                total_sum += arr[i]\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n                count += 1\n    return sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize the sum to 0\n    sum_of_powers = 0\n\n    # loop through the first n even natural numbers\n    for i in range(n):\n        # calculate the nth power of 2\n        nth_power = i**5\n\n        # if the nth power is even, add it to the sum of powers\n        if nth_power % 2 == 0:\n            sum_of_powers += nth_power\n    \n    # return the sum of powers\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_even_powers += i**5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_power_sum += i ** 5\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**(5)\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    # initialize sum variable\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(1, n+1):\n        # check if number is even\n        if i % 2 == 0:\n            # add to sum if number is even raised to the fifth power\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum += i**5\n\n    # return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize a variable to store the sum of the first n even natural numbers raised to the fifth power\n    sum_of_powers = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # calculate the power of the number and add it to the sum\n        sum_of_powers += i**5\n\n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum_of_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # iterate over the tuples\n    for i in range(len(test_tup1)):\n        # if the elements are equal, subtract the second element from the first element\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            new_tup += (test_tup1[i]-test_tup2[test_tup2.index(i)],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples are not of equal length\"\n\n    # loop through both tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n\n    # calculate the sum of even index binomial coefficients using the formula\n    #   C(n,k) = n! / (k! * (n-k)!)\n    # where k=0,2,4,...,n\n    # and n! = n * (n-1) * (n-2) *... * 2 * 1\n    even_sum = 0\n    for i in range(2, n+1):\n        even_sum += math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to zero\n    even_sum = 0\n\n    # iterate through even indices from 0 to n-1\n    for i in range(0, n):\n        # compute the even index binomial coefficient\n        even_coeff = math.comb(n, i)\n\n        # check if the coefficient is even\n        if even_coeff % 2 == 0:\n            # add the even coefficient to the sum\n            even_sum += even_coeff\n\n    # return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Compute the even index binomial coefficients using math.comb() function\n    even_binomial_coefficients = [math.comb(n, i) for i in range(n+1) if i % 2 == 0]\n\n    # Calculate the sum of even index binomial coefficients\n    even_sum = sum(even_binomial_coefficients)\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients of a given positive integer n.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum variable\n    sum_even_coeffs = 0\n\n    # Loop through even indices\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient for i\n        coeff = math.comb(n, i)\n\n        # Check if the coefficient is even and add to the sum if it is\n        if coeff % 2 == 0:\n            sum_even_coeffs += coeff\n\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize a counter for even indices\n    count = 0\n    # initialize a sum variable to store the sum of even indices\n    even_sum = 0\n    # loop through the even indices from 0 to n-1\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient of i and n-i using math.comb() function\n        coeff = math.comb(n, i)\n        # check if the index is even\n        if i % 2 == 0:\n            # add the coefficient to the sum of even indices\n            even_sum += coeff\n            # increment the counter for even indices\n            count += 1\n    # return the sum of even indices\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to zero\n    sum = 0\n\n    # Calculate the value of the first even index binomial coefficient\n    even_coeff = math.comb(n, 0)\n\n    # Iterate through the even indices (starting from 2)\n    for i in range(2, n+1, 2):\n        # Calculate the value of the i-th even index binomial coefficient\n        current_coeff = math.comb(n, i-1)\n\n        # Add the current binomial coefficient to the sum of even index binomial coefficients\n        sum += current_coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a variable to store the sum of even index binomial coefficients\n    sum = 0\n\n    # Use a for loop to iterate over the range of even indices\n    for i in range(2, n+1, 2):\n        # Use the math.comb function to calculate the binomial coefficient for i and n\n        coeff = math.comb(n, i)\n\n        # Check if the current coefficient is even\n        if coeff % 2 == 0:\n            # Add the even coefficient to the sum\n            sum += coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize variables\n    numerator = 1\n    denominator = 2\n    even_sum = 0\n\n    # loop through even indices from 0 to n\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient\n        binomial_coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n\n        # add the even index binomial coefficient to the even_sum\n        even_sum += binomial_coeff\n\n        # update the numerator and denominator for the next iteration\n        numerator += 2 * i\n        denominator += 2 * n - 2 * i\n\n    # return the even_sum\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (3.14 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14 * r ** 2 * h\n    return vol\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nvolume = volume_cylinder(radius, height)\n\nprint(\"The volume of the cylinder is:\", volume)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * 3.14159 * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = \u03c0r\u00b2h\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*(h/3)\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # create an empty list to store the filtered keys\n    filtered_keys = []\n    # loop through the dictionary and append keys with values greater than or equal to n to the filtered_keys list\n    for key, value in dict.items():\n        if value >= n:\n            filtered_keys.append(key)\n    # create a new dictionary with the filtered keys and their corresponding values\n    filtered_dict = {k:dict[k] for k in filtered_keys}\n    # return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, 0, -1):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_elements = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            num_elements += 1\n        else:\n            break\n    return num_elements"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # The first decagonal number is 1\n    if n == 1:\n        return 1\n\n    # Initialize a variable to store the sum of decagonal numbers\n    sum_decagonal = 0\n\n    # Loop through each pair of adjacent decagonal numbers\n    for i in range(1, n):\n        # Calculate the sum of the previous two decagonal numbers\n        sum_decagonal = (2*i*i - 1) + (2*i - 1)\n\n    return sum_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num += ((5*i*i) - (5*i) + 1) // 2\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal = 0\n    while i <= n:\n        decagonal += i\n        i += 1\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define a function to calculate the sum of the first n terms of the sequence\n    def sum_first_n_terms(n):\n        # The first two terms of the sequence are 0 and 1, so they don't count\n        return sum([1 + i*4 for i in range(1, n)])\n\n    # Check if the sum of the first n terms of the sequence is equal to the input number\n    return n == sum_first_n_terms(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the first decagonal number as 1\n    first_decagonal = 1\n    \n    # Define the nth decagonal number as (n-1)*(2n-1) + first_decagonal\n    nth_decagonal = (n-1)*(2*n-1) + first_decagonal\n    \n    # Return the nth decagonal number\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        num = n * (3 * n - 1) // 2\n        return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Helper function to find the nth triangle number\n    def triangle(n): \n        return int((n * (n + 1)) / 2)\n\n    # Calculate the nth triangle number\n    nth_triangle = triangle(n)\n\n    # Find the decagonal number corresponding to the nth triangle number\n    decagonal_num = int((nth_triangle ** 2 + 2 * nth_triangle + 1) / 6)\n\n    # Check if the decagonal number is equal to the nth decagonal number\n    if decagonal_num == nth_triangle: \n        return True\n    else: \n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        j += i\n        i += 1\n    return j - 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Convert n to decimal and add 1.5 to get the n-th square\n    nth_square = int((n+1.5)**2)\n    # Convert nth square back to decimal and subtract 1.5 to get the n-th square root\n    nth_square_root = int((nth_square-1.5)**0.5)\n    # Add 1 to get the nth decagonal number\n    nth_decagonal = nth_square_root - 1\n    # Return the nth decagonal number\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 2 * n * (n + 1) // 2"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = list(set(test_list))\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # create an empty set to store unique elements\n    unique_elements = set()\n    # loop through the list\n    for element in test_list:\n        # add the element to the set if it's not already there\n        if element not in unique_elements:\n            unique_elements.add(element)\n        # if we've checked all the elements and haven't found any duplicates, return True\n        else:\n            return False\n    # if we've made it this far, the list is unique and all elements have been checked\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    # Initialize the result list with zeros of the same length as the input lists\n    result = [0] * len(nums1)\n    \n    # Subtract the corresponding elements of the input lists from each other\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if both lists are of same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length\")\n    \n    # Subtract the elements of the two lists element-wise and store in a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if lists have same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return None\n\n    # subtract lists element-wise\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of the lists are the same\n    if len(nums1)!= len(nums2):\n        return \"The two lists must have the same length.\"\n\n    # subtract the lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # create a dictionary to store the frequency of each digit\n    frequency = {}\n\n    # loop through each digit of the number\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in frequency:\n            frequency[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[digit] = 1\n\n    # loop through the digits in the dictionary and check if their frequency is greater than the digit itself\n    for digit, freq in frequency.items():\n        if freq > digit:\n            return False\n\n    # if all digits have a frequency less than or equal to their digits, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize frequency array of size 10\n    \n    # iterate through each digit of the integer\n    while n > 0: \n        digit = n % 10  # get the last digit of the integer\n        n = n // 10  # remove the last digit from the integer\n        \n        # update the frequency of the digit in the frequency array\n        freq[digit] += 1\n        \n        # check if the frequency of the digit is greater than the digit itself\n        if freq[digit] > digit: \n            return False\n    \n    # if the loop completes, then the integer satisfies the condition\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # convert integer to string\n    string_n = str(n)\n    \n    # loop through each character in the string\n    for char in string_n:\n        # convert character to integer\n        digit = int(char)\n        \n        # check if digit is less than or equal to itself\n        if digit > digit:\n            return False\n    \n    # if we've made it through the loop without finding any digits greater than themselves, we've found a valid number\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # list to store the frequency of each digit in the integer\n    freq = [0] * 10\n\n    # iterate through each digit in the integer and increment the frequency of each digit\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # split the integer into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n\n    # iterate over the digits and update the frequency dictionary\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # iterate over the frequency dictionary and check if each frequency is less than or equal to the digit itself\n    for digit, freq in freq_dict.items():\n        if freq > digit:\n            return False\n\n    # if we reach this point, the frequency dictionary is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = set(str(n))\n    freq = [0] * 10  # initialize frequency array to 0\n    \n    # count frequency of each digit in the number\n    for digit in digits:\n        freq[int(digit)] += 1\n    \n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if freq[int(digit)] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = {}\n\n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in frequency.items():\n        if count > digit:\n            return False\n\n    # If all digits have the same frequency, then the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of digits\n    freq = {}\n    # loop through each digit in the number and increment its frequency in the dictionary\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n    \n    # loop through each digit in the dictionary and check if its frequency is greater than the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Convert the integer into a string\n    string_n = str(n)\n    \n    # Initialize an empty dictionary to store the frequency of digits\n    freq_dict = {}\n    \n    # Iterate through the string and count the frequency of each digit\n    for digit in string_n:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    \n    # If the loop completes without returning False, then the integer is valid\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # if the list is empty or contains only one item, return True\n    if len(list) <= 1:\n        return True\n    # check whether all items in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    # if all items in the list are equal to the given element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba\\w*b{2,3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\1{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a(b{2,3})\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b[2-3]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    sub_array_sum = 0\n    for i in range(k):\n        sub_array = a * i\n        sub_array_sum += sub_array\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf') # initialize maximum sum to negative infinity\n    current_sum = 0 # initialize current sum to 0\n    temp_array = [] # initialize a temporary array\n    \n    # loop through the array and add each element to the current sum and append it to the temporary array\n    for i in range(n):\n        current_sum += a[i]\n        temp_array.append(a[i])\n        \n        # if the current sum exceeds the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # if the current sum exceeds the target sum (k times the sum of the original array), break out of the loop\n        if current_sum > k*sum(a):\n            break\n        \n        # if the temporary array is full, remove the first element and reset the current sum to 0\n        if len(temp_array) == k:\n            temp_array.pop(0)\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array a, its size n, and the number of times to repeat the array a k times.\n    It returns the maximum sum of the contiguous array formed by repeating the array a k times.\n    '''\n\n    # Create a modified array using repeated array a\n    modified_array = a * k\n\n    # Initialize variables to store the maximum sum of the contiguous array formed by repeating the modified array and the maximum sum of the modified array\n    max_sum = 0\n    max_sum_modified = 0\n\n    # Iterate through the modified array and find the maximum sum of the contiguous array formed by repeating the array a k times\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n, k):\n            current_sum += a[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Iterate through the modified array and find the maximum sum of the modified array\n    for i in range(k):\n        current_sum = 0\n        for j in range(i, n, k):\n            current_sum += modified_array[j]\n        if current_sum > max_sum_modified:\n            max_sum_modified = current_sum\n\n    # Return the maximum sum of the contiguous array formed by repeating the array a k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n\n        if i >= k - 1:\n            curr_sum -= a[i - k + 1]\n\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = [a] * k\n    max_sum = max(a)\n    for i in range(k):\n        a[i] = a[i] + max_sum\n    return max(a)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a new array by repeating the given array k times\n    modified_array = []\n    for i in range(k):\n        modified_array += a\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Traverse through the modified array\n    for i in range(n):\n        current_sum += modified_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Remove the first element if current_sum becomes negative\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    \n    # Initialize the maximum sum as the first element of the array\n    max_sum = a[0]\n    \n    # Initialize the index of the last element of the array\n    last_index = 0\n    \n    # Initialize a list to store the sums of the modified array\n    modified_sum = []\n    \n    # Iterate over all the indices of the array\n    for i in range(n):\n        # Calculate the sum of the modified array formed by repeating the array k times\n        modified_sum.append(a[i] * k)\n        \n        # Calculate the sum of the modified array formed by repeating the array k times starting from the previous element\n        modified_sum.append(modified_sum[i] - modified_sum[i - 1])\n        \n        # Check if the maximum sum is greater than the sum of the modified array formed by repeating the array k times\n        if max_sum < max(modified_sum):\n            max_sum = max(modified_sum)\n        \n        # Shift the last element to the beginning of the array\n        a[last_index], a[i] = a[i], a[last_index]\n        last_index += 1\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes an array, n, and k as inputs, where n is the length of the array and k is the number of times to repeat the array.\n    It returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Repeat the array k times\n    repeated_array = []\n    for i in range(k):\n        repeated_array += a\n\n    # Calculate the sum of the modified array\n    sum_modified_array = sum(repeated_array)\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n\n    # Calculate the sum of the maximum subarray of the first element\n    max_subarray_sum = a[0]\n\n    # Iterate through the remaining elements of the array\n    for i in range(1, n):\n        # Calculate the sum of the current subarray\n        subarray_sum = a[i] + sum_modified_array - a[i-1]\n\n        # Update the maximum sum if the current subarray sum is greater\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n\n        # Update the maximum subarray sum if the current subarray sum is greater\n        if subarray_sum > max_subarray_sum:\n            max_subarray_sum = subarray_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array k times\n    for i in range(k):\n        # Add the repeated element to the sum of the current subarray\n        current_sum += a[0]\n        # If the sum of the current subarray becomes greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # Remove the first element of the array since we are repeating it\n        del a[0]\n        \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum subarray sum and its index\n    max_sum = float('-inf')\n    max_sum_index = -1\n    \n    # iterate through the array k times\n    for i in range(k):\n        # create a copy of the array\n        array = a[:]\n        \n        # iterate through the array from index 0 to n-1\n        for j in range(n):\n            # add the current element to the end of the array\n            array.append(array[j])\n            \n            # calculate the sum of the array and update the maximum subarray sum and its index if necessary\n            curr_sum = sum(array)\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_sum_index = j\n            \n            # remove the first element from the array\n            array.pop(0)\n            \n    # return the maximum subarray sum and its index\n    return max_sum, max_sum_index"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    sum_of_squares = 0\n\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    count = 0\n    sum = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    count = 0\n    total = 0\n    while count < n:\n        count += 1\n        total += count * count\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    even_numbers.reverse()\n    squares = [i**2 for i in even_numbers]\n    return sum(squares)"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(2, n+1, 2):\n        sum += i*i\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n        count += 1\n\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the maximum length of any sublist.\n    '''\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    max_lengths = []\n\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(max_lengths) == 0:\n            max_lengths = sublist\n\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of lists that have the maximum length.\n    '''\n    # Initialize a variable to store the maximum length\n    max_len = 0\n    \n    # Iterate over all the elements in the list of lists\n    for lst in list1:\n        # Check if the length of the current list is greater than the maximum length\n        if len(lst) > max_len:\n            # Update the maximum length\n            max_len = len(lst)\n    \n    # Create a new list to store the elements with the maximum length\n    result = []\n    \n    # Iterate over all the elements in the list of lists\n    for lst in list1:\n        # Check if the length of the current list is equal to the maximum length\n        if len(lst) == max_len:\n            # Add the current list to the result list\n            result.append(lst)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables\n    max_length_list = []\n    max_length = 0\n    \n    # loop through each list in list1\n    for i in range(len(list1)):\n        # loop through each item in list1[i]\n        for j in range(len(list1[i])):\n            # add the length of the current item to the maximum length\n            max_length = max(max_length, len(list1[i][j]))\n            \n    # append the maximum length to the max_length_list\n    max_length_list.append(max_length)\n    \n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length in the list.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 if k == 1 else 2\n    if k == 1:\n        return 3\n    if n == 3:\n        return 4\n    ways = [0] * (n + 1)\n    ways[0], ways[1], ways[2] = 1, 1, 1\n    for i in range(3, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n    return ways[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create an empty list to store the number of ways\n    count = []\n\n    # Loop through all possible pairs of adjacent colors\n    for i in range(k):\n        for j in range(i+1, k):\n            # Initialize the count for this pair as 0\n            count.append((0, 0))\n\n    # Fill the count matrix with the number of ways\n    for i in range(2, n+1):\n        count[i-2] = (count[i-2][0] + count[i-2][1] + count[i-2][2], count[i-2][1], count[i-2][2])\n\n    # Return the final count\n    return count[-1][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the count of ways for each combination of colors\n    count = [[0] * (k+1) for _ in range(n+1)]\n\n    # Base case:\n    # If the number of posts is 0, there is only 1 way to paint the fence with 0 colors\n    count[0][0] = 1\n\n    # Base case:\n    # If there are no colors to choose from, there is only 1 way to paint the fence with 0 colors\n    for i in range(1, n+1):\n        count[i][0] = 1\n\n    # For each post from 1 to n, calculate the number of ways to paint the fence with k colors\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # For each color j, calculate the count of ways to paint the fence with j colors\n            for l in range(i):\n                if count[l][j-1] > 0:\n                    count[i][j] += count[l][j-1]\n\n    return count[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if k == 2:\n        return n + 1\n    \n    ways = 0\n    for i in range(1, n+1):\n        ways += count_no_of_ways(n-i, k)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an empty dictionary to store the number of ways of painting the fence with k colors\n    ways_dict = {}\n\n    # Initialize a variable to store the number of ways of painting the fence with 2 adjacent posts having the same color\n    ways = 0\n\n    # Initialize a variable to store the number of ways of painting the fence with 1 adjacent post having the same color\n    ways_1 = 0\n\n    # Initialize a variable to store the number of ways of painting the fence with 0 adjacent posts having the same color\n    ways_0 = 1\n\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Initialize a variable to store the number of ways of painting the fence with i adjacent posts having the same color\n        ways_i = 0\n\n        # Iterate through the numbers from 1 to k\n        for j in range(1, k+1):\n\n            # If the fence has i adjacent posts having the same color, increment the number of ways of painting the fence with 2 adjacent posts having the same color\n            if i >= 3 and i % (j + 1) == 0:\n                ways_i += ways_dict[i-3]\n\n            # If the fence has i adjacent posts having the same color, increment the number of ways of painting the fence with 1 adjacent post having the same color\n            elif i >= 2 and i % (j + 1) == 0:\n                ways_i += ways_1\n\n            # If the fence has i adjacent posts having the same color, increment the number of ways of painting the fence with 0 adjacent posts having the same color\n            elif i >= 1 and i % (j + 1) == 0:\n                ways_i += ways_0\n\n        # Add the number of ways of painting the fence with i adjacent posts having the same color to the total number of ways\n        ways += ways_i\n\n        # Update the dictionary with the current number of ways of painting the fence with k colors\n        ways_dict[i] = ways_i\n\n        # Update the variables to store the number of ways of painting the fence with 2 adjacent posts having the same color and the number of ways of painting the fence with 1 adjacent post having the same color\n        ways_2 = 0\n        ways_1 = ways_i\n\n        # Update the variables to store the number of ways of painting the fence with 0 adjacent posts having the same color\n        ways_0 = ways_i - ways_2\n\n    # Return the total number of ways of painting the fence with k colors\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create an array of 0s and 1s to represent the fence\n    fence = [0] * n\n    fence[0] = 1  # first post is painted with color 1\n\n    # create a 2D array to store the number of ways of painting the fence\n    ways = [[0] * (k + 1) for _ in range(n)]\n\n    # initialize the first row of the 2D array to 1\n    for i in range(k + 1):\n        ways[0][i] = 1\n\n    # fill the rest of the 2D array using dynamic programming\n    for i in range(1, n):\n        for j in range(k + 1):\n            if fence[i - 1] == j:\n                ways[i][j] = ways[i - 1][j] + ways[i][j - 1]\n            else:\n                ways[i][j] = ways[i - 1][j]\n\n    # return the value in the bottom right corner of the 2D array\n    return ways[n - 1][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize a 2D array of size (n+1) x (k+1) with zeros\n    memo = [[0] * (k+1) for _ in range(n+1)]\n\n    # fill the first row and first column with 1\n    memo[0][0] = 1\n    memo[0][1] = 1\n\n    # fill the remaining elements with the maximum of the number of ways to paint adjacent fences of the same color and not painting the current post\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            memo[i][j] = max(memo[i-1][j-1], memo[i-1][j])\n\n    # return the value of the last row and last column of the memo array\n    return memo[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize the dp table\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Fill the dp table using the memoization method\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1 or i == 1:\n                # If either the first or last post has j colors, there is only 1 way to paint the fence\n                dp[i][j] = 1\n            else:\n                # If the number of adjacent posts with the same color is at most i, then there are i-1 ways to paint the fence with n-i posts and j-1 colors\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n\n    # Return the value in the last row and last column of the dp table\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[0] * (k + 1) for _ in range(n + 1)]  # creating a 2D array to store dp values\n\n    # initializing the base case values for dp\n    for i in range(n + 1):\n        if i == 0 or i == n:\n            dp[i][0] = 1\n        else:\n            dp[i][0] = 1\n            dp[i][1] = 1\n\n    # calculating the dp values for all the possible combinations of colors\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # if the last two posts have different colors\n            if j % 2 == 1:\n                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % 1000000007\n            # if the last two posts have same color\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the count of ways for different fence sizes\n    count = {1: 1}\n    \n    # Iterate over the fence sizes from 2 to n\n    for i in range(2, n+1):\n        # Initialize a variable to store the count of ways for the current fence size\n        ways = 0\n        \n        # Iterate over the fence colors from 1 to k-1\n        for j in range(1, k):\n            # Calculate the count of ways for the current fence size and color combination\n            ways += count[i-1] * count[k-j]\n        \n        # Add the count of ways for the current fence size to the count dictionary\n        count[i] = ways\n    \n    # Return the count of ways for the final fence size\n    return count[n]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculating the semi-perimeter\n    s = (w + h) / 2\n\n    # finding the square root of the semi-perimeter\n    r = math.sqrt(s)\n\n    # finding the length of the other side\n    o = (w**2 + h**2 - r**2) / (2*w)\n\n    # printing the result\n    print(\"The third side of the right angled triangle is:\", o)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes two sides of a right angled triangle and returns the third side of the triangle.\n    '''\n    a = (w**2 + h**2)**0.5\n    c = (w**2 + h**2)**0.5\n    b = (w**2 + a**2)**0.5\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the other side of the triangle\n    o_side = area / 2\n\n    return o_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the width and height of a right angled triangle and returns the third side of the triangle.\n    '''\n    c = (w**2 + h**2)**0.5 #calculate the semi-perimeter of the triangle\n    a = h #semi-perimeter of the triangle is twice the height of the triangle\n    s = (a+c)**0.5 #calculate the semi-perimeter of the triangle\n    return (w**2 - h**2)**0.5 #return the third side of the triangle which is the distance between the height and square root of the sum of semi-perimeters"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle.\n\n    Args:\n    w (float): The length of the first side of the triangle.\n    h (float): The length of the second side of the triangle.\n\n    Returns:\n    float: The length of the third side of the triangle.\n    '''\n\n    # Calculate the area of the triangle\n    area = 0.5 * w * h\n\n    # Calculate the semi-perimeter of the triangle\n    semi_perimeter = math.sqrt(area)\n\n    # Calculate the third side of the triangle\n    third_side = 2 * semi_perimeter\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the length of the second side\n    s = math.sqrt(w**2 + h**2)\n\n    # Calculate the length of the third side\n    c = math.sqrt(s**2 + w**2 + h**2)\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s * (s - w) * (s - h))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the max value to the first element of the list\n    max_val = listval[0]\n    \n    # Loop through the list and compare each element with the current max value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first element of the list\n    max_value = listval[0]\n    \n    # Iterate through the rest of the list\n    for element in listval[1:]:\n        # If the current element is greater than the maximum, update the maximum\n        if element > max_value:\n            max_value = element\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # initialize max_val with the first element of the list\n    for i in range(1, len(listval)): # iterate over the rest of the list\n        if listval[i] > max_val: # if the current element is greater than max_val\n            max_val = listval[i] # update max_val\n    return max_val # return the final value of max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], int):\n            max_val = max(max_val, listval[i])\n        elif isinstance(listval[i], float):\n            max_val = max(max_val, listval[i])\n        elif isinstance(listval[i], str):\n            max_val = max(max_val, listval[i])\n        else:\n            raise TypeError('List contains non-numeric types.')\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    max_value = listval[0]\n    for item in listval:\n        if item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    divisor_sum = 0\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n\n        # Check if the current number is a divisor of the input number\n        if number % i == 0:\n\n            # If it is, add it to the divisor sum\n            divisor_sum += i\n\n    # Return the sum of all divisors\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    divisors_sum = 0\n\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(arr, l, m, r):\n    # Create temp arrays\n    L = [0] * (m - l + 1)\n    R = [0] * (r - m)\n    \n    # Copy data to temp arrays L[] and R[]\n    for i in range(m - l + 1):\n        L[i] = arr[l + i]\n    for j in range(r - m):\n        R[j] = arr[m + 1 + j]\n    \n    # Merge the temp arrays back into arr[l..r]\n    i = 0 # Initial index of first subarray\n    j = 0 # Initial index of second subarray\n    k = l # Initial index of merged subarray\n    \n    while i < m - l + 1 and j < r - m:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n    \n    while i < m - l + 1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n    \n    while j < r - m:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n        \ndef merge_sort(arr, l, r):\n    if l < r:\n        m = l + (r - l) // 2\n        \n        # Sort first and second halves\n        merge_sort(arr, l, m)\n        merge_sort(arr, m + 1, r)\n        \n        # Merge the sorted halves\n        merge(arr, l, m, r)\n        \ndef get_Inv_Count(arr):\n    merge_sort(arr, 0, len(arr) - 1)\n    inv_count = 0\n    i = 1\n    j = 1\n    while i < len(arr):\n        if arr[i] > arr[j]:\n            inv_count += i - j\n            j = i\n        i += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Divide the array into two halves recursively until there is only one element\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    mid = n // 2\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n\n    # Count inversions in each half\n    left_count = 0\n    right_count = 0\n\n    # Count inversions between i and mid-1 and i+mid to mid-1, i+mid to n-1, and i to mid\n    for i in range(mid):\n        left_count += min(mid-i, i+1-i-left_count)\n\n    for i in range(mid, n):\n        right_count += min(i+1-mid, n-i-1)\n\n    # Count inversions between mid and n-1\n    for i in range(mid, n):\n        count += left_count + right_count - min(mid-i, i+1-i-left_count) - min(i+1-mid, n-i-1)\n\n    return count + left_inv + right_inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Recursive function to count inversions\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n    \n    def merge(left, right):\n        inv_count += len(left) + len(right)\n        i = j = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    # Sort the array using merge sort\n    sorted_arr = merge_sort(arr)\n    \n    # Count inversions using two pointers\n    i = 0\n    j = n - 1\n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            inv_count += (j - i)\n            i += 1\n        else:\n            j -= 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize variables for inversions and counts\n    inv_count = 0\n    left = 0\n    right = n - 1\n\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n            inv_count += (right - left + 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        left_half = merge_sort(left_half)\n        right_half = merge_sort(right_half)\n\n        return merge(left_half, right_half)\n\n    def merge(left_half, right_half):\n        inv_count = 0\n        i = j = 0\n        result = []\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                result.append(left_half[i])\n                i += 1\n            else:\n                result.append(right_half[j])\n                inv_count += len(left_half) - i\n                j += 1\n\n        result += left_half[i:]\n        result += right_half[j:]\n\n        return result\n\n    return merge_sort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Function to merge two subarrays of arr[]. \n    # l1 and r1 are the starting \n    # index of the first subarray \n    # and l2 and r2 are the \n    # ending index of the second subarray \n    def merge(arr, l1, r1, l2, r2): \n        i = l1 \n        j = l2 \n\n        # copy data to temp array \n        temp = [0] * (r2 - l1 + 1) \n\n        # merge the subarrays \n        k = 0 \n        while i <= r1 and j <= r2: \n            if arr[i] <= arr[j]: \n                temp[k] = arr[i] \n                i += 1 \n            else: \n                temp[k] = arr[j] \n                j += 1 \n            k += 1 \n\n        # copy remaining elements of l1[] \n        while i <= r1: \n            temp[k] = arr[i] \n            i += 1 \n            k += 1 \n\n        # copy remaining elements of l2[] \n        while j <= r2: \n            temp[k] = arr[j] \n            j += 1 \n            k += 1 \n\n        # copy merged subarray to arr[] \n        i = l1 \n        for k in range(l1, r2 + 1): \n            arr[i] = temp[k - l1] \n            i += 1 \n\n    # Count inversions \n    def count_inversions(arr, l, r): \n        if l == r: \n            return 0 \n\n        mid = l + (r - l) // 2 \n\n        inv1 = count_inversions(arr, l, mid) \n        inv2 = count_inversions(arr, mid + 1, r) \n\n        # divide and conquer \n        i = l \n        j = mid + 1 \n        inv = 0 \n        while i <= mid and j <= r: \n            if arr[i] <= arr[j]: \n                i += 1 \n            else: \n                arr[i], arr[j] = arr[j], arr[i] \n                inv += mid - i + 1 \n                j += 1 \n\n        return inv + inv1 + inv2 \n\n    # Merge sort function \n    def merge_sort(arr, l, r): \n        if l < r: \n            mid = l + (r - l) // 2 \n            merge_sort(arr, l, mid) \n            merge_sort(arr, mid + 1, r) \n            merge(arr, l, r, l, r) \n\n    # Function to count inversions in arr[] \n    inv_count = count_inversions(arr, 0, n - 1) \n    print(\"Number of inversions: \", inv_count) "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in non-descending order\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n-j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(arr, left, mid, right): \n        \"\"\"\n        Merges two sorted sub-arrays of arr[].\n        \"\"\"\n        n1 = mid - left + 1\n        n2 = right - mid\n        \n        L = [0] * n1\n        R = [0] * n2\n        \n        for i in range(n1): \n            L[i] = arr[left + i]\n            \n        for j in range(n2): \n            R[j] = arr[mid + 1 + j]\n            \n        i = 0 # index for left sub-array \n        j = 0 # index for right sub-array \n        k = left # index for merged sub-array\n        \n        while i < n1 and j < n2: \n            if L[i] <= R[j]: \n                arr[k] = L[i] \n                i += 1\n            else: \n                arr[k] = R[j] \n                j += 1\n            k += 1\n            \n        while i < n1: \n            arr[k] = L[i] \n            i += 1\n            k += 1\n            \n        while j < n2: \n            arr[k] = R[j] \n            j += 1\n            k += 1\n            \n    def mergeSort(arr, left, right): \n        \"\"\"\n        Sorts the array using merge sort algorithm.\n        \"\"\"\n        if left < right: \n            mid = (left + right) // 2\n            \n            mergeSort(arr, left, mid) \n            mergeSort(arr, mid + 1, right) \n            \n            merge(arr, left, mid, right) \n            \n    mergeSort(arr, 0, len(arr) - 1) \n    count = 0\n    n = len(arr)\n    for i in range(1, n): \n        for j in range(0, n - i): \n            if arr[j] > arr[j + i]: \n                count += n - i\n                break\n                \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Counting inversions using merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n\n            merge_sort(left)\n            merge_sort(right)\n\n            i = j = k = 0\n\n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    arr[k] = left[i]\n                    i += 1\n                else:\n                    arr[k] = right[j]\n                    j += 1\n                k += 1\n\n            while i < len(left):\n                arr[k] = left[i]\n                i += 1\n                k += 1\n\n            while j < len(right):\n                arr[k] = right[j]\n                j += 1\n                k += 1\n\n    # Counting inversions using two pointers\n    def count_inversions(arr):\n        i, j = 0, len(arr) - 1\n        count = 0\n\n        while i < j:\n            if arr[i] > arr[j]:\n                count += j - i + 1\n                i += 1\n            else:\n                j -= 1\n\n        return count\n\n    # Merging two sorted arrays into one\n    def merge_arrays(arr1, arr2):\n        i, j = 0, 0\n        k = 0\n\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                arr[k] = arr1[i]\n                i += 1\n            else:\n                arr[k] = arr2[j]\n                j += 1\n            k += 1\n\n        while i < len(arr1):\n            arr[k] = arr1[i]\n            i += 1\n            k += 1\n\n        while j < len(arr2):\n            arr[k] = arr2[j]\n            j += 1\n            k += 1\n\n    # Main function to count inversions\n    inv_count = 0\n    merge_sort(arr)\n    inv_count += count_inversions(arr)\n\n    # Merging the sorted arrays\n    merged_arr = [0] * n\n    merge_arrays(arr[:n // 2], arr[n // 2:])\n    inv_count += count_inversions(merged_arr)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n    merge_sort(arr)\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - 1\n                break\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a flattened version of it.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[1]] += item[0]\n    \n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    counts = defaultdict(int)\n    for item, quantity in stdata:\n        counts[item] += quantity\n\n    # Find the maximum count\n    max_count = max(counts.values())\n\n    # Iterate over the counts dictionary and calculate the maximum aggregate\n    max_aggregate = 0\n    for item, count in counts.items():\n        if count == max_count:\n            max_aggregate += item\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each product\n    max_agg = defaultdict(int)\n\n    # loop through each tuple in the list\n    for item in stdata:\n        # update the maximum aggregate for the product in the tuple\n        max_agg[item[0]] = max(item[1], max_agg[item[0]])\n\n    # return the maximum aggregate for each product\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the aggregate of each transaction\n    aggr_dict = defaultdict(int)\n    # Initialize the maximum aggregate to be negative infinity\n    max_aggr = float('-inf')\n    # Iterate through the list of tuples\n    for trans in stdata:\n        # Calculate the aggregate of the transaction\n        aggr = sum(trans)\n        # Update the aggregate dictionary and the maximum aggregate if necessary\n        aggr_dict[trans] = aggr\n        max_aggr = max(max_aggr, aggr)\n    # Return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the maximum aggregate for each stock\n    max_aggr = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for stock, price in stdata:\n        # Update the maximum aggregate for the current stock\n        max_aggr[stock] = max(max_aggr[stock], price)\n\n    # Calculate the maximum aggregate across all stocks\n    max_aggr_all = max(max_aggr.values())\n\n    # Return the maximum aggregate across all stocks\n    return max_aggr_all"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg_dict = defaultdict(int)\n    for item in stdata:\n        max_agg_dict[item[0]] += item[1]\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_profit = defaultdict(int)\n    max_valley = defaultdict(int)\n    \n    for i in range(len(stdata)):\n        if stdata[i][0] < stdata[i][1]:\n            max_profit[i] = stdata[i][2]\n        else:\n            max_valley[i] = stdata[i][2]\n    \n    for i in range(len(stdata)):\n        if stdata[i][0] < stdata[i][1]:\n            max_profit[i] = max(max_profit[i], max_valley[i-1] - stdata[i][1])\n        else:\n            max_valley[i] = max(max_valley[i], max_profit[i-1] - stdata[i][0])\n            \n    return max(max_profit.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for sale in stdata:\n        max_dict[sale[1]] += sale[2]\n    max_aggr = max(max_dict.values())\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the count of each transaction type\n    count_dict = defaultdict(int)\n\n    # Iterate through each transaction and update the count of its type\n    for transaction in stdata:\n        count_dict[transaction[0]] += transaction[1]\n\n    # Find the maximum count of each transaction type and return it as the max aggregate\n    max_count = max(count_dict.values())\n    return max_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the dictionary to store the maximum aggregate\n    max_agg = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for tup in stdata:\n        # Calculate the maximum aggregate\n        max_agg[tup[1]] = max(max_agg[tup[1]], tup[0])\n    \n    # Calculate the maximum value in the dictionary\n    max_val = max(max_agg.values())\n    \n    # Return the maximum value in the dictionary\n    return max_val"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize a variable to store the count of binary sequences\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the integer to binary and count the number of '1's\n        binary_seq = bin(i)[2:].zfill(2*n)\n        ones_count = sum(1 for digit in binary_seq if digit == '1')\n\n        # If the sum of the first n bits is the same as the sum of the last n bits, increment the count\n        if binary_seq[:n] == binary_seq[-n:]:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        seq = '{:0{}b}'.format(i, 2*n)\n        if sum(int(j) for j in seq[:n]) == sum(int(j) for j in seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:]\n        if num == num[::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize count and initialize two lists to store the bits\n    count = 0\n    bits = [0] * 2 * n\n\n    # loop through all possible sequences\n    for i in range(2**n):\n        # convert integer to binary string\n        binary_str = bin(i)[2:].zfill(n)\n\n        # check if sum of first n bits is same as sum of last n bits\n        if binary_str[:n] == binary_str[-n:]:\n            count += 1\n\n        # if the count is equal to 2**n, break out of the loop\n        if count == 2**n:\n            break\n\n    # return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2**n-1):\n        sum_bits = 0\n        for j in range(n):\n            if (i & (1 << j)):\n                sum_bits += 1\n        for j in range(n):\n            if (i & (1 << (n-j-1))):\n                sum_bits += 1\n        if sum_bits == i >> n:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # Initialize a dictionary to store the count of each binary sequence\n    seq_count = {}\n\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n): \n        # Convert the current binary sequence to a list of bits\n        binary_seq = list(format(i, f'0{2*n}b'))\n\n        # Calculate the sum of the first n bits and the sum of the last n bits\n        sum_first_n = int(binary_seq[:n], 2)\n        sum_last_n = int(binary_seq[-n:], 2)\n\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum_first_n == sum_last_n: \n            # If it is, increment the count for this binary sequence in the dictionary\n            if binary_seq in seq_count: \n                seq_count[binary_seq] += 1\n            else: \n                seq_count[binary_seq] = 1\n\n    # Calculate the total count of binary sequences\n    total_count = sum(seq_count.values())\n\n    # Return the total count of binary sequences\n    return total_count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = bin(i)[2:].zfill(n)\n        last = bin(i)[-2:].zfill(n)\n        if first[-1] == last[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    def is_valid_binary_seq(seq):\n        return sum(int(bit) for bit in seq) == sum(int(bit) for bit in seq[::-1])\n\n    def count_valid_binary_seq(n):\n        count = 0\n        for i in range(2 ** n):\n            binary_seq = bin(i)[2:].zfill(n * 2)\n            if is_valid_binary_seq(binary_seq):\n                count += 1\n        return count\n\n    return count_valid_binary_seq(n)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    def binary_seq(num, n):\n        seq = []\n        while num > 0:\n            if num % 2 == 1:\n                seq.append(str(num))\n            num = num // 2\n        return seq\n\n    count = 0\n    for i in range(2**n):\n        seq = binary_seq(i, n)\n        if sum(int(s) for s in seq[:n]) == sum(int(s) for s in seq[-n:]):\n            count += 1\n    return count\n\nprint(count_binary_seq(3))  # Output: 3"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if i == i & (i >> 1):\n            count += 1\n    return count\n\nprint(count_binary_seq(3))  # Output: 18\nprint(count_binary_seq(4))  # Output: 54"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = 1 + dict_depth(item)\n                    if depth > max_depth:\n                        max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to 0\n    depth = 0\n    # iterate through the dictionary\n    for key, value in d.items():\n        # check if the value is a dictionary\n        if isinstance(value, dict):\n            # recursively call the function\n            new_depth = dict_depth(value)\n            # update depth with the maximum value\n            if new_depth > depth:\n                depth = new_depth\n    # return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize the depth variable\n    depth = 0\n    \n    # iterate over the keys of the dictionary\n    for key in d:\n        # check if the key is a dictionary\n        if isinstance(d[key], dict):\n            # if it is, increment the depth by one\n            depth += 1\n        # if the key is not a dictionary, increment the depth by zero\n        else:\n            depth += 0\n    \n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    else:\n        depth = 0\n        for key in d.keys():\n            depth = max(depth, dict_depth(d[key]))\n        return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth variable to 0\n    depth = 0\n    # Recursively traverse the dictionary\n    _dict_depth(d, depth)\n    # Return the depth variable\n    return depth\n\n\ndef _dict_depth(d, depth):\n    '''\n    Recursively traverse the dictionary and increment the depth variable.\n    '''\n    # Check if the dictionary is empty\n    if not d:\n        return\n    # Recursively traverse the dictionary values\n    for value in d.values():\n        if isinstance(value, dict):\n            _dict_depth(value, depth + 1)\n    # Return the depth variable\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: if the dictionary is empty, return 1\n    if not d:\n        return 1\n\n    # Recursive case: if the dictionary has only one key-value pair, return 1\n    if len(d) == 1:\n        return 1\n\n    # Recursive case: if the dictionary has more than one key-value pair, return 1 plus the depth of the sub-dictionary(s)\n    max_depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            sub_depth = dict_depth(v)\n            if sub_depth > max_depth:\n                max_depth = sub_depth\n\n    return 1 + max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to zero\n    depth = 0\n    # traverse the dictionary recursively\n    for k, v in d.items():\n        if isinstance(v, dict):\n            # if the value is a dictionary, traverse it recursively\n            depth = max(depth, dict_depth(v) + 1)\n        elif isinstance(v, list):\n            # if the value is a list, traverse each element recursively\n            for item in v:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n        else:\n            # if the value is not a dictionary, list, or None, increment depth by 1\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the original index\n    original_index = (index + rotations) % len(arr)\n    # Calculate the new index after rotating\n    new_index = ((original_index - ranges[original_index % len(ranges)]) % len(arr))\n    # Return the element at the new index\n    return arr[new_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes the following arguments:\n    arr: List of integers representing the array.\n    ranges: List of integers representing the range of each element in the array.\n    rotations: Integer representing the number of rotations required.\n    index: Integer representing the index of the element we want to find.\n    '''\n\n    # Calculating the sum of all elements after the rotations\n    total_sum = sum(arr[-rotations:])\n\n    # Looping through the ranges and finding the sum of elements in each range\n    for i in range(len(ranges)):\n        current_range = arr[-rotations+ranges[i]:-rotations]\n        total_sum = total_sum - current_range[index] + arr[-rotations+ranges[i]+1]\n\n    # Returning the element at the given index\n    return arr[-rotations-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n\n    def binary_search(arr, low, high, target):\n        if high >= low:\n            mid = (high + low) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                return binary_search(arr, mid + 1, high, target)\n            else:\n                return binary_search(arr, low, mid - 1, target)\n        else:\n            return -1\n\n    def find_index(arr, ranges, rotations, index):\n        low = 0\n        high = len(ranges) - 1\n        for i in range(rotations):\n            if low < high:\n                mid = (low + high) // 2\n                if ranges[mid] >= index:\n                    high = mid\n                else:\n                    low = mid + 1\n            else:\n                return -1\n        return binary_search(arr, 0, rotations - 1, index)\n\n    return find_index(arr, ranges, rotations, index)\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Check if all elements in the range are in the array\n    if all(x in arr for x in range(ranges[0], ranges[1] + 1)):\n        # If the element is in the array, check if it is at the desired index after rotations\n        if arr[index] == arr[(index + rotations) % len(arr)]:\n            return arr[index]\n        else:\n            return \"Element not found\"\n    else:\n        return \"Invalid range\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array `arr`, a list of ranges `ranges`, and a list of rotations `rotations` and an index `index`. \n    It returns the element at the given index after the rotations.\n    \"\"\"\n\n    # Calculate the sum of all the elements in the array\n    arr_sum = sum(arr)\n\n    # Initialize the result variable\n    result = arr[0]\n\n    # Iterate through the rotations and update the result variable\n    for rotation in rotations:\n        # Calculate the number of rotations needed to move the element from its current index to index\n        rotation_needed = index - rotation\n\n        # If the element is already at the desired index, return the result\n        if arr[rotation] == arr[index]:\n            return result\n\n        # Check if the rotation would exceed the range of the array\n        if rotation_needed < 0 or rotation_needed >= len(arr):\n            continue\n\n        # Calculate the new index after rotation\n        new_index = rotation + rotation_needed % len(arr)\n\n        # Check if the new index is within the range of the array\n        if new_index < 0 or new_index >= len(arr):\n            continue\n\n        # Calculate the new value of the element after rotation\n        new_value = (arr[rotation] + arr[new_index] - arr[rotation_needed]) % arr_sum\n\n        # Update the result variable with the new value\n        result = new_value\n\n    # Return the result after all rotations are complete\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # initialize variables to store the element at the given index and the new index\n    element = None\n    new_index = None\n    \n    # loop through each range and check if the current index falls within it\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            # check if the current rotation falls within this range\n            if rotations[i][0] <= rotations[i][1]:\n                # if the current rotation is within the range, calculate the new index\n                new_index = rotations[i][1] - (rotations[i][1] - rotations[i][0]) + index\n            else:\n                # if the current rotation is outside the range, calculate the new index\n                new_index = rotations[i][1] - (rotations[i][0] - index)\n                \n            # check if the new index is within the range of the current range\n            if new_index >= ranges[i][0] and new_index <= ranges[i][1]:\n                # if it is, set the element to the element at the new index\n                element = arr[new_index]\n                break\n                \n    # return the element at the given index after rotating it\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a list of rotations, and an index as input.\n    The function finds the element at the given index after performing the specified number of rotations.\n    \"\"\"\n    # First, we need to perform the specified number of rotations.\n    for i in range(rotations):\n        # Find the current index in the array.\n        current_index = (index + i) % len(arr)\n        # Swap the element at the current index with the element at the next index.\n        arr[current_index], arr[index] = arr[index], arr[current_index]\n    # Now, we need to find the element at the specified index.\n    for i in range(len(arr)):\n        # If we have found the element, return it.\n        if i == index:\n            return arr[i]\n        # Check if the element is within the specified range.\n        if arr[i] >= ranges[0] and arr[i] < ranges[1]:\n            # If it is, return it.\n            return arr[i]\n    # If we have not found the element, return None.\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Function to find element at given index after rotations\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            index += rotations[i]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array of elements, a list of pairs representing the rotations,\n    and the index of the element we want to find after rotating. The function returns the\n    element at the given index after rotating the array.\n\n    The function works as follows:\n    1. Find the element at the given index.\n    2. Perform the specified number of rotations on the array.\n    3. Find the element at the new index.\n    '''\n    # Find the element at the given index.\n    element = arr[index]\n\n    # Perform the specified number of rotations on the array.\n    for _ in range(rotations):\n        # Find the index of the element after rotation.\n        new_index = (index - 1) % len(arr)\n\n        # Swap the element at the old index and the element at the new index.\n        arr[index], arr[new_index] = arr[new_index], arr[index]\n\n        # Move the index to the next position.\n        index = new_index\n\n    # Find the element at the new index.\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of pairs representing the rotations, and an index and returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Calculate the total number of rotations required\n    total_rotations = sum(rotations)\n    # Initialize the current element\n    current_element = arr[index]\n    # Apply the specified number of rotations to the array\n    for rotation in rotations:\n        current_element = arr[(index + rotation) % len(arr)]\n    # Calculate the element at the final index\n    final_index = (index + total_rotations) % len(arr)\n    final_element = arr[final_index]\n    # Check if the final element is present in the given range\n    if ranges:\n        for range in ranges:\n            if range[0] <= final_element <= range[1]:\n                return final_element\n    # If the final element is not present in any of the given ranges, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return words[i], words[i+1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.search(pattern, word):\n            return word, word.replace('p', '')\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'p\\w+'\n    words = [word for word in words if re.match(pattern, word)]\n    if len(words) == 2:\n        return words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p\\w+$'\n    result = []\n    for word in words:\n        if re.match(pattern, word):\n            if len(result) < 2:\n                result.append(word)\n            elif len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Create a list of words starting with letter 'p'\n    p_words = [word for word in words if word[0].lower() == 'p']\n\n    # If there are less than two words starting with 'p', return None\n    if len(p_words) < 2:\n        return None\n\n    # If there are more than two words starting with 'p', return None\n    elif len(p_words) > 2:\n        return None\n\n    # If there are exactly two words starting with 'p', return them\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Use regular expression to find all words starting with letter 'p'\n    pattern = re.compile(r'\\bp\\w+')\n    matches = pattern.findall(words)\n\n    # If no word starting with 'p' is found, return None\n    if not matches:\n        return None\n\n    # Split the list of matches into two lists\n    first_match = matches[0].split()\n    second_match = matches[1].split()\n\n    # Return the two lists as the output\n    return first_match, second_match"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.search(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = a[0]\n    max_sum = a[0]\n    for i in range(1, n + 1):\n        if i > index:\n            dp[i] = max(dp[i - 1], dp[i - k])\n        else:\n            dp[i] = dp[i - 1] + a[i - 1]\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence\n    max_sum = [0] * n\n\n    # Initialize a list to store the maximum sum of increasing subsequence from prefix till i-1\n    max_sum_from_prefix = [0] * n\n\n    # Initialize a variable to store the current maximum sum\n    max_current_sum = 0\n\n    # Initialize a variable to store the maximum sum of increasing subsequence till i-1\n    max_sum_till_i_minus_1 = 0\n\n    # Loop through all indices from 0 to i-1\n    for i in range(1, n):\n\n        # Check if the current element is greater than k or if k is not present\n        if a[index] > a[k] or k == n - 1:\n            # If current element is greater than k or k is the last element\n            # Update the maximum sum of increasing subsequence from prefix till i-1\n            max_sum_from_prefix[i] = max_sum_from_prefix[i-1] + a[i]\n\n            # If current element is less than or equal to k and not the last element\n            # Update the maximum sum of increasing subsequence till i-1\n            max_sum_till_i_minus_1 = max_sum_from_prefix[i-1]\n\n            # Update the maximum sum of increasing subsequence from prefix till i\n            max_sum[i] = max(max_sum_from_prefix[i], max_sum_till_i_minus_1)\n\n            # Update the maximum sum of increasing subsequence till i\n            max_current_sum = max(max_current_sum, max_sum[i])\n        else:\n            # If current element is less than or equal to k and not the last element\n            # Update the maximum sum of increasing subsequence till i-1\n            max_sum_till_i_minus_1 = max_sum_from_prefix[i-1] + a[i]\n\n            # Update the maximum sum of increasing subsequence from prefix till i\n            max_sum[i] = max(max_sum_from_prefix[i], max_sum_till_i_minus_1)\n\n            # Update the maximum sum of increasing subsequence till i\n            max_current_sum = max(max_current_sum, max_sum[i])\n\n    # Return the maximum sum of increasing subsequence till n-1\n    return max_current_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    # base case: if a[index] is greater than a[k], then a[index] is not included in the subsequence and hence 0 sum is returned\n    if a[index] > a[k]:\n        return 0\n    \n    # recursive case: if a[index] is less than or equal to a[k], then a[index] is included in the subsequence\n    # and we can either include a[index] in the subsequence or exclude it and calculate the maximum sum of increasing subsequence without a[index]\n    return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, index) + a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize an empty list to store the maximum sum of increasing subsequence for each index\n    max_sum = [0] * n\n\n    # Initialize a variable to store the maximum sum of increasing subsequence including the kth element\n    max_sum_k = float('-inf')\n\n    # Initialize a variable to store the maximum sum of increasing subsequence excluding the kth element\n    max_sum_excluding_k = 0\n\n    # Initialize a variable to store the current maximum sum of increasing subsequence\n    current_sum = a[index]\n\n    # Iterate through the list of elements from the prefix to the ith index\n    for i in range(index, n):\n        # If the current element is greater than the current maximum sum of increasing subsequence\n        if a[i] > current_sum:\n            # Update the current maximum sum of increasing subsequence\n            current_sum = a[i]\n        else:\n            # Calculate the maximum sum of increasing subsequence excluding the current element\n            max_sum_excluding_k = max(max_sum_excluding_k, current_sum)\n            # Calculate the maximum sum of increasing subsequence including the current element\n            current_sum += a[i]\n\n        # Update the maximum sum of increasing subsequence for the ith index\n        max_sum[i] = max(max_sum_excluding_k + a[i], max_sum[i])\n\n        # If the maximum sum of increasing subsequence including the kth element is greater than the current maximum sum\n        if max_sum_excluding_k + a[i] > max_sum_k:\n            # Update the maximum sum of increasing subsequence including the kth element\n            max_sum_k = max_sum_excluding_k + a[i]\n\n        # If the maximum sum of increasing subsequence including the kth element is greater than the current maximum sum of increasing subsequence\n        if max_sum_excluding_k + a[i] > max_sum[k]:\n            # Update the maximum sum of increasing subsequence for the kth index\n            max_sum[k] = max_sum_excluding_k + a[i]\n\n    # Return the maximum sum of increasing subsequence for the ith index\n    return max_sum[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return float('-inf')\n\n    if index == 0:\n        return a[0]\n\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        if i < k:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[i - 1] + a[i], dp[i - k] + a[i - k])\n\n    return dp[n - 1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n        a (list): List of integers.\n        n (int): Length of the list.\n        index (int): Index of the element to find the increasing subsequence of.\n        k (int): Index of the kth element.\n\n    Returns:\n        int: Maximum sum of increasing subsequence from prefix until ith index and including the kth element.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the list from 0 to i\n    for i in range(index + 1, n):\n        # Update the sum if the element is greater than k\n        if a[i] > a[k]:\n            current_sum = a[i] - a[k]\n        # If the element is less than or equal to k, add it to the sum\n        else:\n            current_sum += a[i]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    max_sum = float('-inf')\n    temp_sum = 0\n    temp_index = index\n\n    for i in range(index, n):\n        if a[i] <= a[temp_index]:\n            temp_sum += a[i]\n            temp_index = i\n        else:\n            if temp_sum + a[i] > max_sum + a[temp_index]:\n                max_sum = temp_sum + a[i]\n\n            temp_sum = a[i]\n            temp_index = i\n\n    if temp_sum + a[index] > max_sum:\n        max_sum = temp_sum + a[index]\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    dp = [0] * n\n    max_sum = a[index]\n\n    for i in range(index, n):\n        if a[i] > a[index]:\n            dp[i] = a[i] + max(dp[j] for j in range(i))\n        else:\n            dp[i] = dp[i - 1]\n\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum + max(dp[i] for i in range(index + 1, n) if a[i] > a[k - 1])\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes in an array a, its size n, the index of the current element, and the kth element which is after i.\n    It returns the maximum sum of increasing subsequence from prefix until the ith index and including the kth element.\n    \"\"\"\n    if index == n - 1:\n        return a[index]\n\n    if a[index] <= a[index + 1] or (k > index + 1 and a[index] <= a[k]):\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n\n    return max(a[index + 1], max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        if a[index] <= k:\n            return a[index]\n        else:\n            return 0\n    else:\n        if a[index] > k:\n            return max(a[index], max_sum_increasing_subseq(a, n, index-1, k))\n        else:\n            return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Define a function to generate a list of integers between m and n (inclusive)\n    def generate_integers(m, n):\n        integers = []\n        for i in range(m, n+1):\n            integers.append(i)\n        return integers\n    \n    # Generate a list of integers from m to n\n    integers = generate_integers(m, n)\n    \n    # Loop through the integers and append the tuplex elements at the corresponding positions\n    colon = []\n    for i in integers:\n        colon.append(tuplex[i-1])\n    \n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is a tuple or not\n    if type(tuplex)!= tuple:\n        raise TypeError(\"Input should be a tuple.\")\n    \n    # If the input is a tuple, check if the length is equal to m*n\n    if len(tuplex)!= m*n:\n        raise ValueError(\"The length of the input should be equal to m*n.\")\n    \n    # If the input is a tuple, copy it to avoid modifying the original\n    colon = deepcopy(tuplex)\n    \n    # Loop through each index and assign the correct value to the colon\n    for i in range(m):\n        for j in range(n):\n            colon[i*n+j] = tuplex[i][j]\n            \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=int(m)\n    n=int(n)\n    new_tuplex=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j]=0\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        for j in range(n):\n            if i == m-1 and j == n-1:\n                result.append(tuplex[-1][-1])\n            elif i == m-1 and j < n-1:\n                result.append(tuplex[-1][j+1])\n            elif i < m-1 and j == n-1:\n                result.append(tuplex[i+1][-1])\n            else:\n                result.append(tuplex[i+1][j+1])\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Use deepcopy to avoid modifying the original tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the original tuple\n    length = len(new_tuplex)\n    # Get the index of the first column\n    start_index = length - n\n    # Get the index of the last column\n    end_index = start_index + m - 1\n    # Get the slice of the new tuple containing the desired columns\n    colon_slice = new_tuplex[start_index:end_index+1]\n    # Return the colon slice as a list\n    return list(colon_slice)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i*n:i*n+n]))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_list = []\n    for i in range(m):\n        row_list = []\n        for j in range(n):\n            row_list.append(deepcopy(tuplex[i][j]))\n        colon_list.append(row_list)\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuplex and returns a tuple with m number of copies of the first n elements of the tuplex.\n    '''\n    colon_tup = deepcopy(tuplex[:n])\n    for i in range(m-1):\n        colon_tup += deepcopy(tuplex)\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # Reverse the new copy of the tuple\n    new_tuplex = new_tuplex[::-1]\n    # Split the new copy of the tuple into m colon-separated sublists\n    colon_sublists = [new_tuplex[i:i+m] for i in range(0,len(new_tuplex),m)]\n    # Combine the colon-separated sublists into a new tuple\n    colon_tuplex = tuple(colon_sublists)\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the input is valid\n    if not isinstance(tuplex, tuple) or len(tuplex) < 2:\n        return None\n    \n    # get the dimensions of the input tuple\n    rows = len(tuplex)\n    cols = len(tuplex[0])\n    \n    # check if the dimensions are valid\n    if rows < m or cols < n:\n        return None\n    \n    # create a new tuple with the desired dimensions\n    new_tuplex = tuple(zip(*tuplex))\n    \n    # check if the new tuple is valid\n    if len(new_tuplex)!= m:\n        return None\n    \n    # create a list comprehension to select the desired columns\n    col_list = [new_tuplex[i] for i in range(m)]\n    \n    # convert the list to a tuple\n    col_tuplex = tuple(col_list)\n    \n    return col_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables for the largest products and their indices\n    max_product1 = max_product2 = 0\n    max_index1 = max_index2 = 0\n\n    # Loop through the indices in the lists until N products are found\n    for i in range(N):\n        # Calculate the product of the two largest numbers in each list\n        product1 = nums1[-i-1] * nums2[-i-1]\n        product2 = nums1[-i-2] * nums2[-i-2]\n\n        # Update the indices and products if the current product is greater than the current max product\n        if product1 > max_product1:\n            max_product1 = product1\n            max_index1 = i\n        if product2 > max_product2:\n            max_product2 = product2\n            max_index2 = i\n\n    # Return the indices of the two largest products\n    return max_index1, max_index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum value in either list\n    max_val = max(max(nums1), max(nums2))\n\n    # Initialize variables to store the largest products\n    max1, max2 = 0, 0\n\n    # Iterate over all possible pairs of factors\n    for i in range(N):\n        for j in range(i+1, N):\n            # Compute the product of the first factor and the second factor\n            product = nums1[i] * nums2[j]\n\n            # Update the largest products if the current product is larger\n            if product > max1:\n                max2 = max1\n                max1 = product\n            elif product > max2:\n                max2 = product\n\n    # Return the largest products\n    return max1, max2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Iterate through the number of desired largest products\n    for i in range(N):\n        # Initialize the largest product found so far as negative infinity\n        max_product = float('-inf')\n\n        # Iterate through the two lists\n        for j in range(len(nums1)):\n            # Calculate the product of the current list and the remaining elements in the second list\n            product = nums1[j] * nums2[len(nums1)-j-1]\n\n            # Update the maximum product found so far\n            if product > max_product:\n                max_product = product\n\n        # Add the maximum product to the list of largest products\n        largest_products.append(max_product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Loop through the first list of products\n    for num1 in nums1:\n        # Initialize a variable to store the largest product for this factor\n        largest_product = float('-inf')\n\n        # Loop through the second list of products\n        for num2 in nums2:\n            # Calculate the product of this factor with the next factor\n            product = num1 * num2\n\n            # If the product is greater than the current largest product, update the variable\n            if product > largest_product:\n                largest_product = product\n\n        # Add the largest product to the list of largest products\n        largest_products.append(largest_product)\n\n    # Return the list of largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in the first list\n    max_num1 = max(nums1)\n\n    # Find the maximum value in the second list\n    max_num2 = max(nums2)\n\n    # Initialize two variables for the largest products\n    largest_product1 = 1\n    largest_product2 = 1\n\n    # Initialize a boolean variable to keep track of the number of products found\n    product_found = False\n\n    # Initialize two variables for the number of products found\n    product_count1 = 0\n    product_count2 = 0\n\n    # Loop through the first list and the second list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Find the product of the current pair of factors\n            current_product = nums1[i] * nums2[j]\n\n            # If the current product is greater than the largest product found so far\n            if current_product > largest_product1:\n                # Update the largest products and counts\n                largest_product1 = current_product\n                product_found = True\n                product_count1 = 1\n                product_count2 = 1\n\n            # If the current product is equal to the largest product found so far\n            elif current_product == largest_product1:\n                # Increment the count of products found\n                product_count1 += 1\n\n            # If the current product is greater than the largest product found so far for the second list\n            elif current_product > largest_product2:\n                # Update the largest products and counts\n                largest_product2 = current_product\n                product_found = True\n                product_count1 = 0\n                product_count2 = 1\n\n            # If the current product is equal to the largest product found so far for the second list\n            elif current_product == largest_product2:\n                # Increment the count of products found for the second list\n                product_count2 += 1\n\n    # Check if the required number of products was found\n    if product_found:\n        # Check if the required number of products were found for the first list\n        if product_count1 >= N:\n            # Find the factor of the largest product in the first list that satisfies the condition\n            for factor in nums1:\n                if largest_product1 % factor == 0:\n                    return largest_product1 // factor\n\n        # Check if the required number of products were found for the second list\n        if product_count2 >= N:\n            # Find the factor of the largest product in the second list that satisfies the condition\n            for factor in nums2:\n                if largest_product2 % factor == 0:\n                    return largest_product2 // factor\n\n    # If the required number of products were not found, return None\n    return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(N):\n        max_product = max(max_product, nums1[i] * nums2[i])\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the largest products and count\n    largest_product1 = nums1[0] * nums2[0]\n    largest_product2 = nums1[1] * nums2[1]\n    count1 = 1\n    count2 = 1\n    \n    # Loop through the remaining N elements of the smaller list\n    for i in range(2, N):\n        # Calculate the product of the remaining two elements\n        product = nums1[i] * nums2[i]\n        \n        # Update the largest products and counts\n        if product > largest_product1:\n            largest_product1 = product\n            count1 = i\n        if product > largest_product2:\n            largest_product2 = product\n            count2 = i\n    \n    # Return the largest products and counts\n    return largest_product1, largest_product2, count1, count2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    \n    # Iterate through the first list\n    for i in range(N):\n        # Check if the product of the current number and the second list is greater than the largest_product1 so far\n        if nums1[i] * nums2[N-1] > largest_product1:\n            largest_product1 = nums1[i] * nums2[N-1]\n    \n    # Iterate through the second list\n    for i in range(N):\n        # Check if the product of the current number and the first list is greater than the largest_product2 so far\n        if nums2[i] * nums1[N-1] > largest_product2:\n            largest_product2 = nums2[i] * nums1[N-1]\n    \n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Define two lists to hold the products of the two input lists\n    products1 = []\n    products2 = []\n    \n    # Iterate through the input lists and calculate the product of each list with all other lists\n    for num1 in nums1:\n        for num2 in nums2:\n            for i in range(len(nums1)):\n                if i == 0:\n                    continue\n                else:\n                    products1.append(num1 * nums1[i])\n                    products2.append(num2 * nums2[i])\n                    \n    # Sort the products lists in descending order\n    products1.sort(reverse=True)\n    products2.sort(reverse=True)\n    \n    # Return the N largest products from the two lists\n    return products1[:N], products2[:N]"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10)) # Output: 10\nprint(maximum(10, 5)) # Output: 10\nprint(maximum(10, 10)) # Output: 10"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    This function takes two numbers as input and returns the maximum number.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    return a if a > b else b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Create an empty list to store the characters of the string\n    string_chars = []\n    # Loop through each character of the string\n    for char in str1:\n        # Append the character to the list\n        string_chars.append(char)\n    # Convert the list to a tuple and return it\n    return tuple(string_chars)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function will set the left most unset bit in a given integer n.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    while n & 1 == 0:  # check if n is even\n        n >>= 1  # shift n to the right by 1 bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n:\n        n = n & (n - 1)  # clears the least significant bit set to 1\n        count += 1\n    return count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the first bit set to 0\n    bit_index = 0\n    while (n & (1 << bit_index)) == 0:\n        bit_index += 1\n    \n    # Set the first bit to 1\n    n |= (1 << bit_index)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index of the first unset bit\n    index = 0\n    \n    # Iterate through all the bits of the integer until we find the first unset bit\n    while (n & (1 << index)) == 0:\n        index += 1\n    \n    # Set the leftmost unset bit to 1\n    n |= 1 << index\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (n & 1) == 0:\n        n >>= 1\n        i += 1\n    return n | 1 << i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the first unset bit starting from the rightmost bit\n    unset_bit = 0\n    while n & (1 << unset_bit) == 0:\n        unset_bit += 1\n\n    # Set the left most unset bit\n    n |= (1 << unset_bit)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a Python function to set the left most unset bit in a given integer.\n    \"\"\"\n    \n    # Find the length of the binary representation of the input integer n\n    length = len(bin(n)[2:])\n    \n    # Initialize the mask variable with all 1's\n    mask = 2**length - 1\n    \n    # Set the left most unset bit to 1\n    n = n | mask\n    \n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary number to integer\n    n = int(n, 2)\n    # Initialize the number of unset bits\n    unset_bits = 0\n    # Iterate through the bits of the binary number\n    for i in range(len(bin(n)) - 2, -1, -1):\n        # If the bit is set, increment the number of unset bits\n        if n & (1 << i):\n            unset_bits += 1\n        # If the number of unset bits is equal to the length of the binary number, return the current bit position\n        if unset_bits == len(bin(n)):\n            return i\n    # If the loop completes, return -1 as no left most unset bit is found\n    return -1"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    pi = math.pi\n    vol = (1/3) * pi * r * r * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone using the given radius and height.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2 * h\n    volume = area / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return (1/3)*pi*r**2*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Args:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n\n    # Calculating the volume of the cone using the formula: V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * r ** 2 * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Args:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n    \"\"\"\n\n    # Calculating the volume of the cone\n    volume = (1/3) * math.pi * (r**2) * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculate the volume using the formula V = pi r^2 h\n    pi = math.pi\n    volume = (1/3) * pi * (r**3) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a given radius and height.\n    The volume is calculated using the formula: V = \u03c0r\u00b2h/3\n    \n    Arguments:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    '''\n    \n    V = math.pi * r**2 * h / 3\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n\n    highest_power_of_2 = 0\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a power of 2\n        if i & (i-1) == 0:\n            # if it is, update the highest_power_of_2 variable if necessary\n            if i > highest_power_of_2:\n                highest_power_of_2 = i\n\n    # return the highest_power_of_2 variable\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Loop through all possible powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # Check if the power is a power of 2\n        if i == 2**result:\n            # If it is, update the result variable\n            result += 1\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return highest_Power_of_2(n >> 1) + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer 'n' and returns the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1 << i:\n            return i\n        i <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Binary search\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return low"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 found so far\n    highest_power = 1\n\n    # Loop through all the numbers from 2 to n (inclusive)\n    for i in range(2, n+1): \n        # Check if the current number is a power of 2\n        if i == 2**highest_power:\n            highest_power += 1\n            # If it is, update the highest power of 2 found so far\n            if i == n:\n                return i\n\n    return n # If no higher power of 2 is found, return the input value"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    def isPowerOf2(num):\n        '''\n        A helper function to check if a given number is a power of 2.\n        '''\n        if num == 0:\n            return False\n        return (num & (num - 1)) == 0\n\n    def nextPowerOf2(num):\n        '''\n        A helper function to find the next power of 2.\n        '''\n        return (num + 1) & (~(num & -num))\n\n    high_power = 1\n    while isPowerOf2(high_power) and high_power <= n:\n        high_power = nextPowerOf2(high_power)\n\n    return high_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 as 0\n    highest = 0\n    \n    # loop until the highest power of 2 is greater than or equal to n\n    while highest < n:\n        # set the next highest power of 2 to 2*highest\n        highest <<= 1\n        \n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    highest_power = 1\n    while highest_power <= n:\n        highest_power <<= 1\n\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n) - (1 + (4 * (2 ** (n-1))))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = 2\n        for i in range(2, n + 1):\n            lucas = lucas + 4 * (lucas - 1)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        lucas_n_1 = find_lucas(n-1)\n        lucas_n = lucas_n_1 + find_lucas(n-2)\n        return lucas_n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the first two numbers as 2 and 1\n    a, b = 2, 1\n    # loop n-1 times and compute the next number in the series\n    for i in range(n-1):\n        # compute the next number in the series\n        c = a + b\n        # update the values of a and b\n        a, b = b, c\n    # return the value of the nth number in the series\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    lucas = [1, 2]  # first two lucas numbers are 1 and 2\n\n    for i in range(2, n + 1):  # iterate from 2 to n\n        next_lucas = lucas[i - 1] + lucas[i - 2]\n        lucas.append(next_lucas)\n\n    return lucas[n]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string % item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the final result\n    result = {}\n    # iterate through each list and convert each element to dictionary\n    for i in range(len(l1)):\n        # create a new dictionary to store the key-value pairs of the current element\n        element = {}\n        # iterate through each key-value pair in the current element and add it to the new dictionary\n        for j in range(len(l2[i])):\n            element[l2[i][j]] = l3[i][j]\n        # add the new dictionary to the result dictionary under the key of the current element\n        result[l1[i]] = element\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the final result\n    final_dict = {}\n    \n    # loop through each list in order and add the items to the final dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                # add the item to the final dictionary with keys (l1[i], l2[j], l3[k])\n                final_dict[(l1[i], l2[j], l3[k])] = l1[i] + l2[j] + l3[k]\n    \n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Use dictionary comprehension to add the values of each list as a key-value pair to the nested_dict\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]]['city'] = l3[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create an empty dictionary to hold the final result\n    final_dict = {}\n\n    # Loop through the lists and add each item to the dictionary\n    for i in range(len(l1)):\n        # Add the first list to the dictionary\n        final_dict[l1[i]] = l2[i]\n        # Add the second list to the dictionary as a nested dictionary\n        final_dict[l1[i]].append(l3[i])\n\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes in any number of lists and returns a nested dictionary\n    that maps the elements of each list to a key.\n\n    The first list is the keys, while the subsequent lists are the values.\n    If the number of lists is not even, the last list is used for the remaining values.\n\n    For example, if we have two lists of lengths 2 and 3, respectively,\n    and we call this function with `convert_list_dictionary(list1, list2, list3)`,\n    the function will return a dictionary with keys 'list1', 'list2', 'list3',\n    and values as the elements of the input lists.\n    '''\n    keys = lists[0]\n    values = []\n    for i in range(1, len(lists)):\n        values.append(lists[i])\n    if len(values) < len(lists):\n        values.append(lists[-1])\n    return dict(zip(keys, values))"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the final result\n    result_dict = {}\n\n    # Iterate through the first list and add each element as a key-value pair to the result dictionary\n    for i in range(len(l1)):\n        result_dict[l1[i]] = l2[i]\n\n    # Iterate through the second list and add each element as a key-value pair to the result dictionary\n    for i in range(len(l2)):\n        result_dict[l1[i]] = l3[i]\n\n    # Return the final result dictionary\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if key in nested_dict.keys():\n            nested_dict[key].append(value)\n        else:\n            nested_dict[key] = [value]\n    for i in range(len(l3)):\n        key = l3[i]\n        value = l2[i]\n        if key in nested_dict.keys():\n            nested_dict[key].append(value)\n        else:\n            nested_dict[key] = [value]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # create nested dictionary\n    nested_dict = {}\n\n    # loop through each list and convert it to nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i][j]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # iterate over each list\n    for i in range(len(l1)):\n        # create a new dictionary for each list\n        sub_dict = {}\n        \n        # add keys and values to the new dictionary\n        sub_dict[\"key1\"] = l1[i]\n        sub_dict[\"key2\"] = l2[i]\n        sub_dict[\"key3\"] = l3[i]\n        \n        # add the new dictionary to the parent dictionary\n        nested_dict[i] = sub_dict\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5) + n\n\n    max_sum = 0\n    for i in range(2, n+1):\n        max_sum = max(max_sum, f(i))\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    max_sum = 0\n    for i in range(1, n//2+1):\n        max_sum += get_max_sum(2*i)\n        if max_sum > n:\n            return max_sum\n\n    return n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        else:\n            return f(n-1) + f(n-2) + f(n-3) + f(n-4) + f(n-5)\n    \n    if n % 5 == 0:\n        return f(n//5)\n    else:\n        return max(f(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    half = get_max_sum(n//2)\n    three_fourth = get_max_sum(n//3)\n    quarter = get_max_sum(n//4)\n    fifth = get_max_sum(n//5)\n    \n    return max(half + three_fourth + quarter + fifth, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    This function calculates the maximum sum of n using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize variables\n    max_length = 0\n    max_list = []\n\n    # iterate through the input list\n    for item in input_list:\n        # check if the length of the current item is greater than the maximum length\n        if len(item) > max_length:\n            # update the maximum length and the maximum list\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            # if the length of the current item is equal to the maximum length, append it to the maximum list\n            max_list.append(item)\n\n    # return the maximum list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize max length and index to 0\n    max_length = 0\n    max_index = 0\n\n    # loop through the list and compare the length of each element to max length and index\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n\n    # return the list with the maximum length\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    return len(unique_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the set is empty (if there are no duplicates)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes in a string as input and returns the first non-repeating character.\n    If there are no non-repeating characters in the string, it will return None.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] = None\n        else:\n            char_dict[char] = char\n    for char, count in char_dict.items():\n        if count is None:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes in a string and returns the first non-repeated character in the string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for char in str1:\n        if char in char_dict:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If all characters in the string are repeated, it returns an empty string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            char_set.remove(char)\n    if char_set:\n        return char_set.pop()\n    else:\n        return ''"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in that string.\n    If there is no non-repeated character, the function returns None.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char in count:\n        if count[char] == 1:\n            return char\n    \n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first character in the string with frequency 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_dict = {}\n    first_non_repeating_char = None\n    \n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n        \n        if first_non_repeating_char is None and char_dict[char] == 1:\n            first_non_repeating_char = char\n            \n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n    # iterate through the set and find the first non-repeating character\n    for char in unique_chars:\n        if unique_chars.count(char) == 1:\n            return char\n    # if no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if it starts and ends with the same character, False otherwise.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Using regular expressions to check the character at the beginning and end of the string\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string)!= None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    median = sum(sorted_numbers) / 2\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle number\n    middle = len(sorted_numbers) // 2\n\n    # Check if the middle number is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If it's even, return the average of the middle two numbers\n        return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        # If it's odd, return the middle number\n        return sorted_numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the length of the sorted list\n    length = len(sorted_list)\n\n    # Calculate the middle index\n    middle_index = length // 2\n\n    # Check if the middle index is odd or even\n    if length % 2 == 0:\n        # If it's even, calculate the average of the two middle numbers\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        # If it's odd, just return the middle number\n        median = sorted_list[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    # Calculate the sum of the three numbers\n    total = a + b + c\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Determine the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    # sorting the three numbers\n    num_list = sorted([a, b, c])\n\n    # finding the median\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list)//2] + num_list[len(num_list)//2 - 1]) / 2\n    else:\n        median = num_list[len(num_list)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    \n    # find the median\n    if len(sorted_nums) % 2 == 0:\n        # if the length of the sorted_nums is even, take the average of the two middle numbers\n        median = (sorted_nums[len(sorted_nums)//2-1] + sorted_nums[len(sorted_nums)//2]) / 2\n    else:\n        # if the length of the sorted_nums is odd, take the middle number\n        median = sorted_nums[len(sorted_nums)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Create a list of numbers\n    numbers = [a, b, c]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Check if the length of the list is odd or even\n    if len(numbers) % 2 == 0:\n        # Find the average of the two middle numbers\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        # Find the middle number\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # First, sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Then, calculate the median\n    if sorted_numbers[2] > (sorted_numbers[0] + sorted_numbers[1]):\n        # If the third number is greater than the sum of the two middle numbers,\n        # then the median is the third number\n        median = sorted_numbers[2]\n    else:\n        # Otherwise, the median is the average of the two middle numbers\n        median = (sorted_numbers[0] + sorted_numbers[1]) / 2\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits\n    sums = []\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # compute the sum of digits and append it to the sums list\n        sums.append(sum(digits))\n    # return the list of sums\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(set(str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        if isinstance(num, int):\n            num_digits = 0\n            while num!= 0:\n                num_digits += num % 10\n                num //= 10\n            sum_of_digits += num_digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(map(lambda x: sum(map(int, str(x))), nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        while num > 0:\n            digit = num % 10\n            sum_num += digit\n            num //= 10\n        sum_list.append(sum_num)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Iterate over both tuples and perform bitwise xor\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    # Return the result tuple\n    return result_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Perform the bitwise xor operation on each element of the two tuples\n    xor_tup1 = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n\n    # Convert the result back to a tuple\n    return xor_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the first tuple\n    result = tuple([0] * len(test_tup1))\n\n    # Perform the mathematical bitwise xor operation across the tuples\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # XOR the tuples by bitwise representation\n    result_tup = tuple(bin(x^y)[2:] for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n                test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n            else:\n                print(\"Error: All elements of the tuples must be integers.\")\n                return None\n        return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # convert the list to set to get unique tuples\n    unique_tuples = set(test_list)\n\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize a dictionary to store the unique tuples and their frequencies\n    freq_dict = {}\n    for item in test_list:\n        # convert the item to a tuple and check if it already exists in the dictionary\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    \n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if len(set(i)) == len(i):\n            count += 1\n    return count"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same number of elements to perform addition.\")\n        return\n    \n    # Perform addition of each element in the tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    \n    # Return the resultant tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        tup = []\n        for j in range(len(test_tup1[i])):\n            tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Define a variable to store the resultant tuple\n    result_tuple = ()\n\n    # Loop through the two input tuples and add each element to the result tuple\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] + test_tup2[i], )\n\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths don't match.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= tuple or type(test_tup2[i])!= tuple:\n            print(\"One of the tuples is not a nested tuple.\")\n            return\n        \n        if len(test_tup1[i])!= len(test_tup2[i]):\n            print(\"Tuple lengths don't match.\")\n            return\n        \n        for j in range(len(test_tup1[i])):\n            try:\n                result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n            except TypeError:\n                print(\"One of the tuples is not a nested tuple.\")\n                return\n            \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup_sum = []\n        for j in range(len(test_tup1[i])):\n            tup_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tup_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup1[i])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(sub_result))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup = []\n        for j in range(len(test_tup2[i])):\n            tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tup)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes in two numbers, a and b, and returns the minimum of those two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    # check if tuple1 contains any element that is equal to tuplex\n    for i in tuple1:\n        if i == tuplex:\n            return True\n    # if tuple1 doesn't contain any element that is equal to tuplex, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists in {tuplex}\")\n    else:\n        print(f\"{tuple1} does not exist in {tuplex}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Check if the element exists in the tuple\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # get the parity of the given number using the modulus operator\n    parity = x % 2\n    # check if the parity is odd or even\n    if parity == 1:\n        return \"The parity of the number is odd.\"\n    else:\n        return \"The parity of the number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Initialize a variable to store the parity of the number\n    parity = \"\"\n\n    # Loop through each bit of the binary representation of the number\n    for i in range(len(bin(x)[2:])): \n        # If the current bit is 1, set the parity to \"odd\"\n        if bin(x)[2:].count('1') % 2 == 1: \n            parity = \"odd\"\n            break\n        # If the current bit is 0, set the parity to \"even\"\n        else: \n            parity = \"even\"\n\n    # Return the parity of the number\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return \"The parity of \" + str(x) + \" is even\"\n    else: \n        return \"The parity of \" + str(x) + \" is odd\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as an input and returns True if the parity of the number is odd, False otherwise.\n    '''\n    if x % 2 == 1: # if the remainder of x divided by 2 is 1, it means that the number is odd\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert integer to string\n    s = str(n)\n    # initialize largest power of 10 and count of digits\n    largest_power_of_10 = 1\n    count = 0\n    # iterate through string and count number of digits\n    for digit in s:\n        if int(digit) > largest_power_of_10:\n            largest_power_of_10 = int(digit)\n        count += 1\n    # calculate next bigger number using the largest power of 10 and count of digits\n    next_bigger = int(s[-1]) * largest_power_of_10 + count * largest_power_of_10\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Initialize the variable to store the next bigger number\n    next_bigger = 0\n    \n    # Iterate through each digit in the given number\n    for digit in str(n):\n        \n        # Calculate the index of the digit in the string representation of 10\n        digit_index = int(digit)\n        \n        # Calculate the index of the digit in the string representation of 100\n        digit_index_100 = digit_index * 10\n        \n        # Check if the next digit in the string representation of 100 is smaller than the digit itself\n        if digit_index_100 < digit_index:\n            \n            # Calculate the new value for the digit in the next bigger number\n            new_digit_value = (digit_index_100 // digit_index) * digit_index\n            \n            # Calculate the new index for the next digit in the next bigger number\n            new_digit_index = (digit_index_100 - (digit_index_100 // digit_index) * digit_index)\n            \n            # Assign the new value and index to the next bigger number variable\n            next_bigger = next_bigger * 10 + new_digit_value\n            \n            # Calculate the index of the digit in the string representation of the next bigger number\n            next_digit_index = int(str(next_bigger)[-1])\n            \n            # Calculate the index of the next digit in the string representation of 100\n            next_digit_index_100 = next_digit_index * 10\n            \n            # Check if the next digit in the string representation of 100 is greater than the digit itself\n            if next_digit_index_100 > digit_index:\n                \n                # Calculate the new value for the next digit in the next bigger number\n                new_next_digit_value = next_digit_index_100 - digit_index\n                \n                # Calculate the new index for the next digit in the next bigger number\n                new_next_digit_index = (next_digit_index_100 - new_next_digit_value) // digit_index\n                \n                # Assign the new value and index to the next bigger number variable\n                next_bigger = next_bigger * 10 + new_next_digit_value\n                \n                # Calculate the index of the next digit in the string representation of the next bigger number\n                next_next_digit_index = int(str(next_bigger)[-1])\n                \n                # Check if the next digit in the string representation of 100 is greater than the next digit itself\n                if next_next_digit_index > new_next_digit_value:\n                    \n                    # Calculate the new value for the next next digit in the next bigger number\n                    new_next_next_digit_value = next_next_digit_index - new_next_digit_value\n                    \n                    # Calculate the new index for the next next digit in the next bigger number\n                    new_next_next_digit_index = (next_next_digit_index - new_next_next_digit_value) // digit_index\n                    \n                    # Assign the new value and index to the next bigger number variable\n                    next_bigger = next_bigger * 10 + new_next_next_digit_value\n                \n                else:\n                    \n                    # The next digit is smaller than the next next digit, so set the next digit as the next next digit\n                    next_bigger = next_bigger * 10 + next_next_digit_index\n                    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # convert the given number to a string and get its digits as a list\n    digits = list(str(n))\n\n    # sort the digits in decreasing order\n    digits.sort(reverse=True)\n\n    # rearrange the digits into a new number\n    rearranged = int(''.join(digits))\n\n    # return the next bigger number\n    return rearranged + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string and split it into its digits\n    digits = list(str(n))\n\n    # Find the smallest digit and its index in the list\n    smallest_digit = min(digits)\n    smallest_index = digits.index(smallest_digit)\n\n    # Find the largest digit and its index in the list\n    largest_digit = max(digits)\n    largest_index = digits.index(largest_digit)\n\n    # Swap the digits at the smallest and largest positions\n    digits[smallest_index], digits[largest_index] = digits[largest_index], digits[smallest_index]\n\n    # Reverse the digits from smallest to largest position\n    digits[smallest_index + 1:largest_index + 1] = digits[smallest_index + 1:largest_index + 1][::-1]\n\n    # Convert the rearranged digits back to a number and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Create a list of digits for each position in the number\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the position with the largest digit\n    max_pos = digits.index(max(digits))\n\n    # Reverse the digits in that position\n    digits[max_pos] = digits[max_pos][::-1]\n\n    # Reverse the rest of the digits\n    digits = digits[::-1]\n\n    # Combine the digits into a new number\n    next_bigger = int(''.join(str(digit) for digit in digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a list of digits from the given number\n    digits = [int(digit) for digit in str(n)]\n\n    # Loop through the digits of the given number in reverse order\n    for i in range(len(digits) - 1, -1, -1):\n        # Find the next digit that is larger than the current digit\n        next_digit = max(digit + 1 for digit in digits[:i+1])\n\n        # Replace the current digit with the next digit\n        digits[i] = next_digit\n\n    # Convert the list of digits back to a string and return it as an integer\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num = str(n)\n    # Initialize a list to store the digits of the number\n    digits = []\n    # Loop through each digit of the number\n    for digit in num:\n        # Convert each digit to an integer and append it to the list of digits\n        digits.append(int(digit))\n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n    # Join the sorted digits back into a string and convert it back to an integer\n    result = int(''.join(str(digit) for digit in digits))\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize variables\n    next_bigger = n\n    changed = True\n\n    # loop until no changes are made\n    while changed:\n        # initialize variables\n        temp = n\n        changed = False\n\n        # loop through each digit of the number\n        for i in range(9):\n            # if the current digit is zero, move on to the next digit\n            if temp % 10 == 0:\n                continue\n            # create a new number by rearranging the digits in the number\n            new_temp = temp // 10 * 10 + i + 1\n            # check if the new number is smaller than the current number\n            if new_temp < temp:\n                temp = new_temp\n                changed = True\n\n        # update the next bigger number\n        next_bigger = temp\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits of the input number\n    num_list = [int(digit) for digit in str(n)]\n    \n    # create a new list with digits in reverse order\n    rev_num_list = num_list[::-1]\n    \n    # create a new list with digits in ascending order\n    asc_num_list = sorted(num_list)\n    \n    # create a new list with digits in the middle of the sorted list\n    mid_num_list = [num_list[i] for i in range(len(num_list)//2)]\n    \n    # concatenate the lists and convert it back to a string\n    result = str(int(''.join(str(i) for i in mid_num_list))) + ''.join(str(i) for i in rev_num_list)\n    \n    # return the next bigger number\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    The input number is an integer n.\n    The output number is the next bigger number in lexicographic order.\n\n    Example:\n    n = 1234\n    Output: 4567\n\n    n = 9876\n    Output: 7986\n\n    n = 100\n    Output: 200\n\n    \"\"\"\n    # convert n to a string\n    n_str = str(n)\n\n    # find the index of the first digit that is less than or equal to the power of 10\n    for i, d in enumerate(n_str):\n        if int(d) <= 1:\n            break\n\n    # if the power of 10 is the first digit, swap the first and second digits and repeat\n    if i == 0:\n        n_str = n_str[1] + n_str[0] + n_str[2:]\n        n = int(n_str)\n        return rearrange_bigger(n)\n\n    # if the power of 10 is not the first digit, swap the first and third digits and repeat\n    n_str = n_str[0] + n_str[2] + n_str[1] + n_str[3:]\n    n = int(n_str)\n    return rearrange_bigger(n)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # initialize min heap of size k\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    # iterate through the first array and add each element to the heap\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        \n        # if the size of the heap is greater than k, remove the last element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # initialize result list\n    result = []\n    \n    # iterate through the second array and find the k smallest pairs\n    for num in nums2:\n        # if the heap size is less than k, it means we have found k pairs and can stop iterating\n        if len(min_heap) < k:\n            result.append((num, float('inf')))\n            break\n        \n        # if the current element is smaller than the smallest element in the heap, we add the pair to the result list and remove the smallest element from the heap\n        elif num < min_heap[0]:\n            result.append((min_heap[0], num))\n            heapq.heappop(min_heap)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (nums1[0], nums2[0]))\n        nums1.pop(0)\n        nums2.pop(0)\n\n    while len(min_heap)!= 0:\n        # We pop the smallest element from the heap and add the second element from the first array and the second element from the second array\n        (x, y) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (x+nums1[0], y))\n        nums1.pop(0)\n\n        # We pop the smallest element from the heap and add the first element from the first array and the second element from the second array\n        (x, y) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (x, y+nums2[0]))\n        nums2.pop(0)\n\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a heap of tuples (distance, (index1, index2))\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            dist = abs(nums1[i] - nums2[j])\n            heapq.heappush(heap, (dist, (i, j)))\n\n    # find k smallest pairs\n    result = []\n    while k > 0 and heap:\n        dist, (index1, index2) = heapq.heappop(heap)\n        result.append((nums1[index1], nums2[index2]))\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize min-heap of pairs\n    pairs = []\n\n    # iterate over the two arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # add new pair to heap if size of heap is less than k\n            if len(pairs) < k:\n                heapq.heappush(pairs, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            # if size of heap is equal to k, compare current pair with smallest pair in heap\n            else:\n                if (nums1[i] + nums2[j]) < pairs[0][0]:\n                    heapq.heapreplace(pairs, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n                # if smallest pair is already at the top of the heap, pop the smallest pair and add current pair to heap\n                else:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n\n    # sort the pairs by smallest element and return them\n    return sorted(pairs, key=lambda x: x[0])"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min-heap of tuples containing two elements, where the first element is the element from nums1 and the second element is the element from nums2\n    pq = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pq, (nums1[i], nums2[j]))\n    \n    # Keep track of the number of pairs found so far\n    pairs_found = 0\n    \n    # Find the k pairs with the smallest values\n    while pairs_found < k and len(pq) > 0:\n        pair_value = heapq.heappop(pq)\n        pair_first_value = pair_value[0]\n        pair_second_value = pair_value[1]\n        \n        # Check if this pair is already in the result list\n        if (pair_first_value, pair_second_value) not in result:\n            result.append((pair_first_value, pair_second_value))\n            pairs_found += 1\n    \n    # Return the list of k smallest pairs found\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to keep track of pairs with smallest sum\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum and add it to the min heap if it's smaller than the current smallest sum in the heap\n            pair_sum = num1 + num2\n            if pair_sum < (len(min_heap) > 0 and min_heap[0][1] >= pair_sum):\n                heapq.heappush(min_heap, (pair_sum, (num1, num2)))\n                if len(min_heap) > k:\n                    # Pop the smallest pair from the heap to maintain the heap size\n                    pair_sum, (num1, num2) = heapq.heappop(min_heap)\n\n    # Extract the k smallest pairs from the heap and return them as a list of tuples\n    return [(pair_sum, (num1, num2)) for pair_sum, (num1, num2) in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            elif heap[0][0] > num1 + num2:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n                \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a set to store unique elements from nums1 and nums2\n    unique_set = set(nums1 + nums2)\n\n    # Sort the unique set in ascending order\n    sorted_set = sorted(unique_set)\n\n    # Initialize an empty heap to store the k smallest pairs\n    heap = []\n\n    # Iterate through the sorted set\n    for i in range(len(sorted_set)):\n        # Calculate the pair consisting of the first element from the sorted set and the second element from the sorted set\n        pair = (sorted_set[i], sorted_set[len(sorted_set) - i - 1])\n\n        # If the pair is already present in the heap, ignore it\n        if pair not in heap:\n            # Otherwise, add the pair to the heap\n            heapq.heappush(heap, pair)\n\n            # If the heap size exceeds k, remove the smallest pair from the heap\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Return the k smallest pairs from the heap\n    return heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1 = []\n    heap2 = []\n\n    for num1 in nums1:\n        heapq.heappush(heap1, (num1, -heapq.heappushpop(heap2)))\n\n    for num2 in nums2:\n        if heapq.heappop(heap1)[0] <= num2:\n            heapq.heappush(heap2, (-heapq.heappushpop(heap1)[0], num2))\n        if len(pairs) < k:\n            pairs.append((heapq.heappop(heap1)[0], -heapq.heappop(heap2)[0]))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (min(num1, num2), (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [pair[1] for pair in heap]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize a dictionary to store the product of pairs of tuples as keys and their indices as values\n    product_dict = {}\n    # loop through the list and find the product of pairs of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product in product_dict:\n                product_dict[product] = (product_dict[product], (i, j))\n            else:\n                product_dict[product] = (i, j)\n    # find the minimum product from the dictionary\n    min_product = float('inf')\n    for product in product_dict:\n        if product < min_product:\n            min_product = product\n    # find the pairs of tuples with minimum product\n    pairs = []\n    for product in product_dict:\n        if product == min_product:\n            pairs.append(product_dict[product])\n    # return the pairs of tuples with minimum product\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            \n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize minimum product as infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the pairs of tuples\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            \n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][1] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to be positive infinity\n    min_product = float('inf')\n    # Initialize list of pairs of tuples that are adjacent to each other\n    pairs = []\n    # Loop through the list of tuples\n    for i in range(len(list1)-1):\n        # Check if the current tuple is adjacent to the next tuple\n        if i+1 < len(list1):\n            # If it is, append the pair of tuples to the list of pairs\n            pairs.append((list1[i], list1[i+1]))\n    # Loop through the list of pairs of tuples and find the minimum product\n    for pair in pairs:\n        # Calculate the product of the first tuple in the pair and the second tuple in the pair\n        product = pair[0] * pair[1]\n        # If the product is less than the current minimum product, update the minimum product\n        if product < min_product:\n            min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    # find the maximum value in the list\n    max_val = max(lst, key=lambda x: x[1])\n    \n    # create a dictionary to store the products of each tuple\n    product_dict = {}\n    for i in range(len(lst)):\n        product = lst[i][0] * lst[i][1]\n        product_dict[product] = lst[i]\n    \n    # find the minimum product using the dictionary\n    min_product = min(product_dict.keys())\n    \n    # create a list of pairs where the product is the key and the original tuple is the value\n    result = [(product_dict[min_product][0] * product_dict[min_product][1], product_dict[min_product]) for product in product_dict if product == min_product]\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    list1 (list): List of tuples.\n\n    Returns:\n    float: Minimum product from the pairs of tuples within the given list.\n    \"\"\"\n    # Initialize variables to store the minimum product and the number of pairs of tuples\n    min_product = float('inf')\n    count = 0\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Compute the product of the two tuples and check if it is less than the minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                count = 2\n            elif product == min_product:\n                count += 1\n\n    # Compute the average product\n    if count > 0:\n        avg_product = min_product / count\n    else:\n        avg_product = 0\n\n    # Return the average product\n    return avg_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize minimum product and store the indices of minimum and maximum products in the list\n    min_product = float('inf')\n    max_product = float('-inf')\n    min_index = 0\n    max_index = 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and check if it is greater than the current maximum product\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n                max_index = j\n            \n            # Calculate the product of the tuples and check if it is less than the current minimum product\n            product = list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n                min_index = i\n    \n    # Return the minimum product and the indices of the maximum and minimum products\n    return min_product, max_index, min_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = 9999999999\n    result = []\n    \n    # iterate through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0]*list1[j][1]\n            \n            # check if the product is less than the current minimum\n            if product < min_product:\n                min_product = product\n                result = [(list1[i][0], list1[j][1])]\n                \n    # return the result\n    return result\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values and returns the minimum value.\n    '''\n    min_val = listval[0]  # initialize the minimum value to the first value in the list\n    for val in listval:\n        if val < min_val:\n            min_val = val  # update the minimum value if a smaller value is found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf') #initialize minimum value as positive infinity\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # create an empty list to store the minimum values\n    min_list = []\n    # iterate over the list and check if each element is less than the minimum value in the list\n    for item in listval:\n        if item < min(min_list):\n            # if the current item is less than the minimum value in the list, add it to the list\n            min_list.append(item)\n    # return the minimum value from the list\n    return min(min_list)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # initialize the minimum value to be the first value of the list\n    min_val = listval[0]\n    # loop through the list and compare each value with the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the list and compare each element to the minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = min_val(listval[1:])\n        if listval[0] < min_val:\n            return listval[0]\n        else:\n            return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"The list is empty\")\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove all spaces and convert to lowercase\n    word = word.replace(\" \", \"\")\n    word = word.lower()\n    # split the word into words using '_' as the separator\n    words = word.split('_')\n    # capitalize the first letter and join the words using camel case\n    camel_case = words[0] + ''.join([word.capitalize() for word in words[1:]])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the given word into words using underscores as separators\n    words = re.findall(r'_(.?)', word)\n    \n    # Capitalize the first letter of each word and join them using capital letters\n    camel_case = ''.join([word.capitalize() for word in words])\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    \n    # Convert each word to camel case\n    camel_case_words = [word.capitalize() for word in words]\n    \n    # Join the camel case words back into a camel case string\n    camel_case_word = ''.join(camel_case_words)\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    word = re.sub('_','', word) # convert underscore to space for better readability\n    word_list = word.split() # split the word by space\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case += word_list[i].capitalize() # capitalize the first word\n        else:\n            camel_case += word_list[i].capitalize() # capitalize all other words\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].capitalize()])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n\n    Args:\n    word (str): The given snake case string.\n\n    Returns:\n    The converted camel case string.\n    '''\n\n    camel_case = re.sub(r'_(.)', lambda m: m.group(1).upper(), word)\n    return camel_case.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case using regular expressions\n    camel_case = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces\n    word = re.sub('_','', word)\n\n    # Convert the first letter to uppercase\n    word = word.capitalize()\n\n    # Convert the rest of the string to camel case\n    return ''.join(map(str.capitalize, word.split()))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words and capitalize the first letter of each word\n    words = [word.capitalize() for word in re.findall(r'[a-z][a-z0-9]*', word)]\n    # join the words into a camel case string\n    return ''.join(words)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:  # check if the number is even\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an input and returns a new list with only even numbers.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n-1:\n            return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list.\n    If n is not a positive integer or is greater than the length of the list, the function returns None.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        return None\n    elif n > len(lst):\n        return None\n    else:\n        return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        return \"Index out of range!\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as an argument and an integer as an argument. \n    It returns the nth element from the list.\n    '''\n    try:\n        return list1[n-1][1]\n    except:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(item, tuple) for item in list1):\n        print(\"Input is not a list of tuples\")\n        return None\n\n    # Check if the input is empty\n    if not list1:\n        print(\"Input list is empty\")\n        return None\n\n    # Check if the input list has less than n elements\n    if len(list1) < n:\n        print(f\"Input list has only {len(list1)} elements, {n} is the nth element\")\n        return None\n\n    # Extract the nth element from the list of tuples\n    nth_element = list1[n - 1]\n\n    # Print the result\n    print(f\"The {n}th element of the list is: {nth_element}\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        print(f\"Index {n} is out of range.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n    \"\"\"\n    # creating a set from the second sequence to avoid duplicates\n    set2 = set(list2)\n    for item in list1:\n        if item in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if there is any common value between them, False otherwise.\n    '''\n    # Create a dictionary to store the count of each value in list1\n    value_count = {}\n    for value in list1:\n        if value in value_count:\n            value_count[value] += 1\n        else:\n            value_count[value] = 1\n    \n    # Iterate over list2 and check if there is any common value\n    for value in list2:\n        if value in value_count and value_count[value] > 0:\n            # If there is a common value, decrement its count in the dictionary and check if any values are left over\n            value_count[value] -= 1\n            if all(value_count[key] == 0 for key in value_count):\n                return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return set(list1).intersection(set(list2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # check if all elements in list2 are present in list1\n    for element in list2:\n        if element not in list1:\n            return False\n\n    # if no element is missing, return True\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    for item in list1:  \n        if item in list2:  \n            return True  \n    return False  "
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Create a set from list1 to remove duplicates\n    unique1 = set(list1)\n\n    # Check if any value in list2 exists in unique1\n    for value in list2:\n        if value in unique1:\n            return True\n\n    # If no value in list2 exists in unique1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Initialize a variable to store the result of the overlap check\n    result = False\n    \n    # Loop through each value in list1\n    for value in list1:\n        # Check if the value exists in list2\n        if value in list2:\n            # If it does, set the result to True and break out of the loop\n            result = True\n            break\n    \n    # Return the result of the overlap check\n    return result"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_prod = float('-inf')\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    If there are multiple pairs with the highest product, the function will return any one of them.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1, max2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    if max1 < 0:\n        return max2 * min1\n    else:\n        return max1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    This function takes in an array of integers and finds the pair with the highest product.\n    The function returns the pair of integers that make up the pair with the highest product.\n    '''\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        current_product = arr[i] * max(arr[i], arr[0])\n        if current_product > max_product:\n            max_product = current_product\n            max_pair = (arr[i], arr[0])\n        elif current_product == max_product:\n            max_pair = (arr[i], arr[0])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables\n    max_1 = max_2 = arr[0]\n    min_1 = min_2 = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)): \n        # Update the minimum and maximum values for the first element\n        if arr[i] < min_1: \n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2: \n            min_2 = arr[i]\n\n        if arr[i] > max_1: \n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2: \n            max_2 = arr[i]\n\n    # Return the pair with highest product\n    return (max_1, min_1) if max_1 * min_1 > max_2 * min_2 else (max_2, min_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max_val = float('-inf') #initialize max_val to negative infinity\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_val:\n                max_val = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        if len(common_elements) == 0:\n            common_elements.append(tup[0])\n        elif tup[0] == common_elements[-1]:\n            common_elements.append(tup[1])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    count = 0\n\n    for tup in Input:\n        if tup[0] == common_element:\n            count += 1\n        else:\n            count = 0\n\n        if count == len(Input):\n            common_element = tup[0]\n\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tuple in Input:\n        first_element = tuple[0]\n        if first_element not in common_elements:\n            common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a dictionary to store the count of each first element\n    count = {}\n    # loop through the list of tuples\n    for t in Input:\n        # get the first element of the tuple\n        first = t[0]\n        # if the first element is not in the dictionary, add it with a count of 1\n        if first not in count:\n            count[first] = 1\n        # if the first element is already in the dictionary, increment its count by 1\n        else:\n            count[first] += 1\n    # loop through the list of tuples again and find the common first element in the dictionary\n    for t in Input:\n        # get the first element of the tuple\n        first = t[0]\n        # if the first element is in the dictionary, check if the count is greater than 1\n        if count[first] > 1:\n            # if it is, return the first element\n            return first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for i in Input:\n        if i[0] == common_element:\n            return common_element\n        else:\n            common_element = i[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple_item in Input:\n        if tuple_item[0] == common_element:\n            return True\n        else:\n            common_element = tuple_item[0]\n    return False"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function will take a list of tuples and return a list of groups of tuples\n    where the first element of each tuple is the same.\n    \"\"\"\n    groups = []\n    group = []\n    for item in Input:\n        if not item:\n            # skip empty tuples\n            continue\n        elif not group or item[0]!= group[0]:\n            # start a new group\n            group = [item]\n        else:\n            # add to existing group\n            group.append(item)\n        if len(group) == len(set(group)):\n            # group is complete\n            groups.append(group)\n            group = []\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    # Initialize empty dictionary to store count of common elements\n    count_dict = {}\n\n    # Loop through all tuples in the list\n    for i in range(len(Input)):\n        # Get first element of each tuple\n        first_element = Input[i][0]\n\n        # Check if the first element is already in the count_dict\n        if first_element in count_dict:\n            # Increment the count by 1\n            count_dict[first_element] += 1\n        else:\n            # Otherwise, add the first element to the count_dict with a count of 1\n            count_dict[first_element] = 1\n\n    # Initialize empty list to store common elements\n    common_elements = []\n\n    # Loop through the count_dict to find common elements\n    for key in count_dict:\n        if count_dict[key] == len(Input):\n            # Add the common element to the list\n            common_elements.append(key)\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples \n    where each tuple contains the common first element of the input list of tuples.\n    \"\"\"\n    result = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                if i not in result:\n                    result.append(i)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the first elements of the tuples and the values are lists of tuples containing all the tuples with the same first element.\n    '''\n    grouped_dict = {}\n    for i in Input:\n        if i[0] in grouped_dict:\n            grouped_dict[i[0]].append(i)\n        else:\n            grouped_dict[i[0]] = [i]\n    return grouped_dict"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = \"\"\n    \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of that list with the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(round(num) for num in list1)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list(map(round, list1)))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round the numbers and add them up\n    rounded_list = [round(x) for x in list1]\n    total_sum = sum(rounded_list)\n\n    # Print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    return total_sum * len(list1)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_cubes = 0\n    num = 2\n    \n    while count < n:\n        cube = num * num * num\n        sum_of_cubes += cube\n        count += 1\n        num += 2\n        \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 1\n    while i <= n:\n        cube_sum += i**3\n        i += 1\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the cube sum\n    cube_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Add the cube of the even number to the cube sum\n        cube_sum += i**3\n\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (2*i+1)**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i*i*i\n        i += 1\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \"\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n        delimiter = \" \"\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i]) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    result = result[:-1]\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(elem) for elem in test_tup).strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += element + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    \n    # Iterate through the first n numbers and calculate their cube\n    for i in range(n):\n        sum_of_cubes += i**3\n    \n    # Calculate the average of cubes and return it\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n        count += 1\n    average_of_cubes = sum_of_cubes/count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        cube = i**3  \n        sum_of_cubes += cube  \n        count += 1  \n    average_of_cubes = sum_of_cubes / count  \n    return average_of_cubes  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    for i in range(n):\n        cube = i ** 3\n        count += 1\n        total += cube\n    average = total / count\n    print(\"The average of cubes of the first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    average_cube = cube_sum / n\n    print(f\"The average of cubes of first {n} natural numbers is {average_cube:.2f}\")"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n\n    # iterating through the first n natural numbers\n    for i in range(1, n+1):\n        # finding the cube of the current number\n        cube_of_i = i ** 3\n\n        # updating the sum and count variables\n        sum_of_cubes += cube_of_i\n        count += 1\n\n    # finding the average of the cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # returning the average\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n\n    # loop to calculate cubes of natural numbers\n    for i in range(1, n+1):\n        sum += i*i*i\n        count += 1\n\n    # calculating average of cubes\n    average = sum/count\n\n    # printing the result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_tuple = []\n    for i in range(len(test_tuple)):\n        extracted_tuple.append(test_tuple[i][-1])\n    return extracted_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        index = len(string) - 1\n        result.append(string[index])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for index, element in enumerate(test_tuple):\n        if index == len(test_tuple) - 1:\n            rear_elements.append(element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear = []\n    for string in test_tuple:\n        extracted_rear.append(string[-1])\n    return extracted_rear"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            count += count_element_in_list(i, x)\n        elif i == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_numbers = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # If the number is odd, append it to the odd_numbers list\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    \n    # Return the list of odd numbers\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of odd numbers from the input list.\n    \"\"\"\n\n    # Use a list comprehension to filter out odd numbers\n    odd_nums = [num for num in nums if num % 2!= 0]\n\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the date format to be used\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # define the regex pattern to match the date format\n    pattern = re.compile(date_format)\n\n    # match the date format using re.search() method\n    date_match = pattern.search(dt)\n\n    # if the date format is found, replace the month and year with the new format\n    if date_match:\n        year = date_match.group(1)\n        month = date_match.group(2)\n        day = date_match.group(3)\n        new_date_format = f'{day}-{month}-{year}'\n        return new_date_format\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        return '{}-{}-{}'.format(match.group(3), match.group(2), match.group(1))\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Replace hyphen with forward slash\n    dt = re.sub(r'-(?=[a-z])', '/', dt)\n\n    # Split date into individual components\n    date_parts = re.split(r'/(?:(?<=\\d)\\D+|(\\D+))(?=[a-z])', dt)\n\n    # Reverse components to obtain year-month-day order\n    date_parts.reverse()\n\n    # Join reversed components to obtain yyyy-mm-dd format\n    new_date = '-'.join(date_parts)\n\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern to match the date format\n    date_pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the regular expression pattern to match the date in the input string\n    match = re.match(date_pattern, dt)\n\n    # If the date format matches, extract the day, month and year values\n    if match:\n        year, month, day = match.groups()\n\n        # Reverse the order of the day, month and year values to get the desired format\n        return f'{day}-{month}-{year}'\n\n    # If the input string does not match the date format, return the input string as it is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n\n    # check if the match was successful\n    if match:\n        # extract the groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # reverse the order of the month and day\n        new_date = day + '-' + month + '-' + year\n\n        # return the new date in dd-mm-yyyy format\n        return new_date\n    else:\n        # return the original date string if the match was not successful\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return yyyy_mm_dd"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() method to replace the date format in the string\n    dt_formatted = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return dt_formatted"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace - with / to split the date parts into year, month, and day\n    dt = re.sub(r'-(?=[^-]+$)', '/', dt)\n    # split the date into parts\n    parts = dt.split('/')\n    # reverse the order of the parts\n    parts.reverse()\n    # join the parts with dashes and return the result\n    return '-'.join(parts)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use re.match() method to search the pattern in the input string\n    match = re.match(pattern, dt)\n    # if match is found, extract the groups and format the date in dd-mm-yyyy format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    # if no match is found, return the input date string\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    largest_gap = n // 2\n\n    # Do a greedy approach to find the largest gap\n    while largest_gap > 0:\n\n        # Move the largest gap elements to the beginning of the array\n        for i in range(largest_gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= largest_gap and temp < my_list[j - largest_gap]:\n                my_list[j] = my_list[j - largest_gap]\n                j -= largest_gap\n            my_list[j] = temp\n\n        # Reduce the gap by a factor of two\n        largest_gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Set the gap to the length of the array divided by 2\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        # Move the gap to half of the current gap\n        gap = gap // 2\n\n        # Iterate through the array and sort the sub-arrays of size gap\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n\n            # Shift the elements of the sub-array until the element is in its correct position\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Sorts the given array using shell sort.\n    '''\n\n    # Find the largest gap in the array\n    n = len(my_list)\n    gap = n // 2\n\n    # While there is a gap larger than 1\n    while gap > 0:\n\n        # Iterate over the array with a gap\n        for i in range(gap, n):\n\n            # Swap the current element with its correct position\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n\n        # Decrease the gap by half\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Calculate the gap\n    gap = len(my_list) // 2\n    \n    # Iterate through the array\n    while gap > 0:\n        # Iterate through the array again\n        for i in range(gap, len(my_list)):\n            # Compare the current element with its correct position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap by 1\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length!\")\n        return\n\n    # Extract the elementwise and tuples\n    and_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n\n    # Return the and_tup\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create an empty list to store the elementwise and tuples\n    and_tup_list = []\n    # iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # extract the elements of the two tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # perform the elementwise and operation\n        and_tup = tup1_elem & tup2_elem\n        # add the result to the list of elementwise and tuples\n        and_tup_list.append(and_tup)\n    # return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples have different number of elements\"\n\n    # Initialize the new tuple with the same number of elements as the first tuple\n    new_tup = (0,) * len(test_tup1)\n\n    # Iterate through both tuples and add their elementwise ands to the new tuple\n    for i in range(len(test_tup1)):\n        new_tup[i] = test_tup1[i] & test_tup2[i]\n\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: (x and y), test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result += (test_tup1[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_tup_list = []\n    # iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements of the tuples and perform the elementwise and operation\n        and_tup_list.append(test_tup1[i] & test_tup2[i])\n    # return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(bool(x) & bool(y) for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Use a list comprehension to create a new list containing the elementwise and tuples\n    and_list = [tup1[i] & tup2[i] for i in range(len(tup1))]\n    # Convert the new list to a tuple and return it\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuple = []\n    for i in range(len(test_tup1)):\n        and_tuple.append(test_tup1[i] & test_tup2[i])\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_tup = []\n\n    # Iterate through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Add the elementwise and tuple to the and_tup list\n        and_tup.append(test_tup1[i] & test_tup2[i])\n\n    # Return the and_tup list as a tuple\n    return tuple(and_tup)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b ** 2) - (4 * a * c)\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return \"The directrix is\", root1, \"or\", root2\n    elif discriminant == 0:\n        root = (-b) / (2 * a)\n        return \"The directrix is\", root\n    else:\n        return \"There is no real solution for this parabola.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the determinant of the matrix\n    determinant = b**2 - 4*a*c\n    \n    # Check if the determinant is positive or negative\n    if determinant > 0:\n        root1 = (-b + determinant**0.5)/(2*a)\n        root2 = (-b - determinant**0.5)/(2*a)\n        return root1, root2\n    else:\n        print(\"The determinant of the matrix is negative.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the quadratic equation ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the quadratic equation has real roots\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return \"The quadratic equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        x2 = (-b - math.sqrt(delta)) / (2*a)\n        print(\"The directrix is:\", x1, \"or\", x2)\n    elif delta == 0:\n        x1 = -b / (2*a)\n        print(\"The directrix is:\", x1)\n    else:\n        print(\"The equation does not have a real root!\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is negative, there are two roots\n    if discriminant < 0:\n        print(\"The parabola has no real roots\")\n\n    # If the discriminant is positive, there is only one root\n    elif discriminant > 0:\n        directrix = (-b + (discriminant**0.5))/(2*a)\n        print(\"The directrix is:\", directrix)\n\n    # If the discriminant is zero, there is one real and one complex root\n    else:\n        directrix_real = -b/(2*a)\n        directrix_complex = c/(2*a)\n        print(\"The directrix is:\", directrix_real, \"and\", directrix_complex, \"are both real roots\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        return (-b + discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return -b / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Define the line equation for the given parabola \n    line_equation = a*x**2 + b*x + c \n\n    # Calculate the discriminant \n    discriminant = b**2 - 4*a*c \n\n    # Check if the discriminant is less than zero \n    if discriminant < 0: \n        return \"The directrix cannot be found\" \n\n    # If the discriminant is non-zero, find the root(s) of the quadratic equation \n    else: \n        root1 = (-b + discriminant**0.5)/(2*a) \n        root2 = (-b - discriminant**0.5)/(2*a) \n\n    # Check if both roots are real and non-negative \n    if root1 >= 0 and root2 >= 0: \n        return \"The directrix is a complex number with a real and imaginary part\" \n\n    # If only one root is real and non-negative, return the real part of the directrix \n    elif root1 >= 0 and root2 < 0: \n        return root1 \n\n    # If both roots are complex and negative, return the negative real part of the directrix \n    elif root1 < 0 and root2 >= 0: \n        return -root1 \n\n    # If both roots are complex and non-negative, return the negative real part of the directrix \n    elif root1 < 0 and root2 < 0: \n        return -root1 + root2 "
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return [x1, x2]\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root1 = -b/(2*a)\n        return root1\n    else:\n        print(\"No real roots for this parabola.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    # Check if the lists are the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Loop through each element of the first list\n    for element in list1:\n        # Check if the element exists in the second list\n        if element in list2:\n            return True\n\n    # If we get here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    if len(common_list) >= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create an empty set to store the common elements\n    common_elements = set()\n    \n    # iterate over each element in the first list\n    for element in list1:\n        # check if the element exists in the second list\n        if element in list2:\n            # add the element to the set of common elements\n            common_elements.add(element)\n    \n    # return true if the set has at least one element\n    return bool(common_elements)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # create a set for each list to store the unique elements\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there are any elements in common between the sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets so we can easily check for intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if the intersection is non-empty\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    # create a set of elements from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there is at least one common element in the set\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there is at least one common element\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes in the lengths of the base and height of a trapezium as inputs and returns the median length of the trapezium.\n    \"\"\"\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1 * (height ** 2)\n    side2 = 0.5 * base2 * (height ** 2)\n    \n    # Find the length of the shorter side\n    shorter_side = min(side1, side2)\n    \n    # Calculate the length of the trapezium base\n    trapezium_base = (shorter_side ** 2) / 4\n    \n    # Calculate the length of the longer side\n    longer_side = (area - trapezium_base) ** 0.5\n    \n    # Calculate the length of the median side\n    median_side = (shorter_side + longer_side) / 2\n    \n    # Calculate the length of the median trapezium\n    median = (trapezium_base + median_side) / 2\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median_length = (area / 2) ** 0.5\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the formula:\n    # area = (base1 + base2) / 2 * height\n    area = (base1 + base2) / 2 * height\n    # Calculate the length of the longer base using the formula:\n    # base = (area / height) * (base1 / 2)\n    base = (area / height) * (base1 / 2)\n    # Calculate the length of the shorter base using the formula:\n    # base = (area / height) * (base2 / 2)\n    base = (area / height) * (base2 / 2)\n    # Calculate the median length of the trapezium using the formula:\n    # median = max(base1, base2)\n    median = max(base1, base2)\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the lengths of the bases of the trapezium\n    base1_len = 0.5 * area / base1\n    base2_len = 0.5 * area / base2\n\n    # sort the lengths of the bases\n    sorted_bases = sorted([base1_len, base2_len])\n\n    # find the median length of the trapezium\n    if sorted_bases[0] < sorted_bases[1]:\n        median = sorted_bases[0]\n    else:\n        median = sorted_bases[1]\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trap_len = 0.5 * (base1 + base2 + height)\n    \n    # Sort the sides of the trapezium\n    sides = sorted([base1, base2, trap_len])\n    \n    # Calculate the length of the shorter side\n    shorter_side = sides[0]\n    \n    # Calculate the length of the longer side\n    longer_side = sides[1]\n    \n    # Calculate the length of the trapezium\n    trapez_len = longer_side + shorter_side\n    \n    # Calculate the median of the trapezium\n    median = 0.5 * (trapez_len - trap_len)\n    \n    # Return the median\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the formula:\n    # length = (b1 + b2) / 2 + h\n    # Calculate the length of the first half of the trapezium\n    h1 = height / 2\n    l1 = (base1 + base2) / 2\n    # Calculate the length of the second half of the trapezium\n    h2 = height - h1\n    l2 = (base1 + base2) / 2 - l1\n\n    # If the first half is shorter, swap the values of h1 and l1\n    if l1 < h1:\n        h1, l1 = l1, h1\n\n    # If the second half is shorter, swap the values of h2 and l2\n    if l2 < h2:\n        h2, l2 = l2, h2\n\n    # Calculate the total length of the trapezium\n    total_length = l1 + h1 + l2 + h2\n\n    # Calculate the median length using the formula:\n    # median = (length - total_length / 2) / 2\n    median = (total_length - h1 - h2) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    # Calculate the length of the half base of the trapezium\n    half_base1 = 0.5 * base1\n    # Calculate the length of the half base of the trapezium\n    half_base2 = 0.5 * base2\n    # Calculate the number of trapeziums needed to cover the height of the trapezium\n    num_trapeziums = height / (base1 + base2)\n    # Calculate the length of each trapezium\n    trapezium1_len = area / num_trapeziums\n    trapezium2_len = area / (num_trapeziums + 1)\n    # Calculate the length of the middle trapezium\n    middle_len = trapezium1_len + trapezium2_len\n    # Calculate the length of the shortest trapezium\n    shortest_len = min(trapezium1_len, trapezium2_len)\n    # Calculate the length of the longest trapezium\n    longest_len = max(trapezium1_len, trapezium2_len)\n    # Calculate the length of the two middle trapeziums\n    mid_mid_len = middle_len - shortest_len - longest_len\n    # Calculate the length of the two smallest trapeziums\n    two_smallest_len = shortest_len - half_base1 - half_base2\n    # Calculate the length of the two largest trapeziums\n    two_largest_len = longest_len - half_base1 - half_base2\n    # Calculate the length of the two middle trapeziums\n    two_mid_mid_len = mid_mid_len - (two_smallest_len + two_largest_len)\n    # Calculate the length of the total trapezium\n    total_len = two_smallest_len + two_largest_len + two_mid_mid_len\n    # Return the median length of the trapezium\n    return total_len"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the longer base\n    longer_base = 0.5 * area / (height - 0.5 * area)\n    # Calculate the length of the shorter base\n    shorter_base = height - 0.5 * area\n    # Calculate the height of the trapezium\n    trapezium_height = 2 * shorter_base\n    # Calculate the length of the trapezium base\n    trapezium_base = longer_base - shorter_base\n    # Calculate the length of the middle line\n    middle_line = (trapezium_height - 2 * trapezium_base) / 2\n    # Calculate the length of the smaller side of the trapezium\n    smaller_side = (trapezium_base + 2 * trapezium_base) / 2\n    # Calculate the length of the larger side of the trapezium\n    larger_side = trapezium_base\n    # Calculate the length of the trapezium\n    trapezium_length = middle_line + smaller_side + larger_side\n    # Calculate the median of the trapezium\n    median_length = 0.5 * (trapezium_length + longer_base)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * base2\n    base1_area = base1 * height\n    base2_area = base2 * height\n\n    # Calculate the length of the two equal sides of the trapezium\n    a = (area - base1_area - base2_area) / 2\n\n    # Calculate the length of the smaller side of the trapezium\n    b = (area - a - base1_area) / 2\n\n    # Calculate the median length of the trapezium\n    median = max(a, b)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    trapezium_length = (base1 + base2 + height) / 2\n    \n    if trapezium_length > half_height:\n        return base1 + base2 + height\n    elif trapezium_length < half_height:\n        return base1 + base2\n    else:\n        return base1 + base2 + half_height"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Initialize a boolean variable to keep track of whether the number is greater than all the elements\n    is_greater = False\n\n    # Loop through the elements of the array\n    for element in arr:\n        # If the element is greater than the entered number, set the boolean variable to True and break out of the loop\n        if element > number:\n            is_greater = True\n            break\n\n    # Return the boolean variable as the result of the function\n    return is_greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count > 0:\n        print(f\"The number {number} is greater than the elements of the array.\")\n    else:\n        print(f\"The number {number} is not greater than the elements of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\b[ab]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=.*b)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba.*b\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n // 10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = n % 10\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # find the length of the number\n    length = len(str(n))\n    \n    # find the last index of the number\n    last_index = length - 1\n    \n    # find the last digit of the number\n    last_digit = n // 10 ** last_index\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Return the last digit of the number\n    return num_str[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the negative numbers in the original list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list with the negative numbers in it.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n\n    Args:\n    str1 (str): The input string.\n\n    Returns:\n    str: A new string with all odd characters removed.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2 == 0:\n            continue  # skip even digits\n        result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create a new string to store the result\n    result = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is odd (i.e., greater than 1), add it to the result string\n        if ord(char) % 2!= 0:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = ''\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2 == 0:\n            continue\n        new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or (char.isalpha() and char.islower())])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_chars += char\n    return odd_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    \n    # loop through each character in the original string\n    for char in str1:\n        # if the character is odd, append it to the new string\n        if int(char) % 2 == 1:\n            new_str += char\n    \n    # return the new string with all odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if int(c) % 2 == 0])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through the list\n    for element in test_list:\n\n        # If the element is not in the dictionary, add it with a count of 1\n        if element not in count_dict:\n            count_dict[element] = 1\n\n        # Otherwise, increment the count of the element in the dictionary\n        else:\n            count_dict[element] += 1\n\n    # Create a list of tuples with the key-value pairs from the dictionary\n    key_value_list = list(count_dict.items())\n\n    # Initialize variables for the count of bidirectional pairs and the count of non-bidirectional pairs\n    bidirectional_count = 0\n    non_bidirectional_count = 0\n\n    # Iterate through the list of key-value pairs\n    for key, value in key_value_list:\n\n        # If the value of the current key is 1, that means the current key is repeated\n        # Check if the current key can be added to the end of the key_value_list\n        if value == 1:\n            try:\n                current_key = key_value_list[key_value_list.index((key, value+1))]\n                # If the key can be added, check if the key is a substring of the current key\n                if key in current_key:\n                    bidirectional_count += 1\n            except ValueError:\n                pass\n        else:\n            non_bidirectional_count += value\n\n    return bidirectional_count, non_bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # initialize a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # convert each tuple to a string and sort it\n        sorted_tup = tuple(sorted(tup))\n        # check if the sorted tuple is in the dictionary\n        if sorted_tup in count_dict:\n            # if it is, increment the count\n            count_dict[sorted_tup] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            count_dict[sorted_tup] = 1\n\n    # loop through the dictionary and print the count of each pair\n    for key, value in count_dict.items():\n        print(key, value)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    :param test_list: List of tuples\n    :return: Integer count of bidirectional tuple pairs\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Parameters:\n    test_list (list): A list of tuples or lists of tuples.\n\n    Returns:\n    int: The number of bidirectional tuple pairs in the test_list.\n    \"\"\"\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n                if tuple(test_list[j]) == tuple(test_list[i]):\n                    count -= 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i] == test_list[j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for pair in test_list:\n        if pair[0] in pair[1:] and pair[1] in pair[:-1]:\n            count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Create a variable to store the sum of all the integers in the list\n    total = sum(L)\n    # Split the total variable into its individual digits\n    digits = [int(d) for d in str(total)]\n    # Initialize a variable to store the output\n    output = ''\n    # Iterate through the digits list from right to left\n    for i in range(len(digits)-1, -1, -1):\n        # If the digit is 0, skip it\n        if digits[i] == 0:\n            continue\n        # If the digit is not 0, append it to the output\n        else:\n            output += str(digits[i])\n    # Convert the output to an integer and return it\n    return int(output)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for num in L:\n        single = single * 10 + num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through the list\n    for num in L:\n        # if the current number is less than 10, add it to the result\n        if num < 10:\n            result += num\n        # if the current number is greater than or equal to 10, multiply the result by 10 and add the new digit\n        else:\n            result = result * 10 + num\n            \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        if type(num) is int:\n            result = result * 10 + num\n        else:\n            return \"Error: List contains non-integer elements.\"\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if there are any adverbs in the sentence\n    if len(adverbs) == 0:\n        return 'No adverbs found in the sentence'\n    \n    # Find the position of the first adverb in the sentence\n    first_adverb = adverbs[0]\n    first_adverb_position = text.find(first_adverb)\n    \n    # Return the adverb and its position\n    return f'{first_adverb} is at position {first_adverb_position} in the sentence'"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression to match adverbs\n    adverb_pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b|\\b\\w+erly\\b', text)\n    # Print the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        print(f\"{i+1}. {adverb}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(really|amazingly|amazing|enormously|extremely|incredibly|just|extremely|amazingly|amazing|enormously|extremely|incredibly|just|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite|little|little|much|very|quite"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r\"\\b(quickly|slowly|quietly|loudly|slowly|rudely|carefully|gratefully|ashamedly|mysteriously|thrillingly|seamlessly|steadily|carelessly|jerkily|intensely|quietly|gently|exquisitely|quickly|bubbly|joyfully|embarrassingly|frankly|dramatically|affectionately|foolishly|miserably|incredibly|seldom|poorly|mildly|tremendously|seriously|enthusiastically|tremendously|quickly|intentionally|intensely|intensively|gently|gallantly|delightfully|engagingly|jerkily|excitedly|delightfully|thrillingly|quizzically|irritably|immaculately|fiercely|sincerely|enthusiastically|thrillingly|brilliantly|terrifically|enigmatically|amazingly|amazingly|beautifully|brilliantly|bubbly|fashionably|beautifully|beautifully|amazingly|amazingly|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|beautifully|be"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all instances of adverbs in the sentence\n    adverbs = re.findall(r'\\b(also|especially|also|alternatively|mostly|slightly|really|not|rarely|somewhat|usually|quite|rarely|quite|slightly|more|much|less|little|many|little|few|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a little more|a lot|a little|a few|a lot of|a little bit|a little while|a little longer|a little shorter|a little long|a little short|a little longer than|a little shorter than|a little longer than|a little shorter than|a little more|a little less|a little less|a little more|a little less|a little more|a little less|a"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb in the given sentence and returns a list of tuples containing the adverb and its position in the sentence.\n    '''\n    # define a regular expression pattern to match an adverb\n    pattern = r'\\b(adverb)\\b'\n    # use the re.findall() function to find all adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n    # initialize an empty list to store the adverb positions\n    positions = []\n    # loop through all adverbs found and append their position to the positions list\n    for i, adv in enumerate(adverbs):\n        positions.append((adv, i+1))\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        print(f'The first adverb is: {adverbs[0]}')\n        print(f'The first adverb\\'s position is: {text.index(adverbs[0])}')\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding the first adverb\n    pattern = r'\\b(?:(?:in|at|on|for|to|from|by|with|about|through|under|over|behind|ahead|behind|after|before|between|around|across|along|down|up|out|into|over|under)\\s+|after\\s+|before\\s+|between\\s+|around\\s+|across\\s+|along\\s+|down\\s+|up\\s+|out\\s+|into\\s+|over\\s+|under\\s+)([^\\s]+)\\b'\n\n    # Find all the matches of the pattern in the given sentence\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the first adverb and its position in the sentence\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to match adverbs\n    pattern = r\"\\b(really|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amaz"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l + 6 * l + 12"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n\n    Parameters:\n    l (float): the length of one side of the cube\n\n    Returns:\n    float: the surface area of the cube, in square units\n    \"\"\"\n    s = 6 * l**2\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l  # Cube surface area is 6 times the volume of the cube"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Convert the array to an array of float values\n    nums_float = array('d', nums)\n\n    # Count the number of positive numbers\n    count = sum(1 for num in nums_float if num > 0)\n\n    # Calculate the ration of positive numbers\n    pos_ratio = count / len(nums_float)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_array = array('i')\n    negative_array = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_array.append(num)\n        elif num < 0:\n            negative_array.append(num)\n\n    positive_count = len(positive_array) / (len(positive_array) + len(negative_array))\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    positive_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n\n    if positive_count == 0:\n        return 0\n    else:\n        return positive_sum/positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an empty array to store the positive numbers\n    pos_arr = array('i')\n\n    # Iterate over the array and check if the number is positive\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n\n    # Calculate the length of the positive array\n    pos_len = len(pos_arr)\n\n    # Calculate the sum of the positive array\n    pos_sum = sum(pos_arr)\n\n    # Calculate the ratio of positive numbers in the array\n    pos_ratio = pos_len / len(nums)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = array('i')\n    negative_num = array('i')\n    zero_num = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_num.append(1)\n        elif num < 0:\n            negative_num.append(1)\n        else:\n            zero_num.append(1)\n\n    positive_count = len(positive_num) / len(nums)\n    negative_count = len(negative_num) / len(nums)\n    zero_count = len(zero_num) / len(nums)\n\n    return [positive_count, negative_count, zero_count]"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n            \n    if neg_count == 0:\n        return (0, 0)\n    \n    pos_ratio = pos_count / (pos_count + neg_count)\n    neg_ratio = neg_count / (pos_count + neg_count)\n    \n    return (pos_ratio, neg_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    return count[0] / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize the largest negative number to be the first element of the list\n    largest_num = list1[0]\n    \n    # Loop through the list and compare each element with the largest negative number found so far\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    \n    # Return the largest negative number found\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize a list to store trimmed tuples\n    trimmed_tuples = []\n\n    # Iterate through the tuple list\n    for tuple_item in test_list:\n        # Get the length of the tuple\n        length = len(tuple_item)\n        # Trim the tuple by k\n        trimmed_tuple = tuple_item[:K]\n        # Append the trimmed tuple to the trimmed_tuples list\n        trimmed_tuples.append(trimmed_tuple)\n\n    # Return the trimmed_tuples list\n    return trimmed_tuples"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    :param test_list: A list of tuples to be trimmed.\n    :param K: An integer value to trim the tuples by.\n    :return: The trimmed tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list and trim each tuple by k\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][K:], test_list[i][2])\n    # return the trimmed tuple list\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = (tup[0], tup[1:])\n        for _ in range(K):\n            new_tup = new_tup[1:]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[i:i+K]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(tuple(test_list[i][:K]))\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize empty list to store trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Initialize a variable to count the number of elements in the tuple that are to be trimmed\n        count = 0\n        # Loop through each element in the tuple\n        for i in range(len(tup)):\n            # If the count reaches k, the element is to be trimmed\n            if count == K:\n                # Remove the element from the tuple\n                tup.pop(i)\n                # Decrement the count\n                count -= 1\n                # Exit the loop\n                break\n            # If the count is less than k, increment the count\n            else:\n                count += 1\n        # If the tuple after trimming has at least one element, add it to the trimmed list\n        if len(tup) > 0:\n            trimmed_list.append(tup)\n\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Split the tuple into a list of its elements\n        elements = list(test_list[i])\n        # Trim each list element by k\n        for j in range(len(elements)):\n            elements[j] = elements[j][:K]\n        # Convert the list of trimmed elements back into a tuple\n        test_list[i] = tuple(elements)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i, tup in enumerate(test_list):\n        new_tup = tuple(tup[:K])\n        test_list[i] = new_tup\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Number of elements in the tuples are not equal.\"\n    # Loop through the tuples and multiply the elements at each index\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    # Return the resultant tuple\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have same length.\")\n        return\n\n    result_tup = tuple(a*b for a, b in zip(test_tup1, test_tup2))\n\n    print(\"Resulting tuple:\", result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have same length\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) \n    result = [] \n    for i in lst: \n        if i in count_dict: \n            result.append(count_dict[i]) \n        else: \n            result.append(0) \n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict.update(Counter(lst))\n    return count_dict.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n\n    Parameters:\n    - tup: a tuple of elements\n    - lst: a list of elements\n\n    Returns:\n    - a dictionary where keys are elements in the tuple and values are their occurences in the list\n    \"\"\"\n    count_dict = Counter(tup)\n    for elem in lst:\n        count_dict[elem] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in tup: \n        count_dict[i] = count_dict.get(i, 0) + 1\n    count_dict = Counter(count_dict)\n    for i in lst: \n        if i in count_dict: \n            count_dict[i] -= 1 \n            if count_dict[i] == 0: \n                del count_dict[i] \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count the occurrence of each element in the list in the tuple\n    count_dict = Counter(tup)\n    # count the occurrence of each element in the list\n    list_count = Counter(lst)\n    # find the common elements in both the tuples and the lists\n    common = list(set(tup) & set(lst))\n    # count the occurrence of each common element in both the tuples and the lists\n    common_count = Counter(common)\n    # add the counts of common elements to the dictionary of count of each element in the tuple\n    for key in count_dict:\n        count_dict[key] += common_count[key]\n    # return the dictionary of count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append((i, count[i]))\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)  # convert tuple to dictionary and count frequency\n    for i in lst: \n        if i in count: \n            count[i] += 1  # increment count of i if it exists in the dictionary\n    return count  # return the dictionary with count of occurrence of all elements of list in a tuple"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in lst: \n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for element in lst:\n        count_dict[element] += 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    perrin_sum = 0\n    for i in range(n):\n        perrin_sum += perrin_list[i]\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    sum = 0\n    for num in perrin_numbers: \n        if num <= n: \n            sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (1/(i+1))\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    for i in range(1, n+1):\n        sum += p\n        p *= i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = []\n    for i in range(n):\n        perrin_list.append(i+1)\n    perrin_list.sort()\n    total_sum = sum(perrin_list)\n    print(\"The sum of the perrin numbers from 1 to\",n,\"is:\",total_sum)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(n):\n        sum += p\n        p = (3*p + 1) % 1000000007\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [0]*n \n    for i in range(2, n+1): \n        p[i-1] = i**3 \n    sum = 0 \n    for i in range(2, n+1): \n        sum += p[i-2] \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of Perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(l)):\n        output.append(l[i][0:l[i].find(\" \")] if len(l[i]) > l[i].find(\" \") else l[i])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of string values and an integer l as input and returns a new list containing the extracted strings.\n    \"\"\"\n    # Initialize an empty list to store extracted strings\n    extracted_strings = []\n\n    # Iterate through the list of strings\n    for s in str_list:\n        # If the length of the string is greater than or equal to the required length, add it to the list of extracted strings\n        if len(s) >= l:\n            extracted_strings.append(s)\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and extracts specified size of strings from the list.\n\n    Args:\n        str_list (list): A list of strings.\n        size (int): The size of strings that needs to be extracted.\n\n    Returns:\n        list: A list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a specified size\n    of string values to extract from each string value.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of string values and an integer l as input.\n    The function iterates through the list and extracts the first l strings from it.\n    The extracted strings are then returned as a list.\n    '''\n    extracted_list = []\n    for i in range(l):\n        extracted_list.append(str[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract the specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) > size:\n            result.append(string[:size])\n        else:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) > size:\n            extracted_strings.append(s[:size])\n        else:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list: A list of string values.\n    size: An integer representing the size of each string in the list.\n\n    Returns:\n    A list of strings of the specified size.\n\n    \"\"\"\n    # Initialize an empty list to store extracted strings.\n    extracted_list = []\n\n    # Loop through the list of strings.\n    for i in range(0, len(str_list), size):\n        # Slice the list to extract the required strings.\n        extracted_str = str_list[i:i+size]\n        # Append the extracted string to the list.\n        extracted_list.append(extracted_str)\n\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function takes a string as input and returns the string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all the whitespaces from it.\n    '''\n    # Use regular expression to match all whitespace characters (spaces, tabs, and newlines)\n    pattern = re.compile(r'\\s+')\n    # Replace all whitespaces with an empty string\n    text = pattern.sub('', text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all the whitespaces from the given string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount >= 0:\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        loss_percentage = (actual_cost / sale_amount) * 100\n        loss_amount = sale_amount - actual_cost\n        loss_amount = loss_amount * (loss_percentage / 100)\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss <= 0:\n        return 0\n    else:\n        return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        loss_percent = (actual_cost - sale_amount) / actual_cost * 100\n        loss_amount = loss_percent * sale_amount\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    # calculate the loss amount if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        # if the sale amount is less than or equal to the actual cost, the loss amount is 0\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = [x for x in range(2, int(math.sqrt(n))+1) if n % x == 0 and x % 2 == 0]\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sumofFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even factors of n.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i\n    if n%2!= 0:\n        sum += n\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_sum += i\n    return even_sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of even factors of\", n, \"is:\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.search(pattern, text)\n    if result:\n        print(f'Found the word: {result.group()}')\n    else:\n        print('No word found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    result = re.findall(pattern, text, re.IGNORECASE)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z[a-zA-Z]+z)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define a regular expression pattern to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\b'\n    # search the text for the pattern using the re.search() function\n    match = re.search(pattern, text)\n    # if a match is found, return the matched word, otherwise return None\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\sz'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in a given text.\n    '''\n    pattern = r'\\w+z\\w+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            if monthnum2 == 2 and (leap_year == True or leap_year == \"True\"):\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 == 2 and (leap_year == False or leap_year == \"False\"):\n                return True\n            else:\n                return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum2 in range(1, 13):\n        return days_in_month[monthnum2-1]\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 2:\n        return True if year_is_leap(year) else False\n    else:\n        return True\n\ndef year_is_leap(year):\n    '''\n    Helper function to check if the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            return year % 400 == 0\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes in a month number and returns True if it contains 31 days or False otherwise.\n    \"\"\"\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31,\n                    2: 28, 4: 30, 6: 30, 9: 30, 11: 30}\n    \n    if monthnum in days_in_month.keys():\n        if days_in_month[monthnum] == 31:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number!\")\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in range(1, 13):\n        if monthnum % 2 == 0:\n            if monthnum == 2:\n                return True\n            elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n                return True\n            else:\n                return False\n        else:\n            if monthnum == 2:\n                return True\n            else:\n                return False\n    else:\n        return False\n\nprint(check_monthnumb_number(2)) # True\nprint(check_monthnumb_number(3)) # False\nprint(check_monthnumb_number(13)) # False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if month number is valid\n    if len(str(monthnum2))!= 2:\n        print('Invalid month number')\n        return\n    \n    # convert month number to integer and check for 31 days\n    monthnum = int(monthnum2)\n    if monthnum == 2: # February\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if monthnum == 2 and day < 29:\n                print('Month contains 29 days')\n            else:\n                print('Month contains 28 days')\n        else:\n            if monthnum == 2 and day < 28:\n                print('Month contains 28 days')\n            else:\n                print('Month contains 29 days')\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11: # April, June, September, November\n        if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            if day < 30:\n                print('Month contains 30 days')\n            else:\n                print('Month contains 31 days')\n        else:\n            if day < 31:\n                print('Month contains 31 days')\n            else:\n                print('Month contains 30 days')\n    else:\n        print('Month contains 30 or 31 days')"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for item in stringlist:\n        reversed_item = item[::-1]  # reverse the string using slicing\n        reversed_list.append(reversed_item)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0]\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') #initialize a variable to store the minimum length of a sublist\n    min_sublist = [] #initialize a variable to store the sublist with minimum length\n    \n    for sublist in lst: #iterate over all sublists in the list\n        if len(sublist) < min_len: #check if the current sublist has a smaller length than the minimum length\n            min_len = len(sublist) #update the minimum length if necessary\n            min_sublist = sublist #update the sublist with minimum length\n    \n    return min_sublist #return the sublist with minimum length"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_list = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sub_list = lst[i:j+1]\n            if len(sub_list) < min_length:\n                min_length = len(sub_list)\n                min_list = sub_list\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_sublist = []\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function finds the sublist with minimum length in a given list.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_list = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_length:\n                min_length = j-i\n                min_list = lst[i:j]\n\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)): \n        if len(lst[i]) < min_length: \n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    A = l * b\n    return A"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments l and b representing the length and \n    breadth of a rectangle respectively. It then calculates and returns the \n    area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regular expressions to find all uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    matches = pattern.findall(str1)\n    # loop over all matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)[A-Z]')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for uppercase substrings\n    pattern = r'[A-Z]'\n    \n    # Use the re.sub() function to remove the uppercase substrings from the string\n    str1 = re.sub(pattern, '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns the modified string without any uppercase substrings.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from it.\n    \"\"\"\n    # Define a regular expression pattern for uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n    \n    # Use the re.sub() method to replace all uppercase substrings with spaces\n    result = re.sub(pattern,'', string)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'(?<!\\w)\\p{Lu}\\w*',' ',str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings using regular expressions\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # define the regex pattern for uppercase substrings\n    uppercase_pattern = re.compile(r'([A-Z]+)')\n\n    # find all uppercase substrings in the given string\n    uppercase_substrings = uppercase_pattern.findall(str1)\n\n    # loop through the list of uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of each sublist\n    first_elements = []\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # If the sublist is not empty, add its first element to the list of first elements\n        if sublist:\n            first_elements.append(sublist[0])\n    # Return the list of first elements\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_list = []\n    for i in lst:\n        first_list.append(i[0])\n    return first_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    for i in range(len(lst)): \n        lst[i] = lst[i][0]\n\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if type(sublist) == list:\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Function to generate all combinations of the elements of a list\n    def combinations(lst, n):\n        if n == 1:\n            return [lst]\n        result = []\n        for i in range(len(lst)):\n            rest = lst[:i] + lst[i+1:]\n            new_combinations = combinations(rest, n-1)\n            for comb in new_combinations:\n                result.append([lst[i]] + comb)\n        return result\n\n    # Call the function to generate all combinations of the list\n    combinations = combinations(list1, len(list1))\n    print(\"All possible combinations of the list are:\")\n    for comb in combinations:\n        print(comb)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case\n    if len(list1) == 0:\n        return []\n    # Recursive case\n    else:\n        # Combine the first element with all other elements in the list\n        first_element = list1[0]\n        remaining_elements = list1[1:]\n        sub_combinations = combinations_list(remaining_elements)\n        result = [[first_element] + sub_combination for sub_combination in sub_combinations]\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list of all possible combinations\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        list1.sort()\n        result = []\n        for i in range(len(list1)):\n            if i > 0 and list1[i] == list1[i-1]:\n                continue\n            j = i + 1\n            while j < len(list1) and list1[j] == list1[j-1]:\n                j += 1\n            k = j\n            while k < len(list1):\n                result.append(list1[i:k+1])\n                k += 1\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for subset in combinations(list1, i):\n            result.append(list(subset))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    result = []\n    for i in range(len(list1)):\n        prefix = list1[:i]\n        suffix = list1[i:]\n        for comb in combinations_list(suffix):\n            result.append(prefix + [comb])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(2**n):\n        combination = []\n        for j in range(n):\n            if (i >> j) & 1:\n                combination.append(list1[j])\n        result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize a list to store the combinations\n    combinations = []\n\n    # Loop through the elements of the list\n    for i in range(len(list1)):\n        # Loop through the remaining elements of the list\n        for j in range(i + 1, len(list1)):\n            # Add the combination to the list\n            combinations.append([list1[i], list1[j]])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_so_far)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_so_far)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to keep track of the maximum subarray product and the indices of its beginning and end\n    max_product = float('-inf')\n    start = 0\n    end = 0\n\n    # Loop through the array and calculate the maximum subarray product\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            # If the current element is positive, add it to the current subarray product and update the start index\n            current_product = arr[i]\n            start_index = i\n        else:\n            # If the current element is negative, subtract it from the current subarray product and update the end index\n            current_product = max(current_product * arr[i], arr[i])\n            end_index = i\n\n        # Update the maximum subarray product if necessary\n        if current_product > max_product:\n            max_product = current_product\n            end = end_index\n\n    # Return the maximum subarray product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n\n    max_product = float('-inf')\n    max_sum = float('-inf')\n    curr_product = 1\n    curr_sum = 0\n\n    for num in arr:\n        curr_product *= num\n        curr_sum += num\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_product = curr_product\n\n        if curr_sum < 0:\n            curr_product = 1\n            curr_sum = 0\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], min_product * arr[i])\n        min_product = min(max_product * arr[i], min_product * arr[i])\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum product subarray.\n\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_product_ending_here = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product < 0:\n            current_product = 1\n\n        max_product_ending_here = max(max_product_ending_here * num, current_product)\n        max_product = max(max_product, max_product_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(current_product*num, num)\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables to keep track of maximum product and current subarray\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    # Iterate through the array and calculate the maximum product subarray\n    for i in range(1, len(arr)):\n        # Calculate the current product and check if it's greater than the maximum product\n        current_product = max(arr[i], current_product * arr[i])\n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n            \n    # Return the maximum product subarray\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if not all(dict.values()) == 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for val in dict.values():\n        if all_same:\n            all_same = val == dict.values()[0]\n        else:\n            all_same = val == dict.values()[0] and all_same\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for key in dict:\n        all_values.append(dict[key])\n    if all_values.count(all_values[0]) == len(all_values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return True if all(dict.values()) else False\n    else:\n        for key, value in dict.items():\n            if value!= dict[key-1]:\n                return False\n        return check_value(dict[1:], n-1)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    \n    for i in dict:\n        if dict[i]!= dict[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values == values[:n]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a counter variable\n    count = 0\n    # Loop through the values in the dictionary\n    for value in dict.values():\n        # If the counter is zero, set the first value to be the current value\n        if count == 0:\n            first_value = value\n        # If the counter is greater than zero, compare the current value with the first value\n        elif value!= first_value:\n            return False\n        # Increment the counter\n        count += 1\n    # If the counter is zero, return True\n    if count == 0:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > 0:\n            temp = max_ending_here\n            max_ending_here = max(max_ending_here * arr[i], max_ending_here * arr[i], max_so_far * arr[i])\n            max_so_far = max(temp, max_so_far * arr[i])\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Create a list to store the products of all subsequences\n    products = []\n\n    # Iterate through all subsequences of the array\n    for i in range(len(arr)):\n        # Skip subsequences that start with 0\n        if arr[i] == 0:\n            continue\n        # Iterate through all subsequences that end with a non-0 number\n        for j in range(i+1, len(arr)+1):\n            # Calculate the product of the numbers in the subsequence\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            # Store the product in the list\n            products.append(product)\n\n    # Find the maximum product\n    max_product = max(products)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Define a function to calculate the product of two elements\n    def prod(a, b):\n        return a * b\n    \n    # Initialize the maximum product as 1\n    max_product = 1\n    \n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Calculate the product of the elements at the left and right pointers\n    current_product = prod(arr[left], arr[right])\n    \n    # Loop through the array from left to right and multiply each pair of adjacent elements\n    while left < right:\n        \n        # If the product is greater than the maximum product so far, update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n        \n        # If the current element is greater than the right pointer, move the left pointer to the right\n        if arr[left] > arr[right]:\n            left += 1\n        else:\n            right -= 1\n        \n        # Calculate the new product of the elements at the left and right pointers\n        current_product = prod(arr[left], arr[right])\n    \n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize the maximum and minimum values of the subsequence\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Traverse through the array and update the maximum and minimum values of the subsequence\n    for i in range(1, n):\n        # Update the maximum and minimum values of the subsequence\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        # Update the maximum and minimum values of the entire array\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    # Return the maximum product\n    return max_so_far * min_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_profit = float('-inf')\n    min_profit = float('inf')\n    \n    for i in range(n):\n        profit = max(0, arr[i] - min_profit)\n        max_profit = max(max_profit, profit)\n        min_profit = min(min_profit, arr[i])\n        \n    return max_profit"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize max product and the current subsequence\n    max_product = arr[0]\n    current_subsequence = arr[0]\n\n    # Traverse through the array and find the maximum product of increasing subsequence\n    for i in range(1, n):\n        if current_subsequence > 0:\n            current_subsequence *= arr[i]\n        else:\n            current_subsequence = arr[i]\n        \n        if current_subsequence > max_product:\n            max_product = current_subsequence\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    prefix_product = [1] * n\n    suffix_product = [1] * n\n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n        suffix_product[n-1-i] = suffix_product[n-1-i-1] * arr[n-1-i-1]\n\n    for i in range(1, n-1):\n        max_product = max(max_product, prefix_product[i] * suffix_product[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Create a list to store the products of increasing subsequences\n    products = [0] * n\n    # Initialize the first product to be 1\n    products[0] = 1\n    # Loop through the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            # Increment the products of the subsequence by the current element\n            products[i] = products[i-1] * arr[i]\n        else:\n            # If the current element is less than or equal to the previous element,\n            # set the products of the subsequence to 0\n            products[i] = 0\n    # Find the maximum product of the subsequences and return it\n    max_product = max(products)\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(x+y for x,y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    n = len(test_tup)\n    # Initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    # Loop through the elements of the tuple\n    for i in range(n-1):\n        # Add the current element to the next element and add the sum to the pairwise_sum list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # Return the pairwise_sum list\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    # Iterate over each element of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element to the sum of the previous two elements\n        total += test_tup[i] + test_tup[i+1]\n    # Return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        # Initialize the sum of the neighboring elements as the first element of the tuple\n        sum_pair = test_tup[0]\n        # Loop through the remaining elements of the tuple\n        for i in range(1, len(test_tup)-1):\n            # Add the sum of the previous two elements to the current element and update the sum_pair variable\n            sum_pair += test_tup[i+1]\n        # Add the last two elements of the tuple to the sum_pair variable\n        sum_pair += test_tup[-1]\n        return sum_pair"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the pairwise addition of the neighboring elements.\n    \"\"\"\n    num_elements = len(test_tup)\n    if num_elements < 2:\n        return \"The tuple must have at least two elements.\"\n    \n    sum_list = []\n    for i in range(num_elements - 1):\n        sum_list.append(test_tup[i] + test_tup[i+1])\n    \n    return sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a list to store the pairwise additions\n    pairwise_additions = []\n    # iterate through the elements of the tuple and add the pairwise additions to the list\n    for i in range(len(test_tup)-1):\n        pairwise_additions.append(test_tup[i] + test_tup[i+1])\n    # return the list of pairwise additions\n    return pairwise_additions"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the input is a tuple of length 2\n    if len(test_tup)!= 2:\n        print(\"Input must be a tuple of length 2.\")\n        return\n    \n    # extract the two elements from the tuple\n    a = test_tup[0]\n    b = test_tup[1]\n    \n    # find the sum of the elements\n    sum_ab = a + b\n    \n    # find the sum of the pairwise elements\n    sum_ab_plus_bc = a + b + sum_ab\n    \n    # return the sum of the pairwise elements\n    return sum_ab_plus_bc"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        # initialize variables\n        result = 0\n        prev_num = test_tup[0]\n        for num in test_tup[1:]:\n            # add current and previous numbers and store the result in result\n            result = result + prev_num\n            prev_num = num\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Invalid input tuple.\")\n        return\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return add_pairwise(test_tup[1:]) + test_tup[0]"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result to 1\n    result = 1\n\n    # Iterate over each element in the array\n    for element in arr:\n        # Multiply the current result by the element\n        result = (result * element) % n\n\n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the remainder of the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and an integer `n` and returns the remainder of the multiplication of all elements in `arr` modulo `n`.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize the result to 1\n    result = 1\n    \n    # iterate through the array\n    for i in arr:\n        # calculate the product of the result and the current element modulo n\n        result = (result * i) % n\n    \n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # initialize the product variable to 1\n    product = 1\n\n    # loop through each element in the array\n    for num in arr: \n        # multiply the current element with the product so far\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a Python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an argument and returns True if it contains consecutive numbers or False otherwise.\n    '''\n\n    # Initialize variables\n    n = len(l)\n    num = l[0]\n    \n    # Check for consecutive numbers\n    for i in range(1, n):\n        if l[i] == num + 1:\n            num += 1\n        else:\n            return False\n    \n    # If all numbers are consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False \n    elif len(l) == 2: \n        return True \n    else: \n        if l[0] == l[1]: \n            return False \n        else: \n            for i in range(1, len(l)-1): \n                if l[i] == l[i-1] + 1 or l[i] == l[i-1] - 1: \n                    return False \n            return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            if count > 1:\n                return True\n            else:\n                count = 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Checks if a given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define an empty set to store the intersection of tuples\n    intersection = set()\n\n    # Loop through each tuple in the first list\n    for tuple1 in test_list1:\n        # Loop through each tuple in the second list\n        for tuple2 in test_list2:\n            # If both tuples have the same elements, add them to the set\n            if tuple1 == tuple2:\n                intersection.add(tuple1)\n\n    # Return the set of intersection tuples\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from test_list1\n    set1 = set(test_list1)\n    # create an empty set to store the intersection\n    intersection = set()\n    # iterate through test_list2 and check if each element is in set1\n    for item in test_list2:\n        if item in set1:\n            intersection.add(item)\n    # return the intersection set\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n    # Iterate through each tuple in the first list\n    for tup1 in test_list1:\n        # Iterate through each tuple in the second list\n        for tup2 in test_list2:\n            # Check if the two tuples have the same elements in any order\n            if tup1 == tup2:\n                # If they have the same elements, add the tuple to the set of unique tuples\n                unique_tuples.add(tup1)\n    # Return the unique tuples as a list\n    return list(unique_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    This function takes two tuple lists as input and returns a new list containing only the elements that are present in both the input lists. The order of elements in the new list does not matter.\n\n    Example:\n    Input:\n    test_list1 = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n    test_list2 = [(2, 3, 4), (3, 4, 5), (4, 5, 6)]\n\n    Output:\n    [(2, 3, 4)]\n\n    The output is the tuple intersection of the two input lists. The elements 2, 3, and 4 are present in both the lists and are therefore present in the new list.\n    '''\n\n    # check if the input lists are not empty\n    if not test_list1 or not test_list2:\n        return None\n\n    # create a set of elements from both the input lists\n    union_set = set(test_list1 + test_list2)\n\n    # create an empty set to store the intersection of elements\n    intersection_set = set()\n\n    # iterate over the elements in the union_set\n    for element in union_set:\n        # if the element is present in both the input lists, add it to the intersection set\n        if element in test_list1 and element in test_list2:\n            intersection_set.add(element)\n\n    # convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty set to store the unique elements of list1\n    unique_set1 = set()\n\n    # iterate through the first list and add unique elements to the set\n    for element in test_list1:\n        unique_set1.add(element)\n\n    # create an empty set to store the unique elements of list2\n    unique_set2 = set()\n\n    # iterate through the second list and add unique elements to the set\n    for element in test_list2:\n        unique_set2.add(element)\n\n    # create an empty set to store the common elements of the two sets\n    common_set = set()\n\n    # iterate through the intersection of the two sets and add them to the common set\n    for element in unique_set1.intersection(unique_set2):\n        common_set.add(element)\n\n    # convert the common set to a list and return it\n    return list(common_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert lists to sets to remove duplicates and keep order\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # convert sets to lists and return the intersection\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the counts of each element in the first list\n    count_dict = {}\n    for item in test_list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # Create a list to store the common elements in the first list\n    common_list = []\n    \n    # Iterate through the second list and add the common elements to the common list\n    for item in test_list2:\n        if item in count_dict and count_dict[item] > 0:\n            common_list.append(item)\n            count_dict[item] -= 1\n    \n    # Create a list to store the intersection of the common list and the first list\n    intersection_list = []\n    for item in test_list1:\n        if item in common_list:\n            intersection_list.append(item)\n    \n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for element in test_list1:\n        if element in test_list2:\n            result.append(element)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets using the '&' operator\n    intersection = set1 & set2\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Use a loop to iterate through the string\n    for i in range(len(str1)):\n        # Check if the current character matches the given character\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    # Return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string, a character to be replaced, and a new character.\n    It replaces all occurrences of the character in the string with the new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the original character.\n\n    Returns:\n    The modified string with the replaced character.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the specified characters replaced\n    result = str1.replace(ch, newch)\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string where all occurrences of old character are replaced by new character\n    newstr = str1.replace(ch, newch)\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with another character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary with the sorted items\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    sorted_dict = {}\n    counter = Counter(dict1)\n    sorted_list = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    for item in sorted_list:\n        sorted_dict[item[0]] = item[1]\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n    \n    # Sort the counter by values in ascending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    \n    # Create a new dictionary with the sorted values and their original keys\n    sorted_dict = {}\n    for key, value in sorted_counter:\n        sorted_dict[key] = dict1[key]\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # initialize variables to store the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables for smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n    # loop through the array and compare each value with the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    # return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the sum of the largest and smallest value\n    sum_vals = max_val + min_val\n    # Return the sum\n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the smallest and largest values\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest value\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[2]\n    # Return the sum of the largest and smallest value\n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values\n    smallest = nums[0]\n    largest = nums[-1]\n    \n    # Calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    \n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is all lower case or not.\n    '''\n    return all(char.islower() for char in string)"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if it is in lower case, False otherwise.\n    '''\n    if string == string.lower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # convert string to lower case\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings in the string\n    lowercase_subs = re.findall('[a-z]+', str1)\n    # Loop through each lowercase substring and replace it with an empty string\n    for sub in lowercase_subs:\n        str1 = str1.replace(sub, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # use the re.sub() function to replace all lowercase substrings with empty strings\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'(?i)\\b\\w+\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # Use a regular expression to find all lowercase substrings\n    pattern = r'([a-z])'\n    matches = re.findall(pattern, string)\n\n    # Use a for loop to iterate over the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1.lower())\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    \n    # Find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Loop through all matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    # Loop through the substrings and remove them\n    for lowercase_substring in lowercase_substrings:\n        str1 = re.sub(r'\\b'+lowercase_substring+'\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]')\n    \n    # Find all lowercase substrings in the string using the pattern\n    lowercase_substrings = pattern.findall(str1)\n    \n    # Loop through the list of lowercase substrings and remove them from the string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Split the string into words\n    words = str1.split()\n\n    # Initialize an empty list to store non-lowercase words\n    non_lowercase = []\n\n    # Loop through each word\n    for word in words:\n\n        # Check if the word is all lowercase\n        if word.islower():\n\n            # If the word is lowercase, add it to the non_lowercase list\n            non_lowercase.append(word)\n\n    # Join the non-lowercase words back into a string\n    str2 =''.join(non_lowercase)\n\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = re.sub(r'[a-z]+', '', string)\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to string\n    num_str = str(n)\n    # find the first character of the string\n    first_char = num_str[0]\n    # convert the first character to integer\n    first_digit = int(first_char)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string and use the first character as the first digit\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function will find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10 # this will get the last digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n // 10 == 0:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the first digit of the number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of only the odd integers in the list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list: \n        if i % 2!= 0: \n            odd_list.append(i) \n    return odd_list \n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # Create an empty list to store the odd elements\n    odd = []\n\n    # Iterate over the elements of the list\n    for element in list:\n        # If the element is odd, add it to the `odd` list\n        if element % 2!= 0:\n            odd.append(element)\n\n    # Return the `odd` list\n    return odd"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_of_nums = sum(range(1,n+1))\n    return sum_of_cubes - sum_of_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the sum of the first n natural numbers\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n\n    # calculate the difference\n    difference = sum_cubes - sum_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(x**3 for x in range(1, n+1))\n    natural_sum = sum(range(1, n+1))\n    return cubes_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Find the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    sum_natural_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # calculate the difference\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Find the sum of the first n natural numbers\n    total_sum = sum(range(1, n+1))\n\n    # Find the sum of cubes of the first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n\n    # Return the difference\n    return cube_sum - total_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural += i\n    \n    return abs(sum_of_cubes - sum_of_natural)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    # Sort the array in ascending order\n    A.sort()\n\n    # Initialize variables to count odd pairs\n    count = 0\n    i = 0\n\n    # Iterate through the array from the second element\n    while i < N-1:\n        # If the sum of the current element and the next element is odd, count it\n        if A[i] + A[i+1] % 2!= 0:\n            count += 1\n        # Move to the next element\n        i += 2\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n\n    Args:\n        A: list of integers\n        N: size of the array A\n\n    Returns:\n        int: the number of pairs whose xor value is odd\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list A and a number N as input, and returns the number of pairs of elements in A whose xor value is odd.\n    \"\"\"\n    xor_sum = 0\n    count = 0\n    \n    for i in range(N):\n        xor_sum += A[i]\n        \n    for i in range(N):\n        for j in range(i+1, N):\n            xor_sum -= A[i]\n            xor_sum -= A[j]\n            \n            if xor_sum % 2 == 1:\n                count += 1\n                \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate over all pairs of elements from A\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate xor of A[i] and A[j]\n            xor_val = A[i] ^ A[j]\n            # If xor_val is odd, increment count\n            if xor_val % 2 == 1:\n                count += 1\n                \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value >= 3:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    # Check if all elements in the list A are odd.\n    if all(x % 2 == 1 for x in A):\n        # Initialize a dictionary to store the count of odd xor values.\n        odd_xor = {}\n        # Loop through the list A and count the number of odd xor values.\n        for i in range(N):\n            for j in range(i+1, N):\n                xor_value = A[i] ^ A[j]\n                if xor_value % 2 == 1 and xor_value in odd_xor:\n                    odd_xor[xor_value] += 1\n                else:\n                    odd_xor[xor_value] = 1\n        # Return the count of odd xor values.\n        return sum(odd_xor.values())\n    else:\n        return \"All elements in the list A must be odd.\""
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(string)\n    \n    # Iterate over each character in the list\n    for i in range(len(chars)):\n        # If the character is uppercase, convert it to lowercase\n        if chars[i].isupper():\n            chars[i] = chars[i].lower()\n        # If the character is lowercase, convert it to uppercase\n        else:\n            chars[i] = chars[i].upper()\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    # iterate through each character in the input string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase and vice versa\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            # if the character is neither uppercase nor lowercase, add it as is to the result\n            result += char\n    # return the resulting string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to store the toggled string\n    toggled_string = ''\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a letter, toggle its case\n        if char.isalpha():\n            if char.islower():\n                toggled_string += char.upper()\n            elif char.isupper():\n                toggled_string += char.lower()\n        # If the character is not a letter, leave it unchanged\n        else:\n            toggled_string += char\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables to store the sum of per-digit differences\n    digit_diff_sum = 0\n    \n    # loop through each digit of the two numbers\n    for i in range(10):\n        # calculate the per-digit difference between the two numbers\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        \n        # add the per-digit difference to the sum\n        digit_diff_sum += digit_diff\n        \n        # remove the last digit from both numbers\n        n1 //= 10\n        n2 //= 10\n    \n    # return the sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum variable to 0\n    sum_of_diffs = 0\n\n    # Loop through each digit in the first number\n    for i in range(len(str(n1))):\n        # Get the digit at index i from the first number\n        digit_1 = int(str(n1)[i])\n\n        # Loop through each digit in the second number\n        for j in range(len(str(n2))):\n            # Get the digit at index j from the second number\n            digit_2 = int(str(n2)[j])\n\n            # Calculate the per-digit difference between the two digits\n            diff = abs(digit_1 - digit_2)\n\n            # Add the difference to the sum_of_diffs variable\n            sum_of_diffs += diff\n\n    # Return the sum of the per-digit differences\n    return sum_of_diffs"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # Find the per-digit difference\n    digit_diff = [abs(digit1 - digit2) for digit1, digit2 in zip(num1_digits, num2_digits)]\n\n    # Calculate the sum of the differences\n    sum_diff = sum(digit_diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables\n    digit_sum = 0\n    num1 = int(n1)\n    num2 = int(n2)\n\n    # loop through each digit of the two numbers and calculate the difference\n    for i in range(10):\n        if num1 % 10 == i:\n            digit_sum += num2 % 10\n        elif num2 % 10 == i:\n            digit_sum += num1 % 10\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings and remove any leading zeros\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_str = n1_str.lstrip('0')\n    n2_str = n2_str.lstrip('0')\n\n    # Calculate the sum of the per-digit difference\n    digit_diff_sum = 0\n    for i in range(len(n1_str)):\n        digit_diff = int(n1_str[i]) - int(n2_str[i])\n        digit_diff_sum += digit_diff ** 2\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert integers to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n\n    # calculate the per-digit difference between the two lists\n    digit_diff = [abs(n1_list[i] - n2_list[i]) for i in range(len(n1_list))]\n\n    # calculate the sum of the differences\n    sum_diff = sum(digit_diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes in two integers and returns the sum of the per-digit difference between them.\n    \"\"\"\n    digit_sum = 0\n    for i in range(10):\n        diff = abs(n1%10 - n2%10)\n        digit_sum += diff\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert both integers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    # Create an empty list to store the per-digit difference\n    diff_list = []\n    # Loop through each digit in both integers\n    for i in range(len(n1_list)):\n        # Calculate the difference between the two digits\n        diff = abs(int(n1_list[i]) - int(n2_list[i]))\n        # Add the difference to the diff_list\n        diff_list.append(diff)\n    # Return the sum of the per-digit differences\n    return sum(diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    \n    # Initialize sum of differences\n    diff_sum = 0\n    \n    # Loop through each digit in the lists and find the difference between them\n    for i in range(len(num1_digits)):\n        diff_sum += abs(num1_digits[i] - num2_digits[i])\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Create a list of digits for each integer\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the difference between the two integers\n    diff = [abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)]\n\n    # Calculate the sum of the differences\n    return sum(diff)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        # Initialize two variables to keep track of the maximum and the sum of the largest contiguous sublist\n        max_sum = max_sub_array_sum(a, size - 1)\n        current_sum = max_sum - a[size - 1]\n        return max(max_sum, current_sum)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the current sum and maximum sum\n    current_sum = 0\n    maximum_sum = float('-inf')\n    \n    # Iterate through the list and add elements to the current sum\n    for i in range(size):\n        current_sum += a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > maximum_sum:\n            maximum_sum = current_sum\n    \n    # Return the maximum sum\n    return maximum_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the current subarray sum and the maximum subarray sum found so far\n    curr_sum = 0\n    max_sum = float('-inf')\n\n    # Iterate over the list and calculate the sum of the current subarray and update the maximum subarray sum found so far\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum subarray sum found\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = i\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum, max_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        size = len(a)\n\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = a[i]\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Merge the two tuples into a new tuple\n    merged_tup = test_tup1 + test_tup2\n    # Remove duplicates using set\n    unique_tup = list(set(merged_tup))\n    # Sort the tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set of the elements from the two tuples\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two lists\n    union_list = list(set(test_tup1 + test_tup2))\n    \n    # Sort the union list in ascending order\n    union_list.sort()\n    \n    # Output the sorted union list\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Use the set() method to remove duplicates and convert the list to a set\n    unique_set = set(combined_list)\n\n    # Convert the set back to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n\n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to remove duplicates\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n\n    # Find the union of the sets using the union() method\n    union_set = set_tup1.union(set_tup2)\n\n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Print the union list\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Convert the list to set to remove duplicates\n    unique_set = set(combined_list)\n    # Sort the list in ascending order\n    sorted_list = sorted(unique_set)\n    # Convert the list back to a tuple\n    sorted_tuple = tuple(sorted_list)\n    # Return the sorted tuple\n    return sorted_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples into sets and find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    # Convert the union set back into a list and sort it\n    sorted_union_list = sorted(list(union_set))\n    # Print the sorted union list\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets to remove duplicates\n    tup1_set = set(test_tup1)\n    tup2_set = set(test_tup2)\n\n    # find the union of the sets\n    union_set = tup1_set | tup2_set\n\n    # convert the set back to a list and sort it in ascending order\n    union_list = list(union_set)\n    union_list.sort()\n\n    # print the sorted union list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_len = 0\n\n    # Iterate through each sublist in the list\n    for sublist in lst:\n\n        # Calculate the length of the current sublist\n        current_len = len(sublist)\n\n        # Update the maximum length if the current sublist is longer\n        if current_len > max_len:\n            max_len = current_len\n\n    # Return the maximum length\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize the length of the longest sublist as 0\n    max_length = 0\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Initialize the length of the current sublist as 0\n        current_length = 0\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Increment the length of the current sublist by 1\n            current_length += 1\n            # Update the length of the longest sublist if the current sublist is longer\n            if current_length > max_length:\n                max_length = current_length\n    # Return the length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            max_len = max(max_len, len(lst[i:j+1]))  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #initialize max length variable to zero\n    max_length = 0\n\n    #loop through each sublist in the list\n    for sublist in lst:\n        #initialize length variable to zero\n        length = 0\n\n        #loop through each element in the sublist\n        for element in sublist:\n            #increment length by 1 for each element\n            length += 1\n\n        #compare length to max length\n        if length > max_length:\n            max_length = length\n\n    #return the max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables to store the lengths of sublists\n    max_length = 1\n\n    # Iterate through each sublist\n    for i in range(len(lst)):\n        # Initialize variable to store the current length of the sublist\n        sublist_length = 1\n\n        # Iterate through each subsequent element in the sublist\n        for j in range(i+1, len(lst)):\n            # If the subsequent element is the same as the current element, increment the length of the sublist\n            if lst[j] == lst[i]:\n                sublist_length += 1\n            else:\n                break\n\n        # Update the maximum length if this sublist is longer\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    max_length = 0\n    current_length = 0\n    for i in lst:\n        if i == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        currentLength = 0\n        for j in range(i, len(lst)):\n            currentLength += 1\n            maxLength = max(maxLength, currentLength)\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = 1\n        else:\n            for j in range(i):\n                if len(lst[i]) > len(lst[j]):\n                    max_length = max(max_length, len(lst[i]) - len(lst[j]))\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # matches double quotes followed by anything (but not quotes) followed by a double quote\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[\\w\\s\\d]+?(?=\")'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"' # regular expression pattern to match any double-quoted string\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    values = [match.strip() for match in matches] # remove leading and trailing whitespace from each match\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function takes a string as input and extracts values between quotation marks from it.\n    \"\"\"\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # create a set to store unique elements of the array\n    unique_elements = set(arr)\n\n    # count the number of pairs of elements that are unequal in the array\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    # return the count of pairs of elements that are unequal in the array\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the variable to store the sum of digits\n    total = 0\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Loop through the list of digits and add each digit to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please provide a non-negative integer.\"\n    else:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number and add it to the sum\n        total += n % 10\n        \n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit in the integer\n    while n > 0:\n        # Add the current digit to the sum\n        sum += n % 10\n        \n        # Remove the last digit from the integer\n        n //= 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted or not\n    is_sorted = True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            is_sorted = False\n            break\n    return is_sorted"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Convert the list to a tuple to remove any duplicates\n    list1_tuple = tuple(list1)\n\n    # Check if the length of the tuple is 1 (which means it's already sorted)\n    if len(list1_tuple) == 1:\n        return True\n\n    # Check if the first element is less than or equal to the second element\n    if list1_tuple[0] <= list1_tuple[1]:\n        return issort_list(list1_tuple[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif list1[0] < list1[1]:\n        for i in range(1, len(list1)-1):\n            if list1[i] < list1[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a list is sorted or not.\n    \"\"\"\n    return sorted(lst) == lst"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the built-in `sorted` function\n        sorted_sublist = sorted(sublist)\n        # replace the original sublist with the sorted one\n        list1[list1.index(sublist)] = sorted_sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums[0])\n    for i in range(1, len(nums)):\n        unique_nums = unique_nums.union(set(nums[i]))\n    result = list(unique_nums)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a new list to store unique numbers\n    unique_nums = []\n\n    # Loop through each list in the input list\n    for i in range(len(nums)):\n        # Loop through each number in the current list\n        for j in range(len(nums[i])):\n            # If the number is not already in the unique_nums list, add it\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    return [num for num in nums if num not in seen and not seen.add(num)]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list to set to remove duplicates\n    unique_list = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Filter out the unique numbers from the list\n    unique_list = list(set(list_data))\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # convert the list to set to remove duplicates\n    unique_nums = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    return 1 if len(unique_list) == 0 else unique_list[0]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # convert the list to set to remove duplicates\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # create a set to store unique numbers\n    unique_set = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    \n    # return the product\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    area = 2*3.14159*(r**2 + h**2)\n\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using Heron's formula\n    s = (2 * r * h) + (2 * r * r) + (2 * h * h)\n    s = math.sqrt(s)\n\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # radius and height of cylinder\n    r = float(r)\n    h = float(h)\n    # surface area of the cylinder\n    surface_area = 2*pi*r*r + 2*pi*r*h + 2*pi*h*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r**2 + 2*3.14159*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*(r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)]==B:\n                return True\n    else:\n        for i in range(len(B)):\n            if A.count(B[i])==len(B):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A:\n        return False\n    elif len(A) > len(B):\n        return is_Sub_Array(A[1:], B)\n    else:\n        return A == B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    # Check if the first list is a sublist of the second list\n    if A in B:\n        return True\n    else:\n        # If the first list is not a sublist of the second list, check if the first list is a subsequence of the second list\n        for i in range(len(B) - len(A) + 1):\n            if A == B[i:i+len(A)]:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert both lists into sets to remove duplicates\n    set_A = set(A)\n    set_B = set(B)\n    # check if set_B is a sublist of set_A\n    return set_B.issubset(set_A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): # if B is longer than A, they cannot be sublists\n        return False\n    i, j = 0, 0 # indices for A and B\n    while i < len(A) and j < len(B): # iterate through A and B\n        if A[i] == B[j]:\n            j += 1\n        i += 1\n    return j == len(B) # if j reaches the end of B, then all elements have been matched"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the second list is a sublist of the first list\n    if B in A:\n        print(\"The second list is a sublist of the first list.\")\n    else:\n        print(\"The second list is not a sublist of the first list.\")"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A[0] in B: # if the first element of A is in B\n        if len(B) > len(A): # and the length of B is greater than that of A\n            for i in range(len(B)-len(A)+1): # iterate over all possible sublists of B\n                if A == B[i:i+len(A)]: # check if each sublist is a sublist of A\n                    return True\n        else:\n            return True # if B is a prefix of A, it's a sublist\n    else:\n        return False # if the first element of A is not in B, it's not a sublist of B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of its factorial.\n    '''\n    # use a loop to find the last digit of the factorial\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Get the length of the number\n    length = len(num)\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # Loop through the digits of the number from right to left\n    for i in range(length-1, -1, -1):\n        # Get the current digit\n        digit = int(num[i])\n        # Multiply the current digit with the factorial of the remaining digits\n        factorial = 1\n        for j in range(i+1, length):\n            factorial *= int(num[j])\n        # Update the last digit with the current digit raised to the power of the factorial\n        last_digit += digit ** factorial\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize a variable to store the last digit\n    last_digit = 0\n\n    # Loop through each digit in the number\n    while n > 0:\n\n        # Get the last digit of the factorial\n        last_digit = n % 10\n\n        # Remove the last digit from the factorial\n        n = n // 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # While n is greater than 0, find the last digit and multiply by 10\n    while n > 0:\n        last_digit = n % 10\n        n //= 10\n        # If the last digit is 0, return the last_digit\n        if last_digit == 0:\n            return last_digit\n    # If n is 0, return the last_digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit to be 0\n    last_digit = 0\n\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # find the last digit in the factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result = result * i\n        return result % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function finds the last digit in the factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0:\n        factorial = factorial * temp % 10\n        temp = temp // 10\n    return factorial"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    flat_list = []\n    while i < len(list1) + len(list2) + len(list3):\n        if i < len(list1):\n            flat_list.append(list1[i])\n            i += 1\n        elif i < len(list1) + len(list2):\n            flat_list.append(list2[i - len(list1)])\n            i += 1\n        else:\n            flat_list.append(list3[i - len(list1) - len(list2)])\n            i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists of the same length, and returns a single flat list that contains all the elements\n    in the first list, followed by the elements in the second list, and finally, the elements in the third list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    # Loop through each list\n    for i in range(len(list1)):\n        # Add the first element from the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the next element from the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the next element from the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the final result\n    result = []\n    # Use a for loop to iterate through the lists\n    for i in range(len(list1)):\n        # Append the first element of each list to the result list\n        result.append(list1[i])\n        # Append the second element of each list to the result list\n        result.append(list2[i])\n        # Append the third element of each list to the result list\n        result.append(list3[i])\n    # Return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        if list1[index1] < list2[index2]:\n            if list1[index1] < list3[index3]:\n                result.append(list1[index1])\n                index1 += 1\n            else:\n                result.append(list3[index3])\n                index3 += 1\n        elif list2[index2] < list3[index3]:\n            result.append(list2[index2])\n            index2 += 1\n        else:\n            result.append(list3[index3])\n            index3 += 1\n    while index1 < len(list1):\n        result.append(list1[index1])\n        index1 += 1\n    while index2 < len(list2):\n        result.append(list2[index2])\n        index2 += 1\n    while index3 < len(list3):\n        result.append(list3[index3])\n        index3 += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each list\n    for i in range(len(list1)):\n        # Add the first element of the first list to the result\n        result.append(list1[i])\n        # Add the second element of the second list to the result\n        result.append(list2[i])\n        # Add the third element of the third list to the result\n        result.append(list3[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # loop through each list and append the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Iterate through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the elements of each tuple\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, append them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n            \n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of elements in the first tuple and a set of elements in the second tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the common elements in the two sets\n    common = set1.intersection(set2)\n\n    # Find the dissimilar elements in the two sets\n    dissimilar = set1.symmetric_difference(set2)\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # create a list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    # loop through the elements of the two tuples and check if they are dissimilar\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    # print the dissimilar elements\n    if len(dissimilar_elements) == 0:\n        print(\"There are no dissimilar elements between the two tuples.\")\n    else:\n        print(\"The dissimilar elements between the two tuples are:\", dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same length.\"\n    \n    # find the elements that are common in both tuples\n    common_elements = [x for x in test_tup1 if x in test_tup2]\n    \n    # check if the common elements are dissimilar\n    for element in common_elements:\n        if test_tup1.count(element)!= test_tup2.count(element):\n            return \"The common elements are not dissimilar.\"\n    \n    # if all the elements are dissimilar, return None\n    return None"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_set = set(test_tup1) & set(test_tup2)\n    return common_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # If the element at the current index is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sublist in test_tuple:\n        for item in sublist:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_ele(item, even_fnc)\n        else:\n            if even_fnc(item):\n                test_tuple.remove(item)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list\n\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nmixed_tuple = [(1, 2, (3, 4, 5, 6)), (7, 8, (9, 10, 11, 12)), (13, 14, (15, 16, 17, 18))]\nresult = even_ele(mixed_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize a new list to store even elements\n    even_list = []\n    \n    # loop through each element in the nested tuple\n    for element in test_tuple:\n        # check if the element is even by calling the even_fnc function\n        if even_fnc(element):\n            # if the element is even, append it to the even_list\n            even_list.append(element)\n    \n    # return the even_list\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif isinstance(item, even_fnc):\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for sublist in test_tuple:\n        for item in sublist:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Define a helper function to check if an element is even or odd\n    def is_even(x):\n        return x % 2 == 0\n\n    # Loop through the nested tuple and remove any uneven elements\n    new_tuple = []\n    for t in test_tuple:\n        if all(is_even(x) for x in t):\n            new_tuple.append(t)\n\n    # Call the even_fnc function to process the new tuple\n    return even_fnc(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for element in test_tuple:\n        if isinstance(element, (list, tuple)):\n            result.append(even_ele(element, even_fnc))\n        else:\n            result.append(even_fnc(element))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x): \n        return x % 2 == 0\n\n    def remove_uneven(elem): \n        return [x for x in elem if is_even(x)]\n\n    even_nested_tuple = [remove_uneven(x) for x in test_tuple]\n\n    return even_nested_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n\ndef is_even(num):\n    '''\n    A function that checks if a number is even or odd.\n    '''\n    return num % 2 == 0\n\nprint(even_ele((1, (2, 3), 4, (5, 6, (7, 8), 9)), is_even))\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2 # Formula for calculating the surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)*2 + (s*s)*4 + (s*s)*4"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # formula for surface area of a square pyramid\n    surface_area = 6 * b * s\n\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)*2 \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b*b + 2*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s**2 + 0.5*b*s*b + 0.5*s*b*b + 0.5*b*b**2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b + 2 * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(base, height): \n    '''\n    This function takes two parameters, base and height, which represent the base and height of the pyramid respectively. \n    It then returns the surface area of the pyramid by multiplying the area of the base of the pyramid by the height.\n    '''\n    area_base = base ** 2\n    surface_area = area_base * height\n    return surface_area "
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == dict1.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = catalan * (2*i-1) // i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    else:\n        return num * (catalan_number(num - 1) + catalan_number(num - 2))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (2*num) ** 0.5 / (math.factorial(num) * math.factorial(num - 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n * catalan_number(n-1)) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 2 * catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 0\n    n = num\n    \n    for i in range(n):\n        catalan += (1 + i) * (1 + n - i)\n    \n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)\n\nprint(catalan_number(5)) # Output: 10"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    return (2*n*(n+1) // 6)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [0] * (num + 1)\n    catalan_list[0] = 1\n    catalan_list[1] = 1\n    for i in range(2, num + 1):\n        catalan_list[i] = 2 * catalan_list[i - 1] - catalan_list[i - 2]\n    return catalan_list[num]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    # use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # initialize an empty list to store the adverb and its positions in the text\n    result = []\n    # loop over the matches and add each match to the result list\n    for match in matches:\n        # get the start and end positions of the match in the text\n        start = text.find(match)\n        end = start + len(match)\n        # add the adverb and its positions to the result list\n        result.append((match, start, end))\n    # return the result list\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(?:^|\\s)(?:a|an|the|or|but|for|nor|so|yet|too)(?:\\s|$)'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Loop through the matches and add their positions to the list\n    for match in matches:\n        positions.append(match.start())\n\n    # Return the positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = re.findall(r'(\\bly\\b)', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regex pattern to match adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    \n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Iterate over the matches and return a list of tuples containing the matched adverb and its position in the text\n    result = []\n    for match in matches:\n        result.append((match, text.index(match)))\n        \n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*[aeiou]ly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        print(f\"{match.group()} found at index {start}, length {end - start}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regex pattern to find the adverb\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Find the positions of all matches in the text\n    positions = [m.start() for m in re.finditer(pattern, text)]\n\n    # Sort the positions in ascending order\n    positions.sort()\n\n    # Return a list of tuples containing the matches and their positions\n    return [(m, p) for m, p in zip(matches, positions)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print the first adverb and its position(s)\n    print(f\"Adverbs ending with 'ly':\")\n    for match in matches:\n        print(f\"'{match}' found at position {text.find(match)}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use a regular expression to find all adverbs ending with 'ly'\n    pattern = r'(?<=[^a-zA-Z])\\bly\\b(?=[^a-zA-Z])'\n    # Find all matches in the text using the pattern\n    matches = re.findall(pattern, text)\n    # Sort the matches by their position in the text\n    matches.sort(key=lambda x: text.find(x))\n    # Print the matches and their positions\n    for i, match in enumerate(matches):\n        print(f'Adverb \"{match}\" found at position {i+1}:')\n        print(text.split(match)[-1])\n        print()"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regex pattern for adverbs ending in ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n\n    # Iterate over the matches and append the position to the positions list\n    for match in matches:\n        positions.append(match.start())\n\n    # Return the list of positions\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items to a min heap\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, -item)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of n elements\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # extract the n most expensive items and return them as a list\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # for each subsequent item, add it to the heap if it's more expensive than the smallest item in the heap\n    for item in items[n:]:\n        if item[1] > heap[0][1]:\n            heapq.heappushpop(heap, item)\n\n    # return the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    The function first converts the list of items into a min heap. Then, it removes the smallest n items from the heap and returns them as a list.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): List of items to be sorted.\n    n (int): Number of items to be returned.\n\n    Returns:\n    list: List of n most expensive items.\n    \"\"\"\n    # Sort the items in descending order based on price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Return the first n items from the sorted list\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of n elements, and insert the first n elements of the dataset into the heap\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    \n    # loop through the rest of the dataset and insert the next element into the heap, if it's cheaper than the smallest element in the heap\n    for i in range(n, len(items)):\n        if items[i] < min_heap[0]:\n            heapq.heappushpop(min_heap, items[i])\n    \n    # return the n most expensive elements from the heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a max heap of size n\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Return the max heap\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items, returns a list of the n most expensive items.\n    '''\n    # Sort the items in decreasing order of value\n    sorted_items = sorted(items, key=lambda x: x['value'], reverse=True)\n    \n    # Use a max heap to store the n most expensive items\n    max_heap = []\n    for item in sorted_items:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Extract and return the n most expensive items from the heap\n    return [item['name'] for item in max_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap of size n\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # Iterate through the dataset\n    for item in items:\n        # Insert the item into the min-heap\n        heapq.heappush(min_heap, item)\n\n        # If the min-heap is full, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items in the dataset\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, -item)\n        else:\n            if -item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -item)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # split the list at the nth element\n    mid = n // 2\n    left_part = l[:mid]\n    right_part = l[mid:]\n\n    # add the left part to the end of the right part\n    l = right_part + left_part\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if i == n:\n            break\n        new_list.append(l[i])\n    new_list.extend(l[:n])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    elif n > len(l):\n        return [l]\n    else:\n        return l[:n] + [l[n:]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    elif n == 0:\n        return [l[0]] + l[1:]\n    else:\n        return split_Arr(l[n:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"List cannot be split\"\n    \n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError(\"n is greater than the length of the list\")\n    return [l[n-1]] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"The given index is greater than the length of the list.\")\n        return l\n    elif n < 0:\n        print(\"The given index is negative.\")\n        return l\n    else:\n        # Splitting the list at the nth element\n        first = l[:n]\n        second = l[n:]\n        \n        # Adding the first part of the list to the end\n        result = first + second\n        \n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l + [l[:n]]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Using list comprehension to convert list to tuple\n    new_tuple = tuple(listx)\n    return new_tuple"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Return the difference between the two largest and smallest values\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # get the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between max and min\n    diff = max_val - min_val\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables for smallest and largest value\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # Loop through each value in the list\n    for num in nums:\n        # Update smallest and largest value if current value is smaller\n        if num < smallest:\n            smallest = num\n        # Update smallest and largest value if current value is larger\n        elif num > largest:\n            largest = num\n    \n    # Return the difference between the largest and smallest value\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 'List should have at least two values'\n\n    min_num = nums[0]\n    max_num = nums[0]\n\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 'The list is empty.'\n    elif len(nums) == 1:\n        return abs(nums[0] - nums[0])\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    if a > b:\n        a, b = b, a\n    perfect_squares = []\n    i = 1\n    while i * i <= b:\n        if i * i == a:\n            perfect_squares.append(i * i)\n        elif i * i > a:\n            if b % i == 0:\n                perfect_squares.append(i * i)\n                b //= i\n            else:\n                i += 1\n        else:\n            i += 1\n    if b > 0:\n        perfect_squares.append(b)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integer numbers as input and returns a list of perfect squares between them.\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            result.append(i*i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of perfect squares between the two numbers.\n    '''\n    # Creating a list to store the perfect squares between the two numbers\n    squares = []\n\n    # Looping through all the integers between a and b\n    for i in range(a, b + 1):\n        # Checking if the integer is a perfect square\n        if i ** 2 == i:\n            squares.append(i)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares between a and b\n    squares = []\n    # iterate from a to b\n    for i in range(a, b+1):\n        # check if the square is a perfect square\n        square = i ** 2\n        if square == i:\n            # if it is, append it to the list of perfect squares\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    squares = []\n\n    for i in range(a, b + 1):\n        if i*i == a or i*i == b:\n            squares.append(i)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Loop through the range of b to a\n    for i in range(b, a):\n\n        # Calculate the square of i\n        square = i ** 2\n\n        # Check if the square is between a and b\n        if square >= a and square <= b:\n\n            # Print the square\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = i ** 0.5\n        if int(square) ** 2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize variables\n    perfect_squares = []\n    # loop through all numbers between a and b\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        square = int(num ** 0.5)\n        if num == square ** 2:\n            perfect_squares.append(num)\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a list to store perfect squares\n    perfect_squares_list = []\n    \n    # Loop through all integers between a and b\n    for i in range(a, b+1):\n        # Check if the integer is a perfect square\n        square = int(i**0.5) ** 2\n        if square == i:\n            # If it is a perfect square, add it to the list\n            perfect_squares_list.append(i)\n    \n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): radius\n    theta (float): angle in radians\n    \n    Returns:\n    x (float): x-coordinate\n    y (float): y-coordinate\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): Radius of the circle.\n    theta (float): Angle in radians.\n\n    Returns:\n    x (float): X-coordinate of the point.\n    y (float): Y-coordinate of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in the radius and angle of a point in polar coordinates,\n    and returns the corresponding point in rectangular coordinates.\n    '''\n\n    # Convert the angle from radians to degrees\n    theta_deg = theta*180.0/cmath.pi\n\n    # Calculate the x and y coordinates using the formula for rectangular coordinates\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n\n    # Return the x and y coordinates as a tuple\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle of the point (in radians).\n    \n    Returns:\n    A tuple containing the x and y coordinates of the point in the rectangular coordinate system.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert x, y to complex number\n    z = complex(x,y)\n\n    # Calculate rectangular coordinates\n    rect_x = z.real\n    rect_y = z.imag\n\n    # Return the rectangular coordinates\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The distance from the origin\n    theta (float): The angle from the positive x-axis\n\n    Returns:\n    A tuple containing the x and y coordinates in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n\n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Args:\n    x (float): The radius of the circle in the x-axis.\n    y (float): The radius of the circle in the y-axis.\n    \n    Returns:\n    A tuple (x1,y1) where x1 and y1 are the coordinates of the point in the rectangular coordinate system.\n    \n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x/r)\n    \n    # convert polar coordinates to rectangular coordinates\n    x1 = r * cmath.cos(theta)\n    y1 = r * cmath.sin(theta)\n    \n    return (x1.real, x1.imag)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least 2 elements\")\n        return\n    \n    first = newList[0]\n    last = newList[-1]\n    \n    newList[0] = last\n    newList[-1] = first\n    \n    print(\"New list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty or not\n    if len(newList) <= 1:\n        return newList\n    \n    # Interchange the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the new list with interchanged elements\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list is empty\n    if len(newList) == 0:\n        return None\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty or has less than two elements\n    if len(newList) < 2:\n        return newList\n    else:\n        # swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Checking if the input is a list\n    if type(newList)!= list:\n        print(\"Error: Input must be a list!\")\n        return\n\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements!\")\n        return\n\n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    print(\"New list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first, last = newList[0], newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): Upper limit of the binomial coefficient.\n    k (int): Length of the consecutive binomial coefficients.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n, k - 1) * n / k + binomial_Coeff(n - 1, k - 1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize variables\n    sum_prod = 0\n    # Initialize sum of products of consecutive binomial coefficients\n    for i in range(k, n+1):\n        sum_prod += i * binomial_Coeff(n-1, k-1)\n    # Return the sum of the products of consecutive binomial coefficients\n    return sum_prod\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first k elements of the range\n    for i in range(k):\n        # Calculate the binomial coefficient using the formula n! / (k! * (n-k)!)\n        coeff = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n        # Multiply the binomial coefficient with the sum so far\n        sum *= coeff\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(2, k + 1):\n            a, b = b, a + b\n        return a * b"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through all possible values of k\n    for i in range(k+1):\n        # Calculate the binomial coefficient for k and i\n        bin_coeff = (n-i)/(i+1)\n        # Multiply the binomial coefficient with the previous sum\n        sum += bin_coeff * i\n    # Return the final sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integer arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i * binomial_Coeff(n-i, k-1)\n        return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of the product of consecutive binomial coefficients as 0\n    sum_of_prod = 0\n    \n    # Initialize the first binomial coefficient as 1\n    first_binomial = 1\n    \n    # Calculate the first binomial coefficient and the product of consecutive binomial coefficients\n    for i in range(1, k+1):\n        binomial = (n-i+1) // i\n        prod_binomial = first_binomial * binomial\n        sum_of_prod += prod_binomial\n        \n        # Update the first binomial coefficient to be used in the next iteration\n        first_binomial = binomial\n    \n    # Return the sum of the product of consecutive binomial coefficients\n    return sum_of_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize a variable to store the sum of the product of consecutive binomial co-efficients\n    binomial_sum = 0\n\n    # Loop through the first k binomial coefficients\n    for i in range(k):\n        # Calculate the binomial coefficient i,j\n        numerator = 1\n        denominator = 1\n        for j in range(i+1):\n            numerator *= (n-j)\n            denominator *= j+1\n        # Multiply the binomial coefficient by 1/j!\n        binomial_sum += numerator / denominator\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return binomial_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    # Check if n and k are valid integers\n    if not (isinstance(n, int) and isinstance(k, int)):\n        raise ValueError(\"Both n and k must be integers\")\n\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Both n and k must be non-negative and k must be less than or equal to n\")\n\n    # Initialize the sum of consecutive binomial co-efficients\n    sum_binomial_Coeff = 0\n\n    # Loop through all possible values of k\n    for i in range(1, n + 1):\n        # Compute the value of binomial coefficient (n choose i) * (k choose i)\n        binomial_coeff = (n - i + 1) * (1 - (1 / i)) * (1 - (1 / (i + k - n + 1)))\n        # Add the value of binomial coefficient to the sum of consecutive binomial co-efficients\n        sum_binomial_Coeff += binomial_coeff\n\n    return sum_binomial_Coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n = int(n)\n    k = int(k)\n    \n    if n < k:\n        return 0\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(k,n+1):\n        result += i * (n-i+1)\n    \n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to remove leading zeroes from ip address\n    ip = re.sub(r'^\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d{1,3}\\.')\n    return pattern.sub('', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\s*0+\\.', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub('^0+', '', ip)\n    # If the ip address is now empty, set it to None\n    if ip == '':\n        ip = None\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0+)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'\\b((?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'\n    match = re.match(ip_pattern, ip)\n    if match:\n        return match.group(0)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'[0-9]+', ip)\n    return '.'.join(ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n    if ip_pattern.match(ip):\n        ip_list = ip.split('.')\n        new_ip = '.'.join([x for x in ip_list if x!= '0'])\n        return new_ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = re.sub(r'^\\d+(\\.\\d+)*\\.(\\d+)$', r'\\1\\3', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = abs(even - odd)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"Error: List must have at least two elements.\"\n    elif list1[0] % 2 == 0 and list1[1] % 2 == 0:\n        return \"Error: The first even and first odd numbers cannot be equal.\"\n    elif list1[0] % 2 == 0 and list1[1] % 2 == 1:\n        return list1[0] - list1[1]\n    elif list1[0] % 2 == 1 and list1[1] % 2 == 0:\n        return list1[1] - list1[0]\n    else:\n        return \"Error: List does not contain even and odd numbers.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    # Find the first even number in the list\n    even = next((num for num in lst if num % 2 == 0), None)\n    # Find the first odd number in the list\n    odd = next((num for num in lst if num % 2!= 0), None)\n    # If there is no even or odd number, return None\n    if even is None or odd is None:\n        return None\n    # Calculate the difference between the even and odd numbers\n    diff = even - odd\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_odd = num\n                break\n    return first_odd - first_even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the difference of the first even and first odd numbers of the list.\n    If the list has less than two elements, it returns None.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        even_num = None\n        odd_num = None\n        for num in list1:\n            if num % 2 == 0:\n                if even_num is None:\n                    even_num = num\n                elif even_num < num:\n                    even_num = num\n            else:\n                if odd_num is None:\n                    odd_num = num\n                elif odd_num < num:\n                    odd_num = num\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                diff = abs(even_num - num)\n                return diff\n        elif num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            else:\n                diff = abs(odd_num - num)\n                return diff\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n\n    for i in list1:\n        if i % 2 == 0:\n            even_number.append(i)\n        else:\n            odd_number.append(i)\n\n    diff = abs(even_number[0] - odd_number[0])\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    diff_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    diff_num = even_num - odd_num\n    \n    return diff_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # Compare the length of binary strings\n    if len(binary1) < len(binary2):\n        binary1 = binary1.zfill(len(binary2))\n    else:\n        binary2 = binary2.zfill(len(binary1))\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = 0\n\n    # Compare the binary strings and count swaps\n    while i < len(binary1) and j < len(binary2):\n        if binary1[i]!= binary2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif binary1[i] == binary2[j]:\n            i += 1\n            j += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    # Convert input strings to lists of integers\n    num1 = [int(x) for x in str1]\n    num2 = [int(x) for x in str2]\n\n    # Initialize variables for swaps and swapped bits\n    swaps = 0\n    swapped_bits = 0\n\n    # Iterate through each bit of the first binary number\n    for i in range(len(num1)):\n        # Check if the bit is not equal to the corresponding bit of the second binary number\n        if num1[i]!= num2[i]:\n            # If it is, swap the corresponding bits and increment the swaps count\n            num1[i], num2[i] = num2[i], num1[i]\n            swaps += 1\n            swapped_bits += 1\n\n    # If no swaps were made, the binary numbers are already in the same order\n    if swaps == 0:\n        return swaps\n\n    # Check if the swapped bits are equal to the number of bits in the first binary number\n    if swapped_bits == len(num1):\n        return swaps\n\n    # If the swapped bits are not equal to the number of bits in the first binary number, the binary numbers are not of the same order\n    return -1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Create a list of swaps required to convert the numbers\n    swaps = []\n    # Iterate over the digits of num1\n    for i in range(n):\n        # Check if the digits match\n        if num1 & 1 == num2 & 1:\n            # If they do, increment the swaps counter and move both digits to the right\n            swaps.append((num1 & 1) << 1)\n            num1 >>= 1\n            num2 >>= 1\n        else:\n            # If they don't match, move the digit in num1 to the right\n            swaps.append(1)\n            num1 >>= 1\n    # Calculate the minimum number of swaps required\n    min_swaps = len(swaps)\n    # Check if there are any swaps remaining after the conversion\n    if num1!= 0 or num2!= 0:\n        # If there are, increment the swaps counter\n        swaps.append(num1)\n        min_swaps += 1\n    # Convert the swaps list to a binary string and return it\n    return bin(min_swaps)[2:]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Both input strings must have the same length.\"\n\n    swaps = 0\n    i = 0\n    j = len(str1) - 1\n\n    while i < j:\n        if str1[i]!= str2[j]:\n            str1[i], str1[j] = str1[j], str1[i]\n            swaps += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2): \n    n = len(str1) \n    str1 = list(map(int, str1)) \n    str2 = list(map(int, str2)) \n  \n    swaps = 0 \n  \n    # Finding the maximum value of str1 \n    max1 = max(str1) \n  \n    # Finding the minimum value of str2 \n    min2 = min(str2) \n  \n    # Initializing the two lists for comparison \n    comp_list = [] \n    for i in range(max1 + 1): \n        comp_list.append(i) \n  \n    # Checking for swaps in str1 and str2 \n    for i in range(min2, max1, -1): \n        if i not in str1 and i in str2: \n            swaps += 1 \n            str1.append(i) \n            str2.remove(i) \n            comp_list.remove(i) \n        elif i in str1 and i not in str2: \n            swaps += 1 \n            str1.remove(i) \n            str2.append(i) \n            comp_list.remove(i) \n        elif i in str1 and i in str2: \n            str1.remove(i) \n            str2.remove(i) \n            comp_list.remove(i) \n            \n    # Checking the final state of comp_list \n    for i in range(min2, max1, -1): \n        if i not in comp_list and i in str2: \n            swaps += 1 \n            str1.append(i) \n            str2.remove(i) \n            comp_list.remove(i) \n        elif i in comp_list and i not in str2: \n            swaps += 1 \n            str1.remove(i) \n            str2.append(i) \n            comp_list.remove(i) \n        elif i in comp_list and i in str2: \n            str1.remove(i) \n            str2.remove(i) \n            comp_list.remove(i) \n  \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # Initialize variables\n    swaps = 0\n    i = 0\n    j = 0\n    \n    # Loop through both strings\n    while i < n1 and j < n2:\n        # If characters are not equal, swap the characters and increment swaps\n        if str1[i]!= str2[j]:\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            swaps += 1\n            i = 0\n            j = 0\n        # Move to next characters in both strings\n        else:\n            i += 1\n            j += 1\n            \n    # Return the minimum number of swaps required to convert str1 to str2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables to keep track of swaps\n    swaps = 0\n    last_i = 0\n    \n    # Iterate through each bit of num1 and num2\n    for i in range(len(str1)):\n        # If bits are not equal, increment the swap count and swap the bits\n        if num1 & (1 << i)!= num2 & (1 << i):\n            swaps += 1\n            num1 = num1 ^ (1 << i)\n            num2 = num2 ^ (1 << i)\n            last_i = i\n    \n    # Check for any remaining swaps in the last bit\n    if swaps % 2 == 1:\n        swaps += last_i - len(str1)\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # remove all non-binary digits from str1 and str2\n    str1 = ''.join(filter(str.isalpha, str1))\n    str2 = ''.join(filter(str.isalpha, str2))\n    \n    # convert the binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    \n    # initialize variables to keep track of swaps\n    swaps = 0\n    i = j = 0\n    \n    # while i and j are not at the end of the binary strings\n    while i < len(str1) and j < len(str2):\n        # check if the current digits are equal\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        # if the current digits are not equal, check if we can swap one of them\n        else:\n            # check if we can swap the first digit\n            if i > 0 and str1[i-1]!= str2[j]:\n                str1 = str1[:i] + str2[j] + str1[i:i+1] + str1[i+1:]\n                str2 = str2[:j] + str1[i] + str2[j:j+1] + str2[j+1:]\n                swaps += 1\n                i += 1\n                j += 1\n            # check if we can swap the second digit\n            elif j > 0 and str2[j-1]!= str1[i]:\n                str1 = str1[:i] + str1[i] + str2[j] + str1[i+1:]\n                str2 = str2[:j] + str2[j] + str1[i] + str2[j+1:]\n                swaps += 1\n                i += 1\n                j += 1\n            # if we can't swap either digit, we have to add a swap to the total number of swaps\n            else:\n                i += 1\n                j += 1\n                \n    # return the total number of swaps required to convert the binary strings\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0] * (n1 + 1) for _ in range(n2 + 1)]\n\n    for i in range(1, n2 + 1):\n        for j in range(1, n1 + 1):\n            if str1[j - 1] == str2[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n2][n1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to binary integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Create a boolean array to keep track of which digits have been swapped\n    swapped = [False] * 32\n\n    # Iterate through each digit of the binary numbers, swapping the digits if necessary\n    for i in range(32):\n        # If the digits are equal, continue to the next digit\n        if num1 & (1 << i) == num2 & (1 << i):\n            continue\n\n        # If the digits are different, find the index of the first different digit\n        j = i + 1\n        while j < 32 and num1 & (1 << j) == num2 & (1 << j):\n            j += 1\n\n        # Swap the digits at the current positions\n        num1 = num1 ^ ((1 << i) | (1 << j))\n        num2 = num2 ^ ((1 << i) | (1 << j))\n\n        # Mark the digits as swapped in the boolean array\n        swapped[i] = True\n        swapped[j] = True\n\n        # Update the swapped digits in the binary strings\n        str1 = bin(num1)[2:]\n        str2 = bin(num2)[2:]\n\n    # Count the number of swaps required\n    swaps = 0\n    for i in range(32):\n        if swapped[i]:\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize a variable to store the size in bytes of the tuple\n    size = 0\n    \n    # loop through each element of the tuple\n    for i in tuple_list:\n        # convert each element to bytes and add its size to the total size\n        size += sys.getsizeof(i)\n    \n    # return the total size in bytes of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # initialize the size variable to 0\n    size = 0\n\n    # loop through each tuple in the list\n    for tup in tuple_list:\n\n        # add the size of each tuple to the size variable\n        size += sys.getsizeof(tup)\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    total_size = sys.getsizeof(tuple_list)\n    print(\"Size of tuple: \" + str(total_size))\n\nif __name__ == \"__main__\":\n    # Example usage\n    t = (1, 2, 3, 4, 5)\n    tuple_size(t)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters: an array `arr1` of integers, another array `arr2` of integers,\n    and a non-negative integer `k`. The function returns the kth smallest element from both arrays.\n\n    If either of the arrays is empty, the function returns None. If the kth smallest element is not present in\n    either array, the function returns None.\n    \"\"\"\n    # check if either of the arrays is empty\n    if not arr1 or not arr2:\n        return None\n\n    # merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # check if kth smallest element is present in the sorted array\n    if k > len(sorted_arr) - 1 or k < 0:\n        return None\n    else:\n        return sorted_arr[k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k - 1\n    while i >= 0 and j >= 0:\n        if arr1[i] <= arr2[j]:\n            arr1[i + 1], arr1[j] = arr1[j], arr1[i + 1]\n            i -= 1\n        else:\n            arr2[j + 1], arr2[i] = arr2[i], arr2[j + 1]\n            j -= 1\n    return arr1[0]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments:\n    - arr1: the first sorted array\n    - arr2: the second sorted array\n    - k: the index of the kth element to find\n    \n    It first calculates the lengths of the two arrays, and compares them. If they are equal,\n    it means that the two arrays have the same length, so the kth element must be in either array.\n    \n    If they are not equal, the function checks if the length of arr1 is greater. If it is,\n    then we know that the kth element must be in arr1. If not, then we know that the kth element\n    must be in arr2.\n    \n    Once we know which array contains the kth element, we can use a binary search algorithm to find\n    the kth element. The binary search algorithm has a time complexity of O(log n) on average,\n    so we can use a while loop to perform the binary search until we find the kth element.\n    \n    Finally, we return the kth element.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # Check if the two arrays are equal in length. If they are, then the kth element must be in either array.\n    if n1 == n2:\n        if k < n1:\n            return arr1[k]\n        else:\n            return arr2[k - n1]\n    \n    # If the length of arr1 is greater, then the kth element must be in arr1.\n    elif n1 > n2:\n        return find_kth(arr1, arr2[n2:], k)\n    \n    # If the length of arr2 is greater, then the kth element must be in arr2.\n    else:\n        return find_kth(arr1[n1:], arr2, k - n1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    m = len(arr1)\n    n = len(arr2)\n\n    # Initialize two pointers, one for each array\n    i = 0\n    j = 0\n\n    # Initialize a variable to keep track of the number of elements in the first array\n    count = 0\n\n    # Loop through both arrays until we have found k elements\n    while count < k:\n\n        # If the i-th element of the first array is smaller than the j-th element of the second array,\n        # we increment the count and move the i-th pointer to the right\n        if arr1[i] < arr2[j]:\n            count += 1\n            i += 1\n\n        # Otherwise, we increment the count and move the j-th pointer to the right\n        else:\n            count += 1\n            j += 1\n\n    # Return the kth element found in the two arrays\n    return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initialize variables\n    i = j = 0\n    kth = float('inf')\n    \n    # merge the two arrays\n    merged_arr = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    # add the remaining elements from arr1 or arr2\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n    \n    # find the kth element\n    for num in merged_arr:\n        if num <= k:\n            kth = num\n            k -= 1\n        else:\n            break\n    \n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    # initialize two pointers for the two arrays\n    i, j = 0, 0\n    # loop through both arrays\n    while i < len(arr1) and j < len(arr2):\n        # compare the elements at the current pointers\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        # if the kth element is found, return it\n        if k == 1:\n            return arr1[i-1]\n        k -= 1\n    # if kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k and returns the kth smallest element.\n    \"\"\"\n    # Find the length of the two arrays\n    n1, n2 = len(arr1), len(arr2)\n    \n    # If either array is empty, return the empty array\n    if n1 == 0:\n        return arr2[:k]\n    elif n2 == 0:\n        return arr1[:k]\n    \n    # Find the minimum length of the two arrays\n    min_len = min(n1, n2)\n    \n    # Find the indices of the kth smallest element in the first array\n    first_indices = find_indices(arr1[:min_len], k)\n    \n    # Find the indices of the kth smallest element in the second array\n    second_indices = find_indices(arr2[:min_len], k - first_indices[0])\n    \n    # Merge the two arrays and return the kth smallest element\n    return merge_arrays(arr1[:min_len], arr2[:min_len], first_indices, second_indices)\n\ndef find_indices(arr, k):\n    \"\"\"\n    This function takes in an array and an integer k and returns the indices of the kth smallest element.\n    \"\"\"\n    n = len(arr)\n    lows = [0] * (n + 1)\n    highs = [0] * (n + 1)\n    curr_low = -1\n    curr_high = -1\n    \n    # Calculate the indices of each element in the array\n    for i in range(n):\n        if arr[i] < arr[i + 1]:\n            curr_low = i\n            curr_high = i\n        else:\n            curr_low = i + 1\n            curr_high = i + 1\n        lows[i + 1] = curr_low\n        highs[i + 1] = curr_high\n    \n    # If the index of the kth smallest element is k, return it\n    if k <= highs[k]:\n        return k\n    \n    # If k is less than the smallest element, find the kth smallest element in the first half of the array\n    if k <= lows[1]:\n        index = lows[1]\n    # If k is greater than the largest element, find the kth smallest element in the second half of the array\n    elif k > highs[n]:\n        index = highs[n]\n    else:\n        # Find the index where the sum of the two sums is equal to k\n        left = 1\n        right = n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if (lows[mid] + highs[n - mid]) == k:\n                index = mid\n                right = mid - 1\n            elif (lows[mid] + highs[n - mid]) < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    # Return the indices of the kth smallest element\n    return [index, k - lows[index]]\n\ndef merge_arrays(arr1, arr2, first_indices, second_indices):\n    \"\"\"\n    This function takes in two sorted arrays and two lists of indices, and returns the merged sorted array.\n    \"\"\"\n    merged_arr = []\n    i, j = 0, 0\n    n = len(first_indices)\n    \n    # Iterate through the lists of indices and merge the arrays accordingly\n    while i < n and j < n:\n        if first_indices[i] <= second_indices[j]:\n            merged_arr.append(arr1[first_indices[i]])\n            i += 1\n        else:\n            merged_arr.append(arr2[second_indices[j]])\n            j += 1\n    \n    # Append the remaining elements from either array\n    while i < n:\n        merged_arr.append(arr1[first_indices[i]])\n        i += 1\n    while j < n:\n        merged_arr.append(arr2[second_indices[j]])\n        j += 1\n    \n    return merged_arr"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # convert the given number to a string and split it into its individual digits\n    number_str = str(number)\n    number_list = [int(digit) for digit in number_str]\n    \n    # calculate the sum of the cubes of each digit in the number\n    cubes = [digit**3 for digit in number_list]\n    \n    # calculate the sum of the digits of the cubes\n    total = sum(cubes)\n    \n    # check if the original number is equal to the sum of the cubes of its digits\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    str_number = str(number)\n    # Initialize a variable to store the sum of the square of each digit\n    sum_of_squares = 0\n    # Iterate through each digit in the number\n    for digit in str_number:\n        # Convert the digit to an integer and square it\n        square = int(digit)**2\n        # Add the square to the sum of squares\n        sum_of_squares += square\n    # Compare the sum of squares to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Return True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n    # Calculate the sum of the cubes of the digits\n    sum_of_cubes = sum(int(d)**3 for d in n_str)\n    # Return whether the sum is equal to the original number\n    return n == sum_of_cubes"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the number to a string and taking its length\n    num_str = str(number)\n    num_len = len(num_str)\n    \n    # initializing a variable to store the sum of digits raised to the power of the length of the string\n    num_sum = 0\n    \n    # iterating over each character in the string and adding its value to the sum\n    for char in num_str:\n        num_sum += int(char) ** num_len\n    \n    # checking if the number is equal to the sum of its digits raised to the power of its length\n    if num_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    return total == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n    \n    # Initialize a variable to store the sum of the cubes of each digit\n    cube_sum = 0\n    \n    # Iterate over each digit in the number and add its cube to the cube_sum\n    for digit in number_str:\n        cube_sum += int(digit)**3\n    \n    # Check if the cube_sum is equal to the original number\n    if cube_sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks if a given number is an armstrong number or not.\n    \"\"\"\n    # Initialize a variable to hold the sum of the power of each digit\n    power = 0\n\n    # Extract the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n\n    # Calculate the power of each digit\n    for digit in digits:\n        power += digit ** len(digits)\n\n    # Check if the sum of power of digits is equal to the input number\n    return power == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string and remove all non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n    # Calculate the sum of the cubes of each digit in the number\n    num_sum = sum(int(digit) ** 3 for digit in number_str)\n    # Compare the sum with the original number\n    return num_sum == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer `n` as input, calculates the sum of the first `n` natural numbers, and\n    returns a tuple containing the sum and the average.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += i\n    average = sum_ / n\n    return (sum_, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Find sum of the first n natural numbers\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n    \n    # Find average of the first n natural numbers\n    average = sum / number\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"The sum of the first\", number, \"natural numbers is\", sum)\n    print(\"The average of the first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(f\"The sum of the first {n} natural numbers is: {sum}\")\n    print(f\"The average of the first {n} natural numbers is: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and count\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # find the average\n    average = sum / count\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n    # iterate from 1 to number\n    for i in range(1, number+1):\n        # add i to sum\n        sum += i\n        # increment count\n        count += 1\n    # calculate average\n    average = sum/count\n    # return sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n): \n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == max(char_count.values()):\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character.\n    \"\"\"\n    char_list = list(str1)\n    for i in range(len(char_list)):\n        for j in range(i+1, len(char_list)):\n            if char_list[i] == char_list[j]:\n                return char_list[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # find the first repeated character in the string\n    for char in str1:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n\n    # loop through the unique characters and find the first one that occurs more than once\n    for char in unique_chars:\n        if str1.count(char) > 1:\n            return char\n\n    # if all characters are unique, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    first_repeat = ''\n    for i in range(len(char_list)):\n        if char_list.count(char_list[i]) > 1 and not (i == 0 or char_list[i] == char_list[i-1]):\n            first_repeat = char_list[i]\n            break\n    return first_repeat"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n+1):\n        lucid_numbers.append(num ** 2 + num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    i = 1\n    while i <= n:\n        lucid_list.append(i)\n        i += 1\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        if ludic_numbers.count(i) == 0 and i % 2 == 1:\n            ludic_numbers.append(i)\n        i += 2\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic_numbers = []\n    i = 2\n    while i <= n:\n        is_lucid = True\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(n+1):\n        if (i**2 + 12 * i + 6) % 2 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_nums = []\n    i = 1\n    while i <= n:\n        if i == 1:\n            lucid_nums.append(i)\n        elif i == 2:\n            lucid_nums.append(2)\n        else:\n            if i % 2 == 0:\n                j = 3\n                while j <= i // 2:\n                    if i % j == 0:\n                        break\n                    j += 2\n                else:\n                    lucid_nums.append(i)\n            else:\n                j = 2\n                while j <= i - 2:\n                    if i % j == 0:\n                        break\n                    j += 2\n                else:\n                    lucid_nums.append(i)\n        i += 1\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # create a list of prime numbers up to n\n    primes = sieve_of_eratosthenes(n)\n\n    # create a list of lucid numbers\n    lucid_numbers = []\n    for prime in primes:\n        if prime * prime > n:\n            break\n        lucid_numbers.append(prime * prime)\n\n    return lucid_numbers\n\n\ndef sieve_of_eratosthenes(n):\n    \"\"\"\n    Create a list of prime numbers up to n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n+1, p):\n                primes[i] = False\n        p += 1\n    return [p for p in range(2, n+1) if primes[p]]\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 2\n    while lucid <= n:\n        if lucid % 13 == 1 or lucid % 13 == 5:\n            print(lucid)\n        lucid += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return lucid[:n]"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into a list of words\n    reversed_words = [] # create an empty list to store the reversed words\n    for word in words: # loop through each word in the list\n        reversed_words.insert(0, word) # insert the word at the beginning of the list\n    return \" \".join(reversed_words) # join the list of reversed words with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    return''.join(words[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove spaces from the string\n    s = s.replace(\" \", \"\")\n    \n    # Split the string into words\n    words = s.split(\" \")\n    \n    # Reverse the order of the words\n    reversed_words = words[::-1]\n    \n    # Join the words back into a string\n    reversed_s = \" \".join(reversed_words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    \n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n    \n    # check if the number is divisible by 2\n    if num % 2 == 0:\n        return False\n    \n    # check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    A function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(f\"{num} is a prime number.\")\nelse:\n    print(f\"{num} is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians using the formula:\n    radians = (degree * pi)/180\n    '''\n    radians = (degree * math.pi)/180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(match, start, end)\n        return match, start, end\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog is not a literal.\"\npattern = r'\\b[a-zA-Z]+\\b'\nfind_literals(text, pattern)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        literal = matches[0]\n        start_index = text.find(literal)\n        end_index = start_index + len(literal)\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        start = matches[0].start()\n        end = matches[-1].end()\n        literal = matches[0].group()\n        return literal, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"Found literal: '{literal}' at index: {start}, length: {end}\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError('Input value should be non-negative.')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0 or n==1:\n        return 1\n    elif n%2==0:\n        return bell_Number(n//2) + bell_Number(n//2)\n    else:\n        return bell_Number(n//2) + bell_Number((n-1)//2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    This function finds the nth Bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function will return the nth Bell number.\n\n    :param n: The nth Bell number to find.\n    :type n: int\n    :return: The nth Bell number.\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * bell_Number(n-1)) // (n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    This function finds the nth Bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return (2**n) - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value k, and returns a new list with the same elements, but the k'th element removed.\n\n    Parameters:\n    list1 (list): The list to remove the k'th element from.\n    k (int): The index of the k'th element to remove.\n\n    Returns:\n    list: A new list with the same elements as list1, but with the k'th element removed.\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # calculate the index of the kth element from the end of the list\n    k = L - 1\n    kth_index = len(list1) - k\n    \n    # remove the kth element from the list\n    del list1[kth_index]\n    \n    # return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function removes the kth element of the list, where k is the value of L.\n\n    :param list1: list to be modified\n    :param L: integer value representing the index of the element to be removed\n    :return: list with the kth element removed\n    \"\"\"\n    k = L\n    if k >= len(list1):\n        raise ValueError(\"Index out of range\")\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(k):\n        list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(set(list1)) # remove duplicates\n    if L > len(list1): # handle case where L is greater than length of list1\n        return None\n    if L == 0: # handle case where L is 0\n        return []\n    for i in range(L):\n        list1.remove(list1[i]) # remove the kth element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1[:L]\n    else:\n        return remove_kth_element(list1[1:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L\n    if k > len(list1):\n        return list1\n\n    kth_element = list1[k-1]\n    list1 = [elem for elem in list1 if elem!= kth_element]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n\n    # reverse the list to start removing from the last element\n    list1.reverse()\n\n    # remove the kth element\n    list1.pop(k)\n\n    # reverse the list to get the desired order of elements\n    list1.reverse()\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0 or len(test_list[0]) == 0:\n        return None\n    \n    n = N - 1\n    max_val = float('-inf')\n    for row in test_list:\n        if n < len(row):\n            max_val = max(max_val, row[n])\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        column = [row[N-1] for row in test_list]\n        max_list.append(max(column))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    col = []\n    for row in test_list:\n        col.append(row[N-1])\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = float('-inf')\n        for j in range(len(test_list[i])):\n            if j == N - 1:\n                if test_list[i][j] > max_val:\n                    max_val = test_list[i][j]\n        return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        col_max = max(test_list[i][j] for j in range(len(test_list[0])))\n        print(f\"Column {i+1}: {col_max}\")"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_num = max(test_list[i][N-1])\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                test_list[i][j] = max_num\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    if type(test_list)!= list:\n        return \"Error: Input should be a list of lists.\"\n    if type(test_list[0])!= list:\n        return \"Error: Input should be a list of lists.\"\n\n    # Check if the length of the first list is equal to the length of the second list\n    if len(test_list[0])!= len(test_list[1]):\n        return \"Error: Lists should have equal lengths.\"\n\n    # Check if the input is valid\n    if not N.isnumeric():\n        return \"Error: N should be a numeric value.\"\n    if N <= 0 or N > len(test_list[0]):\n        return \"Error: N should be between 1 and the length of the first list.\"\n\n    # Find the index of then'th column\n    column_index = N - 1\n\n    # Initialize the max value to the first element of the first list\n    max_value = test_list[0][column_index]\n\n    # Loop through the remaining elements of the first list\n    for i in range(1, len(test_list[0])):\n        # If the current element is greater than the max value, update the max value\n        if test_list[0][i] > max_value:\n            max_value = test_list[0][i]\n\n    # Return the max value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    \n    max_val = 0\n    max_row = 0\n    \n    for row in test_list:\n        if len(row) <= N:\n            continue\n        \n        if row[N-1] > max_val:\n            max_val = row[N-1]\n            max_row = test_list.index(row)\n    \n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for sub_list in lst:\n        new_lst.append([sub_list[0], sub_list[1]])\n    return new_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append([sublist[0], sublist[1]])\n    return new_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # initialize the cumulative sum variable with 0\n    cumulative_sum = 0\n\n    # loop through each tuple in the list\n    for item in test_list:\n        # add the value to the cumulative sum\n        cumulative_sum += item\n\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for num in test_list:\n        sum += num\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    cum_sum = []\n\n    for item in test_list:\n        cum_sum.append(sum(item))\n\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for tup in test_list:\n        total_sum += sum(tup)\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n\n    # Loop through each element in the list\n    for num in test_list:\n        # Add the current element to the cumulative sum\n        cum_sum += num\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum\n    cum_sum = 0\n    # iterate over the list of tuples\n    for tup in test_list:\n        # add each value to the cumulative sum\n        cum_sum += tup[1]\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes in a tuple list as an argument and returns the cumulative sum of all the values that are present in the list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each element in the tuple\n        for element in tup:\n            # Add the element to the cumulative sum\n            cumulative_sum += element\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total/len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to hold the averages\n    averages = []\n    \n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize a variable to hold the sum of the values in the tuple\n        total = 0\n        \n        # loop through each value in the tuple\n        for num in tup:\n            total += num\n        \n        # calculate the average by dividing the sum by the number of values in the tuple\n        average = total / len(tup)\n        \n        # add the average to the list of averages\n        averages.append(average)\n        \n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        averages.append(avg_tup)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the averages\n    averages = []\n    # iterate over the tuples in the input tuple\n    for tup in nums:\n        # calculate the sum of the numbers in the tuple\n        sum_ = sum(tup)\n        # calculate the average of the numbers in the tuple\n        avg = sum_/len(tup)\n        # append the average to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_set in nums:\n        average = sum(num_set) / len(num_set)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples as input and returns a list of the averages of each tuple.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple)/len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize a list to store the averages\n    avg_list = []\n    # Loop through each tuple in the list\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the list\n        avg_list.append(avg)\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # perform element wise modulo\n    modulo_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples should have the same length.\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] %= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples is not the same.\")\n        return\n    # perform the element wise modulo using a loop\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n\n    while i < steps:\n        if i >= d:\n            jumps += 1\n            i -= d\n        i += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # create a list of tuples containing the (x, y) coordinates of each point on the plane\n    plane_points = [(i, 0) for i in range(1, steps+1)]\n\n    # create a list to keep track of the steps required to reach each point\n    step_count = [0] * len(plane_points)\n\n    # initialize variables for the minimum number of jumps and the current jump count\n    min_jumps = float('inf')\n    current_jumps = 0\n\n    # loop through each point on the plane and calculate the number of jumps required to reach it\n    for i in range(len(plane_points)):\n\n        # calculate the number of jumps required to reach the current point\n        steps_to_current_point = abs(plane_points[i][1])\n\n        # if the current point is (d, 0), we have reached the destination\n        if plane_points[i] == (d, 0):\n            step_count[i] = steps_to_current_point\n            break\n\n        # calculate the number of steps required to reach the next point on the plane\n        next_point = (i+1, plane_points[i][1]+steps_to_current_point)\n\n        # check if the next point is on the plane\n        if next_point in plane_points:\n            step_count[i] = steps_to_current_point + step_count[next_point[0]-1]\n            current_jumps += 1\n\n            # update the minimum number of jumps if we have found a shorter path\n            if step_count[i] < min_jumps:\n                min_jumps = step_count[i]\n\n        # if the next point is not on the plane, or if we have already reached the destination, we don't need to continue\n        else:\n            current_jumps = 0\n            break\n\n    # return the minimum number of jumps required to reach the destination\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    prev_pos = 0\n\n    # Loop through all steps\n    for i in range(steps):\n        # Move right\n        curr_pos += 1\n\n        # Check if reached the target position\n        if curr_pos == d:\n            return jumps\n\n        # Check if position exceeds the range of the 2d plane\n        if curr_pos >= len(steps):\n            return -1\n\n        # Check if can reach the target position using only one jump\n        if i == 0 and curr_pos + 1 >= len(steps):\n            return 1\n\n        # Check if can reach the target position using more than one jump\n        if i == 0 and curr_pos + 1 < len(steps):\n            prev_pos = curr_pos\n            while curr_pos + 1 < len(steps):\n                if steps[curr_pos + 1] > steps[prev_pos + 1]:\n                    prev_pos = curr_pos + 1\n                curr_pos += 1\n\n            # Return the minimum number of jumps required\n            return prev_pos + 1 - curr_pos\n\n        # Move down\n        curr_pos += steps[curr_pos]\n\n        # Check if position exceeds the range of the 2d plane\n        if curr_pos >= len(steps):\n            return -1\n\n        # Check if can reach the target position using only one jump\n        if i == 0 and curr_pos + 1 >= len(steps):\n            return 1\n\n        # Check if can reach the target position using more than one jump\n        if i == 0 and curr_pos + 1 < len(steps):\n            prev_pos = curr_pos\n            while curr_pos + 1 < len(steps):\n                if steps[curr_pos + 1] > steps[prev_pos + 1]:\n                    prev_pos = curr_pos + 1\n                curr_pos += 1\n\n            # Return the minimum number of jumps required\n            return prev_pos + 1 - curr_pos\n\n        # Move up\n        curr_pos -= 1\n\n        # Check if position exceeds the range of the 2d plane\n        if curr_pos >= len(steps):\n            return -1\n\n        # Check if can reach the target position using only one jump\n        if i == 0 and curr_pos + 1 >= len(steps):\n            return 1\n\n        # Check if can reach the target position using more than one jump\n        if i == 0 and curr_pos + 1 < len(steps):\n            prev_pos = curr_pos\n            while curr_pos + 1 < len(steps):\n                if steps[curr_pos + 1] > steps[prev_pos + 1]:\n                    prev_pos = curr_pos + 1\n                curr_pos += 1\n\n            # Return the minimum number of jumps required\n            return prev_pos + 1 - curr_pos\n\n        # Move left\n        curr_pos -= 1\n\n        # Check if position exceeds the range of the 2d plane\n        if curr_pos >= len(steps):\n            return -1\n\n        # Check if can reach the target position using only one jump\n        if i == 0 and curr_pos + 1 >= len(steps):\n            return 1\n\n        # Check if can reach the target position using more than one jump\n        if i == 0 and curr_pos + 1 < len(steps):\n            prev_pos = curr_pos\n            while curr_pos + 1 < len(steps):\n                if steps[curr_pos + 1] > steps[prev_pos + 1]:\n                    prev_pos = curr_pos + 1\n                curr_pos += 1\n\n            # Return the minimum number of jumps required\n            return prev_pos + 1 - curr_pos\n\n        # Move right\n        curr_pos += 1\n\n    # Shouldn't reach this point if all steps are valid\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    curr_pos = (0, steps[0])\n    visited = {(0, steps[0])}\n    \n    for step in steps:\n        for i in range(1, step):\n            next_pos = (curr_pos[0] + 1, curr_pos[1])\n            if next_pos in visited:\n                continue\n            \n            if next_pos == (d, 0):\n                return jumps + 1\n            \n            visited.add(next_pos)\n            \n        jumps += 1\n            \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    n = len(steps)\n    steps.append(0)\n\n    jumps = 0\n    i = 0\n    while i < n:\n        if steps[i] < d:\n            steps[i] += 1\n            i += 1\n            jumps += 1\n        else:\n            steps[i] = 0\n            i += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    distance = 0\n    current_pos = (0, 0)\n    \n    while distance < d:\n        distance += steps\n        current_pos = (current_pos[0] + 1, current_pos[1]) if current_pos[0] < 2 else (0, current_pos[1] + 1)\n        jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # List to store the minimum number of jumps for each step\n    min_jumps = [0] * steps\n\n    # Base case - If the starting point is at (d, 0)\n    if d == 0:\n        min_jumps[0] = 0\n\n    # Recursive case - If the starting point is at (x, y)\n    else:\n        # Iterate over the remaining steps\n        for step in range(1, steps):\n            # Check if the starting point can be reached at (x+1, y)\n            if step+d <= steps:\n                min_jumps[step] = min(min_jumps[step-1], min_jumps[step+d-1]) + 1\n            # If not, check if the starting point can be reached at (x, y+1)\n            else:\n                min_jumps[step] = min(min_jumps[step-1], min_jumps[step])\n\n    return min_jumps[-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0]*(steps+1) for _ in range(steps+1)]\n    min_jumps = float('inf')\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            if i == 0 or i == steps:\n                if j == 1 or j == d:\n                    dp[i][j] = 1\n            else:\n                min_jumps = min(min_jumps, dp[i-1][k] + 1) + 1\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # initialize variables\n    curr_pos = 0\n    curr_jumps = 0\n    next_jump = steps[curr_pos]\n    min_jumps = 0\n    min_steps = 0\n\n    # iterate through each step\n    for step in range(1, len(steps)):\n        # if next step is greater than current position, update next jump\n        if steps[step] > curr_pos:\n            next_jump = steps[step]\n        # if next step is within current position, update next jump\n        elif steps[step] == curr_pos:\n            next_jump = min(next_jump, curr_jumps + 1)\n        # if next step is less than current position, update min_jumps and min_steps\n        else:\n            min_jumps = min(min_jumps, curr_jumps)\n            min_steps = min(min_steps, curr_pos + 1)\n\n        # if we reach the target, update min_jumps and min_steps\n        if steps[step] == d:\n            min_jumps = min(min_jumps, curr_jumps + 1)\n            min_steps = min(min_steps, curr_pos + 1)\n\n        # update curr_pos and curr_jumps\n        curr_pos = step\n        curr_jumps = next_jump\n\n    # update min_jumps and min_steps\n    min_jumps = min(min_jumps, curr_jumps)\n    min_steps = min(min_steps, curr_pos + 1)\n\n    return min_jumps, min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Function to calculate the minimum number of jumps required to reach the target point from the origin\n    def min_jumps_helper(current_pos, target_dist, remaining_steps):\n        if current_pos == 0:\n            return 0\n        \n        # Calculate the remaining distance to the target point\n        remaining_dist = target_dist - current_pos\n        \n        # If the remaining distance is greater than the remaining steps, there is no way to reach the target point from the origin\n        if remaining_dist > remaining_steps:\n            return float('inf')\n        \n        # If the remaining distance is less than or equal to the remaining steps, there is a single jump to reach the target point from the origin\n        if remaining_dist <= remaining_steps:\n            return 1\n        \n        # Recursive case where we can reach the target point from the origin using multiple jumps\n        else:\n            return min_jumps_helper(current_pos - 1, target_dist, remaining_steps) + 1\n    \n    # Call the helper function with the initial position (0, 0) and the target point's distance from the origin\n    return min_jumps_helper(0, d, steps)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length\")\n\n    # create an empty list to store the result\n    result = []\n\n    # iterate over the lists element wise\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # if the length of the lists is not equal, return an error message\n    if len(nums1)!= len(nums2):\n        return \"Error: Length of lists should be equal.\"\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the two lists\n    for i in range(len(nums1)):\n        # check if the divisor is zero, return an error message\n        if nums2[i] == 0:\n            return \"Error: Divisor cannot be zero.\"\n        # divide the corresponding elements of the lists and append the result to the result list\n        result.append(nums1[i] / nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Initialize an empty list to store the results\n    results = []\n    # Check if the length of the lists is equal\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            # Divide the two elements and add to the results list\n            results.append(nums1[i] / nums2[i])\n    else:\n        print(\"The two lists must have equal length.\")\n    return results"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #initialize an empty list to store the result\n    result = []\n    #loop through the two lists and add the result to the result list\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    #return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing variables\n    result_str = ''\n    num_list = []\n    digit_count = 0\n\n    # looping through each character in the string\n    for char in test_str:\n        # checking if the character is a digit\n        if char.isdigit():\n            # appending the digit to the digit list\n            num_list.append(int(char))\n            # incrementing the digit count\n            digit_count += 1\n        else:\n            # checking if there are any digits in the digit list\n            if digit_count > 0:\n                # converting the digit list to a string and appending it to the result string\n                result_str += ''.join(map(str, num_list))\n                # resetting the digit count and digit list\n                num_list = []\n                digit_count = 0\n            # appending the non-digit character to the result string\n            result_str += char\n\n    # checking if there are any digits in the digit list\n    if digit_count > 0:\n        # converting the digit list to a string and appending it to the result string\n        result_str += ''.join(map(str, num_list))\n\n    # returning the final result string\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if int(num_list[i]) > int(num_list[j]):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    for num in nums:\n        test_str = test_str.replace(num, '')\n    return test_str + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    non_num_list = []\n\n    # iterate through the string\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n\n    # concatenate the two lists and return the result\n    return ''.join(num_list + non_num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize variables for counting and moving numbers\n    count = 0\n    num_index = -1\n    move_index = 0\n\n    # loop through the string\n    for i, char in enumerate(test_str):\n        if char.isdigit():\n            # count the number of digits in the current number\n            count += 1\n            num_index = i\n\n        elif count > 0:\n            # move the digits to the end of the string\n            move_index = i + 1\n            break\n\n    # check if any digits were found\n    if num_index == -1:\n        return test_str\n\n    # move the digits to the end of the string\n    return test_str[:num_index] + test_str[num_index+1:move_index] + test_str[move_index:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_found = False\n    num_list = []\n    new_str = ''\n\n    # loop through the string\n    for char in test_str:\n        # if the character is a number\n        if char.isdigit():\n            # add it to the number list\n            num_list.append(char)\n            # flag that a number has been found\n            num_found = True\n        # if a number has been found\n        elif num_found:\n            # add the number to the new string\n            new_str += char\n        # if a number has not been found\n        else:\n            # add the character to the new string\n            new_str += char\n\n    # return the new string with all numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a list to store the numbers\n    numbers = []\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the numbers list\n        if char.isdigit():\n            numbers.append(char)\n    # Reverse the list of numbers\n    numbers.reverse()\n    # Join the list of numbers into a string\n    result = ''.join(numbers)\n    # Return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n    return num_str + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize an empty list to store the numbers\n    numbers = []\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the numbers list\n            numbers.append(char)\n    \n    # reverse the numbers list\n    numbers.reverse()\n    \n    # join the characters in the numbers list into a string\n    result_str = ''.join(numbers)\n    \n    # return the result string\n    return result_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            subset = sorted(list(set(a[i:j+1])))\n            if len(subset) % 2 == 0:\n                if len(subset) > max_size:\n                    max_size = len(subset)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a set of all numbers in the list\n    numbers = set(a)\n\n    # initialize the maximum size to 1\n    max_size = 1\n\n    # loop through all pairs of numbers in the set\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            # calculate the difference between the numbers\n            diff = numbers[j] - numbers[i]\n\n            # if the difference is divisible by 2, increase the maximum size\n            if diff % 2 == 0:\n                max_size = max(max_size, j-i+1)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    max_subset_size = 0\n    current_subset_size = 0\n    i = 0\n\n    while i < len(a):\n        if current_subset_size == 0:\n            current_subset_size = 1\n            max_subset_size = 1\n        else:\n            j = i + 1\n            while j < len(a) and a[j] % a[i] == 0:\n                j += 1\n            current_subset_size = j - i - 1\n            max_subset_size = max(max_subset_size, current_subset_size)\n        i = j\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize the maximum size of the subset to be 0\n    max_size = 0\n    # initialize two pointers: left and right\n    left = 0\n    right = 0\n    # loop through the list\n    while right < len(a):\n        # check if the current number is divisible by the next number\n        if a[right] % a[left] == 0:\n            # if the current number is divisible, increment the size of the subset\n            max_size += 1\n            # move the right pointer to the next number\n            right += 1\n        # if the current number is not divisible, move the left pointer to the next number\n        else:\n            # move the left pointer to the next number\n            left += 1\n            # reset the size of the subset to 0\n            max_size = 0\n    # return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize two pointers, one for the start and one for the end\n    start = 0\n    end = 1\n\n    # initialize the result variable\n    result = 1\n\n    # loop while the end pointer is less than the length of the list\n    while end < len(a):\n        # check if the difference between the current numbers is divisible by 2\n        if a[end] - a[start] % 2 == 0:\n            # if it is, increment the end pointer\n            end += 1\n            # if it's not, increment the start pointer and decrement the result\n            else:\n                start += 1\n                result -= 1\n\n    # return the result\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize two variables to store the size of the largest subset and the last pair of numbers in it\n    max_size = 0\n    last_pair = None\n\n    # Iterate over the sorted list and keep track of the last pair of numbers that were divisible\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n                last_pair = (a[i], a[j])\n\n    # If the last pair was divisible, include it in the size of the largest subset\n    if last_pair is not None:\n        max_size += 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a) # sort the list in ascending order\n    n = len(a) # number of elements in the list\n    dp = [1] * n # initialize the dynamic programming table with ones\n    \n    # fill the dynamic programming table\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # find the size of the largest subset\n    max_size = 0\n    for i in range(n):\n        max_size = max(max_size, dp[i])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables for keeping track of the largest subset size and the number of divisible pairs\n    largest_size = 0\n    divisible_pairs = 0\n\n    # Loop through the list and find the largest subset of numbers that is divisible by every other number\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and (j-i+1) > largest_size:\n                largest_size = j-i+1\n                divisible_pairs = 1\n            elif a[i] % a[j] == 0:\n                divisible_pairs += 1\n\n    # Return the largest subset size and number of divisible pairs\n    return largest_size, divisible_pairs"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()  # Sort the list in ascending order\n    result = 1  # Initialize the result to 1 (we need at least 1 element in the subset)\n    for i in range(1, len(a)):\n        if a[i] % a[result - 1] == 0:  # Check if the current element is divisible by the previous element\n            result += 1  # If it is, increase the result by 1\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    max_size = 0\n    temp_size = 1\n    \n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        # Check if the current element is divisible by the previous element\n        if a[i] % a[i-1] == 0:\n            # If yes, increment the temporary size and compare it with the maximum size\n            temp_size += 1\n            if temp_size > max_size:\n                max_size = temp_size\n        else:\n            # If no, reset the temporary size to 1 and compare it with the maximum size\n            temp_size = 1\n            if temp_size > max_size:\n                max_size = temp_size\n    \n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Concatenate the two arrays and sort it\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # If the length of the array is odd, the median index is the middle element\n    if n % 2 == 1:\n        median_index = median_index\n\n    # Return the median value\n    return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize variables to store the sorted arrays\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_arr1[n//2 - 1] + sorted_arr1[n//2] + sorted_arr2[n//2 - 1] + sorted_arr2[n//2]) / 4\n    else:\n        median = sorted_arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        # if n is odd, take the middle element\n        return sorted([arr1[n//2], arr2[n//2]])[1]\n    else:\n        # if n is even, take the average of the middle two elements\n        return (sorted([arr1[n//2], arr2[n//2]])[1] +\n                sorted([arr1[n//2-1], arr2[n//2-1]])[1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median\n    median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists to form a single sorted list\n    combined_list = arr1 + arr2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Find the middle element of the combined list\n    middle_index = n // 2\n    \n    # If the length of the combined list is odd, return the middle element\n    if n % 2 == 1:\n        return combined_list[middle_index]\n    \n    # If the length of the combined list is even, return the average of the middle two elements\n    else:\n        return (combined_list[middle_index - 1] + combined_list[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments:\n    arr1: a list of integers\n    arr2: a list of integers\n    n: the size of the two sorted lists\n    \n    This function returns the median of arr1 and arr2 as a float.\n    \"\"\"\n    if n % 2 == 0:\n        # if the size is even, take the average of the middle elements\n        middle1 = n//2\n        middle2 = middle1\n        median = (arr1[middle1-1] + arr1[middle1] + arr2[middle2-1] + arr2[middle2]) / 4\n    else:\n        # if the size is odd, take the middle element\n        middle1 = n//2\n        middle2 = middle1\n        median = arr1[middle1]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged list\n    merged_arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n    arr1 (list): A sorted list of integers.\n    arr2 (list): A sorted list of integers.\n    n (int): The size of both lists.\n\n    Returns:\n    int: The median of the two lists.\n    \"\"\"\n    # Merge the two lists\n    merged = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged)\n    # Calculate the median\n    if n % 2 == 0:\n        return sorted_list[n//2]\n    else:\n        return sorted_list[n//2 - 1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Sort the two lists\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    \n    # Get the median\n    if n % 2 == 0:\n        # If the length of the lists is even\n        return (sorted_arr1[n//2-1] + sorted_arr1[n//2]) / 2\n    else:\n        # If the length of the lists is odd\n        return sorted_arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Calculate the length of the merged list\n    length = len(merged_list)\n    \n    # Calculate the median index\n    median_index = n // 2\n    \n    # Calculate the lower half of the median index\n    lower_half = median_index\n    \n    # Calculate the upper half of the median index\n    upper_half = median_index\n    \n    # Check if the length is odd\n    if length % 2 == 1:\n        # Set the median value to the middle element\n        median = merged_list[median_index]\n    else:\n        # Set the median value to the average of the two middle elements\n        median = (merged_list[median_index] + merged_list[lower_half]) / 2\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i, num in enumerate(nums):\n        nums[i] = num ** n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the n-th power of the number\n        power = num ** n\n        # Print the result\n        print(f\"The {n}-th power of {num} is {power}\")"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize a list to store the results\n    results = []\n\n    # Loop over each number in the list\n    for num in nums:\n        # Compute the nth power of the number and append it to the results list\n        results.append(num ** n)\n\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** n)\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # Convert string to uppercase\n    string = string.upper()\n    # Return the uppercase string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the string in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n    \n    # Find the first and last element of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Create a new list with the first and last elements interchanged\n    newList = [last, first] + newList[1:-1]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List should have at least two elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    else:\n        print(\"The list must have at least two elements.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        # swapping the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the list has only one element\n    if len(newList) == 1:\n        return \"The list has only one element.\"\n    # checking if the list has more than two elements\n    elif len(newList) > 2:\n        # swapping the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        return \"The list has less than two elements.\"\n    # returning the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the diameter of the semicircle\n    d = 2*r\n    \n    # Find the semi-perimeter of the triangle\n    s = (r**2)*(3**0.5)\n    \n    # Calculate the area of the triangle\n    area = (s/2)*d\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of the largest triangle inscribed in a semicircle with radius r\n    area = (math.pi * r * r) / 3\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265359\n    area = 0.5 * pi * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    from sympy import pi, sqrt\n\n    # Calculate the area of a triangle with sides of length r\n    def triangle_area_helper(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the area of the largest triangle inscribed in the semicircle with radius r\n    def inscribed_triangle_area(r):\n        # Calculate the area of the semicircle\n        area_semicircle = pi * r ** 2\n\n        # Calculate the radius of the inscribed circle\n        r_inscribed = sqrt(2 * area_semicircle / pi)\n\n        # Calculate the area of the inscribed triangle\n        area_inscribed = triangle_area_helper(r, r, r_inscribed)\n\n        return area_inscribed\n\n    # Return the area of the largest triangle inscribed in the semicircle with the given radius\n    return inscribed_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0\n    for i in range(1, r+1):\n        area += (r**2 - i**2)**0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # formula to find the area of a triangle with sides a, b and c\n    def triangle_area(a, b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return area\n\n    # formula to find the area of the largest triangle that can be inscribed in a semicircle\n    def largest_triangle_area(r):\n        theta = 2 * r * r\n        area = triangle_area(r, r, theta)\n        return area\n\n    return largest_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter and perimeter of the semicircle\n    a = math.sqrt(2 * r ** 2 - r ** 2)\n    b = 2 * r - a\n    \n    # calculate the length of the longest side of the triangle\n    c = math.sqrt(a ** 2 + b ** 2 - r ** 2)\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (1/2) * b * c\n    \n    # output the area of the largest triangle\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with a radius of\", r, \"is\", round(area, 2), \"square units.\")"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    '''\n    # calculate the semi-circle's area\n    area = math.pi * r**2\n    \n    # find the length of the longest side of a triangle that can be inscribed in the semi-circle\n    longest_side = math.sqrt(area / math.sin(math.pi/3))\n    \n    # calculate the area of the triangle with the longest side\n    triangle_area = math.sqrt(longest_side**2 - r**2)\n    \n    # return the area of the triangle with the longest side\n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # first calculate the semi-circle area\n    semi_area = (r ** 2) * 3.14\n\n    # then find the length of the longest side of the triangle\n    long_side = 2 * r\n\n    # calculate the area of the triangle using Heron's formula\n    triangle_area = 0.5 * long_side * (semi_area ** 0.5)\n\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return triangle_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return len(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    missing_num = start\n    for i in range(start,end+1):\n        if array[i]!= i:\n            missing_num = i\n            break\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Parameters:\n    - array (list): A sorted list of natural numbers.\n    - start (int): The starting index of the search range. (default: 0)\n    - end (int): The ending index of the search range. (default: None, which means the last index of the list will be used)\n\n    Returns:\n    - int: The smallest missing number in the sorted list.\n    \"\"\"\n\n    # Find the last index of the list\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the smallest missing number to be the first element of the list\n    smallest_missing = array[0]\n\n    # Loop through the list to find the smallest missing number\n    for i in range(start, end + 1):\n        if array[i]!= smallest_missing:\n            smallest_missing = array[i]\n            break\n\n    # Increment the smallest missing number until it is found\n    while True:\n        smallest_missing += 1\n        if smallest_missing not in array:\n            break\n\n    return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers (assumed to be unique) and returns the first missing number.\n    If the list is empty, an error message is returned.\n    \"\"\"\n    if not array:\n        return \"Error: Empty list\"\n\n    # Find the end index if not provided\n    if end is None:\n        end = max(array)\n\n    # Iterate through the array and find the first missing number\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if array is sorted\n    if not all(array[i] <= array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"Array must be sorted\")\n    \n    # Find the first missing number\n    if end is None:\n        end = max(array)\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    \n    # If the end number is not reached, the missing number is greater than end\n    raise ValueError(\"All numbers in the array have been used\")"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers and returns the smallest missing number.\n    If the array is not sorted, it will sort the array before finding the missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid > 0 and array[mid] == array[mid - 1]:\n            start = mid + 1\n        else:\n            if mid == 0 or array[mid]!= array[mid - 1]:\n                return mid\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n\n    if start > end:\n        return None\n\n    if start == end:\n        if array[start] < start:\n            return start\n        else:\n            return None\n\n    if array[start] == array[start+1]:\n        return find_First_Missing(array,start+1,end)\n\n    for i in range(start+1,end):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers and returns a list containing only the even numbers in the input list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns a new list with only even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x < 0 or x >= 8 or y < 0 or y >= 8:\n        return sub\n    else:\n        return adjac((x+1,y), sub + [(x+1,y)]) + adjac((x-1,y), sub + [(x-1,y)]) + \\\n               adjac((x,y+1), sub + [(x,y+1)]) + adjac((x,y-1), sub + [(x,y-1)])"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # check if input is a tuple\n    if isinstance(ele, tuple) and len(ele) == 2:\n        # check if input is within the boundaries of the grid\n        if 0 <= ele[0] < rows and 0 <= ele[1] < cols:\n            # add the current element to the sublist\n            sub.append(ele)\n            # check if the current element has a valid neighbor in the right direction\n            if 0 <= ele[0]+1 < rows:\n                # add the neighbor to the sublist\n                sub.append((ele[0]+1, ele[1]))\n            # check if the current element has a valid neighbor in the left direction\n            if 0 <= ele[0]-1 < rows:\n                # add the neighbor to the sublist\n                sub.append((ele[0]-1, ele[1]))\n            # check if the current element has a valid neighbor in the up direction\n            if 0 <= ele[1]-1 < cols:\n                # add the neighbor to the sublist\n                sub.append((ele[0], ele[1]-1))\n            # check if the current element has a valid neighbor in the down direction\n            if 0 <= ele[1]+1 < cols:\n                # add the neighbor to the sublist\n                sub.append((ele[0], ele[1]+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0 and (x, y-1) not in sub:\n        sub.append((x-1, y-1))\n    if x > 0 and (x, y+1) not in sub:\n        sub.append((x-1, y+1))\n    if y > 0 and (x+1, y) not in sub:\n        sub.append((x+1, y-1))\n    if y > 0 and x < len(matrix[0])-1 and (x+1, y) not in sub:\n        sub.append((x+1, y+1))\n    if x < len(matrix)-1 and y > 0 and (x+1, y-1) not in sub:\n        sub.append((x+1, y-1))\n    if x < len(matrix)-1 and (x, y+1) not in sub:\n        sub.append((x+1, y+1))\n    if y < len(matrix[0])-1 and (x-1, y) not in sub:\n        sub.append((x-1, y+1))\n    if y < len(matrix[0])-1 and x > 0 and (x-1, y) not in sub:\n        sub.append((x-1, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+dx, y+dy) for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0))]\n    sub.append(ele)\n    for i in adj:\n        if i not in sub:\n            yield i"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # unpacking the coordinate tuple\n    x, y = ele\n    \n    # initializing a list to store the adjacent coordinates\n    adj = []\n    \n    # adding the adjacent coordinates to the list\n    adj.append((x-1, y)) # up left corner\n    adj.append((x, y-1)) # up\n    adj.append((x+1, y)) # up right corner\n    adj.append((x, y+1)) # right\n    adj.append((x-1, y+1)) # down right corner\n    adj.append((x+1, y+1)) # down\n    adj.append((x-1, y-1)) # down left corner\n    \n    # adding the sub-lists of adjacent coordinates to the main list\n    sub.extend(adj)\n    \n    # returning the main list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2: \n        return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    else:\n        return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0]-1, ele[1]-1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]+1), (ele[0]-1, ele[1]+1), (ele[0]+1, ele[1]-1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if x+1 < len(sub) and sub[x+1][y] == 0:\n        sub[x+1][y] = 1\n        sub[x+1][y+1] = 1\n        sub[x+1][y-1] = 1\n    if y+1 < len(sub[0]) and sub[x][y+1] == 0:\n        sub[x][y+1] = 1\n        sub[x+1][y+1] = 1\n        sub[x-1][y+1] = 1\n    if x-1 >= 0 and sub[x-1][y] == 0:\n        sub[x-1][y] = 1\n        sub[x-1][y+1] = 1\n        sub[x-1][y-1] = 1\n    if y-1 >= 0 and sub[x][y-1] == 0:\n        sub[x][y-1] = 1\n        sub[x+1][y-1] = 1\n        sub[x-1][y-1] = 1\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    # Using a list comprehension to extract adjacent coordinates\n    adj_coords = [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2) if (x+i, y+j)!= ele and (x+i, y+j) not in sub] \n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    # append the starting element to the sublist\n    sub.append(ele)\n\n    # iterate until all adjacent elements have been appended\n    while sub:\n        # pop the last element from the sublist\n        last = sub.pop()\n\n        # extract the x and y coordinates of the last element\n        x, y = last\n\n        # iterate over all possible adjacent coordinates and append them to the sublist\n        for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n            # calculate the new x and y coordinates of the adjacent element\n            nx = x + dx\n            ny = y + dy\n\n            # check if the new coordinate is within the grid limits and not already added to the sublist\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in sub:\n                # add the new coordinate to the sublist\n                sub.append((nx, ny))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    if isinstance(ele, tuple) and len(ele) == 2:\n        x, y = ele\n        adj = [(x+dx, y+dy) for dx, dy in sub]\n        return adj + [ele]\n    elif isinstance(ele, list):\n        return [adj for sublist in [adjac(sub_ele) for sub_ele in ele] for adj in sublist]\n    else:\n        return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces_dict = {' ': '_'}\n    underscore_dict = {'_':''}\n    new_text = \"\"\n    for char in text:\n        if char in spaces_dict:\n            new_text += spaces_dict[char]\n        elif char in underscore_dict:\n            new_text += underscore_dict[char]\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all whitespaces to underscores\n    text = text.replace(' ', '_')\n    # Convert all underscores to spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        num_list (list): A list of numbers.\n\n    Returns:\n        list: A list with all zeroes moved to the end.\n    \"\"\"\n\n    # Create a copy of the input list, so that we don't modify it.\n    new_list = num_list.copy()\n\n    # Use two pointers to move all zeroes to the end.\n    i = 0\n    j = 0\n    while j < len(new_list):\n        if new_list[j]!= 0:\n            # Move non-zero elements to the new position.\n            new_list[i], new_list[j] = new_list[j], new_list[i]\n            i += 1\n        j += 1\n\n    # Return the new list with all zeroes moved to the end.\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index!= -1:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n        move_zero(num_list[0:zero_index])\n        move_zero(num_list[zero_index+1:])\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    \n    # initialize two pointers, one for the start and one for the end of the list\n    start = 0\n    end = len(num_list)-1\n    \n    # iterate through the list from the start to the end\n    while start < end:\n        \n        # if the current element is not zero, move the start pointer forward\n        if num_list[start]!= 0:\n            \n            # move the start pointer forward\n            start += 1\n            \n        # if the current element is zero, move the zero to the end and move the end pointer backward\n        else:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            end -= 1\n    \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # create a new list to store non-zero elements\n    non_zero_list = []\n\n    # loop through the input list\n    for num in num_list:\n\n        # if the number is not zero, add it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # loop through the non-zero list and copy all non-zero elements to the end of the input list\n    for num in non_zero_list:\n        num_list.append(num)\n\n    # remove all zeroes from the input list\n    num_list = [num for num in num_list if num!= 0]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # loop through the list backwards\n    for i in range(len(num_list)-1, -1, -1):\n        # if the current number is zero\n        if num_list[i] == 0:\n            # move the current number to the end of the list\n            for j in range(i, len(num_list)-1):\n                num_list[j] = num_list[j+1]\n            # set the last element of the list to zero\n            num_list[-1] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index is not None:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n        move_zero(num_list[1:-1])"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_count] = num_list[zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            break\n    for j in range(len(num_list)-1, zero_count-1, -1):\n        num_list[j], num_list[j-1] = num_list[j-1], num_list[j]\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes in a list of integers and its length.\n    It then returns the sum of the xor of all pairs of integers in the list.\n    '''\n\n    # Initializing the sum to zero\n    sum = 0\n\n    # Looping through all pairs of integers\n    for i in range(n):\n        for j in range(i+1,n):\n            # XORing the two numbers and adding to the sum\n            sum += arr[i] ^ arr[j]\n\n    # Returning the final sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    # initialize a sum variable to 0\n    sum_xor = 0\n    \n    # iterate over the first n elements of the list\n    for i in range(n):\n        # xor the current element with all the other elements in the list\n        xor_sum = 0\n        for j in range(n):\n            if j!= i:\n                xor_sum ^= arr[j]\n        # add the xor sum to the sum variable\n        sum_xor += xor_sum\n        \n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initializing the sum variable to zero\n    xor_sum = 0\n\n    # Iterating through the list\n    for i in range(n):\n        # Iterating through the list again\n        for j in range(i+1, n):\n            # Adding the xor value of the current pair to the sum\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Calculate the XOR of the first number with all the other numbers in the list\n    xor_sum = arr[0]\n    for i in range(1,n):\n        xor_sum ^= arr[i]\n\n    # Calculate the sum of XORs of all pairs of numbers in the list\n    xor_sum_pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum_pairs += arr[i] ^ arr[j]\n\n    # Return the sum of XORs of all pairs of numbers in the list\n    return xor_sum_pairs"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and its length n and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR operation to find the sum of xor of all pairs of numbers in the list\n    sum_of_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = arr[i] ^ arr[j]\n            sum_of_xor += xor_sum\n    \n    return sum_of_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < n:\n        print(\"List should have at least\", n, \"elements.\")\n        return -1\n\n    sum_xor = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR function to find the xor of two numbers\n    def xor(a, b):\n        return a ^ b\n\n    # initialize sum to zero\n    sum = 0\n\n    # iterate through all pairs of numbers\n    for i in range(n):\n        for j in range(i + 1, n):\n            # calculate xor of pair and add to sum\n            sum += xor(arr[i], arr[j])\n\n    # return the sum\n    return sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list into a list of tuples.\n    # Each tuple contains an element from the list and its index.\n    data = [(x, i) for i, x in enumerate(iterable)]\n\n    # Build the max heap from the data.\n    hq.heapify(data)\n\n    # Pop the elements from the heap and store them in a new list.\n    sorted_list = []\n    while data:\n        sorted_list.append(data[0][0])\n        hq.heappop(data)\n\n    # Convert the new list of tuples back into a list.\n    sorted_list = [x[0] for x in sorted_list]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = [0] * (len(iterable) // 2)  # initialize the heap with the first half of the list\n    for i, val in enumerate(iterable[len(iterable) // 2:], len(iterable) // 2):\n        heapq.heappush(heap, val)  # push the remaining elements onto the heap\n\n    for _ in range(len(iterable)):\n        heapq.heappop(heap)  # pop the smallest element from the heap and append it to the sorted list\n        yield heap[0]  # return the sorted list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list if necessary\n    if not isinstance(iterable, list):\n        iterable = list(iterable)\n    # Build the max-heap\n    for i in range(len(iterable) // 2 - 1, -1, -1):\n        heapify(iterable, i, len(iterable))\n    # Extract items from the heap and build a new list\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result\n\ndef heapify(iterable, index, length):\n    '''\n    Recursively build a max-heap.\n    '''\n    largest = index\n    left = 2 * index + 1\n    right = 2 * index + 2\n    if left < length and iterable[left] > iterable[largest]:\n        largest = left\n    if right < length and iterable[right] > iterable[largest]:\n        largest = right\n    if largest!= index:\n        iterable[index], iterable[largest] = iterable[largest], iterable[index]\n        heapify(iterable, largest, length)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Create a max heap from the given list\n    heap = hq.heapify(iterable)\n\n    # Initialize an empty list to store the sorted elements\n    sorted_list = []\n\n    # While the heap is not empty\n    while heap:\n        # Pop the maximum element from the heap\n        max_val = hq.heappop(heap)\n\n        # Append the maximum element to the sorted list\n        sorted_list.append(max_val)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a max-heap.\n    '''\n    # Convert the list to a max-heap\n    max_heap = [0] * len(iterable)\n    for i in range(len(iterable)):\n        max_heap[i] = iterable[i]\n        hq.heapify(max_heap, i)\n    \n    # Sort the list using a max-heap\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2-1, -1, -1):\n        hq.heappop(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappush(iterable, hq.heappop(iterable))\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n    # Build the heap\n    while len(heap) > 1:\n        hq.heappop(heap)\n        hq.heappush(heap, hq.heappop(heap))\n    # Return the sorted list\n    return list(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list so we can use heapq\n    lst = list(iterable)\n    # Use heapify to build a min-heap from the list\n    hq.heapify(lst)\n    # Use heappop to extract the elements from the min-heap in sorted order\n    sorted_lst = [hq.heappop(lst) for i in range(len(lst))]\n    # Return the sorted list\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n\n    for i in range(n - 1, 0, -1):\n        hq.heappop(iterable)\n\n    return iterable\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost, sale_amount-sale_amount//2)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is greater than zero\n    if profit > 0:\n        print(\"The amount has no profit and no loss.\")\n    else:\n        # Check if loss is greater than zero\n        if loss > 0:\n            print(\"The amount has no profit but has loss.\")\n        else:\n            print(\"The amount has no loss but has no profit.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (float): The actual cost of the sale\n        sale_amount (float): The amount that was sold\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise\n    \"\"\"\n\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return \"Profitable\"\n    else:\n        return \"Not Profitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit and loss are zero or both positive\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit > 0 and loss > 0:\n        print(\"The given amount has no profit but has positive loss\")\n    else:\n        print(\"The given amount has no loss but has positive profit\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n\n    :param actual_cost: The actual cost of the sale.\n    :param sale_amount: The amount to be sold.\n    :return: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        # If it is, check if the profit is greater than the sale amount minus the actual cost\n        if sale_amount - actual_cost > actual_cost:\n            return False\n        else:\n            return True\n    else:\n        # If it is not, the sale amount is less than or equal to the actual cost, so there is a loss\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    # Check if there is a profit and a loss or not\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0:\n        return 'Invalid input, wind velocity and temperature must be positive numbers.'\n    elif t <= 5:\n        return 'Invalid input, temperature should be at least 5 degrees celsius.'\n    else:\n        wind_speed_in_miles = v * 1.60934  # convert km/h to miles/hour\n        return round(math.degrees(math.atan(0.115 * (t - 5) / (273.15 + t - 5))) + 32)  # calculate wind chill in degrees Celsius rounded to the nearest integer"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wct = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n    # Calculate the wind chill dew point\n    dwp = 243.12 - 0.3965 * t + 0.1852 * math.exp((17.625 * t) / (t + 243.5))\n    # Calculate the wind speed converted to miles per hour\n    mph = v * 1.60934\n    # Calculate the wind chill temperature in Celsius\n    wct_c = (wct - 32) * 5/9\n    # Calculate the dew point temperature in Celsius\n    dwp_c = (dwp - 32) * 5/9\n    # Calculate the dew point depression in Celsius\n    dde = 243.12 - 0.3965 * t\n    # Calculate the wind speed index\n    ws = (mph / 1.60934) / 1.514\n    # Calculate the wind chill dew point index\n    wcdp = (wct_c - dwp_c) / dde\n    # Calculate the wind chill dew point index rounded to the nearest integer\n    wcdp_int = round(wcdp)\n    # Return the wind chill dew point index rounded to the nearest integer\n    return wcdp_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t + 273.15\n    if v <= 0:\n        raise ValueError(\"Wind velocity must be a positive number.\")\n    elif v > 15:\n        raise ValueError(\"Wind velocity cannot exceed 15 km/h.\")\n    elif t < 0:\n        raise ValueError(\"Temperature cannot be negative.\")\n    \n    # Convert wind speed to m/s\n    v = v * 1.60934\n    \n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215*t - 35.75*math.log(t)+0.4275*v\n    \n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in two arguments: the wind velocity in km/h and the temperature in celsius. \n    It calculates the wind chill index (WC), which is the temperature difference divided by the wind speed. \n    WC is then converted to Fahrenheit and rounded to the nearest integer using the math.ceil() function.\n\n    Note: If the temperature difference is less than -40 degrees Fahrenheit, the function returns 32.\n    '''\n    \n    # calculate the wind chill index\n    WC = (t - 32) * 5/9 + v/1.1\n    \n    # convert to Fahrenheit and round to the nearest integer\n    chill = math.ceil((WC * 1.8) + 32)\n    \n    # if the temperature difference is less than -40 degrees Fahrenheit, return 32\n    if chill < 32:\n        chill = 32\n    \n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert temperature to Kelvin\n    K = t + 273.15\n\n    # convert wind velocity to m/s\n    v = v * 1.609344\n\n    # calculate the dew point temperature\n    dew_point = 243.04 * (1 - 0.0065 * (t - 273.15)) + 273.15\n\n    # calculate the absolute humidity ratio\n    humidity_ratio = 100 * (t / dew_point)\n\n    # calculate the wind chill index\n    wci = 0.44 * (v / (K - 273.15)) ** 0.16 + (13.12 + 0.6215 * t) * (1 - humidity_ratio) ** 0.094\n\n    # round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer for a given wind velocity and temperature in Celsius.\n    '''\n\n    # convert to Fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # calculate the dew point using the Tonkin-Bolton equation\n    dew_pt = 243.04 + (0.0065 * t) + (0.017 * t_f) - (0.0016 * t * t) - (0.0006 * t_f * t_f)\n\n    # calculate the wind chill index using the formula:\n    # wci = 35.74 + 0.6215 * v + 35.75 * dew_pt - 44.76 * v * dew_pt + 0.4275 * t\n\n    # calculate the wind speed in m/s\n    v_mps = v * 1609.34\n\n    # calculate the wind chill index in Fahrenheit\n    wci = (35.74 + 0.6215 * v_mps + 35.75 * dew_pt - 44.76 * v_mps * dew_pt + 0.4275 * t) * 1.8 + 32\n\n    # round the wind chill index to the nearest integer\n    wci_int = round(wci)\n\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t <= 0 or v <= 0:\n        return \"Invalid input\"\n    else:\n        return int(math.ceil(35.74 + 0.6215 * v - 35.75 * math.log10(t) + 0.4275 * (v**2)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Calculate the wind chill temperature in Fahrenheit\n    wind_chill_fahrenheit = (v * 1.609344) + (0.180222 * t) - 459.67\n\n    # Calculate the wind chill index using the formula:\n    # Wind Chill Index = (Fahrenheit temperature - 32) * 5/9\n    wind_chill_index = int((wind_chill_fahrenheit - 32) * 5/9 + 0.5)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # calculate the temperature in Kelvin\n    k = t + 273.15\n    \n    # calculate the dew point temperature\n    dp = 0.62197 * k - 459.67\n    \n    # calculate the heat index\n    hi = 0.5 * dp - 0.25 * v\n    \n    # calculate the wind chill index\n    wc = 13.12 + 0.6215 * v - 11.37 * math.exp(-0.16 * v) + 0.3965 * math.exp(-0.07 * v)\n    \n    # calculate the wind chill index rounded to the nearest integer\n    wc_int = int(math.ceil(wc))\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v == 0:\n        return \"N/A\"\n\n    if t >= 0 and t <= 0:\n        return \"N/A\"\n\n    if v < 0:\n        return \"N/A\"\n\n    if v == 0:\n        return \"N/A\"\n\n    if t == 0:\n        return \"N/A\"\n\n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * (t - 0.14)\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable to 0\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the first letter of the name is uppercase\n        if name[0].isupper():\n            # If the name starts with lowercase letter, remove it from the list\n            sample_names.remove(name)\n        else:\n            # If the name does not start with lowercase letter, add its length to the total_length variable\n            total_length += len(name)\n    \n    # Return the total_length variable\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_len += len(name)\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names that start with a lowercase letter\n    start_with_lowercase = []\n    \n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add it to the list of names that start with a lowercase letter\n            start_with_lowercase.append(name)\n    \n    # Initialize a counter to keep track of the total length of the names without lowercase letters\n    total_length = 0\n    \n    # Iterate over the names that start with a lowercase letter\n    for name in start_with_lowercase:\n        # Add the length of the name to the total length\n        total_length += len(name)\n    \n    # Return the total length of the names without lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a counter variable to keep track of the length of the names\n    counter = 0\n    \n    # iterate through the names in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and move on to the next name\n            continue\n        # if the name does not start with a lowercase letter, add its length to the counter\n        else:\n            counter += len(name)\n    \n    # return the sum of the lengths of the remaining names\n    return counter"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = []\n    for name in sample_names:\n        if name.startswith(name[0].upper()):\n            continue\n        lowercase_names.append(name)\n    total_length = 0\n    for name in lowercase_names:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum([len(name) for name in lowercase_names])\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regex to match the pattern of parenthesis, then use findall to find all matches\n    pattern = r'\\((.*?)\\)'\n    matches = re.findall(pattern, items)\n    \n    # Loop through each match and remove the parenthesis and what is between them\n    for match in matches:\n        # Remove the parentheses and what is between them\n        items = items.replace(match, match.strip('()'))\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r\"\\(.*?\\)\")\n    return pattern.sub(\"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*)\\)')\n    matches = pattern.findall(items)\n    for match in matches:\n        items = items.replace(match, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Regular expression to match the parenthesis\n    pattern = re.compile(r'\\(.*?\\)')\n    # Remove the parenthesis\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)') # pattern to match parentheses\n    items = pattern.sub('', items) # replace all matched parentheses with empty string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function calculates the nth nonagonal number.\n    \"\"\"\n    num = 1\n    for i in range(2, n+1):\n        num += 2*i\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return is_nonagonal(n - 2) + n\n    else:\n        return is_nonagonal(n - 2) + 1\n\nprint(is_nonagonal(10))  # Output: 245"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) * 2 // 3"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i*(i+1)\n    return num\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    def is_square(x):\n        return x*x == x\n\n    nonagonal = 1\n    for i in range(2, n+1):\n        if is_square(i):\n            nonagonal += i\n\n    return nonagonal\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 0\n    while count < n:\n        a += 1\n        b += 1\n        count += 1\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    if n < 2:\n        return False\n    for i in range(2, n+1):\n        if i*i == n:\n            return True\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 30\n    elif n == 6:\n        return 58\n    elif n == 7:\n        return 102\n    elif n == 8:\n        return 170\n    elif n == 9:\n        return 270\n    elif n == 10:\n        return 420\n    elif n == 11:\n        return 640\n    elif n == 12:\n        return 950\n    elif n == 13:\n        return 1360\n    elif n == 14:\n        return 1880\n    elif n == 15:\n        return 2520\n    elif n == 16:\n        return 3300\n    elif n == 17:\n        return 4240\n    elif n == 18:\n        return 5360\n    elif n == 19:\n        return 6680\n    elif n == 20:\n        return 8220\n    else:\n        return \"Invalid input. Please enter a number between 1 and 20.\""
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_odd(num):\n        return num % 2 == 1\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nonagonal_number(n):\n        def num_of_steps(num):\n            return sum(1 for _ in range(1, num))\n\n        num = 0\n        while num_of_steps(num)!= n:\n            num += 1\n\n        return num\n\n    for i in range(1, n + 1):\n        if is_nonagonal(i) and is_prime(nonagonal_number(i)):\n            print(nonagonal_number(i))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1: \n        return None\n    \n    # Initialize the first nonagonal number\n    nonagonal = 1\n    \n    # Loop until we reach the nth nonagonal number\n    for i in range(1, n): \n        nonagonal += i\n        \n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regular expression pattern\n    pattern = r'(?<![\\w\\s])z(?!\\w)'\n    \n    # Find all matches using re.findall()\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-z])[Zz]|(?!.*[A-Z])[Zz]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define the pattern to match\n    pattern = r'\\b(z)\\b'\n\n    # Use regex to search for the pattern\n    matches = re.findall(pattern, text)\n\n    # Check if there are matches\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define regex pattern for word containing 'z' except at start and end\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # check if there are any matches and return the result\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k>=n:\n        return input\n    input = input[:k] + input[k:][::-1] + input[:k]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if input is empty or not\n    if len(input) == 0:\n        return []\n    \n    # check if k is in range of 1 to len(input)\n    if k < 1 or k > len(input):\n        return []\n    \n    # create a new list to store reversed array\n    reversed_array = []\n    \n    # iterate from 0 to k-1 (inclusive)\n    for i in range(k-1, -1, -1):\n        # append the current element of input to reversed_array\n        reversed_array.append(input[i])\n    \n    # concatenate reversed_array and input[k:] to get the final reversed array\n    final_reversed_array = reversed_array + input[k:]\n    \n    return final_reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, n//2):\n        # swap elements\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n\n    # reverse the remaining part of the array\n    for i in range(k-1, n-1):\n        # swap elements\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if k is less than or equal to length of array\n    if k > len(input):\n        return input\n    \n    # create a new array to store the reversed part of the array\n    reversed_array = input[0:k]\n    \n    # reverse the first k elements of the array\n    for i in range(k-1, -1, -1):\n        reversed_array.append(input[i])\n    \n    # combine the reversed part of the array with the rest of the array\n    reversed_array.extend(input[k:])\n    \n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the input array\n    length = len(input)\n    # Find the position of the element to reverse upto\n    pos = k\n    # Initialize variables for the start and end indices of the reversed part of the array\n    start = 0\n    end = k-1\n    # Reverse the part of the array upto the given position\n    while start < end:\n        # Swap the elements at start and end indices\n        input[start], input[end] = input[end], input[start]\n        # Increment the start and end indices\n        start += 1\n        end -= 1\n    # Reverse the remaining part of the array\n    start = k\n    end = length - 1\n    while start < end:\n        # Swap the elements at start and end indices\n        input[start], input[end] = input[end], input[start]\n        # Increment the start and end indices\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new empty array to store reversed subarray\n    reversed_subarray = []\n    # Loop through the input array\n    for i in range(len(input)):\n        # If the index is less than k, append the element to the new array\n        if i < k:\n            reversed_subarray.append(input[i])\n        # If the index is equal to or greater than k, append the element to the reversed subarray\n        else:\n            reversed_subarray.append(input[i])\n    # Return the reversed subarray\n    return reversed_subarray"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k>n or k<1:\n        print(\"Invalid position\")\n    else:\n        for i in range(n//2):\n            temp = input[i]\n            input[i] = input[n-i-1]\n            input[n-i-1] = temp\n        for j in range(k-1):\n            temp = input[j]\n            input[j] = input[n-j-1]\n            input[n-j-1] = temp\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Using two pointers, first pointer will start from the beginning of the array\n    # and the second pointer will start from the given position k\n    # the first while loop will reverse the array upto the k-th element\n    # the second while loop will reverse the array from the k-th element to the end\n    # then we will return the reversed array from the given position k to the end\n    while k > 0 and k < n:\n        input[k-1], input[k] = input[k], input[k-1]\n        k += 1\n    while k < n:\n        input[k-1], input[k] = input[k], input[k-1]\n        k += 1\n    return input[:k]"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], **test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of key-value pairs\n    key_value_list = [(key, value) for key, value in test_dict.items()]\n    \n    # Iterate over the key-value pairs and add them to the tuple\n    for key, value in key_value_list:\n        test_tup += (value,)\n    \n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple\n    new_tuple = (test_tup, test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n\n    # Merge the two dictionaries\n    merged_dict = {**test_dict, **test_tup}\n\n    # Convert the dictionary to a tuple\n    new_tuple = tuple(merged_dict.items())\n\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    test_dict_tuple = tuple(test_dict.items())\n    # Add the dictionary to the tuple\n    test_tup_dict = (test_tup, test_dict_tuple)\n    return test_tup_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict} # Use the spread operator to create a new dictionary with all the key-value pairs from the original dictionary\n    new_tup = tuple(test_tup + new_dict.items()) # Combine the original tuple with the new dictionary as a tuple of key-value pairs\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = {**test_dict}\n    return test_tup + (new_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = (test_tup, test_dict)\n    return new_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    total_cost = 0\n    total_cells = 0\n\n    for i in range(N):\n        if i == 0 or i == N-1:\n            for j in range(1, N-1):\n                total_cost += cost[i][j]\n                total_cells += 1\n        else:\n            for j in range(1, N-1):\n                total_cost += cost[i][j]\n                total_cells += 1\n                for k in range(i+1, N-1):\n                    total_cost += cost[k][j]\n                    total_cells += 1\n\n    return total_cost / total_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    max_avg = 0 # maximum average\n    curr_avg = 0 # current average\n    curr_cost = 0 # current cost\n    curr_cells = 0 # current number of cells visited\n    \n    # loop through each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # compute the cost of the next cell\n            if i+1 < len(cost) and j+1 < len(cost[0]):\n                cost_next = cost[i+1][j] + cost[i][j+1]\n            else:\n                cost_next = cost[i][j]\n            \n            # update the current cost\n            curr_cost += cost[i][j]\n            \n            # check if we've reached the bottom right cell\n            if i == len(cost)-1 and j == len(cost[0])-1:\n                curr_avg = curr_cost / curr_cells\n                max_avg = max(max_avg, curr_avg)\n                continue\n            \n            # check if moving right is possible and update the variables\n            if i+1 < len(cost):\n                curr_cost -= cost[i][j]\n                curr_cells += 1\n                cost_next -= cost[i][j]\n                curr_avg += curr_cost / curr_cells\n                curr_cost = cost_next\n                curr_cells = 1\n            \n            # check if moving down is possible and update the variables\n            if j+1 < len(cost[0]):\n                curr_cost -= cost[i][j]\n                curr_cells += 1\n                cost_next -= cost[i][j]\n                curr_avg += curr_cost / curr_cells\n                curr_cost = cost_next\n                curr_cells = 1\n            \n            # check if moving right and down are possible and update the variables\n            if i+1 < len(cost) and j+1 < len(cost[0]):\n                curr_cost -= cost[i][j]\n                curr_cells += 1\n                cost_next -= cost[i][j]\n                curr_avg += curr_cost / curr_cells\n                curr_cost = cost_next\n                curr_cells = 1\n            \n            # update the maximum average\n            max_avg = max(max_avg, curr_avg)\n    \n    # return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    max_avg = float('-inf')\n    path = []\n\n    def dfs(i, j, total_cost, path_len):\n        nonlocal max_avg, visited, path\n        if i == N-1 and j == N-1:\n            avg = total_cost / path_len\n            if avg > max_avg:\n                max_avg = avg\n                path = list(reversed(path))\n        else:\n            if not visited[i][j]:\n                visited[i][j] = True\n                dfs(i, j+1, total_cost+cost[i][j], path_len+1)\n                dfs(i+1, j, total_cost+cost[i][j], path_len+1)\n                visited[i][j] = False\n\n    for i in range(N):\n        dfs(0, i, 0, 1)\n\n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxPath(cost, m, n, x, y):\n        if x == m - 1 and y == n - 1:\n            return cost[x][y]\n        else:\n            right = maxPath(cost, m, n, x + 1, y)\n            down = maxPath(cost, m, n, x, y + 1)\n            return max(right, down) + cost[x][y]\n\n    m, n = len(cost), len(cost[0])\n    start_x, start_y = 0, 0\n    end_x, end_y = m - 1, n - 1\n    return maxPath(cost, m, n, start_x, start_y) / (end_x - start_x + 1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize the variables for maximum average and current average\n    max_avg = 0\n    curr_avg = 0\n    \n    # Initialize the variables for number of cells visited and maximum number of cells\n    visited = 0\n    max_visited = 0\n    \n    # Traverse the matrix and calculate the average for each path\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Add the current cell cost to current average\n            curr_avg += cost[i][j]\n            \n            # Check if the current cell is the last cell in the path\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                # Update the maximum average and maximum number of cells visited\n                max_avg = max(max_avg, curr_avg)\n                visited = 1\n                break\n            \n            # Check if the current cell is the last cell in the row or column\n            if i == len(cost) - 1 or j == len(cost[0]) - 1:\n                # Update the visited number of cells and update the maximum number of cells\n                visited += 1\n                max_visited = max(max_visited, visited)\n                break\n            \n            # Check if the current cell is a corner cell\n            if i == 0 or j == 0 or i == len(cost) - 1 or j == len(cost[0]) - 1:\n                # Update the maximum number of cells visited\n                max_visited = max(max_visited, visited)\n                visited = 1\n                break\n    \n    # Return the maximum average of all paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    # Initialize the variables for the maximum average and current path\n    max_avg = 0\n    path_cost = 0\n    path = []\n\n    # Iterate through each cell of the matrix\n    for i in range(N):\n        for j in range(N):\n\n            # Check if the cell has already been visited\n            if (i, j) in path:\n                continue\n\n            # If the cell is not visited, add it to the path and compute the average cost\n            path.append((i, j))\n            path_cost += cost[i][j]\n            avg = path_cost / (i * j + 1)\n\n            # Update the maximum average if the current average is greater\n            if avg > max_avg:\n                max_avg = avg\n\n            # Remove the last cell from the path and reset the cost to 0\n            path.pop()\n            path_cost = 0\n\n    # Return the maximum average of all paths\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # Initialize the base case for the first cell\n    dp[0][0] = cost[0][0]\n\n    # Compute the rest of the cells\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                continue\n            max_avg = max(max_avg, dp[i][j]/(i+j+1))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n\n    # iterate through all possible paths\n    for i in range(n):\n        for j in range(n):\n            # ignore diagonal cells\n            if i == j:\n                continue\n\n            # recursively compute the maximum average of the remaining cells in the path\n            sub_cost = cost[i+1:j] + cost[i:j+1][::-1]\n            sub_avg = sum(sub_cost) / len(sub_cost)\n            sub_max_avg = maxAverageOfPath(sub_cost)\n\n            # update the maximum average and path if the current path is better than the previous best\n            if sub_max_avg > max_avg:\n                max_avg = sub_max_avg\n                max_path = (i, j)\n\n    # return the maximum average and path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    max_path_avg = 0\n    max_path = []\n    total_cost = 0\n    num_cells = len(cost) * len(cost[0])\n    \n    # iterate over each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            # get the cost of the cell\n            current_cost = cost[i][j]\n            \n            # if the cell is already visited, skip it\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                continue\n            \n            # if the current cell is the first cell in the path\n            if i == 0 and j == 0:\n                path = [current_cost]\n            else:\n                # if the current cell is in the right direction, move to the next column\n                if current_cost < cost[i][j + 1]:\n                    path.append(current_cost)\n                # if the current cell is in the downward direction, move to the next row\n                else:\n                    path.append(current_cost)\n            \n            # compute the average of the current path\n            path_avg = sum(path) / len(path)\n            \n            # update the maximum path and its average\n            if path_avg > max_path_avg:\n                max_path_avg = path_avg\n                max_path = path\n            \n            # add the current cost to the total cost\n            total_cost += current_cost\n            \n            # remove the last cost from the path\n            path.pop()\n    \n    # return the maximum path and its average\n    return max_path, max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    max_avg = dp[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        if dp[0][i] > max_avg:\n            max_avg = dp[0][i]\n\n    for j in range(1, N):\n        dp[j][0] = dp[j-1][0] + cost[j][0]\n        if dp[j][0] > max_avg:\n            max_avg = dp[j][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    return max_avg/(N*N)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n\n    # Loop through the dictionary to filter students based on the given conditions\n    for student_name, student_data in students.items():\n        student_height, student_weight = student_data\n        # Check if the student's height is above the minimum and weight is above the minimum\n        if student_height > h and student_weight > w:\n            # If the student meets the conditions, add them to the filtered_students list\n            filtered_students.append(student_name)\n\n    # Return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,info in students.items():\n        height,weight = info\n        if height>h and weight>w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student_name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student_name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Create a new empty dictionary to store the filtered students\n    filtered_students = {}\n\n    # Loop through the students dictionary\n    for name, info in students.items():\n        # Get the student's height and weight\n        height, weight = info\n\n        # Check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # If the student satisfies the conditions, add them to the filtered_students dictionary\n            filtered_students[name] = info\n\n    # Return the filtered_students dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create a new dictionary to store the filtered data\n    filtered_students = {}\n    # iterate over the input students dictionary\n    for student, data in students.items():\n        # get the height and weight of the student\n        height, weight = data\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the new dictionary\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Loop through each index in the lists\n    for i in range(len(nums1)):\n        # Check if the current values in the two lists are equal using the eq() function\n        if eq(nums1[i], nums2[i]):\n            # If the values are equal, count the index\n            count = count + 1\n    # Return the count of the indices with the same values\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total_sum = 0\n    while power > 0:\n        if power % 10 == 0:\n            # if power is divisible by 10, add the last digit of the base\n            total_sum += base % 10\n        # divide the base by 10 and remove the last digit\n        base = base // 10\n        power //= 10\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n\n    for i in range(1, power+1):\n        result += int(base) % 10\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to make it easier to work with\n    base_str = str(base)\n    \n    # Initialize a variable to store the sum of digits raised to the power\n    digit_sum = 0\n    \n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and calculate the digit raised to the power\n        digit_int = int(digit)\n        digit_pow = digit_int ** power\n        \n        # Add the digit raised to the power to the total sum\n        digit_sum += digit_pow\n    \n    # Return the total sum of digits raised to the power\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        raise ValueError('Power cannot be negative.')\n    base_sum = 0\n    while power > 0:\n        base_sum += base % 10\n        base //= 10\n        power -= 1\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    # convert base to string\n    base_str = str(base)\n\n    # calculate sum of digits\n    total = sum(int(digit) for digit in base_str)\n\n    # calculate sum of digits to the power of power\n    power_sum = total ** power\n\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for i in range(power):\n        sum_of_digits += int(base) % 10\n        base = base // 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit ** power\n        power //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each digit of the base and add it to the sum variable\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n    \n    # calculate the result by raising the sum to the power\n    result = sum ** power\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base = base // 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_str = str(base)\n    for digit in base_str:\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    return pattern.findall(text)\n\ntext = \"\"\"This is a quote: \"This is the quote text. It contains several words, and it's very important to have quotes.\" This is another quote: \"Another quote is here, but it's longer and contains other words and symbols.\"\"\"\"\nprint(extract_quotation(text))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # extract values between quotation marks using regex pattern\n    pattern = r'(?<=\")(.*?)(?=\")'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks.\n    '''\n    # Use a regular expression to find all the values between quotation marks\n    values = re.findall(r'\"([^\"]*)\"', text1)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?P<quotation>\"[^\\\"]*\")')\n    matches = pattern.finditer(text1)\n    values = []\n    for match in matches:\n        values.append(match.group('quotation'))\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*)(?=\")'\n    return re.findall(pattern, text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        list: A list of strings, where each string contains the extracted value.\n    \"\"\"\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern for extracting values between quotation marks\n    pattern = r'(?<=\\s)\"(.*?)\"'\n    # Use the re.findall() function to extract all the values between quotation marks\n    values = re.findall(pattern, text)\n    # Return the values as a list\n    return values"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the tuple and multiply each element with the next one\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    # Append the last element to the result\n    result.append(test_tup[-1])\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0], test_tup[1])\n    for i in range(2, N):\n        result_tup = (result_tup[0] * result_tup[1], test_tup[i])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(test_tup[0] * test_tup[i+1] for i in range(N-1))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # N is the length of the tuple\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([test_tup[i]*test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_length = len(test_tup)\n    result_tup = []\n    \n    for i in range(t_length - 1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        print(\"Both lists must have the same length.\")"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Group the numbers by the difference between them\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1] - x[0])\n\n    # Filter out the groups with only one element\n    filtered_groups = (group for group in grouped_nums if len(list(group)) > 1)\n\n    # Convert the filtered groups into a list of consecutive duplicates\n    consecutive_duplicates_list = [list(group)[0] for group in filtered_groups]\n\n    # Remove the duplicates from the original list\n    for num in consecutive_duplicates_list:\n        nums.remove(num)\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a generator object of tuples containing consecutive duplicates and their indices\n    generator = (k for k, g in groupby(enumerate(nums), lambda i, x: i == x - 1) if not k)\n    \n    # Create a list to hold the unique consecutive duplicates\n    unique_consecutive = []\n    \n    # Loop through the generator object and append the consecutive duplicates to the unique_consecutive list\n    for index, value in generator:\n        unique_consecutive.append(nums[value[0]])\n        \n    # Return the unique_consecutive list\n    return unique_consecutive"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(sorted(set(nums)))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by its elements, and then iterate over the groups\n    for key, group in groupby(nums):\n        # If there are more than one element in a group, yield the group\n        if len(list(group)) > 1:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A new list with consecutive duplicates removed.\n\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    result = []\n    for group in groupby(nums):\n        if group:\n            first = next(group)\n            if not first:\n                group = list(group)\n                group.pop()\n                group = ''.join(group)\n                result.append(group)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for group in groupby(sorted(set(nums))):\n        if len(list(group)) > 1:\n            yield from group[1]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\nlateral_surface_area = lateralsurface_cone(radius,height)\nprint(\"The lateral surface area of the cone is\", lateral_surface_area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as input and returns the lateral surface area of the cone.\n    '''\n    \n    # Find the half-height of the cone\n    h_half = h/2\n    \n    # Calculate the lateral surface area of the cone using the formula:\n    # Lateral surface area = pi r^2 h/2\n    lateral_area = math.pi * r**2 * h_half\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone\n    area = math.pi * r**2 * h\n    # return the lateral surface area\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone with radius r and height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # calculate the half height of the cone\n    half_h = h / 2\n\n    # calculate the area of the base of the cone\n    base_area = math.pi * r * r\n\n    # calculate the lateral surface area of the cone\n    lateral_area = 2 * base_area * half_h\n\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    L = math.pi * r**2 * h\n    return L"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: lateral surface area of the cone\n    '''\n    area = 2 * math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    The lateral surface area is defined as the surface area of the cone (pi r^2), and is calculated\n    as the product of the two quantities.\n    '''\n\n    surface_area = (math.pi * r**2) * h\n\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match any occurrence of spaces, commas, or dots\n    pattern = re.compile(r'[,.]')\n    \n    # Use the pattern to find all occurrences of spaces, commas, or dots in the text\n    matches = pattern.finditer(text)\n    \n    # Iterate over each match and replace it with a colon\n    for match in matches:\n        text = text.replace(match.group(), ':')\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for spaces, commas, and dots\n    pattern = re.compile(r'\\s|,|\\.')\n    # Replace all occurrences of pattern with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to match special characters\n    pattern = r'[., ]'\n\n    # replace special characters with colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|,|\\.'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|,|\\.', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Binary search to find the first occurrence of x in A\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the left and right indices to the first and last indices of the array\n    left, right = 0, len(A) - 1\n\n    # Iterate through the array until the left index is less than or equal to the right index\n    while left <= right:\n        # Calculate the mid index of the array\n        mid = (left + right) // 2\n\n        # If the mid element is equal to the target element, check if it's the first occurrence\n        if A[mid] == x:\n            # If it is, return the index\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            # If it's not the first occurrence, continue searching to the left\n            else:\n                right = mid - 1\n        # If the mid element is less than the target element, search to the right\n        elif A[mid] < x:\n            left = mid + 1\n        # If the mid element is greater than the target element, search to the left\n        else:\n            right = mid - 1\n\n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the leftmost index that is greater than or equal to the given number\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Check if the next element is also equal to the given number\n            if mid + 1 < len(A) and A[mid + 1] == x:\n                return mid\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            # If the element is found, we need to check the adjacent elements to check if it's the first occurrence\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1  # x not found in A"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # find the length of the array\n    n = len(arr)\n    \n    # initialize the sum of products of subarrays\n    prod_sum = 0\n    \n    # initialize the product of current subarray\n    current_prod = 1\n    \n    # iterate through each element in the array\n    for i in range(n):\n        \n        # calculate the product of current subarray\n        current_prod *= arr[i]\n        \n        # update the sum of products of subarrays\n        prod_sum += current_prod\n        \n        # remove the last element from the current subarray\n        current_prod //= arr[i]\n        \n        # calculate the product of the last element and the remaining subarray\n        remaining_prod = 1\n        for j in range(i+1, n):\n            remaining_prod *= arr[j]\n        current_prod *= remaining_prod\n        \n        # update the sum of products of subarrays\n        prod_sum += current_prod\n        \n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * arr[i] * arr[j]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = 1\n            for k in range(i, j):\n                temp *= arr[k]\n            res += temp\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Function to find sum of products of all possible sublists of a given list\n    def sum_Of_Products(arr):\n        n = len(arr)\n        # Initialize result array\n        res = [0] * (n + 1)\n        res[0] = 1\n        # Calculate sum of products of all possible sublists\n        for i in range(1, n + 1):\n            res[i] = arr[i - 1] * res[i - 1]\n        return res\n\n    # Calculate sum of products of all possible sublists\n    sum_prod = sum_Of_Products(arr)\n\n    # Initialize result array\n    res = [0] * (len(arr) + 1)\n    res[0] = 0\n\n    # Calculate sum of products of all possible subarrays and sum of products of all possible sublists\n    for i in range(1, len(arr) + 1):\n        res[i] = sum_prod[i] + res[i - 1]\n\n    # Return sum of products of all possible sublists\n    return res[len(arr)]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # create a dictionary to store the products of subarrays\n    prod_dict = {}\n    # initialize the sum of products to zero\n    prod_sum = 0\n    # loop through the list and calculate the products of subarrays\n    for i in range(len(arr)):\n        if i == 0:\n            prod_dict[0] = arr[i]\n            prod_sum += arr[i]\n        else:\n            for j in range(i):\n                prod_dict[i-j] = prod_dict[j] * arr[i]\n            prod_sum += prod_dict[i]\n    # return the sum of products\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    def sum_of_subarray(start, end):\n        return sum(arr[start:end+1])\n\n    def product_of_subarray(start, end):\n        return reduce(lambda x, y: x*y, arr[start:end+1], 1)\n\n    def find_all_subarrays(start, end):\n        if start > end:\n            return []\n        return [start] + find_all_subarrays(start+1, end) + [end]\n\n    def sum_of_products(start, end, prefix_sum):\n        if start > end:\n            return prefix_sum\n        return sum_of_products(start+1, end, prefix_sum + product_of_subarray(start, end))\n\n    def sum_of_products_for_subarrays(start, end, prefix_sum):\n        subarrays = find_all_subarrays(start, end)\n        return sum(sum_of_products(subarray_start, subarray_end, prefix_sum) for subarray_start, subarray_end in subarrays)\n\n    prefix_sum = 0\n    return sum_of_products_for_subarrays(0, n-1, prefix_sum)\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(n):\n        dp[i+1][i+1] = arr[i] * dp[i+1][i]\n    \n    for i in range(n):\n        for j in range(i+2, n+1):\n            dp[i+1][j] = dp[i+1][j] + dp[i][j-1] * arr[j-1]\n    \n    return dp[0][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # initialize sum of products and list of products\n    sum_products = 0\n    products = []\n\n    # loop through all sublists of length 1 to n\n    for i in range(1, n+1):\n        # loop through all possible starting indices for each sublist\n        for j in range(n-i+1):\n            # calculate the sum of products of each sublist\n            sub_products = 1\n            for k in range(j, j+i):\n                sub_products *= arr[k]\n            # add the sum of products to the sum of products\n            sum_products += sub_products\n            # add the product of the sublist to the list of products\n            products.append(sub_products)\n\n    # return the sum of products\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = arr[i] * dp[i-1]\n    subarray_sum = sum(dp)\n    subarray_prod_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            subarray_prod_sum += dp[j] * arr[i] * arr[j]\n    return subarray_sum - subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a 2D list to store the products of all sublists\n    sublist_prod = [[0 for j in range(n)] for i in range(n)]\n    # Initialize the first row of sublist_prod with the array elements\n    for i in range(n):\n        sublist_prod[0][i] = arr[i]\n    # Fill the remaining sublist_prod rows using the formula\n    for i in range(1, n):\n        for j in range(i):\n            sublist_prod[i][j] = sublist_prod[i-1][j] * arr[i]\n    # Find the sum of products of all sublists\n    sum_sublist_prod = sum(sublist_prod[n-1])\n    return sum_sublist_prod"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1) & 0x5555555555555555\n    n = n ^ (n << 1) & 0xAAAAAAAAAAAAAAAA\n    n = n ^ (n >> 2) & 0x3333333333333333\n    n = n ^ (n << 2) & 0xCCCCCCCCCCCCCCCC\n    n = n ^ (n >> 4) & 0x0F0F0F0F0F0F0F0F\n    n = n ^ (n << 4) & 0xCCCCCCCCCCCCCCCC\n    n = n ^ (n >> 8) & 0x00FF00FF00FF00FF\n    n = n ^ (n << 8) & 0xCCCCCCCCCCCCCCCC\n    n = n ^ (n >> 16) & 0x0000FFFF0000FFFF\n    n = n ^ (n << 16) & 0xFFFFFFFF00000000\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # left shift by 1 bit to move the 1st bit to the end\n    shifted = n >> 1\n    # right shift by 1 bit to move the 2nd bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 3rd bit to the end\n    shifted = shifted >> 1\n    # right shift by 1 bit to move the 4th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 5th bit to the end\n    shifted = shifted >> 1\n    # right shift by 1 bit to move the 6th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 7th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 8th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 9th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 10th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 11th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 12th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 13th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 14th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 15th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 16th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 17th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 18th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 19th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 20th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 21th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 22th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 23th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 24th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 25th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 26th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 27th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 28th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 29th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 30th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 31th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 32th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 33th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 34th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 35th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 36th bit to the end\n    shifted = shifted >> 1\n    # left shift by 1 bit to move the 37th bit to the end\n    shifted = shifted >> 1"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # If the number is even, the last bit will be 1 and the first bit will be 0\n        n = n ^ 0xAAAAAAAA\n    else:\n        # If the number is odd, the last bit will be 0 and the first bit will be 1\n        n = n ^ 0x55555555\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize first and last bits of the number\n    first_bit = (n & 0b1000000000000000) >> 7\n    last_bit = (n & 0b0000000000000001) << 7\n    \n    # Toggle middle bits of the number\n    middle_bits = n & 0b0111111111111110\n    middle_bits = middle_bits ^ 0b0111111111111110\n    \n    # Combine first and last bits with middle bits\n    n = first_bit | middle_bits | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert binary to decimal\n    n = int(n, 2)\n\n    # get the length of binary number\n    length = len(bin(n)[2:])\n\n    # create a list of all possible bits to toggle\n    toggle_list = []\n    for i in range(1, length - 1):\n        toggle_list.append(0)\n\n    # toggle bits except the first and last\n    n = n ^ toggle_list[0] ^ toggle_list[-1]\n\n    # convert back to binary and return\n    return bin(n)[2:]"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n_binary = bin(n)[2:]\n    first_bit = n_binary[0]\n    last_bit = n_binary[-1]\n    n_binary = n_binary[1:-1]\n    new_binary = first_bit + last_bit\n    for i in range(len(n_binary)):\n        if n_binary[i] == '0':\n            new_binary += '0'\n        else:\n            new_binary += '1'\n    new_n = int(new_binary, 2)\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Bitwise XOR operator to toggle the middle bits of the number except the first and last bits\n    n = n ^ (n & ((n >> 1) & ((n >> 2) & ((n >> 3) & ((n >> 4) & ((n >> 5) & ((n >> 6) & ((n >> 7) & ((n >> 8) | n))))))))))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # If even, toggle the first and last bits\n        n = (n & 0x5555555555555555) << 1 | (n & 0xAAAAAAAAAAAAAAA5) << 1 | (n & 0xAAAAAAAAAAAAAAA5) >> 1 | (n & 0x5555555555555555) >> 1\n    else:\n        # If odd, toggle the first and last bits\n        n = (n & 0x3333333333333333) << 1 | (n & 0xCCCCCCCCCCCCCCCC) << 1 | (n & 0xCCCCCCCCCCCCCCCC) >> 1 | (n & 0x3333333333333333) >> 1\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the length of the binary representation of n\n    n_len = len(bin(n)[2:])\n    \n    # Create a new binary string with all bits toggled\n    new_bin = bin(n ^ (2**(n_len-1)) ^ (2**(n_len-2)))[2:].zfill(n_len)\n    \n    # Convert the new binary string back to an integer\n    new_n = int(new_bin, 2)\n    \n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # First bit is 1 if the original number is odd, otherwise 0\n    bit1 = 1 if (n & 1) == 1 else 0\n    # Last bit is 1 if the original number is even, otherwise 0\n    bitN = 1 if (n & (1 << (n.bit_length() - 1))) == (1 << (n.bit_length() - 1)) else 0\n\n    # XOR with the bit toggled values\n    n = n ^ (bit1 ^ bitN)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x - 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): The sorted list of values to search in.\n    x (int): The value to search for.\n\n    Returns:\n    int: The index of the left insertion point if it exists; otherwise, the index where the value would need to be inserted.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        # The value does not exist in the list\n        return index\n    elif a[index - 1]!= x:\n        # The value exists in the list but its left neighbor is not equal to the value\n        return index - 1\n    else:\n        # The value exists in the list and its left and right neighbors are equal to the value\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_left function to find the left insertion point\n    i = bisect.bisect_left(a, x)\n    # If the value is already present in the list, return the index of that value\n    if i!= len(a) and a[i] == x:\n        return i\n    # Otherwise, return the index of the left most element greater than or equal to the specified value\n    else:\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_left function to find the insertion point\n    i = bisect.bisect_left(a, x)\n\n    # If x is already present in the list, return the index of that element\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # If x is less than all the elements in the list, return the index of the first element\n    if i == 0:\n        return 0\n\n    # If x is greater than all the elements in the list, return the index of the last element plus one\n    if i == len(a):\n        return i + 1\n\n    # If x is between two elements in the list, return the index of the smaller element\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        print(string, \"starts with a vowel.\")\n    else:\n        print(string, \"does not start with a vowel.\")\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not.\n    '''\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        print(\"The given string is starting with a vowel.\")\n    else:\n        print(\"The given string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(string, \"starts with a vowel\")\n    else:\n        print(string, \"doesn't start with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(string, \"starts with a vowel.\")\n    else: \n        print(string, \"does not start with a vowel.\")"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The geometric sum of\", n, \"-\", geometric_sum(n-1), \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return geometric_sum(n-1) + 1"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Find the smallest triangular number with n digits \n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        # Use the formula to find the smallest triangular number with n digits \n        triangular_num = 10**(n-1) \n        triangular_num = triangular_num + (math.log10(triangular_num) // math.log10(5)) * 5 \n        return int(math.log10(triangular_num)) + 1 \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    It uses the formula to find the smallest triangular number:\n\n    T(n) = n*(n+1)/2\n    \n    and then returns the index of the smallest triangular number:\n    \n    index = floor(log10(T(n)))\n    '''\n    T = lambda n: n * (n + 1) // 2\n    triangular_numbers = [T(i) for i in range(1, 10 ** n + 1)]\n    index = int(math.floor(math.log10(max(triangular_numbers))))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    # Initialize a counter variable to 1 and a list to store the numbers of the triangular numbers with n digits\n    i = 1\n    count = [1]\n    while len(str(i)) < n:\n        i += 1\n    # Loop through the numbers from 2 to i-1 and check if each number is a triangular number with n digits\n    while i > 1:\n        if len(str(i)) == n:\n            count.append(i)\n        i -= 1\n    # Sort the list in ascending order and return the index of the smallest triangular number with n digits\n    count.sort()\n    return count[0]"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the nth triangular number\n    triangular_num = (10**n) * (1 + math.sqrt(5)) / 2\n\n    # return the index of the smallest triangular number with n digits\n    return math.ceil(math.log10(triangular_num))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Calculate the sum of n digits \n    sum_of_n_digits = sum([int(digit) for digit in str(n)])\n\n    # Calculate the sum of n-1 digits\n    sum_of_n_1_digits = sum([int(digit) for digit in str(n-1)])\n\n    # Calculate the smallest triangular number with n digits \n    smallest_triangular_number = int((n * (n+1) * (2 * n + 1)) / 6)\n\n    # Check if the sum of n digits is equal to the sum of n-1 digits \n    if sum_of_n_digits == sum_of_n_1_digits: \n        return smallest_triangular_number - n\n    else: \n        # If not, calculate the difference of smallest triangular number with n digits and n-1 digits\n        return smallest_triangular_number - n - 1 \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    def is_triangular(num):\n        if num < 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def triangular_index(n):\n        i = 0\n        while not is_triangular(i):\n            i += 1\n        return i\n    \n    return triangular_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Compute the number of digits in n\n    k = len(str(n))\n    \n    # Initialize the sum of digits of the smallest triangular number with n digits\n    sum_of_digits = math.factorial(k) * (n * math.factorial(k-1)) * math.factorial(n-1)\n    \n    # Find the smallest triangular number with n digits\n    smallest_triangular_number = sum_of_digits // math.factorial(k)\n    \n    # Compute the index of smallest triangular number with n digits\n    i = 1\n    while i < smallest_triangular_number:\n        # Compute the next smallest triangular number with n digits\n        current_triangular_number = i*i\n        sum_of_digits = math.factorial(k) * (current_triangular_number * math.factorial(k-1)) * math.factorial(n-1)\n        \n        # If the sum of digits is smaller than the smallest triangular number with n digits, update the index and the smallest triangular number with n digits\n        if sum_of_digits < smallest_triangular_number:\n            smallest_triangular_number = sum_of_digits\n            i += 1\n            \n    return i-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize the count of digits for all triangular numbers with n digits\n    count = [0]*(n+1)\n    # initialize the index of smallest triangular number with n digits\n    index = 0\n    # initialize the smallest triangular number with n digits\n    smallest = 0\n    \n    # calculate the number of digits for each triangular number with n digits\n    for i in range(1,n+1):\n        count[i] = i\n    \n    # calculate the smallest triangular number with n digits\n    while count[index] > 0:\n        count[index] -= 1\n        index += 1\n    \n    # print the smallest triangular number with n digits\n    print(smallest)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n):\n    def next_triangular_number(n):\n        triangular_number = 10 ** n\n        return triangular_number * (triangular_number + 1) // 2\n\n    def smallest_triangular_number(n):\n        triangular_number = 10 ** (n - 1)\n        return triangular_number * (triangular_number + 1) // 2\n\n    smallest_triangular = smallest_triangular_number(n)\n    triangulars = [smallest_triangular + i for i in range(n)]\n\n    for triangular in triangulars:\n        index = math.log10(triangular) + 1\n        if index == n:\n            return index\n\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The smallest triangular number with n digits is\n    # 123456789012345678901234567890\n    # where each digit is in the range from 0 to 9.\n    # Therefore, we need to find the sum of the first n digits of each triangular number.\n    # The sum of the first n digits of a triangular number is\n    # (10^n - 1) / 2 * n + n\n    # We can use this formula to generate all the triangular numbers with n digits.\n\n    # Generate all the triangular numbers with n digits\n    triangular_numbers = []\n    for i in range(10**n):\n        triangular_numbers.append(i)\n\n    # Generate all the sums of the first n digits of each triangular number\n    first_n_digits_sums = []\n    for triangular_number in triangular_numbers:\n        first_n_digits_sum = (10**(n-1) - 1) // 2 * n + n\n        first_n_digits_sums.append(first_n_digits_sum)\n\n    # Find the index of the smallest triangular number with n digits\n    smallest_triangular_number = min(triangular_numbers)\n    index = triangular_numbers.index(smallest_triangular_number)\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = 0\n    result = {}\n    for item in test_tup:\n        result[key] = item\n        key += 1\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through each element of the tuple\n    for i in range(len(test_tup)):\n        # if the current element is an even index, add it as a key to the dictionary\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and converts it to a dictionary\n    using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    i = 0\n    while i < len(test_tup):\n        test_dict[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The tuple should have an even length.\")\n        return None\n    else:\n        key_list = []\n        value_list = []\n        for i in range(0, len(test_tup), 2):\n            key_list.append(test_tup[i])\n            value_list.append(test_tup[i+1])\n        return dict(zip(key_list, value_list))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        rest_of_string = s[1:]\n        return all_Characters_Same(rest_of_string) and first_char == rest_of_string[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # If the length of the string is 0, return True\n    if len(s) == 0:\n        return True\n\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Loop through the string and compare each character with the first character\n    for char in s:\n        if char!= first_char:\n            return False\n\n    # If all characters match the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to lowercase\n    s = s.lower()\n    # get the first character of the string\n    first_char = s[0]\n    # loop through the string\n    for i in range(1, len(s)):\n        # get the current character\n        current_char = s[i]\n        # if the current character is not the same as the first character, return False\n        if current_char!= first_char:\n            return False\n    # if all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    \n    # Loop through all the characters in the string\n    for char in s:\n        # If the character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all the characters are equal to the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters are same, otherwise it returns False.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        for char in s:\n            if char!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a set so that we can get only unique characters\n    unique_chars = set(s)\n    # check whether the length of the set is 1 or not\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    # Convert string to lowercase and remove all spaces\n    s = s.lower().replace(' ', '')\n    # Check if length of string is 1\n    if len(s) == 1:\n        return True\n    # Check if all characters are same\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * math.pow(side, 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2\n    return (1 / 6) * math.sqrt(s * (s - a) * (s - b) * (s - c))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (side*side*side)**0.25\n    return 6*s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n    \"\"\"\n    s = side / 2.0\n    area = (1 + math.sqrt(5)) / 2 * s * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(3) / 4 * side * s * s\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    \n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the remaining elements of the list\n    list[m:] = list[m:][::-1]\n    \n    # Reverse the entire list\n    list[:] = list[::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To ensure that m is less than n\n    \n    # Reverse the first m elements\n    list[:m] = reversed(list[:m])\n    \n    # Reverse the remaining elements\n    list[m:] = reversed(list[m:])\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Calculate the number of items to be moved to the right\n    n = len(list)\n    k = n - m\n    \n    # If the number of items to be moved is greater than the length of the list,\n    # then rotate entire list by k items\n    if k > n:\n        k = k % n\n        \n    # Move the items to the right by k items\n    list.append(list.pop(0))\n    \n    # Rotate the list by k items\n    for i in range(k-1):\n        temp = list[i]\n        list[i] = list[n-k+i]\n        list[n-k+i] = temp\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m > n:\n        raise ValueError(\"m must be less than or equal to n.\")\n    list.append(list.pop(0)) * (m - n)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates the given list by the specified number of items to the right direction.\n    \"\"\"\n    # Check if the list is empty or not\n    if not list:\n        return []\n\n    # Find the length of the list\n    n = len(list)\n\n    # Check if the number of items to rotate is greater than the length of the list\n    if m >= n:\n        # If yes, return the original list\n        return list\n\n    # Initialize variables to keep track of the length of the rotated list and the position of the current item\n    curr_pos = m % n\n    rotated_len = n - m\n\n    # Initialize a new list to store the rotated items\n    rotated_list = []\n\n    # Traverse the list starting from the current position and rotate each item to the right\n    for i in range(curr_pos, n):\n        rotated_list.append(list[i])\n\n    # Traverse the list starting from the current position and rotate each item to the left\n    for i in range(curr_pos, rotated_len):\n        rotated_list.append(list[i - curr_pos])\n\n    # Traverse the list starting from the beginning and rotate each item to the right\n    for i in range(curr_pos, n):\n        rotated_list.append(list[i])\n\n    # Return the final rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    \n    # Check if the list is empty\n    if len(list) == 0:\n        return list\n    \n    # Check if the rotation count is 0 or greater than the length of the list\n    if m >= len(list):\n        return list\n    \n    # Create a copy of the list\n    temp = list[:]\n    \n    # Calculate the number of items to be rotated\n    n = len(list) - m\n    \n    # Rotate the list by swapping the first m items with the last n-m items\n    for i in range(m):\n        temp[i], temp[m+i] = temp[m+i], temp[i]\n    \n    # Return the rotated list\n    return temp"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = False\n    for item in test_tup:\n        if item is None:\n            none_value = True\n            break\n    return none_value"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for value in test_tup:\n        if value is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and checks if it has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = False\n    for value in test_tup:\n        if value is None:\n            none_value = True\n            break\n    return none_value"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda num: all(int(digit) % int(digit) == 0 for digit in str(num)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        divisible_by_digit = lambda x: x % digits.count(x) == 0\n        return all(divisible_by_digit(digit) for digit in digits)\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # create a list of all digits from 0 to 9\n    digits = [int(digit) for digit in str(10)]\n    # create a function to check if a number is divisible by a list of digits\n    def is_divisible(num, digits):\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n    # filter the numbers within the given range and check if they are divisible by every digit in digits\n    result = list(filter(lambda num: is_divisible(num, digits), range(startnum, endnum+1)))\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(digit) % i == 0 for digit in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        # Get the digits of the number\n        digits = [int(d) for d in str(num)]\n        # Loop through all possible digits\n        for digit in digits:\n            # Check if the digit is divisible by the current number\n            if num % digit!= 0:\n                return False\n        # If we make it through the loop without finding a non-divisible digit, the number is divisible by all digits\n        return True\n    # Loop through all numbers from startnum to endnum\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by all digits\n        if is_divisible_by_digits(num):\n            # Print the number if it is\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by a digit.\n        \"\"\"\n        return all(int(digit) in str(num) for digit in str(num))\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = set()\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digits.add(int(digit))\n    for digit in digits:\n        if digit not in range(startnum, endnum+1):\n            return False\n    return True"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in range(10)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is within range\n    if a > 360:\n        return None\n    \n    # calculate area using formula\n    area = math.pi * r * r * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r*r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    else:\n        # Calculate area of sector using the formula area = pi*r^2*sin(angle/180*pi)\n        area = math.pi * r**2 * math.sin(a/180*math.pi)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is within valid range\n    if a > 360 or a < 0:\n        return None\n    else:\n        # calculate area\n        area = r * r * math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a function to find the length of the LCS of two strings\n    def lcs_length(s1, s2):\n        m = len(s1)\n        n = len(s2)\n        lcs = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    lcs[i][j] = 0\n                elif s1[i-1] == s2[j-1]:\n                    lcs[i][j] = lcs[i-1][j-1] + 1\n                else:\n                    lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n        return lcs[m][n]\n\n    # Create a 2D list to store the LCS of each pair of strings\n    lcs_matrix = [[[0 for j in range(len(Z[0]))] for i in range(len(X))] for k in range(len(Y))]\n\n    # Iterate through all possible pairs of strings\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z[0])):\n                # If the current character is the same in all three strings\n                if X[i] == Y[j] == Z[0][k]:\n                    lcs_matrix[i][j][k] = 1\n                # If the current character is the same in the first two strings and different in the third string\n                elif X[i] == Y[j] and Z[0][k]!= X[i]:\n                    lcs_matrix[i][j][k] = lcs_matrix[i][j-1][k-1] + 1\n                # If the current character is the same in the last two strings and different in the third string\n                elif X[i] == Z[0][k] and Y[j] == Z[0][k]:\n                    lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n                # If the current character is different in all three strings\n                else:\n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i-1][j-1][k-1])\n\n    # Find the maximum length of the LCS\n    max_length = max([max([max(row) for row in col]) for col in lcs_matrix])\n\n    # Create a list to store the LCS as strings\n    lcs_strings = []\n\n    # Iterate through all possible pairs of strings\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z[0])):\n                # If the current character is the same in all three strings\n                if X[i] == Y[j] == Z[0][k]:\n                    lcs_strings.append(X[i])\n                # If the current character is the same in the first two strings and different in the third string\n                elif X[i] == Y[j] and Z[0][k]!= X[i]:\n                    lcs_strings.append(X[i])\n                # If the current character is the same in the last two strings and different in the third string\n                elif X[i] == Z[0][k] and Y[j] == Z[0][k]:\n                    lcs_strings.append(X[i])\n                # If the current character is different in all three strings\n                else:\n                    if lcs_matrix[i][j][k] == max_length:\n                        lcs_strings.append(X[i])\n                        lcs_strings.append(Y[j])\n                        lcs_strings.append(Z[0][k])\n\n    # Remove duplicates from the LCS list\n    lcs_strings = list(set(lcs_strings))\n\n    # Join the LCS list into a single string\n    lcs_string = ''.join(lcs_strings)\n\n    # Return the LCS as a string\n    return lcs_string"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n\n    Args:\n        X (str): First string sequence.\n        Y (str): Second string sequence.\n        Z (str): Third string sequence.\n\n    Returns:\n        List[int]: List of indices of the common subsequence.\n\n    \"\"\"\n\n    # Step 1: Create a 2D array to store lengths of subsequences.\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Step 2: Fill the array using dynamic programming.\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # Step 3: Backtrack to find the common subsequence.\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(i - 1)\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the list to get the indices of the common subsequence.\n    lcs = list(reversed(lcs))\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a table to store lengths of longest common subsequences \n    # of all prefixes of X, Y, and Z \n    L = [[0] * (o+1) for _ in range(m+1)]\n    \n    # fill the table in bottom-up manner \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                    \n    # print the lengths of longest common subsequences of all prefixes of X, Y, and Z \n    # for i in range(m+1):\n    #     for j in range(n+1):\n    #         for k in range(o+1):\n    #             print(L[i][j][k], end=' ')\n    #             if k == o:\n    #                 print()\n    \n    # initialize variables to store the indexes of the characters in the longest common subsequence \n    # of the three strings \n    i = j = k = 0\n    \n    # traverse the table in bottom-up manner to find the indexes of the characters in the \n    # longest common subsequence of all prefixes of X, Y, and Z \n    while i <= m and j <= n and k <= o:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            LCS.append(X[i-1])\n            i += 1\n            j += 1\n            k += 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i += 1\n        elif L[i][j-1][k] == L[i][j][k-1]:\n            j += 1\n        else:\n            k += 1\n    \n    # convert the indexes of the characters in the LCS into a string \n    # and return the result \n    return ''.join(LCS)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    def helper(X, Y, Z, dp):\n        n, m, l = len(X), len(Y), len(Z)\n        for i in range(n+1):\n            for j in range(m+1):\n                for k in range(l+1):\n                    if i == 0 or j == 0 or k == 0:\n                        dp[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1]:\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n        return dp\n\n    def backtrack(X, Y, Z, dp, start, end, lcs):\n        if start == 0 and end == 0:\n            return lcs\n        elif start == 0:\n            return backtrack(X, Y, Z, dp, start+1, end, lcs)\n        elif end == 0:\n            return backtrack(X, Y, Z, dp, start, end+1, lcs)\n        elif X[start-1] == Y[end-1] == Z[end-1]:\n            return backtrack(X, Y, Z, dp, start+1, end-1, lcs + X[start-1])\n        elif dp[start][end][end] == dp[start][end-1][end]:\n            return backtrack(X, Y, Z, dp, start+1, end, lcs)\n        elif dp[start][end][end] == dp[start][end][end-1]:\n            return backtrack(X, Y, Z, dp, start, end+1, lcs)\n        else:\n            return backtrack(X, Y, Z, dp, start, end, lcs)\n\n    n, m, l = len(X), len(Y), len(Z)\n    dp = [[[0] * (l+1) for _ in range(m+1)] for _ in range(n+1)]\n    lcs = backtrack(X, Y, Z, dp, 0, 0, '')\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    # base case for empty strings\n    if not X or not Y or not Z:\n        return []\n\n    # check if the first characters of X, Y and Z are same\n    if X[0] == Y[0] == Z[0]:\n        # if yes, then consider it as a subsequence of X and Y\n        return [X[0]] + lcs_of_three(X[1:], Y, Z)\n\n    # if no, then consider the longest common subsequence for the sub-strings X and Y\n    x_subseq = lcs_of_three(X[1:], Y, Z)\n    y_subseq = lcs_of_three(X, Y[1:], Z)\n\n    # initialize a list to store the common subsequence\n    lcs = []\n\n    # loop through the characters of X and Y\n    for i in range(len(X)):\n        # if the characters are same, then consider them as a subsequence\n        if X[i] == Y[i]:\n            lcs.append(X[i])\n\n        # if the characters are different, then check the sub-strings X and Y\n        # and find the longest common subsequence\n        else:\n            x_subseq = lcs_of_three(X[1:], Y, Z)\n            y_subseq = lcs_of_three(X, Y[1:], Z)\n\n            # find the length of the longest common subsequence\n            max_len = max(len(x_subseq), len(y_subseq))\n\n            # loop through the common sub-strings of X and Y\n            for j in range(max_len):\n                if x_subseq[j] == y_subseq[j]:\n                    lcs.append(x_subseq[j])\n                    break\n\n    # return the final list of common subsequences\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0]*(o+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    LCS = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] == dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(LCS[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Create a 3D table to store the lengths of LCS of all prefixes of X, Y and Z\n    L = [[[0]*(p+1) for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            for k in range(1,p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k])\n                    \n    # Print the LCS of all prefixes of X, Y and Z\n    lcs = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Get the length of each string\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store lengths of subsequences\n    table = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Initialize the result string\n    lcs = \"\"\n\n    # Trace the backtrack path to get the longest common subsequence\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Find the length of the three sequences\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Initialize a 2D matrix to store the lengths of longest common subsequences\n    L = [[0] * (p + 1) for _ in range(n + 1)]\n\n    # Fill the matrix using dynamic programming approach\n    for i in range(1, n + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Initialize a list to store the longest common subsequences\n    lcs = []\n\n    # Backtrack to find the longest common subsequences\n    i, j = n, p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Return the longest common subsequence\n    return \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a 2D table to store the length of longest common subsequences\n    table = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # backtrack to find the actual longest common subsequence\n    i = len(X)\n    j = len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the list to get the lcs in descending order\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Iterate through the list of words and replace capital letters with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    \n    # Join the words back into a string with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match capital letters followed by non-space characters\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    # Use the re.sub() method to replace all matches of the pattern with a space\n    str1 = re.sub(pattern,'', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with whitespace\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # split the string into words\n    words = str1.split()\n    # join the words with spaces between them, except for the first word\n    for i in range(len(words)):\n        if i == 0:\n            words[i] = words[i].upper()\n        else:\n            words[i] ='' + words[i].upper()\n    # join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-word characters from the string\n    str1 = re.sub('[^a-zA-Z]+','', str1)\n    # Convert all words starting with capital letters to lowercase and add spaces between them\n    return''.join([word.lower() for word in re.findall(r'\\b\\w+\\b', str1)])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match capitalized words with at least one space\n    pattern = re.compile(r'(\\b[A-Z][a-z]+\\b)')\n\n    # Use the re.sub() function to replace the matched words with spaces\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # capitalize the first letter of each word and join the words with spaces\n    result =''.join(word.capitalize() for word in words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with a space\n    str1 = re.sub(r'\\W+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Loop through each word and add spaces before it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # convert all strings to floats\n    nums_float = [float(s) for s in nums_str]\n    # sort the list in ascending order\n    nums_float.sort()\n    # convert sorted list back to strings\n    sorted_nums_str = [str(n) for n in nums_float]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings to a list of numbers\n    nums = [int(num) for num in nums_str]\n    \n    # sort the list of numbers using the built-in sort function\n    nums.sort()\n    \n    # convert the sorted list of numbers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: (int(x[1:]) if x.isnumeric() else float('inf'), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list to a list of numbers\n    nums_list = [int(x) for x in nums_str]\n\n    # Sort the list numerically\n    nums_list.sort()\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(x) for x in nums_list]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): a list of strings of numbers, e.g., [\"3\", \"5\", \"2\", \"1\", \"4\"]\n\n    Returns:\n    list: a sorted list of strings of numbers, e.g., [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    \"\"\"\n    # Convert the list of strings into a list of integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums_int.sort()\n\n    # Convert the sorted list of integers back into a list of strings\n    nums_str = [str(num) for num in nums_int]\n\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to numeric values\n    nums = [float(num) for num in nums_str]\n    # sort the numeric values\n    nums.sort()\n    # convert sorted numeric values back to strings\n    sorted_nums = [str(num) for num in nums]\n    # join the sorted numeric values into a single string\n    sorted_str = ''.join(sorted_nums)\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(float(num))\n    nums.sort()\n    nums_str = []\n    for num in nums:\n        nums_str.append(str(num))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings in the list to numeric values using map() and lambda function\n    nums_list = list(map(lambda x: float(x), nums_str))\n    # sort the numeric values in the list using sorted() and lambda function\n    nums_list = sorted(nums_list, key=lambda x: float(x))\n    # convert the sorted numeric values back to strings using map() and lambda function\n    sorted_nums_str = list(map(lambda x: str(x), nums_list))\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Adding the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Create a new list to hold the sum of the two lists\n    new_list = []\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # Append the element to the new list\n        new_list.append(element)\n    # Append the elements from the second list to the new list\n    new_list.extend(test_list)\n    # Return the new list with the sum of the two lists\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # unpacking the tuple\n    a, b = test_tup\n    \n    # adding the tuple to the list\n    test_list.append(a+b)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i < 1:\n        return True\n    \n    # Check if the left child is smaller than the current element\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[parent(i)]:\n        return False\n    if i*2+1 <= len(arr)-1 and arr[i] > arr[i*2+1]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    \"\"\"\n\n    if i == 0:\n        return True\n\n    if arr[i] >= arr[i // 2]:\n        return False\n\n    return check_min_heap_helper(arr, i // 2)\n\ndef is_min_heap(arr):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    \"\"\"\n\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < len(arr) // 2:\n        if arr[2 * i] > arr[i] or (arr[2 * i] == arr[i] and arr[2 * i + 1] > arr[2 * i]):\n            return False\n        else:\n            return check_min_heap_helper(arr, 2 * i + 1)\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n\n    Args:\n        arr: A list of integers representing a binary tree\n\n    Returns:\n        True if the given array represents a min heap, False otherwise.\n    \"\"\"\n\n    def is_complete_binary_tree(arr):\n        \"\"\"\n        Check if the given array is a complete binary tree.\n\n        Args:\n            arr: A list of integers representing a binary tree\n\n        Returns:\n            True if the array is a complete binary tree, False otherwise.\n        \"\"\"\n        if len(arr) < 2:\n            return True\n\n        return (arr[0] < arr[1]) and is_complete_binary_tree(arr[1:])\n\n    def is_min_heap(arr):\n        \"\"\"\n        Check if the given array is a min heap.\n\n        Args:\n            arr: A list of integers representing a binary tree\n\n        Returns:\n            True if the array is a min heap, False otherwise.\n        \"\"\"\n        if len(arr) < 2:\n            return True\n\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < len(arr):\n            if arr[left_child] > arr[i]:\n                return False\n\n        if right_child < len(arr):\n            if arr[right_child] > arr[i]:\n                return False\n\n        return is_min_heap(arr[:left_child]) and is_min_heap(arr[left_child:])\n\n    return is_complete_binary_tree(arr) and is_min_heap(arr)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    \n    if i == 0:\n        if arr[i] > arr[i+1]:\n            return False\n        else:\n            return True\n    \n    if arr[i] > arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case: If the root node is not there, then it is a valid min heap\n    if i == 0:\n        return True\n    \n    # Check if the left child of the root node is smaller than the root node\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # Recursively check for the left child\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    elif arr[i] < arr[2*i+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if i == 0:\n        if arr[i] > arr[i+1]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i+1)\n    else:\n        if arr[i] > arr[parent(i)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n\ndef parent(i):\n    return (i-1)//2\n\ndef left_child(i):\n    return 2*i+1\n\ndef right_child(i):\n    return 2*i+2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    a = 0\n    b = 1\n    c = 1\n    count = 1\n    while count <= n:\n        if count % 2 == 0:\n            a = a + b\n            b = c\n            c = (3 * a * a) + (2 * b)\n        else:\n            a = a + b\n            b = c\n            c = (2 * a * a) + b\n        count = count + 1\n    return c"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef jacobsthal_num(n):\n    return int(math.factorial(2 * n) / (math.factorial(n) * math.factorial(n - 1)))\n\nThe function takes an integer n as input and returns the nth Jacobsthal number as an integer. The first few Jacobsthal numbers are 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398103, 2796205, 5592411, 11184821, 22369643, 44739285, 89478571, 178957141, 357914283, 715828565, 1431657131, 2863314261, 5726628523, 11453257045, 22906514091, 45813028181, 91626056363, 183252112725, 366504225451, 733008450901, 1466016901803, 2932033803605, 5864067607211, 11728135214421, 23456270428843, 46912540857685, 93825081715371, 187650163430741, 375300326861483, 750600653722965, 1501201307445931, 3002402614891861, 6004805229783723, 12009610459567445, 24019220919134891, 48038441838269781, 96076883676539563, 192153767353079125, 384307534706158251, 768615069412316501, 1537230138824633003, 3074460277649266005, 6148920555298532011, 12297841110597064021, 24595682221194128043, 49191364442388256085, 98382728884776512171, 19"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize variables\n    a = 1 # initialize the first term of the sequence\n    b = 0 # initialize the second term of the sequence\n    j = 0 # initialize the counter variable\n\n    # print the first term of the sequence\n    print(\"The first term of the sequence is:\", a)\n\n    # iterate n-1 times and print the nth term of the sequence\n    for i in range(n-1):\n        # compute the next term of the sequence\n        c = a + b\n        # print the next term of the sequence\n        print(\"The\", i+1, \"term of the sequence is:\", c)\n        # update the values of a and b\n        a = b\n        b = c\n        j += 1\n\n    # print the nth term of the sequence\n    print(\"The\", n, \"term of the sequence is:\", j)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize variables\n    jacob = 1\n    jacob_prev = 0\n    lucas = 1\n    lucas_prev = 0\n\n    # Calculate the nth jacobsthal number\n    for i in range(n):\n        jacob_temp = (jacob_prev * 2) % 1000000007\n        jacob = (lucas + jacob_temp) % 1000000007\n        lucas_temp = (lucas_prev * 2) % 1000000007\n        lucas = (lucas + lucas_temp) % 1000000007\n\n        # Update previous values\n        jacob_prev = jacob\n        lucas_prev = lucas\n\n    # Return the nth jacobsthal number\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4 * jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j1 = 1\n        j2 = 1\n        j3 = 1\n        for i in range(2, n+1):\n            j3 = j1 + j2\n            j1 = j2\n            j2 = j3\n        return j3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_nums = [0, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            jacobsthal_nums.append(jacobsthal_nums[i-1] + jacobsthal_nums[i-2])\n        else:\n            jacobsthal_nums.append(2*jacobsthal_nums[i-1] - jacobsthal_nums[i-2])\n    return jacobsthal_nums[n]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[0])\n    min_k_records = []\n    for i in range(len(test_list)):\n        if i < K:\n            min_k_records.append(test_list[i])\n        else:\n            break\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sorting the list based on the value in the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initializing the minimum k records\n    min_k_records = []\n\n    # Looping through the list\n    for i in range(len(test_list)):\n        # Adding the first k elements to the minimum k records\n        if len(min_k_records) < K:\n            min_k_records.append(test_list[i])\n        # Checking if the first k elements are in descending order\n        elif min_k_records[0][0] >= test_list[i][0]:\n            break\n        else:\n            # Removing the first element from the minimum k records and adding the current element to it\n            min_k_records.pop(0)\n            min_k_records.append(test_list[i])\n\n    # Returning the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # initialize a dictionary to store the count of each element in the sorted list\n    count_dict = {}\n    for i, x in enumerate(sorted_list):\n        if x[0] in count_dict:\n            count_dict[x[0]] += 1\n        else:\n            count_dict[x[0]] = 1\n    \n    # initialize an empty list to store the k smallest tuples\n    min_k_list = []\n    \n    # iterate over the sorted list and add the k smallest tuples to the list\n    for i, x in enumerate(sorted_list):\n        if count_dict[x[0]] < K:\n            break\n        count_dict[x[0]] -= 1\n        min_k_list.append(x)\n    \n    # sort the list based on the second element of each tuple (in case of a tie)\n    min_k_list = sorted(min_k_list, key=lambda x: x[1])\n    \n    # return the first k elements of the sorted list\n    return min_k_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize minimum k to infinity\n    min_k_value = float('inf')\n\n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        # Check if the current minimum k value is less than the current record value\n        if min_k_value > sorted_list[i][1]:\n            # Update the minimum k value\n            min_k_value = sorted_list[i][1]\n\n    return min_k_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store count of each element\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Get the element and its count\n        element = tup[0]\n        count = tup[1]\n        # If the element is already in the dictionary, update its count\n        if element in count_dict:\n            count_dict[element] += count\n        # If the element is not in the dictionary, add it and its count\n        else:\n            count_dict[element] = count\n    # Find the minimum k elements\n    min_elements = []\n    for i in range(K):\n        min_element = min(count_dict.items(), key=lambda x: x[1])[0]\n        min_elements.append(min_element)\n        del count_dict[min_element]\n    # Sort the minimum k elements in ascending order\n    min_elements.sort()\n    # Return the minimum k elements\n    return min_elements"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_k_list = []\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)):\n        # If the length of the minimum k list is less than k, add the current record to the list\n        if len(min_k_list) < K:\n            min_k_list.append(test_list[i])\n\n        # Otherwise, if the length of the minimum k list is equal to k, compare the second element of the current record\n        # with the second element of the minimum k list. If the current record's second element is smaller, remove the\n        # smallest element from the list and add the current record to the list.\n        else:\n            if test_list[i][1] < min_k_list[0][1]:\n                min_k_list.pop(0)\n                min_k_list.append(test_list[i])\n\n    # Return the minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the list in descending order of the second element of each tuple\n    test_list.sort(key=lambda x: x[1], reverse=True)\n\n    # initialize minimum k to infinity\n    min_k_records = float('inf')\n\n    # iterate through the first K elements of the sorted list\n    for i in range(K):\n        # if the second element of the current tuple is less than min_k_records\n        if test_list[i][1] < min_k_records:\n            # update min_k_records to be the second element of the current tuple\n            min_k_records = test_list[i][1]\n\n    # return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    test_list.sort()\n    min_records = []\n    i = 0\n    j = 0\n    \n    while j < len(test_list):\n        if len(min_records) < K:\n            min_records.append(test_list[j])\n        else:\n            if test_list[j][0] < min_records[-1][0]:\n                min_records.pop()\n                min_records.append(test_list[j])\n        \n        j += 1\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in test_list:\n        min_list.append(min(i))\n    return min(min_list)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns the minimum K records from the list.\n\n    For example:\n    test_list = [('apple', 10), ('banana', 20), ('cherry', 30), ('date', 40), ('elderberry', 50)]\n    K = 3\n    Output: [('banana', 20), ('cherry', 30), ('elderberry', 50)]\n\n    test_list = [('apple', 10), ('banana', 20), ('cherry', 30), ('date', 40), ('elderberry', 50)]\n    K = 5\n    Output: [('apple', 10), ('banana', 20), ('cherry', 30), ('date', 40), ('elderberry', 50)]\n\n    test_list = [('apple', 10), ('banana', 20), ('cherry', 30), ('date', 40), ('elderberry', 50)]\n    K = 1\n    Output: [('apple', 10)]\n\n    test_list = [('apple', 10), ('banana', 20), ('cherry', 30), ('date', 40), ('elderberry', 50)]\n    K = 6\n    Output: []\n\n    Note: In the first test case, the minimum K records are ['banana', 'cherry', 'elderberry'] and in the second test case, the minimum K records are ['apple', 'banana', 'cherry', 'date', 'elderberry']. In the third test case, there are no K records in the list, and in the last test case, the minimum K records are all in the list.\n    '''\n\n    # Sort the list based on the second element of each tuple (i.e., second element is the second key to sort)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Create an empty list to store the minimum K records\n    min_k_list = []\n\n    # Iterate over the sorted list and add the minimum K records to the list\n    for i in range(len(sorted_list)):\n        if len(min_k_list) < K:\n            min_k_list.append(sorted_list[i])\n        else:\n            break\n\n    return min_k_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            result.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            result.append(l3[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    # iterate over all indices in the lists\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            # if the element is found in all three lists, append it to the list of common elements\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i] and l2[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # First, sort the list in ascending order\n    sorted_list = sorted(numbers)\n    \n    # Then, return the second element of the sorted list\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest element in the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return 'There are no two distinct elements in the list.'\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        second_smallest = None\n        for i in range(len(numbers)):\n            if second_smallest is None:\n                if i == len(numbers) - 1:\n                    second_smallest = numbers[i]\n                else:\n                    second_smallest = numbers[i]\n            elif i == len(numbers) - 1:\n                second_smallest = min(second_smallest, numbers[i])\n            else:\n                second_smallest = min(second_smallest, numbers[i])\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Check if the list is empty or has less than 2 elements\n    if len(numbers) < 2:\n        print(\"The list must have at least 2 elements to find the second smallest number.\")\n        return\n\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Find the second smallest number in the sorted list\n    second_smallest_number = sorted_numbers[1]\n\n    # Return the second smallest number\n    return second_smallest_number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize variables\n    smallest = second_smallest = float('inf')\n    \n    # Iterate through the list\n    for num in numbers:\n        # If the current number is smaller than the smallest number, update both variables\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        # If the current number is smaller than the second smallest number, update only the second smallest number\n        elif num < second_smallest:\n            second_smallest = num\n            \n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sorting the list in ascending order\n    numbers.sort()\n    # finding the second smallest number\n    second_smallest_num = numbers[1]\n    return second_smallest_num"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b|)*')\n    result = pattern.search(text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(?<=a)b+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = re.compile(r'\\b[ab]+\\b')\n    result = pattern.search(text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*){1}'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    n = len(test_list)\n    \n    # Sort the list\n    test_list.sort()\n    \n    # Iterate through the list\n    for i in range(n):\n        # For each string, check its reverse\n        for j in range(i+1, n):\n            # If the two strings are equal, increment the count\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n\n    # Iterate through the list and compare each string with its reverse\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Initialize a dictionary to store the count of reverse pairs\n    count_dict = {}\n\n    # Loop through the string list\n    for string in test_list:\n        # Reverse the string and check if it is already present in the dictionary\n        if string[::-1] in count_dict:\n            count_dict[string[::-1]] += 1\n        else:\n            count_dict[string[::-1]] = 1\n\n    # Return the count of reverse pairs\n    return sum(count_dict.values())"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            key = tuple(item)\n            if key in count:\n                count[key] += 1\n            else:\n                count[key] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    list_count = {}\n    for item in list1:\n        if item in list_count:\n            list_count[item] += 1\n        else:\n            list_count[item] = 1\n    return list_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                tuple_item = tuple(sorted(sub_item))\n                if tuple_item in count_dict:\n                    count_dict[tuple_item] += 1\n                else:\n                    count_dict[tuple_item] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            tup = tuple(sublist)\n            if tup in count:\n                count[tup] += 1\n            else:\n                count[tup] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n\n    # Initialize an empty dictionary\n    counts = {}\n\n    # Iterate through each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        element_tuple = tuple(element)\n        # Check if the tuple is already in the dictionary\n        if element_tuple in counts:\n            # Increment the count of the tuple\n            counts[element_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[element_tuple] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert each list to a tuple to count its occurrences\n    tuples = [(x,) for x in list1]\n    # use set to remove duplicates and then count the number of occurrences\n    count = len(set(tuples))\n    # create a dictionary with keys as tuples and values as the count of their occurrences\n    unique_tuples = {}\n    for tuple in tuples:\n        if tuple in unique_tuples:\n            unique_tuples[tuple] += 1\n        else:\n            unique_tuples[tuple] = 1\n    # return the dictionary of unique tuples and their counts\n    return unique_tuples"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # Create an empty dictionary\n    sublists_dict = {}\n    \n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublists_dict:\n            # If it is, increment the value of the tuple\n            sublists_dict[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a value of 1\n            sublists_dict[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to a set to eliminate duplicates\n    list2 = set(list1)\n    # create an empty dictionary to store the counts\n    counts = {}\n    # iterate over the unique lists\n    for lst in list2:\n        # convert the list to a tuple and count its occurrences\n        count = list1.count(lst)\n        # store the count in the dictionary\n        counts[(lst,)] = count\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert list1 to a set to remove duplicates\n    set_list1 = set(list1)\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Iterate through the set and convert each list to a tuple\n    for lst in set_list1:\n        count_dict[tuple(lst)] = set_list1.count(lst)\n\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    if len(parts[0]) > 2 or len(parts[1]) > 2:\n        return False\n    for char in parts[0]:\n        if not char.isdigit() and char!= '-':\n            return False\n    for char in parts[1]:\n        if not char.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the given number is a decimal number with a precision of 2\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # remove any leading or trailing whitespace\n    num = num.strip()\n\n    # check if the string starts with a minus sign\n    if num[0] == '-':\n        return False\n\n    # check if the string has more than one decimal point\n    if '.' in num:\n        return False\n\n    # check if the string contains non-numeric characters\n    if not num.isdigit():\n        return False\n\n    # check if the string has more than 2 digits after the decimal point\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n\n    # check if the string is a valid decimal number with a precision of 2\n    try:\n        num = float(num)\n        if num % 1!= 0:\n            return False\n        if num > 1000000 or num < -1000000:\n            return False\n    except ValueError:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    decimal_part = num.split('.')[-1]\n    if len(decimal_part) > 2:\n        return False\n    for digit in decimal_part:\n        if not digit.isdigit() or int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num_list = num.split('.')\n        int_part = int(num_list[0])\n        decimal_part = num_list[1]\n    else:\n        int_part = int(num)\n        decimal_part = '0'\n    if len(decimal_part) > 2:\n        return False\n    for char in decimal_part:\n        if char not in '0123456789':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1 and '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) <= 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num and '.' not in num.split('.')[1]:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        # check if the string contains only digits and a decimal point\n        if all(char.isdigit() or char == '.' for char in num):\n            # check if the number is within the precision of 2\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) <= 2:\n                return True\n        return False\n    except ValueError:\n        # if the string is not a valid number, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') > 1 or '.' not in num:\n        return False\n    \n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    if len(count) == 1 and list(count.keys())[0] == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list has only one element\n    if len(arr) == 1:\n        return True\n    \n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # check if the set has only one element\n    if len(unique_set) == 1:\n        return True\n    \n    # if all the checks fail, return False\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        unique = True\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                unique = False\n                break\n        if unique:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the input is a number between 1 and 12\n    if isinstance(monthnum3, int) and 1 <= monthnum3 <= 12:\n        # If the number of days is 30, return True\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid input. Please enter a number between 1 and 12.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0 and monthnum3 % 3 == 0:\n        return False\n    elif monthnum3 % 2 == 0:\n        return True\n    elif monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    # Check if the month number is within the valid range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n\n    # Convert the month number to the corresponding month name\n    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    month_name = month_names[monthnum3-1]\n\n    # Check if the month name ends with 'uary' or 'ber'\n    if month_name[-3:] in ['uary', 'ber']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum3 in days:\n        if days[monthnum3] == 30:\n            print(\"The given month number contains 30 days\")\n        else:\n            print(\"The given month number does not contain 30 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            print(\"The given month number contains 30 days.\")\n        else:\n            print(\"The given month number does not contain 30 days.\")\n    else:\n        print(\"The given month number is not valid.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        diff = arr[n-1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # sorting the array\n    diff = float('inf') # initializing the minimum difference variable\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i]) # finding the minimum difference between any two elements in the sorted array\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')  # Initialize minimum difference to positive infinity\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n):\n    '''\n    This function takes an array of integers and its size as input\n    and returns the minimum difference between any two elements in the array.\n    '''\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Iterate over the array and calculate the difference between adjacent elements\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n): \n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse through the array and find the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n\n    for i in range(1, n - 1):\n        if arr[i] - arr[i - 1] > min_diff:\n            min_diff = arr[i] - arr[i - 1]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n    arr (list): List of integers\n    n (int): Size of the list\n\n    Returns:\n    int: The minimum difference between any two elements in the array\n    \"\"\"\n\n    # Initialize minimum difference to infinity\n    min_diff = float('inf')\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Iterate through the array\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # initialize the minimum difference to the maximum integer value\n    min_diff = float('inf')\n\n    # iterate through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n): \n    # Sorting the array \n    arr.sort() \n  \n    # Finding the minimum difference \n    min_diff = abs(arr[n-1] - arr[0]) \n  \n    # Traversing through the array \n    for i in range(1, n-1): \n        curr_diff = abs(arr[i] - arr[i-1]) \n        if curr_diff < min_diff: \n            min_diff = curr_diff \n  \n    # Returning the minimum difference \n    return min_diff \n  \n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize minimum difference as the difference between the first two elements\n    min_diff = arr[1] - arr[0]\n\n    # loop through the remaining elements\n    for i in range(2, n):\n        # calculate the difference between the current element and the minimum element in the sorted array\n        diff = arr[i] - arr[0]\n\n        # update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes in a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    \n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the variables\n    i = 1\n    count = 1\n    current_number = 1\n    polite_number = 1\n\n    # Check if n is greater than 1\n    if n <= 1:\n        return 1\n\n    # Iterate until we reach the nth polite number\n    while count < n:\n        current_number += 1\n\n        # If the current number is a prime number, increment the count\n        if is_prime(current_number):\n            count += 1\n\n        # Check if the current number is less than the nth polite number\n        if current_number < polite_number:\n            return 1\n\n    # We have reached the nth polite number\n    return polite_number\n\ndef is_prime(n):\n    '''\n    This function checks if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    def nth_polite_number(n):\n        \"\"\"\n        Returns nth polite number.\n        \"\"\"\n        if n <= 1:\n            return 1\n        else:\n            return 3 + (4 * math.log(n, 2) + 4 * n - 1) / (math.log(n, 4) + 2)\n\n    return nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    This function calculates the nth polite number using the formula:\n    phi^n - 1 = 0, where phi is the golden ratio (1.61803398875)\n    \"\"\"\n    phi = (1 + math.sqrt(5)) / 2\n    return int(round(phi ** n - 1))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n\n    :param n: integer\n    :return: integer\n    \"\"\"\n    # Initialize variables\n    count = 0\n    x = 1\n    y = 2\n\n    # Calculate nth polite number using Fibonacci sequence\n    while count < n:\n        if math.gcd(x, y) == 1:\n            count += 1\n        x, y = y, x + y\n\n    return x"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n\n    The nth polite number is the smallest number greater than n such that it is a prime number.\n    For example, the 3rd polite number is 5, since 3 is not a prime number, 5 is the next prime number greater than 3 (4).\n\n    \"\"\"\n    # Create a list of prime numbers up to n\n    primes = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            primes.append(i)\n        if n % (i+1) == 0:\n            primes.append(i+1)\n\n    # If there are no prime numbers up to n, return -1 (not a prime number)\n    if not primes:\n        return -1\n\n    # Find the smallest prime number greater than n\n    smallest_prime = min(primes)\n    smallest_prime_greater_than_n = smallest_prime + 1\n\n    # Return the nth polite number\n    return smallest_prime_greater_than_n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_nth_prime(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n\n    def nth_polite_number(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num) and is_prime(num+2):\n                count += 1\n            num += 2\n        return num\n\n    return nth_polite_number(n)\n\nn = 10\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Returns True if nth polite number exists, else False.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return True\n\ndef nth_polite(n):\n    '''\n    Returns the nth polite number.\n    '''\n    i = 1\n    while i <= n:\n        if is_polite(i):\n            return i\n        i += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables\n    is_polite = False\n    i = 1\n\n    # Loop through numbers until we find n-th polite number\n    while not is_polite and i <= n:\n        # Check if number is polite\n        if i % 3 == 0:\n            is_polite = True\n        else:\n            i += 1\n\n    # If n-th polite number is found, return its value\n    if is_polite:\n        return i - 1\n    else:\n        # If n-th polite number is not found, return None\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return abs(a * b) // gcd(a, b)\n\n    def polite_number(n):\n        p = 2\n        while True:\n            if is_prime(p):\n                if p < 10000:\n                    polite_count = 0\n                    polite_sum = 0\n                    for i in range(1, p + 1):\n                        polite_count += is_polite(i)\n                        polite_sum += i\n                    if polite_count == n:\n                        return polite_sum\n                p += 1\n            else:\n                p += 1\n\n    return polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n\n    Args:\n        n: an integer\n\n    Returns:\n        an integer, the nth polite number\n    \"\"\"\n    # define the polite numbers\n    polite_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 4"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n):\n        if i+1 < n:\n            result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        if i == 0 or l1[i-1]!= l1[i]:\n            result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        pairs = []\n        for i in range(len(l1)-1):\n            pairs.append((l1[i], l1[i+1]))\n        return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list of items and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not in the second list.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, and returns a new list that contains the elements that are present in list 1 but not in list 2.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1)-set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i ** 4\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    \n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n        \n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum_of_powers += i ** 4\n        i += 1\n    return sum_of_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_parentheses = {'(', '[', '{'}\n    closing_parentheses = {')', ']', '}'}\n    \n    for char in exp:\n        if char in opening_parentheses:\n            stack.append(char)\n        elif char in closing_parentheses:\n            if not stack:\n                return False\n            if stack.pop()!= opening_parentheses[closing_parentheses[char]]:\n                return False\n    \n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if j < i:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return \"Not Balanced\"\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return \"Not Balanced\"\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_par = ['(', '{', '[']\n\n    for c in exp:\n        if c in open_par:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if not (c in [')', '}', ']'] and top in ['(', '{', '[']):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in '()':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    open_parentheses = {'(', '[', '{'}\n    close_parentheses = {')', ']', '}'}\n    \n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses:\n            if not stack:\n                return False\n            if close_parentheses[char]!= stack.pop():\n                return False\n            \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Convert the expression to a list\n    lst = list(exp)\n\n    # Initialize two stacks - one for opening parenthesis and another for closing parenthesis\n    opening_stack = deque()\n    closing_stack = deque()\n\n    # Loop through the list and check for balanced parentheses\n    for i in range(len(lst)):\n\n        # If the current character is an opening parenthesis, push it onto the opening stack\n        if lst[i] == '(':\n            opening_stack.append(i)\n\n        # If the current character is a closing parenthesis, check if it matches with the last opening parenthesis\n        if lst[i] == ')':\n            if len(opening_stack) == 0:\n                return False\n            opening_index = opening_stack.pop()\n            if closing_stack and lst[opening_index] == ')':\n                closing_stack.pop()\n            else:\n                return False\n\n    # If there are any opening parenthesis left in the opening stack, it means the expression is not balanced\n    if len(opening_stack) > 0:\n        return False\n\n    # If the length of the closing stack is not equal to the length of the opening stack, it means there are more closing parenthesis than opening parenthesis\n    if len(closing_stack)!= len(opening_stack):\n        return False\n\n    # If all the conditions are met, it means the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n            balance += 1\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False, 'Not balanced'\n            top = stack.pop()\n            if char == ')' and top!= '(':\n                return False, 'Not balanced'\n            elif char == '}' and top!= '{':\n                return False, 'Not balanced'\n            elif char == ']' and top!= '[':\n                return False, 'Not balanced'\n    return balance == 0, 'Balanced'"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each word\n    for word in words:\n        # If the length of the word is not equal to K, add it to the result list\n        if len(word)!= K:\n            result.append(word)\n    # Join the result list back into a string\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    words = test_str.split()  # Split the string into words\n\n    new_words = []  # Initialize an empty list to store the new words\n\n    for word in words:\n        if len(word)!= K:  # If the length of the word is not equal to k\n            new_words.append(word)  # Add the word to the new list\n\n    return''.join(new_words)  # Join the new words back into a string separated by spaces"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes in a test string and a number K and removes all the words with k length in the string.\n    The output will be a new string without the words with k length.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create a new list to store the words without k length\n    new_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length of the word is not K, add it to the new list\n            new_words.append(word)\n\n    # Join the words in the new list into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # loop through the words and check if the length of the word is less than or equal to K\n    for word in words:\n        if len(word) <= K:\n            # if the length of the word is less than or equal to K, add it to the filtered words list\n            filtered_words.append(word)\n    \n    # join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words that have k length or less\n    filtered_words = []\n\n    # Iterate through the words and check if each word has k length or less\n    for word in words:\n        if len(word) <= K:\n            filtered_words.append(word)\n\n    # Join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # check if matches are empty\n    if not matches:\n        return None\n\n    # iterate over matches and find position of each match in text\n    for match in matches:\n        index = text.index(match)\n        print(f\"Match found at index {index}: '{match}'\")\n\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # Use regex to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Iterate over all matches and create a dictionary with the position and occurrence of each match\n    result = {}\n    for i, match in enumerate(matches):\n        result[match] = {'position': i, 'occurrence': matches.count(match)}\n    # Sort the dictionary by position and return the result\n    return sorted(result.items(), key=lambda x: x[1]['position'])"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    if matches:\n        for match in matches:\n            # Extract the substring and its position\n            substring = match.group(0)\n            position = text.find(substring)\n\n            # Return the substring and its position\n            return substring, position\n    else:\n        # If no match is found, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n\n    # Check if there is any match\n    if len(list(matches)) == 0:\n        return None\n    \n    # Iterate over matches and append the position and occurrence to a list\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n\n    # Sort the list based on the positions\n    positions.sort()\n\n    # Return the sorted list of positions\n    return positions"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(set([nums[j] for j in range(i, len(nums)) if j % 2 == 0])) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    # Check if the length of the list is odd\n    if len(nums) % 2!= 0:\n        return \"Error: The length of the list must be odd.\"\n\n    # Check if every odd index contains odd numbers\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                count += 1\n    if count == len(nums):\n        print(\"Every odd index contains odd numbers.\")\n    else:\n        print(\"Not every odd index contains odd numbers.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(1, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Initialize a boolean variable to store the result\n    result = True\n\n    # Loop through the list and check if the odd index contains odd numbers\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            count = 0\n            for j in range(len(nums)):\n                if j % 2!= 0:\n                    if nums[j] % 2!= 0:\n                        count += 1\n            if count == 0:\n                print(f\"The odd index {i} is empty.\")\n            else:\n                print(f\"The odd index {i} contains {count} odd numbers.\")\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i].lower() in vowels and test_str[i + 1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i!= 0 and i!= len(test_str)-1 and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # create a set to store the elements of the array\n    unique_elements = set(arr)\n\n    # calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of non-repeated elements from the given list\n    unique_elements = set(arr)\n    # Sum the elements of the unique_elements set\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Loop through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Initialize a variable to store the sum of non-repeated elements in the list\n    non_repeated_sum = 0\n\n    # Loop through the list again and add up the elements that have a frequency of 1 in the dictionary\n    for num in arr:\n        if freq_dict[num] == 1:\n            non_repeated_sum += num\n\n    # Return the sum of non-repeated elements in the list\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_elements = set(arr)\n    \n    # sum of unique elements\n    sum_unique = sum(unique_elements)\n    \n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_arr = []\n    sum_of_non_unique = 0\n    \n    # add unique elements of the list to the list unique_arr\n    for num in arr:\n        if num not in unique_arr:\n            unique_arr.append(num)\n    \n    # calculate the sum of the non-unique elements\n    for num in arr:\n        if num in unique_arr:\n            sum_of_non_unique += num\n    \n    return sum_of_non_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Convert the set to a list and sort it\n    sorted_list = list(unique_set)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Loop through the sorted list and add the elements to the sum\n    for num in sorted_list:\n        sum_non_repeated += num\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set of unique elements in the list\n    unique_elements = set(arr)\n    # calculate the sum of unique elements\n    sum_unique_elements = sum(unique_elements)\n    # return the sum of unique elements\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Convert the set back to a list and sum it\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Creating a set to remove duplicates from the list\n    unique_arr = set(arr)\n    # Summing up the unique elements\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize a variable to keep track of the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # Iterate through the dictionary and add up the sum of non-repeated elements\n    for num, freq in freq.items():\n        if freq == 1:\n            sum_non_repeated += num\n    \n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group_list = []\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            group_list.append(list(group))\n    return group_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = list(group)\n        elif key == list1[-1]:\n            group = list(group)\n            break\n        else:\n            group = list(group)\n        yield group"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            result.append([key])\n        else:\n            if key == list1[0]:\n                continue\n            else:\n                result[-1].append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Split the list into groups of consecutive elements\n    grouped_list = groupby(list1)\n    \n    # Extract the key and group of consecutive elements\n    consecutive_groups = [(k, list(g)) for k, g in grouped_list if k is None]\n    \n    # Initialize an empty list to store the packed sublists\n    packed_sublists = []\n    \n    # Iterate over the groups of consecutive elements and pack them into sublists\n    for group in consecutive_groups:\n        if len(group[1]) > 1:\n            # If the group has multiple consecutive elements, pack them into a sublist\n            packed_sublists.append([elem for elem in group[1]])\n        else:\n            # If the group has only one consecutive element, append it to the packed sublists\n            packed_sublists.append(group[1][0])\n    \n    return packed_sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [' '.join(list(group)) for key, group in groupby(lst) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            packed_list.append(list(group))\n        else:\n            prev_element = key - 1\n            if prev_element in group:\n                new_group = group + list(group)\n                packed_list[-1].extend(new_group)\n            else:\n                packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use the groupby() function from the itertools module to group the list elements by the same value.\n    grouped = groupby(list1)\n    # Use a list comprehension to pack the consecutive duplicates into sublists.\n    packed = [(k, list(g)) for k, g in grouped if len(list(g)) > 1]\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use the itertools function groupby() to group the list elements based on their consecutive duplicates\n    grouped_items = groupby(list1)\n    # convert the grouped items into a list of sublists\n    sublists = [list(group) for key, group in grouped_items]\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the counts of sublists\n    counts = {}\n\n    # Iterate through each element in the list\n    for element in list1:\n\n        # Check if the element is a list\n        if isinstance(element, list):\n\n            # Convert the list to a tuple\n            tup = tuple(element)\n\n            # Check if the tuple is already in the dictionary\n            if tup in counts:\n                counts[tup] += 1\n            else:\n                counts[tup] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            tuple_item = tuple(item)\n            if tuple_item not in sublists:\n                sublists[tuple_item] = 1\n            else:\n                sublists[tuple_item] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of unique sublists\n    unique_dict = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # Check if the element is a list\n        if isinstance(elem, list):\n            # Create a tuple from the list\n            tup = tuple(elem)\n            # Check if the tuple is already in the dictionary\n            if tup in unique_dict:\n                # Increment the count of the tuple\n                unique_dict[tup] += 1\n            else:\n                # If the tuple is not in the dictionary, add it with a count of 1\n                unique_dict[tup] = 1\n    \n    # Return the dictionary of unique sublists\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    \n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert each list to a tuple\n    list1 = [(tuple(i)) for i in list1]\n    \n    # Create an empty dictionary to store counts\n    counts = {}\n    \n    # Loop through the tuples and count the occurrences\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    # Convert the dictionary to a list of tuples and return it\n    return list(counts.items())"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            for j in range(len(list1[i])):\n                sublist_count[(list1[i][j],)] = sublist_count.get((list1[i][j],), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            key = tuple(item)\n            if key not in count:\n                count[key] = 1\n            else:\n                count[key] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary\n    result_dict = {}\n    # loop through the list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if sublist in result_dict:\n            # if it is, increment the value by 1\n            result_dict[sublist] += 1\n        else:\n            # if it's not, add it to the dictionary with a value of 1\n            result_dict[sublist] = 1\n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of each unique list\n    count_dict = {}\n    \n    # iterate over each item in the list\n    for item in list1:\n        # if the item is a list, turn it into a tuple and add it to the count_dict\n        if type(item) == list:\n            count_dict[tuple(item)] = count_dict.get(tuple(item), 0) + 1\n            \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublist_dict:\n                sublist_dict[sublist] += 1\n            else:\n                sublist_dict[sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if test_list[i][0] + test_list[j][0] == test_list[k][0]:\n                    print(test_list[i], '+', test_list[j], '=', test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all combinations of sums with tuples in the given list.\n    The function uses the itertools.combinations() function from the itertools module.\n    '''\n    all_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combinations_list = list(combinations(test_list[i:j], len(test_list)))\n            all_combinations.extend(combinations_list)\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    combinations_list = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                combinations_list.append((test_list[i], test_list[j]))\n\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # check if the input is a list of tuples\n    if not all(isinstance(i, tuple) for i in test_list):\n        raise TypeError('Input must be a list of tuples')\n\n    # sort the input list of tuples\n    test_list.sort()\n\n    # use itertools.combinations to generate all combinations of sums with tuples\n    combinations_list = list(combinations([i[0] for i in test_list], len(test_list)))\n\n    # remove duplicates\n    unique_combinations = []\n    for i in combinations_list:\n        if i not in unique_combinations:\n            unique_combinations.append(i)\n\n    # return the unique combinations as a list\n    return unique_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize a list of tuples to store the combinations\n    combinations_list = []\n\n    # Loop through all possible tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is equal to the sum of the first tuple\n            if test_list[i][0] + test_list[j][0] == test_list[i][1]:\n                # If it is, add the pair to the list\n                combinations_list.append((test_list[i], test_list[j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # use itertools.combinations to generate combinations of sums\n    # using a generator expression to avoid storing the entire list of tuples\n    # use a list comprehension to remove duplicates and filter out tuples with negative values\n    # sort the resulting list of tuples\n    # join the tuples in the resulting list of tuples into a single string with comma-separated values\n    result = sorted(list(set(filter(lambda x: all(i >= 0 for i in x), test_list))), key=lambda x: x[0])\n    return ','.join(str(t) for t in result)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(2, n + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                continue\n            result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = list(map(sum, test_list))\n    all_combinations = []\n    for i in range(len(sum_list)):\n        for j in range(i + 1, len(sum_list)):\n            if sum_list[i] + sum_list[j] in test_list:\n                all_combinations.append((sum_list[i], sum_list[j]))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            if sum(combinations(test_list, j)) == total:\n                result.append(tuple(combinations(test_list, j)))\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n < 2:\n        return \"Not a prime number\"\n    \n    # find the square root of n\n    sqrt_n = int(math.sqrt(n))\n    \n    # check if the square root is an integer or not\n    if sqrt_n**2 == n:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    \n    return len(divisors), sum(divisors)\n\nprint(count_divisors(28)) # Output: (2, 22)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors) % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to check whether the count of divisors is even or odd.\n    \"\"\"\n    def get_divisors(n):\n        \"\"\"\n        Helper function to get the divisors of a number.\n        \"\"\"\n        divisors = []\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if i!= n // i:\n                    divisors.append(i)\n                if n // i!= i:\n                    divisors.append(n // i)\n        if n > 1:\n            divisors.append(n)\n        return divisors\n\n    divisors = get_divisors(n)\n    count = len(divisors)\n    if count % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    # Use a for loop to iterate through all numbers from 1 to n\n    count = 0\n    for i in range(1, n+1):\n        # Use a nested for loop to iterate through all factors of i\n        for j in range(1, int(math.sqrt(i))+1):\n            # If i is divisible by j, increment count\n            if i % j == 0:\n                count += 1\n                break\n    # Check if count is even or odd and return the result\n    if count % 2 == 0:\n        return 'The count of divisors is even.'\n    else:\n        return 'The count of divisors is odd.'"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n    if n > 1 and n % 2 == 0:\n        divisors_count += 1\n    if divisors_count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even or odd.\n    '''\n    def count_divisors_helper(n, count):\n        if n == 1:\n            return count\n        elif n % 2 == 0:\n            count_divisors_helper(n // 2, count + 1)\n        else:\n            count_divisors_helper(3 * n + 1, count + 1)\n\n    count = count_divisors_helper(n, 0)\n    count_even = count % 2 == 0\n\n    return count_even"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    # count the number of divisors\n    num_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            num_divisors += 1\n            if n // i!= i:\n                num_divisors += 1\n    # check whether the count of divisors is even\n    if num_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number and returns True if the count is even, otherwise returns False.\n    '''\n    if n < 1:\n        return False\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    n = len(arr)\n\n    # Traverse through all subarrays of length odd\n    for i in range(1, n, 2):\n        # Calculate the sum of the subarray\n        temp_sum = sum(arr[j] for j in range(i, n, 2))\n        # Add the sum of subarray to overall sum\n        sum_ += temp_sum\n\n    return sum_"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # iterate through the array\n    for i in range(len(arr)):\n\n        # if the current element is odd, add it to the total sum\n        if arr[i] % 2!= 0:\n            total_sum += arr[i]\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_list = []\n    for i in range(len(arr)):\n        temp_sum = 0\n        for j in range(i, len(arr)):\n            temp_sum += arr[j]\n            if (j-i)%2!= 0:\n                sum_list.append(temp_sum)\n                temp_sum = 0\n    return sum_list\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1: # if length of subarray is odd\n                sub_arr = arr[i:j+1]\n                sub_sum = sum(sub_arr)\n                result += sub_sum\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                sum_odd_length += sum(sub_arr)\n\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd_len += arr[j-1]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables for sum and sum of squares\n    sum_of_subarrays = 0\n    sum_of_squares = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # If the length of the subarray is odd, add the element to the sum and square of the subarray\n        if i % 2!= 0:\n            sum_of_subarrays += arr[i]\n            sum_of_squares += arr[i]**2\n            \n    # Return the sum of the subarrays\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        # check for odd length subarray\n        if (i == 0 or i == n-1) or (n-i)%2 == 0:\n            continue\n        else:\n            subarray = arr[i:i+n-i]\n            sum_odd_length_subarrays += sum(subarray)\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_of_subarrays = 0\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            subarray = arr[j:j+i]\n            if all(x % 2!= 0 for x in subarray):\n                sum_of_subarrays += sum(subarray)\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    # Find the length of the array\n    n = len(arr)\n    # Initialize the sum of odd length subarrays to 0\n    sum_odd_length = 0\n    # Initialize two pointers left and right of the array\n    left = 0\n    right = 0\n    # Traverse the array from left to right\n    while right < n:\n        # If the length of the subarray from left to right is odd, add its sum to the sum of odd length subarrays\n        if right - left + 1 % 2!= 0:\n            sum_odd_length += sum(arr[left:right+1])\n        # Move the right pointer to the right\n        right += 1\n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if delta == 0:\n        h = 0\n    else:\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n\n        if h < 0:\n            h += 360\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    v = max_value\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_rgb\n    if max_rgb!= 0:\n        s = (max_rgb - min_rgb) / max_rgb\n    if max_rgb == min_rgb:\n        h = 0\n    else:\n        if r == max_rgb:\n            h = (g - b) / (max_rgb - min_rgb)\n        elif g == max_rgb:\n            h = 2 + (b - r) / (max_rgb - min_rgb)\n        else:\n            h = 4 + (r - g) / (max_rgb - min_rgb)\n        h = h / 6\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = max(r, g, b)\n\n    delta = v - min(r, g, b)\n    s = delta / v if delta!= 0 else 0\n\n    if delta == 0:\n        h = 0\n    else:\n        if r == v:\n            h = (g - b) / delta\n        elif g == v:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Convert r, g, b to integers\n    r, g, b = int(r * 65535), int(g * 65535), int(b * 65535)\n\n    # Calculate the smallest value\n    smallest = min(r, g, b)\n\n    # Calculate the largest value\n    largest = max(r, g, b)\n\n    # Calculate the difference between largest and smallest\n    diff = largest - smallest\n\n    # Calculate the hue\n    if diff == 0:\n        hue = 0\n    elif largest == r:\n        hue = (g - b) / diff\n    elif largest == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Normalize the hue\n    if hue < 0:\n        hue += 6\n\n    # Calculate the saturation\n    if largest == 0:\n        saturation = 0\n    else:\n        saturation = diff / largest\n\n    # Calculate the value\n    value = largest\n\n    # Return a tuple of hsv values\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three parameters - red (r), green (g), and blue (b) values.\n    It returns a tuple containing the hue, saturation, and value (hsv) components of the input color.\n    \"\"\"\n    # Convert the RGB values to the range of 0 to 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the saturation\n    if max_value == min_value:\n        h = 0  # Hue is undefined\n    elif max_value == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_value == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif max_value == b:\n        h = 60 * (((r - g) / delta) + 4)\n\n    if h < 0:\n        h += 360  # Convert to range 0 to 360 if it's less than 0\n\n    # Calculate the value\n    v = max_value\n\n    # Calculate the saturation\n    if delta == 0:\n        s = 0  # Saturation is undefined\n    else:\n        s = delta / max_value\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif r == max_val:\n        h = 60 * ((g - b) / delta)\n    elif g == max_val:\n        h = 60 * ((b - r) / delta) + 120\n    elif b == max_val:\n        h = 60 * ((r - g) / delta) + 240\n    \n    if h < 0:\n        h += 360\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val\n    \n    return round(h), round(s), round(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert RGB to HSV\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if max_color == min_color:\n        h = 0\n    elif r == max_color:\n        h = ((g - b) / delta) % 6\n    elif g == max_color:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_color\n\n    v = max_color\n\n    # Convert HSV to HSL\n    if s == 0:\n        h = 0\n    elif h == 6:\n        h = 0\n    elif h == 0:\n        h = 6\n\n    h = (h / 6) * 360\n    s = s * 100\n    v = v * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n    \n    Args:\n    r (int): Red component of the RGB color\n    g (int): Green component of the RGB color\n    b (int): Blue component of the RGB color\n    \n    Returns:\n    h (float): Hue value in degrees\n    s (float): Saturation value in percent\n    v (float): Value value in percent\n    \"\"\"\n    \n    # Convert RGB color to integer values\n    r, g, b = int(r), int(g), int(b)\n    \n    # Find the maximum and minimum color values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the difference between the maximum and minimum color values\n    diff = max_val - min_val\n    \n    # Calculate the HSV values\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = 60 * ((g - b) / diff)\n        elif max_val == g:\n            h = 60 * ((b - r) / diff) + 120\n        else:\n            h = 60 * ((r - g) / diff) + 240\n        \n        if h < 0:\n            h += 360\n        \n        # Calculate the Saturation and Value values\n        s = (diff / max_val) * 100\n        v = (max_val / 255) * 100\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \n    :param r: Red color value in the range [0, 255]\n    :param g: Green color value in the range [0, 255]\n    :param b: Blue color value in the range [0, 255]\n    \n    :return: Hue value in the range [0, 360], Saturation value in the range [0, 1], Value value in the range [0, 1]\n    \"\"\"\n\n    r, g, b = r/255, g/255, b/255\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta_c = max_c - min_c\n\n    v = max_c\n\n    if max_c == min_c:\n        h = 0\n    else:\n        if max_c == r:\n            h = 60 * ((g - b) / delta_c)\n        elif max_c == g:\n            h = 60 * ((b - r) / delta_c) + 120\n        else:\n            h = 60 * ((r - g) / delta_c) + 240\n\n        if h < 0:\n            h += 360\n\n    if delta_c == 0:\n        s = 0\n    else:\n        s = delta_c / max_c\n\n    return round(h, 2), round(s, 4), round(v, 4)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Parameters:\n    r (int): Red color value.\n    g (int): Green color value.\n    b (int): Blue color value.\n\n    Returns:\n    h (float): Hue value in degrees.\n    s (float): Saturation value in percentage.\n    v (float): Value (brightness) value in percentage.\n    \"\"\"\n\n    # Convert RGB to HSV\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    v = max_rgb\n    del max_rgb, min_rgb, r, g, b\n\n    if v == 0:\n        h = 0\n        s = 0\n    else:\n        s = (max_rgb - min_rgb) / v\n        del max_rgb, min_rgb, v\n\n    if max_rgb == r:\n        h = (g - b) / (v - s)\n    elif max_rgb == g:\n        h = 2 + (b - r) / (v - s)\n    else:\n        h = 4 + (r - g) / (v - s)\n\n    h = h * 60.0\n\n    if h < 0:\n        h += 360.0\n\n    h = int(h)\n\n    if h == 360:\n        h = 0\n\n    s = s * 100.0\n    v = v * 100.0\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even = sum(n for n in lst if n % 2 == 0)\n    odd = sum(n for n in lst if n % 2!= 0)\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n        \n        product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0:\n        return even_product\n    elif odd_count > 0:\n        return odd_product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    if count_even > 0 and count_odd > 0:\n        product = count_even * count_odd\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # loop through the list to find the even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    # return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    product = 1\n    \n    # loop through the list to count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    # check if both even and odd numbers are present\n    if count_even > 0 and count_odd > 0:\n        product = list1[0] * list1[-1]\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' to get the tuple\n    tuple_str = test_str.split(',')\n    # Convert the tuple string to integer tuple\n    int_tuple = tuple(map(int, tuple_str))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to tuple\n        test_tuple = tuple(test_str)\n        # Convert each element to integer\n        converted_tuple = tuple(int(i) for i in test_tuple)\n        # Return converted tuple\n        return converted_tuple\n    except ValueError:\n        # If there is an error, return None\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(i) for i in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tup = eval(test_str)\n        return tup\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by space into a list\n    str_list = test_str.split()\n    # Initialize an empty integer list\n    int_list = []\n    # Loop through each string in the list\n    for i in str_list:\n        # Convert the string to an integer and append it to the list\n        int_list.append(int(i))\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize an empty integer tuple\n    int_tuple = ()\n\n    # iterate through each element in the tuple string\n    for element in test_str:\n        # if the element is a number, append it to the integer tuple\n        if element.isdigit():\n            int_tuple += (int(element),)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n\n    The function takes a single argument, test_str, which is a tuple string\n    of the form (int1,int2,...,intN).\n\n    The function should return an integer tuple (int1,int2,...,intN) by\n    converting the tuple string to an integer tuple using the tuple() function.\n    '''\n\n    # Convert the tuple string to an integer tuple using the tuple() function.\n    int_tuple = tuple(test_str)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # remove any whitespace from the input string\n    test_str = test_str.replace(\" \", \"\")\n    # check if the input string is a valid tuple string\n    if not test_str.startswith(\"(\") or not test_str.endswith(\")\"):\n        return \"Invalid tuple string\"\n    # split the tuple string into a list of strings\n    tuple_str_list = test_str[1:-1].split(\",\")\n    # convert each string in the list to an integer and add it to a list\n    int_list = []\n    for str_num in tuple_str_list:\n        try:\n            int_list.append(int(str_num))\n        except ValueError:\n            return \"Invalid tuple string\"\n    # convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not test_str:\n        return None\n    \n    # check if the string is surrounded by parentheses\n    if test_str[0] == '(' and test_str[-1] == ')':\n        test_str = test_str[1:-1]\n    else:\n        return None\n    \n    # split the string by comma and convert each element to integer\n    try:\n        int_tuple = tuple([int(x) for x in test_str.split(',')])\n        return int_tuple\n    except ValueError:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index - 1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the insertion point using bisect.bisect_right\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a):\n        # If the value is greater than all the elements in the list, insert at the end\n        return len(a)\n    elif x == a[pos-1]:\n        # If the value is equal to the previous element, insert after that one\n        return pos\n    else:\n        # Otherwise, insert at the current position\n        return pos"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Locate the insertion point using bisect.bisect_right function\n    index = bisect.bisect_right(a, x)\n    # If the value is already present in the list, return the index of the value\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index where the value should be inserted\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return a[index-1] + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif i == 0 or a[i-1] < x:\n        return i\n    else:\n        return bisect.bisect_left(a[:i], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # bisect_right() function returns the index where the value should be inserted to maintain the sorted order.\n    index = bisect.bisect_right(a, x)\n    \n    # If the value is already present in the sorted list, we need to check if it needs to be placed before or after the current value.\n    if index!= 0 and a[index - 1] == x:\n        # If the previous value is also equal to x, it means that we need to insert the value after the previous value.\n        return index\n    else:\n        # If the previous value is not equal to x, it means that we need to insert the value before the current value.\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    # Find the index of the first element greater than or equal to x in a\n    index = bisect.bisect_right(a, x)\n\n    # If x is greater than all the elements in a, append to the end of the list\n    if index == len(a):\n        return len(a)\n\n    # Otherwise, return the index of the rightmost element in the sublist that is greater than or equal to x\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{2}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found'\n    else:\n        return 'No match found'\n\ntext = 'abcabcabc'\nprint(text_match_three(text)) # Output: Match found"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'[ab]*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string using the * operator\n    new_tuple = test_list + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert string to list\n    list_str = list(test_str)\n    # join the list to form the new tuple\n    new_tuple = tuple(list_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # combine the two lists and strings into a single list\n    combined_list = [test_list, test_str]\n    # convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # converting the string into a list\n    str_list = list(test_str)\n    # joining all the elements of the list with comma\n    new_str = ', '.join(str_list)\n    # converting the new string into a list\n    new_list = [int(i) for i in new_str.split(',')]\n    # creating a new tuple from the list\n    new_tuple = tuple(new_list)\n    # returning the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(i) for i in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str + test_list)\n    return new_tup"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Loop through all the even indices of the list\n    for i in range(0, len(nums), 2):\n        \n        # If the current even index is not even, return False\n        if nums[i] % 2!= 0:\n            return False\n    \n    # If all even indices are even, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # checking if the index is even\n            if len(nums[i]) % 2 == 0:  # checking if the length of the list is even\n                if sum(nums[i]) % 2 == 0:  # checking if the sum of the even numbers in the list is even\n                    print(\"All even numbers in even indices are present.\")\n                else:\n                    print(\"The sum of even numbers in even indices is odd.\")\n            else:\n                print(\"The length of the list is odd.\")\n        else:\n            print(\"The index is odd.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 0:\n                return False\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n            else:\n                return False\n    return True if count == len(nums) else False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                else:\n                    break\n            if even_count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through the tuple and add each element to the set\n    for elem in test_tup:\n        # If the element is a tuple, flatten it and add the resulting elements to the set\n        if isinstance(elem, tuple):\n            unique_set.update(elem)\n        else:\n            unique_set.add(elem)\n\n    # Return a list of unique elements from the set\n    return list(unique_set)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a new list to store the non-nested tuples\n    new_tup_list = []\n    # Loop through the given tuple and add each non-nested tuple to the new list\n    for tup in test_tup:\n        if type(tup) == tuple:\n            for sub_tup in tup:\n                new_tup_list.append(sub_tup)\n        else:\n            new_tup_list.append(tup)\n    # Return the new list of non-nested tuples\n    return new_tup_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    def remove_tuples(nested_tup):\n        '''\n        Recursive function to remove tuples from a nested tuple.\n        '''\n        if isinstance(nested_tup, tuple):\n            return [remove_tuples(i) for i in nested_tup]\n        else:\n            return nested_tup\n\n    return [remove_tuples(i) for i in test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create a new list to hold the flattened tuple\n    flat_list = []\n    # iterate over each element in the original tuple\n    for element in test_tup:\n        # if the element is a tuple, iterate over its elements\n        if isinstance(element, tuple):\n            # iterate over each element in the sub-tuple\n            for sub_element in element:\n                # add each element to the flat_list\n                flat_list.append(sub_element)\n        # if the element is not a tuple, add it to the flat_list\n        else:\n            flat_list.append(element)\n    # return the flattened tuple\n    return tuple(flat_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            for nested_item in item:\n                new_tup.append(nested_item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_tup.extend(item)\n        else:\n            flat_tup.append(item)\n    return flat_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function takes in a list of lists as input and returns the number of lists in the given list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list: \n        if isinstance(sublist, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n            count += count_list(element)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input,\n    and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    # Initialize the last index as -1\n    last_index = -1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the element at current index is equal to x\n        if arr[i] == x:\n            # Update the last index\n            last_index = i\n\n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n        arr (list): A list of integers representing the sorted array.\n        x (int): An integer representing the element whose last position is to be found.\n\n    Returns:\n        int: The last position of the element in the sorted array. If the element is not present in the array, then -1 is returned.\n    '''\n    # Find the leftmost element greater than or equal to x\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left == len(arr) or arr[left]!= x:\n        return -1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    - arr: a sorted array\n    - x: the element to search for\n    \n    The function returns the index of the last occurrence of the element x in the array.\n    If the element is not found, the function returns -1.\n    \"\"\"\n    # Find the index of the first occurrence of x in the array\n    i = bisect_left(arr, x)\n\n    # If x is not found, return -1\n    if i == len(arr) or arr[i]!= x:\n        return -1\n    \n    # Find the last occurrence of x in the array\n    while i < len(arr) and arr[i] == x:\n        i += 1\n    \n    return i - 1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\S*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    '''\n    Write a function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the current odd number to the sum\n        sum += i\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # take input from the user for the range of natural numbers\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through all the odd natural numbers between l and r\n    for i in range(l, r+1, 2):\n        # add the odd natural number to the sum\n        sum += i\n\n    # print the sum\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_odd = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_odd += i\n            \n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through the range of natural numbers from 1 to n (inclusive)\n    for i in range(1, n+1): \n        # check if the current number is odd\n        if i % 2 == 1: \n            # add the number to the sum\n            sum += i\n            \n    # return the sum of all odd natural numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    if l < 0 or r < 0:\n        print(\"Invalid input. Please enter non-negative integers.\")\n        return\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    print(\"The sum of all odd natural numbers within the range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n  # set range to 1 to n-1\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    sum = 0\n    for i in arr:\n        sum += i\n\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Find the sum of an array.\n\n    Parameters:\n    arr (list): the input array\n\n    Returns:\n    int: the sum of the array\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n\n    # Loop through the array and add each element to the sum\n    for num in arr:\n        total += num\n\n    # Return the sum of the array\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Get the number of bits in the binary representation of n\n    n_bits = len(bin(n)[2:])\n\n    # Calculate the number of left rotations needed\n    rotations = d % n_bits\n\n    # Calculate the rotation value\n    rotation_value = (1 << rotations) - 1\n\n    # Rotate the binary representation of n left by rotations\n    rotated_n = (n << rotations) | (n >> (n_bits - rotations))\n\n    # Convert the rotated binary representation back to decimal\n    rotated_n = int(rotated_n, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xffffffff\n    mask = mask >> d\n    mask = mask << (32 - d)\n    return (n << d) | (n & mask)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary and split it into 4-bit chunks\n    binary_num = bin(n)[2:]\n    binary_chunks = [binary_num[i:i+4] for i in range(0, len(binary_num), 4)]\n\n    # rotate the leftmost d bits by shifting the binary chunks and adding them to the right\n    rotated_chunks = []\n    for chunk in binary_chunks:\n        if d >= 4:\n            rotated_chunk = chunk[-d:] + chunk[:-d]\n        else:\n            shifted_chunk = chunk[4-d:] + chunk[:4-d]\n            rotated_chunk = shifted_chunk[d:] + shifted_chunk[:-d]\n        rotated_chunks.append(rotated_chunk)\n\n    # convert the rotated chunks back to a binary number and concatenate them\n    rotated_binary = ''.join(rotated_chunks)\n    rotated_num = int(rotated_binary, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary\n    bin_str = bin(n)[2:]\n    # calculate the number of bits to rotate\n    num_bits = len(bin_str)\n    d %= num_bits\n    # pad the bits with zeros if necessary\n    pad_len = num_bits - d\n    if pad_len > 0:\n        bin_str = '0' * pad_len + bin_str\n    # rotate the bits\n    rotated_bin = bin_str[-d:] + bin_str[:-d]\n    # convert the rotated bits back to decimal\n    rotated_int = int(rotated_bin, 2)\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    # Calculate the number of bits to rotate\n    rotate_bits = d % 32\n    if rotate_bits == 0:\n        # If no rotation is needed, return the original number\n        return n\n\n    # Calculate the rotation amount\n    rotate_amount = rotate_bits // 8\n    if rotate_bits % 8 == 0:\n        # If only a byte is rotated, rotate the entire number\n        rotate_amount = 1\n\n    # Perform the rotation\n    rotated_number = (n >> rotate_bits) | (n << (32 - rotate_bits))\n\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # Get the original bits\n    original_bits = bin(n)[2:].zfill(32)\n    # Rotate the bits\n    rotated_bits = original_bits[-d:] + original_bits[:-d]\n    # Convert the rotated bits back to a number\n    rotated_number = int(rotated_bits, 2)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask\n    for i in range(d):\n        n = (n << 1) | (n >> 31)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & 0xFFFFFFFF   "
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    # Calculate the number of bits to rotate left by\n    rotate_bits = d % 32\n\n    # Calculate the mask to isolate the bits to rotate left\n    rotate_mask = ((1 << rotate_bits) - 1) << (32 - rotate_bits)\n\n    # Calculate the shifted left value of the number\n    shifted_left = (n << rotate_bits) & rotate_mask\n\n    # Calculate the shifted right value of the number\n    shifted_right = (n >> rotate_bits) & ((1 << 32) - 1)\n\n    # Combine the shifted left and shifted right values to get the rotated value\n    rotated = shifted_left | shifted_right\n\n    # Return the rotated value\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the integer to a list of digits\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    # Reverse the list of digits\n    digits = digits[::-1]\n    # Calculate the number of bits to be rotated\n    num_bits = len(digits) * 8\n    d_bits = d % num_bits\n    # Calculate the number of bits to be shifted\n    shift_bits = num_bits - d_bits\n    # Create a new list of digits by rotating the list of digits by the required number of bits\n    new_digits = digits[-shift_bits:] + digits[:-shift_bits]\n    # Convert the new list of digits to an integer\n    result = 0\n    for digit in new_digits:\n        result = result * 10 + digit\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_all_spaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all spaces from the string\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(1,x+1):\n        if i == x:\n            continue\n        if i == y:\n            continue\n        if i == z:\n            continue\n        if i == x and i == y and i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x!= y and y!= z:\n        count += 1\n    if x!= y and x!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n        elif i!= x and i!= y and i!= z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # initialize count variable to zero\n    count = 0\n    \n    # loop through three given integers and compare them\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    \n    # return the count of equal integers\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = n - 1\n        while j > i:\n            if arr[j] < arr[i]:\n                count += 1\n                break\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(n):\n        # If the element at index i is greater than the minimum element, we have a rotation\n        if arr[i] > min_elem:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n\narr = [3, 4, 1, 2]\nprint(count_rotation(arr))"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # To count rotations, we need to check all pairs of elements\n    # in the array and check if they are in the right order.\n    # If not, we need to rotate the array.\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                # If the two elements are not in the right order, we need to rotate the array.\n                # We can do this by swapping the two elements.\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    # Calculate the smallest and largest elements in the array\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Calculate the range of the array\n    range_ = largest - smallest + 1\n\n    # Calculate the number of rotations\n    rotations = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n\n    # Return the total rotations required\n    return rotations * range_"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_count = 0\n    min_count = n\n    for i in range(1, n):\n        j = i\n        while j < n and arr[i] > arr[j]:\n            j += 1\n        if j > i:\n            max_count = max(max_count, j - i)\n            min_count = min(min_count, n - j)\n    return max_count + min_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize a variable to store the count of rotations\n    count = 0\n\n    # Iterate over the array and check if the elements are in the correct order\n    for i in range(n - 1):\n        if arr[i] > min_element:\n            count += 1\n        else:\n            min_element = min(min_element, arr[i])\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    \n    # If the array is already sorted, return 0\n    if n == 1 or arr[0] <= arr[1]:\n        return 0\n    \n    # Find the minimum element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    \n    # Find the position of the minimum element\n    min_idx = arr.index(min_val)\n    \n    # Find the index of the second minimum element\n    second_min_idx = -1\n    second_min_val = float('inf')\n    for i in range(min_idx + 1, n):\n        if arr[i] < second_min_val:\n            second_min_idx = i\n            second_min_val = arr[i]\n    \n    # If the second minimum element is not found, return 1 (since we have at least one rotation)\n    if second_min_idx == -1:\n        return 1\n    \n    # Calculate the number of rotations required\n    return (n - min_idx - 1) // 2 + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i + n) % n]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, return 0\n    if is_sorted(arr):\n        return 0\n    \n    # If the array has only one element, return 0\n    if n == 1:\n        return 0\n    \n    # If the array has multiple elements, find the largest gap in the array\n    max_gap = 0\n    for i in range(1, n):\n        gap = abs(arr[i] - arr[i-1])\n        if gap > max_gap:\n            max_gap = gap\n    \n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(max_gap):\n        # Check if the array can be rotated by i elements to generate a sorted array\n        rotated_arr = rotate_array(arr, i)\n        if is_sorted(rotated_arr):\n            count += 1\n    \n    # Return the number of rotations required to generate a sorted array\n    return count\n    \ndef rotate_array(arr, k):\n    n = len(arr)\n    # Find the first index k % n\n    first_index = k % n\n    # Reverse the subarray from 0 to first_index-1\n    arr[:first_index] = arr[:first_index][::-1]\n    # Reverse the subarray from first_index to n-1\n    arr[first_index:] = arr[first_index:][::-1]\n    # Reverse the entire array\n    arr = arr[::-1]\n    return arr\n    \ndef is_sorted(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, otherwise False.\n    \"\"\"\n    sqrt_n = int(n**0.5)\n    return sqrt_n**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    a, b = 1, n // 2\n    while a * a <= n:\n        if b * b == n:\n            return True\n        a += 1\n        b = n // a\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # First, we check if n is a positive integer\n    if n <= 0:\n        return False\n\n    # Then, we find the square root of n using the formula sqrt(n) = (x + y/x) / 2\n    x = 0\n    y = n\n    while y!= 0:\n        x += 1\n        y = (y + n // y) // 2\n\n    # Finally, we check if the square root is an integer and if it is equal to n\n    return (x * x == n and n % x == 0)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer n as input and returns True if the given number is a perfect square or False otherwise.\n    A number is a perfect square if it has the form x^2, where x is an integer.\n    This function uses the fact that the square root of a perfect square is an integer.\n    '''\n    \n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # calculate the square root of the given number\n    sqrt = int(n ** 0.5) + 1\n    \n    # check if the square root is an integer\n    if sqrt ** 2!= n:\n        return False\n    \n    # if all the conditions are met, the number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        if n-i*i == 0:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n\n    # check if the number is even or odd\n    if n % 2 == 0:\n        return False\n    else:\n        # calculate the square root of the number\n        sqrt_n = int(n ** 0.5)\n        # check if the square root is odd or even\n        if sqrt_n ** 2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Initialize the sum of squares and square root of n\n    sum_of_squares = 0\n    square_root = n ** 0.5\n\n    # Check if square root is an integer\n    if square_root.is_integer():\n        return True\n\n    # Check for the sum of squares and square root of n\n    while square_root % 1!= 0:\n        sum_of_squares += square_root ** 2\n        square_root -= 0.5\n\n    # If the sum of squares is greater than n, it is not a perfect square\n    if sum_of_squares > n:\n        return False\n\n    # Check if the square root of n is an integer\n    square_root = n ** 0.5\n    if square_root.is_integer():\n        return True\n\n    # If the sum of squares and square root of n are equal, it is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    A perfect square is a positive integer that is the square of an integer.\n    For example, 16 is a perfect square because 16 = 4^2.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is a perfect square using binary search\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # if n is not a perfect square, then it is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is a perfect square\n    # using the Newton-Raphson method\n    x = n/2\n    while x*x > n:\n        x = (x + n/x)/2\n    return x*x == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    # Initialize a variable to keep track of whether the product is even or odd\n    is_even = True\n\n    # Loop through the list of numbers and multiply each number with the current product\n    for num in arr:\n        current_product *= num\n\n    # Check if the product is even or odd\n    if current_product % 2 == 0:\n        is_even = True\n    else:\n        is_even = False\n\n    # Return the result\n    return is_even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all numbers in the list is even and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables to keep track of the maximum sum and the list\n    max_sum = float('-inf')\n    max_list = None\n\n    # Loop through each list in the list of lists\n    for list in lists:\n        # Calculate the sum of the elements in the list\n        sum = sum(list)\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and the list\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = [lst]\n        elif current_sum == max_sum:\n            max_sum_list.append(lst)\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_index = []\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = [i]\n        elif current_sum == max_sum:\n            max_sum_index.append(i)\n    \n    max_sum_list = []\n    for index in max_sum_index:\n        max_sum_list.append(lists[index])\n    \n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    # initialize a dictionary to keep track of the maximum sum found so far\n    max_sum_dict = {}\n    \n    # loop through each list in the input list of lists\n    for lst in lists:\n        # initialize a variable to keep track of the current sum of the list\n        current_sum = 0\n        \n        # loop through each element in the list\n        for num in lst:\n            # add the current element to the current sum\n            current_sum += num\n            \n            # if the current sum is greater than the maximum sum found so far, update the max_sum_dict\n            if current_sum > max_sum_dict.get(current_sum, 0):\n                max_sum_dict[current_sum] = lst\n    \n    # initialize the maximum sum list and loop through the keys in the max_sum_dict\n    max_sum_lst = []\n    for key in max_sum_dict:\n        # add the key to the max_sum_lst\n        max_sum_lst.append(key)\n    \n    # reverse the max_sum_lst so that the list with the highest sum appears first\n    max_sum_lst.reverse()\n    \n    # return the max_sum_lst\n    return max_sum_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 and j == 0:\n                continue\n            current_sum = lists[i][j] + max_list[i-1][j] + max_list[i][j-1] - max_list[i-1][j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [[lists[i][j]]]\n            elif current_sum == max_sum:\n                max_list.append([lists[i][j]])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            sublist = [lists[i][k] + lists[j][k] for k in range(len(lists[0]))]\n            sublist_sum = sum(sublist)\n            if sublist_sum > max_sum:\n                max_sum = sublist_sum\n                max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = [sublist]\n        elif current_sum == max_sum:\n            result.append(sublist)\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the index of the maximum sum\n    max_sum = float('-inf')\n    max_index = 0\n    \n    # Loop through each list of lists in the input list\n    for i, lst in enumerate(lists):\n        # Calculate the sum of all elements in the list\n        lst_sum = sum(lst)\n        \n        # Check if the current sum is greater than the maximum sum found so far\n        if lst_sum > max_sum:\n            # Update the maximum sum and its index\n            max_sum = lst_sum\n            max_index = i\n    \n    # Return the list in the input list at the index corresponding to the maximum sum\n    return lists[max_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum and lists[i][j] not in max_list:\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_index = 0\n    current_run = 0\n    current_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            current_index = i\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n            max_index = current_index\n    return max_run, max_index\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    uppercase_count = 0\n    max_uppercase_count = 0\n    max_uppercase_start = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # Check if the character is uppercase\n        if test_str[i].isupper():\n            # Increment the count of uppercase characters\n            uppercase_count += 1\n            # Check if the count is greater than the current maximum\n            if uppercase_count > max_uppercase_count:\n                # Update the maximum count and the starting index\n                max_uppercase_count = uppercase_count\n                max_uppercase_start = i - max_uppercase_count + 1\n        # Reset the count of uppercase characters if it goes below 1\n        else:\n            uppercase_count = 0\n            \n    # Check if there are any uppercase characters in the string\n    if max_uppercase_count == 0:\n        return \"No uppercase characters found in the string.\"\n    # Return the maximum run of uppercase characters in the string\n    else:\n        return test_str[max_uppercase_start:max_uppercase_start+max_uppercase_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    cur_run = 0\n    uppercase_count = 0\n    \n    # Loop through the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the uppercase count\n            uppercase_count += 1\n            # Check if we are starting a new run of uppercase characters\n            if uppercase_count == 1:\n                # Reset the current run count\n                cur_run = 1\n            # Check if we are continuing a run of uppercase characters\n            elif uppercase_count > 1:\n                # Increment the current run count\n                cur_run += 1\n            # Check if the current run is longer than the maximum run seen so far\n            if cur_run > max_run:\n                # Update the maximum run\n                max_run = cur_run\n        else:\n            # Reset the uppercase count\n            uppercase_count = 0\n            # Reset the current run count\n            cur_run = 0\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    is_uppercase = False\n\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, update the run length and set the is_uppercase flag\n            run_length += 1\n            is_uppercase = True\n        else:\n            # If it isn't, reset the run length and the is_uppercase flag\n            run_length = 0\n            is_uppercase = False\n\n        # Check if the run length is greater than the maximum run length\n        if run_length > max_run:\n            # If it is, update the maximum run length\n            max_run = run_length\n\n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_start = 0\n    run_end = 0\n    max_run = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            run_end = i\n        else:\n            if run_end - run_start + 1 > max_run:\n                max_run = run_end - run_start + 1\n            run_start = i\n            run_end = i\n\n    if run_end - run_start + 1 > max_run:\n        max_run = run_end - run_start + 1\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    current_char = test_str[0]\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            current_char = test_str[i]\n            \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    uppercase_count = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the count and update the max run if necessary\n        if char.isupper():\n            uppercase_count += 1\n            if curr_run + 1 > max_run:\n                max_run = curr_run + 1\n        # Reset the count if the character is not uppercase\n        else:\n            curr_run = 0\n            uppercase_count = 0\n        \n        # Update the current run if the character is uppercase\n        curr_run += 1\n    \n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    current_run = 0\n    max_run = 0\n    is_uppercase = False\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if is_uppercase:\n                if current_run > max_run:\n                    max_run = current_run\n            count += 1\n            current_run = 0\n            is_uppercase = False\n\n    if is_uppercase and current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    cur_run = 0\n    prev_char = None\n\n    for char in test_str:\n        if char.isupper():\n            if prev_char and prev_char.isupper():\n                cur_run += 1\n            else:\n                cur_run = 1\n            max_run = max(max_run, cur_run)\n        else:\n            cur_run = 0\n        prev_char = char\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Loop through the string\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # If the last run is greater than the maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Find the index of the first odd number in the list\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return i\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the first odd number in the list. If there is no odd number in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (K in test_tup):\n        print(\"The tuple contains K.\")\n    else:\n        print(\"The tuple does not contain K.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] == 0:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple test_tup and a integer K as input and returns True if the tuple contains K \n    and False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(K, \"is present in the tuple\")\n    else:\n        print(K, \"is not present in the tuple\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the element in the first tuple is smaller than the corresponding element in the second tuple\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # if all elements are smaller than their corresponding elements in the second tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples do not have the same length.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and checks if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through each element in the first tuple and compare it to the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    # If no False is returned, then all the elements in the second tuple are smaller than the corresponding elements in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                print(f\"{i}: {test_tup1[i]} is greater than {test_tup2[i]}\")\n            elif test_tup1[i] < test_tup2[i]:\n                print(f\"{i}: {test_tup1[i]} is smaller than {test_tup2[i]}\")\n            else:\n                print(f\"{i}: {test_tup1[i]} is equal to {test_tup2[i]}\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the lengths of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # iterate over each element in the second tuple\n    for i in range(len(test_tup2)):\n        # compare the current element in the second tuple with the corresponding element in the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    \n    # if we've made it this far, all elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must have the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"The {} element of the first tuple is greater than the {} element of the second tuple.\".format(i, i)\n    \n    return \"The tuples are equal.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]