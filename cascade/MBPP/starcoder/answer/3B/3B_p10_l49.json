[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # Convert the shared set back into a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Initialize a set to store the shared elements\n    shared_set = set()\n\n    # Iterate through the lists and find the shared elements\n    for element in list1:\n        if element in list2:\n            shared_set.add(element)\n\n    # Convert the set back to a tuple and return it\n    return tuple(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared.append(item)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2 and item not in shared_elements:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n < 9:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    \n    # Check if n is 2\n    if n == 2:\n        return True\n    \n    # Check if n is divisible by any odd number from 3 to n/2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If none of the above conditions are met, n is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    # Check if n is a multiple of 2\n    elif n % 2 == 0:\n        return True\n    # Check odd numbers up to sqrt(n)\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n    # If no divisor found, n is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not a prime number and False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -nums[i])\n\n    # Extract the n largest integers from the heap and add them to a list in descending order\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(heapq.heappop(min_heap))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a min heap\n    heap = hq.nsmallest(n, nums)\n    # Extract the n largest integers from the heap\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function will take a list of numbers and return the n largest numbers in descending order.\n    '''\n    # Convert the list of numbers into a max heap\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n    \n    # Pop the elements from the heap and add them to a new list\n    largest_nums = []\n    while max_heap:\n        largest_nums.append(max_heap[0])\n        max_heap = max_heap[1:]\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n from the first n numbers\n    max_heap = nums[:n]\n    heapq.heapify(max_heap)\n\n    # Iterate through the remaining numbers\n    for num in nums[n:]:\n        # If the current number is greater than the maximum number in the heap, remove the maximum number from the heap and add the current number as the new maximum number\n        if num > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, num)\n\n    # Return the maximum numbers in descending order\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    max_heap = [-float('inf')] * n\n    \n    # Insert the first n elements of the list into the max-heap\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    \n    # Iterate over the remaining elements of the list, and push them into the max-heap\n    for num in nums[n:]:\n        if num > max_heap[0]:\n            # If the current element is greater than the root of the max-heap, replace the root with the current element\n            hq.heapreplace(max_heap, num)\n        else:\n            # If the current element is not greater than the root of the max-heap, add the current element to the heap\n            hq.heappush(max_heap, num)\n    \n    # Return the largest elements from the max-heap in descending order\n    return [num for num in max_heap if num!= -float('inf')]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and returns the n largest integers in descending order.\n    '''\n    # create a max heap from the input numbers\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # remove the smallest elements from the heap and add the next smallest element\n    for i in range(n, len(nums)):\n        if hq.heappop(heap) < nums[i]:\n            hq.heappush(heap, nums[i])\n\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Build a min-heap of the first n elements\n    hq.heapify(nums[:n])\n\n    # Use the heapq.heappop() function to extract and return the largest elements\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the input list\n    heap = hq.nlargest(n, nums)\n    # Convert the heap to a list and return it\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # convert the binary representation of x to a list of bits\n    bits = [int(bit) for bit in bin(x)[2:]]\n    \n    # check whether the two lists have the same length\n    if len(bits)!= len(bits[0]):\n        return False\n    \n    # check whether the two lists have the same elements in the same order\n    for i in range(len(bits)):\n        if bits[i]!= bits[0][i]:\n            return False\n    \n    # if we reach this point, the two numbers differ at one bit position only\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x & 1!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True \n    else: \n        while x & (x - 1)!= 0: \n            x &= x - 1 \n        return x == 1 "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: # Check if x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = (x * 3) + 1\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize a variable to store the position of the rightmost bit\n    right_most_bit_position = 0\n    \n    # Loop through the binary representation of x until we find the position of the rightmost bit\n    while x > 0:\n        x = x // 2\n        right_most_bit_position += 1\n        \n    # Check whether the difference in x and 2^right_most_bit_position differ at one bit position only\n    return x == 1 << right_most_bit_position"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # If x is already a power of two then return True\n    if x == (1 << x.bit_length()) - 1:\n        return True\n    \n    # Check whether the first bit differs at one position or not\n    if x & (x - 1)!= 0:\n        return False\n    \n    # If all the bits have the same pattern then it is a power of two\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        if x & (x-1) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert the text to lowercase and split it into words\n    words = text.lower().split()\n    \n    # Initialize an empty list to store the words\n    result = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is at least 4 characters long\n        if len(word) >= 4:\n            # Add the word to the result list if it passes the check\n            result.append(word)\n    \n    # Return the list of words that meet the length requirement\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function finds all words that are at least 4 characters long in a string.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regular expression to match a word which is at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Search the string for words matching the pattern\n    words = re.findall(pattern, text)\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n\n    # Return the filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Create an empty list to store the squares\n    squares = []\n    \n    # Iterate through the input list and append the square of each element to the squares list\n    for num in nums:\n        squares.append(num**2)\n    \n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i]!= str[(i+n)%n]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # sort the characters in decreasing order of frequency\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # create a dictionary to store the frequency of characters after rotations\n    freq_after_rot = {}\n\n    # rotate the sorted characters to get the frequency of characters after rotations\n    for char, count in sorted_chars:\n        if char in freq_after_rot:\n            freq_after_rot[char] += count\n        else:\n            freq_after_rot[char] = count\n\n    # count the number of rotations required to get the same frequency of characters as the original string\n    rot_count = 0\n    while freq_after_rot!= freq:\n        rot_count += 1\n        freq_after_rot = {}\n        for char, count in sorted_chars:\n            if char in freq_after_rot:\n                freq_after_rot[char] += count\n            else:\n                freq_after_rot[char] = count\n\n    return rot_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if str[i] == str[j]:\n                return 0\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n\n    # Find the length of the reverse of the string\n    rev_n = n // 2\n\n    # Initialize two pointers\n    left = 0\n    right = rev_n\n\n    # Initialize an empty list to store the common characters\n    common = []\n\n    # Compare the strings and store the common characters in the list\n    while left < n and right < n:\n        if str[left] == str[right]:\n            common.append(str[left])\n            left += 1\n            right += 1\n        elif str[left] < str[right]:\n            left += 1\n        else:\n            right += 1\n\n    # Return the minimum number of rotations required\n    return min(rev_n - right, n - rev_n - left + 1)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i] == str[(i+1)%n]:\n            # If the characters match, we can skip 1 character and repeat the loop\n            n = n - 1\n            continue\n        else:\n            # If the characters do not match, we can only rotate the string to the right by i characters\n            # To find the minimum number of rotations, we can calculate the number of rotations required to get the same string after i characters have been rotated\n            min_rotations = (n-i)//2\n            return min_rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i]!= str[j]:\n                return j - i\n    return n - i"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # initialize two pointers\n    left = 0\n    right = len(str) - 1\n\n    # initialize the minimum number of rotations required\n    min_rotations = 0\n\n    # loop until the pointers meet in the middle\n    while left < right:\n        # calculate the mid point of the string\n        mid = (left + right) // 2\n\n        # check if the first half is equal to the second half\n        if str[left:mid+1] == str[mid+1:right+1][::-1]:\n            # if it is, we have found a rotation\n            min_rotations += 1\n            # update the left pointer to mid\n            left = mid\n        else:\n            # if not, update the right pointer to mid\n            right = mid\n\n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    This function finds the minimum number of rotations required to get the same string.\n    '''\n    str = str.lower()\n    str = str.replace(\" \", \"\")\n    len_str = len(str)\n    for i in range(len_str//2):\n        if str[i]!= str[-(i+1)]:\n            return i+1\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Algorithm:\n\n    - create a dictionary of counts of each character in the string\n    - sort the dictionary by values in descending order\n    - loop through the sorted dictionary and check if the current character is the last character in its corresponding key\n    - if it is, return the number of keys in the sorted dictionary minus 1\n\n    Time Complexity: O(n log n), where n is the length of the string\n\n    \"\"\"\n\n    # create a dictionary of counts of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # sort the dictionary by values in descending order\n    sorted_dict = dict(sorted(char_count.items(), key=lambda item: item[1], reverse=True))\n\n    # loop through the sorted dictionary and check if the current character is the last character in its corresponding key\n    count = 0\n    for key, value in sorted_dict.items():\n        if value == 1:\n            count += 1\n        else:\n            break\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if the string is already in its original form\n    if str == str[::-1]:\n        return 0\n    # create a set to store the characters in the string\n    char_set = set(str)\n    # loop through all possible rotations of the string\n    for i in range(n):\n        # create a copy of the string with the character at index i swapped with the last character\n        rotated_str = str[i] + str[n-1] + str[:i] + str[i+1:]\n        # check if the rotated string is already in the set of characters\n        if rotated_str in char_set:\n            # check if the length of the rotated string is less than the length of the original string\n            if len(rotated_str) < len(str):\n                # return the minimum number of rotations required\n                return n - i\n            # check if the length of the rotated string is greater than the length of the original string\n            else:\n                # if the length is greater than the original string, we need to rotate the string again to get the same length\n                return find_Rotations(rotated_str)\n    # if no rotations are possible, return -1 to indicate that no rotations were found\n    return -1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and returns the modified string with \n    the first and last occurrence of the character removed.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into characters\n    str_list = list(s)\n    # Check the first and last characters in the list\n    if str_list[0] == ch:\n        del str_list[0]\n    if str_list[-1] == ch:\n        del str_list[-1]\n    # Join the characters back into a string\n    return ''.join(str_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not isinstance(s, str) or not isinstance(ch, str):\n        raise TypeError(\"Both inputs should be strings\")\n\n    if len(ch)!= 1:\n        raise ValueError(\"Character should be a single character\")\n\n    if ch in s:\n        return s[1:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Split the string into list of characters\n    lst = list(s)\n    # Initialize two variables to store the index of the first and last occurrence of the character\n    i = j = 0\n\n    # Find the index of the first occurrence of the character\n    while i < len(lst) and lst[i]!= ch:\n        i += 1\n\n    # If the character is not found in the string, return the original string\n    if i == len(lst):\n        return s\n\n    # Find the index of the last occurrence of the character\n    while j < len(lst) and lst[j]!= ch:\n        j += 1\n\n    # If the character is not found in the string, return the original string\n    if j == len(lst):\n        return s\n\n    # Remove the first occurrence of the character and return the modified string\n    lst[i] =''\n    return ''.join(lst[:i] + lst[i+1:j] + lst[j+1:])"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[:1] + s.replace(ch,'')[1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence\n    if s[0] == ch:\n        s = s[1:]\n    \n    # Remove last occurrence\n    if s[-1] == ch:\n        s = s[:-1]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch) + s[-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the string contains the character\n    if ch in s:\n        # split the string into a list of characters\n        lst = list(s)\n        # find the index of the first occurrence of the character\n        first = lst.index(ch)\n        # find the index of the last occurrence of the character\n        last = lst.index(ch, first + 1)\n        # remove the first occurrence of the character\n        lst.pop(first)\n        # remove the last occurrence of the character\n        lst.pop(last)\n        # join the list of characters back into a string and return it\n        return ''.join(lst)\n    else:\n        # if the character is not present in the string, return the original string\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i][j], M[j][j] = M[j][j], M[i][j]\n                M[i][i], M[j][i] = M[j][i], M[i][i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to store the minimum sum of rows\n    min_sum = float('inf')\n\n    # Loop through each row of the matrix\n    for row in range(len(M)):\n        # Initialize a variable to store the current row's sum\n        curr_sum = sum(M[row])\n\n        # If the current row's sum is less than the minimum sum, update the minimum sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n\n        # Sort the current row in ascending order\n        M[row].sort()\n\n    # Sort the matrix in ascending order of the minimum sum\n    M.sort(key=lambda x: x[0])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # initialize variables to keep track of the row sums and the indices of the rows that are already sorted\n    row_sums = [sum(row) for row in M]\n    sorted_indices = set()\n\n    # loop over the matrix and keep track of the row indices that have not yet been sorted\n    for i, row in enumerate(M):\n        # check if the sum of the current row is smaller than the sum of the row before it\n        if row_sums[i] < row_sums[sorted_indices.pop()]:\n            # if it is, add the current row index to the sorted set and sort the remaining indices\n            sorted_indices.add(i)\n            row_sums[i], row_sums[sorted_indices.pop()] = row_sums[sorted_indices.pop()], row_sums[i]\n\n    # create a new matrix with the sorted rows\n    sorted_matrix = [[0] * len(M[0]) for _ in range(len(M))]\n    for i, row in enumerate(sorted_indices):\n        sorted_matrix[i] = M[row]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row in the matrix\n    sums = [sum(row) for row in M]\n    # Sort the matrix based on the sums\n    M.sort(key=lambda x: sums.index(sum(x)))\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M[i][j])):\n                M[i][j][k] = sorted(M[i][j])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    M_sorted = [[0] * cols for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            M_sorted[i][j] = M[i][j]\n\n    for k in range(rows):\n        for i in range(rows-k-1):\n            if sum(M_sorted[i]) > sum(M_sorted[i+1]):\n                M_sorted[i], M_sorted[i+1] = M_sorted[i+1], M_sorted[i]\n\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the matrix in row-major order\n    M = sorted(M, key=lambda x: sum(x))\n    # Reverse the order of the rows\n    return [M[i][::-1] for i in range(len(M))]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the matrix according to the row sums\n    sorted_M = sorted(zip(M, row_sums), key=lambda x: x[1])\n\n    # create a new matrix with the sorted rows\n    sorted_rows = [row for _, row in sorted_M]\n\n    # create a new matrix with the sorted columns\n    sorted_cols = [[row[i] for row in sorted_rows] for i in range(len(sorted_rows[0]))]\n\n    return sorted_cols"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n\n    # Bubble sort\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula for Volume of a triangular prism\n    V = 0.5 * l * b * h\n    \n    # Return the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h # Formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (0.5 * l * b * h) # Formula for volume of triangular prism"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = 0.5 * l * b * h  # Formula to find the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to find the volume of a triangular prism\n    # V = 1/2 * l * b * h\n    V = (1 / 2) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    # calculate the area of the triangular prism using the formula V = 1/2ab\n    area = 0.5 * l * b * h\n\n    # calculate the volume using the formula V = (1/3) * l * b * h^2\n    volume = (1/3) * l * b * h ** 2\n\n    return area, volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the lengths of the sides of a triangular prism as input and returns the volume of the prism.\n    '''\n    return l*b*h/3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes in the length, breadth, and height of a triangular prism and returns its volume.\n    '''\n    V = 0.5 * l * b * h # Formula for volume of triangular prism\n    print(\"The volume of the triangular prism is:\", V)\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def text_lowercase_underscore(text):\n    # Define a regular expression pattern to match sequences of lowercase letters\n    pattern = r'\\b[a-z]+\\b'\n    \n    # Search for the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # Check if the match was found and return the result\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define regex pattern to match lowercase letters followed by an underscore\n    pattern = r'(?i)[a-z][a-z_]*'\n    \n    # Use re.search() function to search for pattern in the input string\n    match = re.search(pattern, text)\n    \n    # If pattern is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    \n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z0-9_]*[a-z]'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define the pattern for matching lowercase letters followed by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use re.search() to search for the pattern in the input string\n    match = re.search(pattern, text)\n    \n    # If a match is found, return True, otherwise False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?:[_a-z]+[a-z]*|[a-z]+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"(?<![a-z])[a-z](?=[a-z])|(?<![_])[A-Z](?=[A-Z])\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    \n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a + a + a + a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n\n    Parameters:\n    a (float): Side length of the square.\n\n    Returns:\n    float: Perimeter of the square.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    return [char for char in list_of_chars if char not in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string1, string2): \n    '''\n    This function takes two strings as input, string1 and string2, and returns the result as a list.\n    The function removes characters from string1 which are present in string2.\n    '''\n    # convert both strings to list of characters\n    char1 = list(string1)\n    char2 = list(string2)\n    # initialize an empty list to store the final result\n    result = []\n\n    # iterate over characters of the first string\n    for char in char1: \n        # check if the character is not present in the second string\n        if char not in char2: \n            # append the character to the result list\n            result.append(char)\n\n    # convert the result list to a string\n    final_string = ''.join(result)\n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a new string that contains all the characters in the first string that are not present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    list1 = []\n    list2 = []\n    for i in range(NO_OF_CHARS):\n        if i not in string2:\n            list1.append(chr(i))\n        if i not in string1:\n            list2.append(chr(i))\n\n    # Combining the two lists into a single list\n    combined_list = list1 + list2\n\n    # Returning the combined list as a string\n    result = ''.join(combined_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list\n    string_list = list(string)\n    # Convert string to set to remove duplicates\n    set_string = set(string)\n    # Check if characters are present in the second string\n    for char in set_string:\n        # Check if character is present in the first string and not already removed\n        if char in string_list and char not in result_string:\n            # Remove character from the first string\n            string_list.remove(char)\n    # Convert the list back to a string and return it\n    result_string = ''.join(string_list)\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n    removed_chars = []\n    for char in char_list:\n        if char not in string:\n            removed_chars.append(char)\n    return ''.join(removed_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    # Create a list to store the unique characters in the string\n    unique_chars = []\n    \n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is already present in the unique_chars list\n        if char not in unique_chars:\n            # If not, add it to the list\n            unique_chars.append(char)\n    \n    # Convert the list to a string and return it\n    return ''.join(unique_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns the second string with all the characters present in the first string removed.\n    \"\"\"\n    # Convert the first string to a list of characters\n    char_list = list(string1)\n    \n    # Convert the second string to a list of characters\n    char_list2 = list(string2)\n    \n    # Loop through the characters in the first string and remove the ones present in the second string\n    for i in range(len(char_list)):\n        if char_list[i] in char_list2:\n            char_list.pop(i)\n            i -= 1\n            \n    # Convert the modified list of characters back to a string\n    modified_string = ''.join(char_list)\n    \n    return modified_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of characters in the first string\n    freq_dict = {}\n    for char in string:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n    \n    # Create a list of characters which are present in the second string\n    char_list = []\n    for char in string:\n        if freq_dict[char] == 1:\n            char_list.append(char)\n    \n    # Remove characters from the first string which are present in the second string\n    for char in string:\n        if char in char_list:\n            string = string.replace(char, '', 1)\n    \n    # Return the modified string\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    # Convert the string to a list of characters\n    lst = list(string)\n\n    # Remove the characters in the second string from the list\n    for char in string:\n        if char not in lst:\n            lst.remove(char)\n\n    # Convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    \"\"\"\n    This function takes a string as input and returns a list of all unique characters present in the string.\n    \"\"\"\n    char_set = set()\n    for char in string:\n        char_set.add(char)\n    \n    unique_chars = list(char_set)\n    return unique_chars"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # check if the set has more than one element\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return len(unique_nums)!= len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_nums = set()\n    # iterate through the array\n    for num in arraynums:\n        # if the number is not in the set, add it to the set\n        if num not in unique_nums:\n            unique_nums.add(num)\n        # if the number is in the set, return True\n        else:\n            return True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Iterate over each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n    # Iterate over the dictionary again, and check if any element has a frequency greater than 1\n    for num, freq in freq.items():\n        if freq > 1:\n            # Return True if a duplicate element is found\n            return True\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == 0:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    return len(arraynums)!= len(unique_nums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # list of the numbers that are woodball numbers\n    woodball_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # check if the number is in the list of woodball numbers\n    if x in woodball_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # check if the number is a multiple of 3\n    if x % 3 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2:\n        return \"Woodball\"\n    elif 3 <= x <= 6:\n        return \"Not a Woodball\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 2!= 0 and x!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 2 == 0:\n        print(\"Woodall\")\n    else:\n        print(\"Not Woodall\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the woodball ranges\n    woodball_ranges = [(0, 10), (11, 19), (20, 40), (41, 999)]\n\n    # Check if the number is within any of the woodball ranges\n    for range_start, range_end in woodball_ranges:\n        if x >= range_start and x <= range_end:\n            return \"Woodball\"\n\n    # If none of the ranges match, the number is not a woodball\n    return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball_numbers = [3, 5, 7]\n    if x in woodball_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and (x % 10 == 5 or x % 10 == 7): \n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x < 1:\n        return \"Not a woodball number.\"\n    elif x > 100:\n        return \"Not a woodball number.\"\n    else:\n        if x % 3 == 0 and x % 5 == 0:\n            return \"Woodball number.\"\n        elif x % 3 == 0:\n            return \"Not a woodball number.\"\n        elif x % 5 == 0:\n            return \"Not a woodball number.\"\n        else:\n            return \"Not a woodball number.\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Calculate the difference between the input number and its reverse\n    diff = abs(num - rev_num)\n    # Check if the difference is one less than twice the reverse\n    return diff <= 2 * (rev_num // 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # calculate the reverse of the given number\n    reverse = 0\n    while num!= 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num = num // 10\n    \n    # check if the reverse is one less than twice the original number\n    if reverse + 2 < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    \n    # Reverse the number\n    while temp > 0:\n        remainder = temp % 10\n        rev_num = rev_num * 10 + remainder\n        temp = temp // 10\n    \n    # Check if number is one less than twice its reverse\n    if num < rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    # Convert the given number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # Calculate the reverse of the reverse of the given number\n    reverse_reverse_num = str(int(reverse_num) + int(reverse_num))\n    # Convert the result to an integer and check if it's one less than twice the original number\n    if int(reverse_reverse_num) == num + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Find the reverse of the given number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # Check if the given number is one less than twice its reverse\n    if num == reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return str(num) == str(int(str(num)[::-1]) + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    reverse = abs(reverse)\n    twice_reverse = reverse * 2\n    if num == twice_reverse - 1:\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n    if reverse - num == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num!= 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return True if reversed_num >= 2 * num else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the number to string\n    num_str = str(num)\n\n    # convert the string to integer and reverse it\n    num_str_rev = num_str[::-1]\n\n    # convert the reversed string back to integer\n    num_rev = int(num_str_rev)\n\n    # check if the original number is one less than twice its reverse\n    if num < num_rev:\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    if n == 1:\n        return int(arr[0])\n\n    # Initialize variables\n    max_num = 0\n    current_num = 0\n\n    for i in range(n):\n        # Update current_num\n        current_num = current_num * 10 + arr[i]\n\n        # Update max_num if current_num is greater than max_num\n        if current_num > max_num:\n            max_num = current_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n\n    # Initialize variables\n    max_num = arr[0]\n    curr_num = arr[0]\n    curr_digit = 0\n\n    # Iterate through the list of digits\n    for i in range(1, len(arr)) : \n        \n        # Calculate the sum of the current digit and the next digit\n        next_digit = int(arr[i]) + curr_digit\n        curr_num = curr_num * 10 + next_digit\n\n        # Update the maximum number if the current number is greater than the current maximum\n        if curr_num > max_num : \n            max_num = curr_num\n\n        # Update the current digit and the current number\n        curr_digit = int(arr[i])\n        curr_num = curr_digit\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # Finding the maximum number of digits in the given list\n    n = len(arr)\n    \n    # Finding the maximum number of digits that can be formed with the given list of digits\n    max_digits = n*n\n    \n    # Finding the maximum number that can be formed with the given list of digits\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_num = max(max_num, int(\"\".join(sorted(str(arr[i])+str(arr[j])))))\n    \n    # Returning the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = 0\n    max_len = 0\n    \n    for i in range(len(arr)) : \n        for j in range(len(arr[i])) : \n            num = int(''.join(map(str, arr[i][j:] + arr[i][:j])))\n            if num > max_num : \n                max_num = num\n                max_len = len(str(max_num))\n    \n    return max_num, max_len"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables for the largest number and the current number being formed\n    largest_num = 0\n    current_num = 0\n\n    # Loop through the list of digits\n    for digit in arr:\n        # If the current digit is greater than the current number being formed, update the largest number and reset the current number\n        if digit > current_num:\n            largest_num = current_num\n            current_num = 0\n\n        # Add the current digit to the current number\n        current_num += digit\n\n    # Add the remaining digits to the current number\n    current_num += sum(arr)\n\n    # Return the largest number formed\n    return largest_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # find the maximum element in the array\n    max_element = max(arr)\n    # initialize the variable to hold the largest number formed with the digits\n    max_num = 0\n    \n    # loop through all the possible digits from 0 to 9\n    for digit in range(10):\n        # check if the digit can be formed with the maximum element in the array\n        if digit > max_element:\n            # if it can't, update the max_num variable\n            max_num += (9 - max_element) * digit\n    \n    # return the maximum number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # Function to find the maximum number that can be formed with the given list of digits\n    arr.sort()  # Sort the list in descending order\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num += (arr[i] * (10**(n-i-1)))  # Calculate the maximum number by multiplying the digit with the power of 10\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sorting the list in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1,10):\n        num = 0\n        for j in range(len(arr)):\n            num += (i*arr[j])\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether two integers have opposite signs or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # check if both numbers have same sign\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        print(\"Both numbers have opposite signs.\")\n    else:\n        print(\"Both numbers have same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    if x<0 and y<0: \n        return True \n    elif x>0 and y>0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == 0 or y == 0:\n        return \"Both numbers are zero\"\n    \n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return \"Both numbers have opposite signs\"\n    \n    return \"Both numbers have same signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    if (x*y > 0) and (x > 0) and (y < 0):\n        return True\n    elif (x*y < 0) and (x < 0) and (y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if the signs of the two integers are opposite, and False otherwise.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the two given integers have opposite signs or not.\n    \n    Parameters:\n    x (int): An integer value\n    y (int): An integer value\n    \n    Returns:\n    bool: True if both integers have opposite signs, False otherwise.\n    '''\n    \n    # if the signs are the same, then they have opposite signs\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: #if both x and y are positive\n        return True\n    elif x < 0 and y < 0: #if both x and y are negative\n        return True\n    else: #if one of the two integers is positive and other is negative or vice-versa\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((8 * n * n) - 13) // 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th octagonal number is: {}\".format(n, is_octagonal(n)))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n * (n + 1) - 6"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    This function returns True if the given number is an octagonal number and False otherwise.\n    An octagonal number is a positive integer whose square ends with a zero.\n    For example, 15, 25, 35, and so on are octagonal numbers.\n    '''\n    # Check if the number is less than 1\n    if n < 1:\n        return False\n    # Calculate the square of the number and convert it to a string\n    square = str(n**2)\n    # Check if the last digit of the square is 0\n    if square[-1] == '0':\n        return True\n    # If the last digit of the square is not 0, the number is not an octagonal number\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Define the formula for the nth octagonal number\n    a = int(3 * ((n ** 2) - n + 1) / 2)\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 0\n    for i in range(1, n+1):\n        octagonal_number += i*(i+1)\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    for i in range(1, n+1):\n        octagonal += i * (i - 1)\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def octagonal_number(n):\n        \"\"\"\n        Helper function to find the nth octagonal number.\n        \"\"\"\n        return n*(8*n - 1)\n\n    return octagonal_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        i = 1\n        while i <= n//2:\n            if n % (i*i)!= 0:\n                return False\n            i += 1\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = [i**2 + j**2 + 1 for i in range(1, n+1) for j in range(1, n+1)]\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n\n    while a < 10:\n        n = (3**a) + (2*a**2)\n        if n > 100000000:\n            return False\n        a += 1\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_octagonal(n))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[i] = 1\n        for j in range(i+1, n+1):\n            # check if the sum of digits is equal to length of substring\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count[i] += count[j-i]\n    return count[n-1]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Create a dictionary to store the count of each substring\n    substring_count = defaultdict(int)\n\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                # Increment the count of the substring\n                substring_count[substring] += 1\n\n    # Return the count of all substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with specific lengths\n    count = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # Increment the count for the current substring\n                count[len(s[i:j])] += 1\n\n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_digits(s):\n        '''\n        Helper function to count the number of digits in a string.\n        '''\n        count = 0\n        for i in s:\n            if i.isdigit():\n                count += 1\n        return count\n\n    def count_substrings(s):\n        '''\n        Helper function to count the number of substrings of a given string.\n        '''\n        count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)+1):\n                count += 1\n        return count\n\n    def count_substrings_with_sum(s):\n        '''\n        Helper function to count the number of substrings with the sum of digits equal to their length.\n        '''\n        count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)+1):\n                count_digits_sum = sum(int(c) for c in s[i:j])\n                if count_digits_sum == len(s[i:j]):\n                    count += 1\n        return count\n\n    count_substrings_with_sum_cache = defaultdict(int)\n    for i in range(1, len(s)+1):\n        count_substrings_with_sum_cache[i] = count_substrings_with_sum(s[:i])\n\n    return count_substrings_with_sum_cache[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_sum = defaultdict(int) # to store the sum of digits of each substring\n\n    for i in range(len(s)):\n        digit_sum[i] = sum(int(digit) for digit in s[i:]) # calculate the sum of digits of the substring\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if digit_sum[j] == len(str(j)): # check if the sum of digits of the substring is equal to its length\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            digits_sum = sum(int(d) for d in s[i:j])\n            if digits_sum == j-i:\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(c) for c in s[i:j+1]) == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings for each length\n    count_dict = defaultdict(int)\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each substring with length i+1 from i to the end of the string\n        for j in range(i, len(s)):\n            # convert the substring to a list of digits\n            digits = [int(digit) for digit in s[j]]\n            # calculate the sum of the digits\n            substring_sum = sum(digits)\n            # if the sum is equal to the length of the substring, increment the count\n            if substring_sum == i+1:\n                count_dict[i+1] += 1\n    # return the sum of the counts\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    # Create a dictionary to store the count of substrings with the given sum\n    digit_count = defaultdict(int)\n    \n    # Loop through all substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            digit_sum = sum([int(digit) for digit in s[i:j]])\n            if digit_sum == len(s[i:j]):\n                # Update the count of substrings with the given sum\n                digit_count[digit_sum] += 1\n                \n    return digit_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        substring = s[i:len(s)]\n        if sum(int(digit) for digit in substring) == len(substring):\n            counts[substring] += 1\n    return counts"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    # initialize variables\n    smallest = xs[0]\n    # loop through list and update smallest\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # return smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers xs and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    # initialize smallest to the first element of the list\n    smallest = xs[0]\n    # loop over the rest of the elements\n    for x in xs[1:]:\n        # if x is smaller than smallest, update smallest\n        if x < smallest:\n            smallest = x\n    # return smallest\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the second element\n    test_list.sort(key=lambda x: x[1])\n    max_diff = 0\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][1] - test_list[i][1]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_max = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > diff_max:\n                diff_max = diff\n    return diff_max"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return \"The list must have at least two elements.\"\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = float('-inf')\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(diff, max_diff)\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_max = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > diff_max:\n                diff_max = diff\n    return diff_max"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts the list based on the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on second value\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Return the sorted list\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if type(item) == list:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    if len(flattened_list) == 0:\n        return 0\n    return recursive_list_sum(flattened_list) + sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        return [item for sublist in lst for item in flatten(sublist) if item not in flatten(sublist)]\n    \n    total = 0\n    for item in flatten(data_list):\n        total += item\n    \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(item):\n        if isinstance(item, list):\n            return sum(flatten_and_sum(subitem) for subitem in item)\n        else:\n            return item\n\n    return sum(flatten_and_sum(item) for item in data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                print(item, end=' ')\n    else:\n        print(data_list)\n\ndata_list = [1, [2, [3, 4], 5], 6, [7, [8, 9], 10]]\nrecursive_list_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if isinstance(data_list, list):\n            return [x for sublist in data_list for x in flatten(sublist)]\n        else:\n            return [data_list]\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(item) for item in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return flat_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list, index=0):\n    if index == len(data_list):\n        return 0\n    else:\n        return data_list[index] + recursive_list_sum(data_list, index+1)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n\n    Args:\n    lst: A list of numbers.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    '''\n\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # initialize the count variable to 0\n    count = 0\n    # initialize the list of Bell numbers\n    bell_numbers = []\n    # loop through the range of n + 1\n    for i in range(n + 1):\n        # add the i-th Bell number to the list\n        bell_numbers.append(i)\n    # loop through the range of n + 1\n    for i in range(n + 1):\n        # loop through the range of 0 to n - i - 1\n        for j in range(0, n - i - 1):\n            # if the difference between i and j is less than or equal to j\n            if i - j <= j:\n                # find the index of the largest Bell number in the list that is less than or equal to j\n                index = bell_numbers.index(max(bell_numbers[:j + 1]))\n                # update the count variable\n                count += bell_numbers[i] * bell_numbers[j] * bell_numbers[index]\n                # remove the element at the index from the list\n                bell_numbers.pop(index)\n                # remove the elements between i and j from the list\n                bell_numbers = [bell_numbers[x] for x in range(j) if x >= i]\n    # return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the variable to store the number of ways\n    ways = 1\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return 0\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(1, n + 1):\n        ways *= i\n\n    # Return the number of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) * (n-1) // (n-2) * 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [1]\n        for i in range(2, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize a list to store the partition counts\n    count = [0] * (n+1)\n    # set the first two Bell numbers as 1\n    count[1] = 1\n    count[2] = 1\n    # loop through the remaining Bell numbers\n    for i in range(3, n+1):\n        # initialize a variable to store the previous count\n        prev_count = 0\n        # loop through the previous Bell numbers\n        for j in range(i-1, 0, -1):\n            # add the previous count to the current count\n            count[j] += prev_count\n            # update the previous count to the current count\n            prev_count = count[j]\n    # return the final count\n    return count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1] * n\n    for i in range(n):\n        bell_numbers[i] *= (i+1)\n    return sum(bell_numbers)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_number(n // 2) + bell_number((n // 2) + 1)\n    else:\n        return bell_number((n - 1) // 2) + bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through each number from 0 to n-1\n    for i in range(n+1):\n        # Calculate the number of ways to partition the set of Bell numbers using this number\n        ways = (n // i) + (n % i)\n        \n        # Update the count variable by adding the number of ways calculated above\n        count += ways\n    \n    # Return the final count value\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # First, check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Next, check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Check if the array is monotonic\n    if A[0] <= A[1] and A[1] >= A[-1]:\n        return True\n    elif A[0] >= A[1] and A[1] <= A[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i-1] > A[i]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: #base case for empty or single-element array\n        return True\n    elif A[0] == A[1]: #base case for array with a single element\n        return True\n    elif A[0] < A[1]: #base case for ascending array\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]: #check if any element is not in the ascending order\n                return False\n        return True\n    else: #base case for descending array\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]: #check if any element is not in the descending order\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[1] == A[0]:\n        for i in range(2, len(A)):\n            if A[i]!= A[i-1]:\n                return False\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(2, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in range(2, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    if A[0] <= A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    \n    if A[0] >= A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    It returns True if the array is monotonic and False otherwise.\n    '''\n    # Check if the array is empty\n    if not A:\n        return True\n\n    # Compare the first and last elements of the array\n    if A[0] <= A[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 0 or n == 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, n):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1: # base case\n        return True\n    elif A[0] == A[-1]: # check for an array of equal elements\n        return is_Monotonic(A[1:-1])\n    elif A[0] < A[1]: # check for an array with monotonically increasing elements\n        return True\n    elif A[0] > A[1]: # check for an array with monotonically decreasing elements\n        return False\n    else: # if the first element is greater than the second element, the rest should also be greater than the first element\n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if the array is monotonic and False otherwise.\n    A monotonic array is an array that either increases or decreases monotonically with each element.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        if l == s:\n            return True\n        else:\n            for i in range(len(l) - len(s) + 1):\n                if l[i:i+len(s)] == s:\n                    return True\n            return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in l:\n        if item in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than or equal to the length of the main list\n    if len(s) >= len(l):\n        # Use two pointers to traverse the main list and the sublist\n        i = 0\n        j = 0\n        while j < len(s):\n            # Check if the elements of the sublist match with the current elements of the main list\n            if l[i] == s[j]:\n                j += 1\n                i += 1\n                # If the entire sublist is matched, return True\n                if j == len(s):\n                    return True\n            else:\n                # If an element of the sublist does not match with the current element of the main list,\n                # move the pointer of the main list to the next element\n                i += 1\n    # If the length of the sublist is less than or equal to the length of the main list,\n    # the sublist cannot be a sublist of the main list\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes in two lists l and s. It checks whether s is a sublist of l or not.\n    \"\"\"\n    # check if s is a sublist of l\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if s == l[i:]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(set(Input[i]))!= len(Input[i]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            equal_length = False\n            break\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    length = len(Input)\n    count = 0\n\n    for i in range(length):\n        for j in range(i + 1, length):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n                break\n            else:\n                continue\n\n    if count == length - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n                break\n    if count == len(Input) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # iterate over the input list of tuples\n    for i in range(len(Input)):\n        # check if the length of the i-th tuple is equal to the length of all the tuples before it\n        for j in range(i):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    # if no tuple has a different length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            count += 1\n    if count == len(Input)-1:\n        print(\"All the tuples have equal length.\")\n    else:\n        print(\"Not all the tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return \"Error: Input must be a list of tuples\"\n    \n    # Check if all the tuples have the same length\n    for i in range(len(Input[0])):\n        if len(set([len(t) for t in Input]))!= 1:\n            return \"Error: All the tuples must have the same length\"\n    \n    return \"All the tuples have equal length\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal = True\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            equal = False\n            break\n    return equal"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        if not swapped:\n            gap //= 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb sort algorithm.\n\n    Args:\n    nums (list): The list of elements to sort.\n\n    Returns:\n    The sorted list of elements.\n    \"\"\"\n\n    # Initialize the gap and swaps counters\n    gap = 1\n    swaps = 0\n\n    # Find the length of the list and the largest element\n    n = len(nums)\n    max_num = max(nums)\n\n    # Continue until the gap size is constant\n    while gap <= max_num // 1.3:\n        # Reset the swaps counter and iterate over the list\n        swaps = 0\n        for i in range(n):\n            # Find the correct position for the current element using binary search\n            j = i - gap\n            while j >= 0 and nums[j] > nums[i]:\n                # Swap elements if they are in the wrong position\n                nums[j + gap], nums[i] = nums[i], nums[j + gap]\n                swaps += 1\n                j -= gap\n\n        # Increase the gap size by a factor of 1.3\n        gap = int(gap * 1.3)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define a function to swap elements in the list\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define a function to calculate the median of three elements\n    def median_of_three(nums, a, b, c):\n        if nums[a] < nums[b]:\n            if nums[a] < nums[c]:\n                return a\n            elif nums[b] < nums[c]:\n                return c\n            else:\n                return b\n        else:\n            if nums[b] < nums[c]:\n                return b\n            elif nums[a] < nums[c]:\n                return c\n            else:\n                return a\n\n    # loop until the list is sorted\n    while True:\n        # keep track of the size of the list\n        n = len(nums)\n\n        # if the size of the list is one or less, stop the loop\n        if n <= 1:\n            break\n\n        # keep track of the current swaps\n        swaps = 0\n\n        # loop through the list and swap adjacent elements if they are out of order\n        for i in range(n-1):\n            # calculate the median of the elements at indices i, i+1, and i+2\n            # and the elements at indices i+1, i+2, and i+3\n            m1 = median_of_three(nums, i, i+1, i+2)\n            m2 = median_of_three(nums, i+1, i+2, i+3)\n            m3 = median_of_three(nums, i, i+1, i+3)\n\n            # if the median of the three elements is out of order, swap them\n            if nums[m1] > nums[m2] or (nums[m1] == nums[m2] and nums[m3] > nums[m2]):\n                swap(m1, m2)\n                swaps += 1\n\n        # output the number of swaps\n        print(\"Swaps:\", swaps)\n\n        # if there were no swaps, stop the loop\n        if swaps == 0:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = gap // 1.3\n        min_idx = 0\n        for i in range(1, n-gap):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n        nums[min_idx], nums[gap-1] = nums[gap-1], nums[min_idx]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # initialize variables\n    gap = len(nums)\n    swapped = True\n    i = 0\n    \n    while swapped:\n        swapped = False\n        \n        # calculate the new gap\n        while gap > 1:\n            if i >= gap:\n                gap = int(gap / 1.3)\n            else:\n                gap = int(gap * 1.3)\n        \n        # perform the sorting\n        for j in range(gap, len(nums)):\n            if nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                swapped = True\n        \n        i += 1\n        \n        # print the sorted list after each iteration\n        print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap to the middle of the array\n        for i in range(gap, n):\n            # Swap adjacent elements if they are in the wrong order\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n        # Decrease the gap size\n        gap = gap // 1.3\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    This algorithm has a time complexity of O(n^2) and is not very efficient for large lists.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n    start = 0\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        swapped = False\n\n        for i in range(start, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        start += gap\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    # check if the number is less than 0\n    if n < 0: \n        return \"The number should be positive to be represented as the difference of two squares.\"\n    \n    # check if the number is a perfect square\n    if n == int(n**0.5**2): \n        return \"The number is a perfect square.\"\n    \n    # check if the number is a positive odd integer\n    if n%2 == 1 and n > 2: \n        return \"The number can be represented as the difference of two squares.\"\n    \n    # if none of the above conditions are met, the number cannot be represented as the difference of two squares\n    return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if i == n//i:\n                return True\n            else:\n                return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number can be represented as the difference of two squares\n    if (int(n/2)**2 == n and int(n/2)**2!= n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Use the fact that the difference of two squares is the square of the sum of their squares\n    x = int(n**0.5)\n    y = int(n/x)\n    if x*x + y*y == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Function to check whether the given number can be represented as the difference of two squares or not\n    def check(num):\n        # Calculate the square of the given number\n        num_square = num ** 2\n\n        # Calculate the difference between the square of the given number and the square of n\n        diff_square = (n ** 2) - num_square\n\n        # Return the result of the check\n        return diff_square\n\n    # Check whether the given number can be represented as the difference of two squares or not\n    if check(n) == 0:\n        print(f\"{n} can be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is greater than or equal to 1\n    if n < 1: \n        return \"Number must be greater than or equal to 1\"\n    # square root of n\n    sqrt_n = int(n ** 0.5)\n    # check if the square root is a perfect square\n    for i in range(1, sqrt_n + 1):\n        if i * i == sqrt_n:\n            return \"The number is a difference of two squares\"\n    # if the loop completes without finding a perfect square, the number cannot be a difference of two squares\n    return \"The number cannot be a difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0 and n/i**2 == int(n/i**2):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is odd\n    if n % 2!= 0:\n        return False\n    \n    # divide the number by 2 to get the square of the number\n    square = int(n/2)**2\n    \n    # check if the square is equal to the original number\n    if square == n:\n        return True\n    \n    # if the square is not equal to the original number, it means that the difference of two squares can be represented\n    # by adding the square of the original number to the square of any other number\n    for i in range(2, n):\n        if (square + i**2) == n:\n            return True\n    \n    # if the difference of two squares cannot be represented by any of the given numbers, then return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number can be represented as the difference of two squares\n    if n%4 == 0:\n        square_part = n//4\n        if square_part*square_part == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n is a perfect square or not\n    def isPerfectSquare(num):\n        if num < 2:\n            return True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if n can be represented as the difference of two squares or not\n    def checkDiffSquare(n):\n        # If n is a perfect square\n        if isPerfectSquare(n):\n            return True\n\n        # Calculate the difference of two squares\n        square1 = (n//2)**2\n        square2 = (n - square1)**2\n\n        # Check if the difference is a perfect square\n        if isPerfectSquare(square2):\n            return True\n        else:\n            return False\n\n    if checkDiffSquare(n):\n        print(f\"{n} can be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_index = 0\n    for pattern in patterns:\n        if colors[color_index:color_index+len(pattern)]!= pattern:\n            return False\n        color_index += len(pattern)\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize a variable to store the current pattern\n    current_pattern = ''\n    # loop through each color in the input list\n    for color in colors:\n        # check if the color matches the current pattern\n        if color == patterns[patterns.index(current_pattern)]:\n            # if it does, update the current pattern\n            current_pattern = color\n        else:\n            # if it doesn't, return False\n            return False\n    # if we've looped through all the colors without finding a match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of patterns is the same as the length of colors\n    if len(patterns)!= len(colors):\n        return False\n\n    # Initialize a dictionary to store the frequency of each color\n    freq = {}\n    for color in colors:\n        if color in freq:\n            freq[color] += 1\n        else:\n            freq[color] = 1\n\n    # Iterate over the patterns and compare their frequencies with the ones in the dictionary\n    for pattern in patterns:\n        if freq[pattern[0]] > 0 and freq[pattern[-1]] > 0:\n            # If a pattern is found that matches the frequency of its colors, decrement their frequency\n            for color in pattern:\n                freq[color] -= 1\n                if freq[color] < 0:\n                    return False\n\n    # If all patterns are found and decremented, it means that the colors follow the sequence given by patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of colors and patterns are the same\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Initialize a counter for each color in the colors array\n    color_counters = [0] * len(colors)\n    \n    # Iterate through the patterns array\n    for i in range(len(patterns)):\n        # Get the color at the current position\n        current_color = colors[i]\n        \n        # Increment the counter for the current color\n        color_counters[colors.index(current_color)] += 1\n        \n        # Check if the counter for the current color is greater than the current pattern value\n        if color_counters[colors.index(current_color)] > patterns[i]:\n            return False\n    \n    # If we make it through the entire patterns array without returning False, it means the colors are valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize a variable to store the current color and pattern\n    current_color = None\n    current_pattern = None\n\n    # Loop through the colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # If the current color and pattern match, increment the count\n        if color == pattern:\n            if current_color is None or current_pattern is None:\n                return False\n            if current_color!= color:\n                return False\n            if current_pattern!= pattern:\n                return False\n            current_color = color\n            current_pattern = pattern\n        # If the current color and pattern don't match, reset the count\n        else:\n            if current_color is None or current_pattern is None:\n                return False\n            if current_color!= color:\n                return False\n            if current_pattern!= pattern:\n                return False\n            current_color = None\n            current_pattern = None\n\n    # If all colors and patterns match, check that there are no more colors or patterns\n    return current_color is None and current_pattern is None"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of colors matches the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a dictionary to store the count of each color in the colors list\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n\n    # Loop through the patterns array\n    for pattern in patterns:\n        # Check if the pattern contains all the colors in the colors list\n        if len(pattern)!= len(color_count):\n            return False\n\n        # Check if the pattern matches the colors in the colors list\n        for color in pattern:\n            if color not in color_count or color_count[color] == 0:\n                return False\n            color_count[color] -= 1\n\n    # If we make it through the loop without returning False, it means that the patterns array is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize a variable to keep track of the number of patterns already checked\n    checked = 0\n\n    # Loop through the colors in the given sequence\n    for color in colors:\n        # Loop through the patterns in the given sequence and check if the current color matches the pattern\n        for pattern in patterns:\n            # If the current color matches the pattern, increment the checked variable\n            if color == pattern[0]:\n                checked += 1\n                # If the number of patterns checked equals the number of patterns in the patterns array,\n                # then the sequence is the same as the one given in the patterns array\n                if checked == len(patterns):\n                    return True\n\n    # If the function makes it to this point, it means the sequence is not the same as the one given in the patterns array\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        is_divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): An integer representing the divisor for the elements in the tuples.\n\n    Returns:\n    list: A list of tuples which have all elements divisible by k from the given list of tuples.\n\n    \"\"\"\n\n    # create an empty list to store the tuples\n    result_list = []\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # if the condition is true, append the tuple to the result list\n            result_list.append(tup)\n\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples with all elements divisible by K from a list of tuples.\n    \"\"\"\n    found_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            found_tuples.append(tup)\n    return found_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): An integer value that represents the divisor for the elements in the tuples.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by k from the given list of tuples.\n    \"\"\"\n\n    # Create an empty list to store the tuples that satisfy the condition.\n    result = []\n\n    # Loop through each tuple in the test_list.\n    for tup in test_list:\n        # Create a set to store the elements of the current tuple.\n        tup_set = set(tup)\n\n        # Loop through each element in the set and check if it is divisible by K.\n        for elem in tup_set:\n            if elem % K!= 0:\n                break\n        else:\n            # If the loop completes without finding any undivisible elements, add the tuple to the result list.\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    This function checks if a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(f\"{word} is odd length\")\n        else:\n            print(f\"{word} is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    This function checks whether the length of a word is odd or even.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Check if the length of each word is odd or even\n    for word in words:\n        if len(word) % 2 == 1:\n            return False\n    \n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word[0]) % 2 == 0:\n        return \"Length of the word is even\"\n    else:\n        return \"Length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    # split the string into a list of words\n    words = s.split()\n    # iterate over the words and check if their length is odd or even\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length word.\")\n        else:\n            print(word, \"is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the sentence into words\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd\n            return True\n    return False # if no word has odd length, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n    return \"The length of all the words in the sentence are even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"The word '{word}' has an odd length.\")\n        else:\n            print(f\"The word '{word}' has an even length.\")\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even\")\n        else:\n            print(word, \"is odd\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 0\n    d = 0\n\n    # Loop through the numbers\n    for i in range(1, n + 1):\n        # Calculate the value of a\n        a = (a * 3) // 2\n\n        # Calculate the value of b\n        b = (b * 3) + 1\n\n        # Calculate the value of c\n        c = b - a\n\n        # Calculate the value of d\n        d = a - b\n\n        # Print the tetrahedral number\n        print(a, b, c, d)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    n_tetrahedral = 1\n\n    # Iterate until we reach the nth tetrahedral number\n    for _ in range(n):\n        # Update the values of a, b, c, and d\n        a = (3 * a + b) // 2\n        b = (4 * b + c) // 2\n        c = (2 * c + d) // 2\n        d = (a + b + c) // 2\n\n        # Increment n_tetrahedral by 1\n        n_tetrahedral += 1\n\n    # Return the n-th tetrahedral number\n    return n_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t_n = n * (n + 1) * (n + 2) // 6\n    return t_n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    else:\n        return int(n * (n - 1) * (2 * n - 1) / 6)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (2 * n + 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number as 1\n    tetra = 1\n\n    # Loop n-1 times and calculate the next tetrahedral number\n    for i in range(n-1):\n        # Calculate the sum of all positive integers less than or equal to the current tetrahedral number\n        tetra += sum([i for i in range(1, tetra+1)])\n\n    return tetra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c = 0, 1, 0\n\n    for i in range(n):\n        a, b, c = b, a + b + c, a\n        if i % 2 == 0:\n            print(a)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Function to find the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Function to calculate the nth tetrahedral number\n    def nth_tetrahedral(n):\n        return int((factorial(4*n+1) * factorial(4*n+3)) // factorial(4*n))\n\n    # Call the nth_tetrahedral function\n    return nth_tetrahedral(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 20\n    \n    # Recursive case\n    return tetrahedral_number(n-1) + 5"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula to find the volume of a sphere using the formula V = 4/3 * pi * r^3\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of the sphere using formula V = 4/3 * pi * r^3\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*r**3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char = chr((ascii_sum % 26) + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # converting the string to a list of characters\n    str_list = list(strr)\n\n    # initializing the sum of ASCII values of the characters\n    sum_ASCII = 0\n\n    # iterating through the list of characters\n    for char in str_list:\n        # getting the ASCII value of the character\n        ASCII = ord(char)\n\n        # adding the ASCII value to the sum of ASCII values\n        sum_ASCII = (sum_ASCII + ASCII) % 26\n\n    # converting the sum of ASCII values to a character\n    char_ASCII = chr(sum_ASCII)\n\n    # returning the character\n    return char_ASCII"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0\n    for i in strr:\n        char_value += ord(i)\n    return chr(char_value % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize variable to store the sum of ASCII values of characters in the string\n    sum_ascii = 0\n\n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum_ascii += ord(char)\n\n    # return the character made by adding the ASCII value of all the characters in the string modulo 26\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    char_value = 0\n    for i in strr:\n        char_value += ord(i)\n        count += 1\n        if count == 26:\n            break\n    return chr((char_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize the character variable to an empty string\n    char = ''\n\n    # loop through each character in the string\n    for i in strr:\n        # add the ASCII value of the character to the character variable\n        char += chr(ord(i) + 1)\n\n    # return the character variable\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n):\n        sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(2, n+1):\n        sequence.append(4*sequence[i-1] - sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize variables\n    num = 1\n    sequence = []\n\n    # loop until we have n numbers in the sequence\n    while len(sequence) < n:\n        # check if the number is already in the sequence\n        if num not in sequence:\n            # add the number to the sequence\n            sequence.append(num)\n        # calculate the next number\n        num = 2*num + 1\n\n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    while len(sequence) < n:\n        next_sequence = [0] * len(sequence)\n        for i in range(len(sequence)):\n            if i == 0 or i == len(sequence) - 1:\n                next_sequence[i] = sequence[i] + sequence[i + 1]\n            else:\n                next_sequence[i] = sequence[i - 1] + sequence[i] + sequence[i + 1]\n        sequence = next_sequence\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence\n    sequence = [1, 1]\n\n    # iterate through the sequence n-1 times\n    for i in range(n-2):\n        # add the previous two numbers to the sequence\n        sequence.append(sequence[-1] + sequence[-2])\n\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "The Newman Conway sequence is a sequence of numbers in which each number is the sum of the two preceding numbers, excluding the first two numbers. The sequence goes on until the first negative number is reached. For example, the first few terms of the sequence are: 1, 2, 4, 8, 16, 34, 68, 136, 272, 544, 1088, 2176, 4352, 8704, 17408, 34816, 69632, 139264, 278528, 557056, 1114112, 2228224, 4456448, 8912896, 17825792, 35651584, 71303168, 142606336, 285212672, 570425344, 1140850688, 2281701376, 4563402752, 9126805504, 18253611008, 36507222016, 73014444032, 146028888064, 292057776128, 584115552256, 1168231104512, 2336462209024, 4672924418048, 9345848836096, 18691697672192, 37383395344384, 74766790688768, 149533581377536, 309067162755072, 618134325510144, 1236268651020288, 2472537302040576, 4945074604081152, 9890149208162304, 19780298416324608, 39560596832649216, 79121193665298432, 158242387330596864, 316484774661193728, 632969549322387456, 1265939098644774912, 2531878197289549824, 5063756394579099648, 10127512789158199296, 20255025578316398592, 40510051156632797184, 81020102313265594368, 162040204626531188736, 324080409253062377472, 648160818506124754944, 1296321637012249509888, 2592643274024499019776, 51852865480489980"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formula:\n    \n    surface area = 4 * pi * r^2\n    \n    Args:\n    r (float): radius of the sphere\n    \n    Returns:\n    float: surface area of the sphere\n    '''\n    \n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere using the formula:\n    (4/3) * pi * r^3\n    \n    :param r: radius of the sphere\n    :type r: float\n    \n    :return: surface area of the sphere\n    :rtype: float\n    \"\"\"\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    # Calculate the surface area of a sphere using the formula:\n    # surface area = 4 * \u03c0 * r^2\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\n\nprint(surfacearea_sphere(5)) # output: 530.22"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        # Finding the sqrt of 6n + 1\n        a = int(6*n + 1)**0.5\n        # Finding the integer part of a\n        b = int(a)\n        # Finding the distance between the center and the center of the hexagon\n        c = int(a - b)**2\n        # Calculating the number of steps required to reach the center of the hexagon\n        steps = int(c/2)\n        # Adding the integer part of a to the number of steps\n        steps += b\n        # Returning the final centered hexagonal number\n        return steps\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n\n    # Calculate the position of the nth hexagon\n    pos = (n - 1) * (2 * n - 1)\n\n    # Calculate the position of the hexagon's center\n    center_pos = pos // 6\n\n    # Determine the side length of the hexagon\n    side_length = 2 * pos - 1\n\n    # Calculate the base and top rows of the hexagon\n    base_rows = pos // 2 + 1\n    top_rows = pos - base_rows\n\n    # Calculate the center column of the hexagon\n    center_col = (side_length - 2) // 2 + 1\n\n    # Print the base and top rows\n    print(\" \".join(str(i) for i in range(1, side_length+1)))\n    for i in range(1, top_rows+1):\n        print(\" \".join(str(i) for j in range(center_col-1, center_col+1)))\n        print(\" \".join(str(i) for j in range(center_col-1, center_col+1)))\n    print(\" \".join(str(i) for i in range(1, side_length+1)))\n\n    # Print the center row\n    print(\" \".join(str(i) for i in range(center_pos, center_pos+side_length)))\n\n    # Print the base and top rows again\n    for i in range(1, base_rows+1):\n        print(\" \".join(str(i) for j in range(center_col-1, center_col+1)))\n        print(\" \".join(str(i) for j in range(center_col-1, center_col+1)))\n    print(\" \".join(str(i) for i in range(1, side_length+1)))\n\n    # Calculate the second row of the hexagon\n    second_row = []\n    for i in range(center_pos, center_pos+side_length):\n        if i % 2 == 0:\n            second_row.append(i)\n        else:\n            second_row.append(side_length - i)\n    print(\" \".join(str(i) for i in second_row))\n\n    # Calculate the third row of the hexagon\n    third_row = []\n    for i in range(center_pos, center_pos+side_length):\n        if i % 2 == 1:\n            third_row.append(i)\n        else:\n            third_row.append(side_length - i)\n    print(\" \".join(str(i) for i in third_row))\n\n    # Calculate the fourth row of the hexagon\n    fourth_row = []\n    for i in range(center_pos+1, center_pos+side_length-1):\n        if i % 2 == 0:\n            fourth_row.append(i)\n        else:\n            fourth_row.append(side_length - i)\n    print(\" \".join(str(i) for i in fourth_row))\n\n    # Calculate the fifth row of the hexagon\n    fifth_row = []\n    for i in range(center_pos+1, center_pos+side_length-1):\n        if i % 2 == 1:\n            fifth_row.append(i)\n        else:\n            fifth_row.append(side_length - i)\n    print(\" \".join(str(i) for i in fifth_row))\n\n    # Calculate the sixth row of the hexagon\n    sixth_row = []\n    for i in range(center_pos+2, center_pos+side_length):\n        if i % 2 == 0:\n            sixth_row.append(i)\n        else:\n            sixth_row.append(side_length - i)\n    print(\" \".join(str(i) for i in sixth_row))\n\n    # Calculate the seventh row of the hexagon\n    seventh_row = []\n    for i in range(center_pos+2, center_pos+side_length):\n        if i % 2 == 1:\n            seventh_row.append(i)\n        else:\n            seventh_row.append(side_length - i)\n    print(\" \".join(str(i) for i in seventh_row))\n\n    # Calculate the eighth row of the hexagon\n    eighth_row = []\n    for i in range("
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * centered_hexagonal_number(n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagons = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655,"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Formula for centered hexagonal number\n    # C(n) = 1/2 * (n^2 + 1)\n    return int(1/2 * (n**2 + 1))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    a = 1.5 * (3**(0.5) - 1)\n    b = 0.5 * (3 * a * (3**(0.5) - 1) + 1)\n    return int(n * a + b)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal(n):\n        \"\"\"\n        Helper function to find the nth centered hexagonal number.\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 6\n        else:\n            return 2*centered_hexagonal(n-1) - centered_hexagonal(n-2) + 6\n\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    \n    # Initialize the sequence\n    sequence = [1, 4]\n    for i in range(2, n):\n        sequence.append(3*sequence[i-1] + 1)\n    \n    # Calculate the nth centered hexagonal number\n    return sequence[n-2]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the result variable\n    result = 0\n\n    # Check if n is a positive integer\n    if n <= 0 or not isinstance(n, int):\n        return \"Invalid input\"\n\n    # Calculate the first two centered hexagonal numbers\n    num1 = (n * (3 * n - 1)) / 2\n    num2 = num1 + 1\n\n    # Iterate through the range from 2 to n\n    for i in range(2, n + 1):\n        # Calculate the centered hexagonal number at position i\n        temp = (i * (3 * i - 1)) / 2\n\n        # If the centered hexagonal number is equal to the nth centered hexagonal number, return it\n        if temp == num2:\n            result = temp\n            break\n        else:\n            # If the centered hexagonal number is less than the nth centered hexagonal number, move to the next position\n            num2 = temp\n\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary containing all the key-value pairs from all the input dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary which contains all the keys of the input dictionaries.\n    The function first initializes an empty dictionary to store the merged keys and values.\n    Then, it iterates through the three input dictionaries and merges their keys and values into the merged dictionary.\n    Finally, it returns the merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict.maps[0]"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary\n    containing all the key-value pairs from the three dictionaries. If there is a \n    conflict between the same keys in the input dictionaries, the value from the \n    last dictionary (dict3) will prevail.\n    '''\n    # Merge dictionaries into one\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Create a set of the keys to check for conflicts\n    key_set = set(merged_dict.keys())\n\n    # Check for conflicts between keys in merged_dict and dict1\n    for key in key_set:\n        if key in dict1:\n            # If a conflict is found, update the value in dict3\n            merged_dict[key] = dict3[key]\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = ct.Counter(dict1[key] + dict2[key] + dict3[key])\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                merged_dict[key] = ct.Counter(dict1[key] + dict2[key] + dict3[key])\n            elif key in dict2.keys():\n                merged_dict[key] = ct.Counter(dict1[key] + dict2[key])\n        elif key in dict3.keys():\n            merged_dict[key] = ct.Counter(dict1[key] + dict3[key])\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    \n    # Loop through each dictionary and add each key-value pair to the merged dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    \n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    \n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Use collections.Counter to get the frequency of each element in the list\n    freq = collections.Counter(lst)\n    # Convert the dictionary to a dictionary of lists\n    freq_dict = dict(freq.items())\n    # Return the dictionary of lists\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n\n    freq = collections.Counter(list1)\n\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for elem in list1:\n        freq[elem] += 1\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    closest_num = float('inf')\n\n    for i in range(N, -1, -1):\n        if i < min_num:\n            min_num = i\n            closest_num = i\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # Initialize variables\n    min_diff = float('inf')\n    min_num = float('inf')\n\n    # Loop through all numbers from 1 to N\n    for num in range(1, N+1):\n\n        # Calculate the difference between the current number and n\n        diff = abs(num - N)\n\n        # Update the minimum difference and number if the current one is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Sort the input list\n    nums = sorted(N)\n    \n    # Initialize variables for the closest smaller number and its index\n    smallest = nums[0]\n    smallest_index = 0\n    closest = nums[1]\n    closest_index = 1\n    \n    # Iterate through the sorted list\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            closest = smallest\n            closest_index = smallest_index\n            smallest = nums[i]\n            smallest_index = i\n        elif nums[i] < closest:\n            closest = nums[i]\n            closest_index = i\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower_bound = 1\n    upper_bound = N\n    result = None\n    while True:\n        mid = (lower_bound + upper_bound) // 2\n        if mid == N:\n            return mid\n        elif mid < N:\n            if mid + 1 == N or abs(N - mid) < abs(N - mid + 1):\n                result = mid + 1\n                lower_bound = mid + 1\n            else:\n                upper_bound = mid\n        else:\n            if mid - 1 == N or abs(N - mid) < abs(N - mid - 1):\n                result = mid - 1\n                upper_bound = mid - 1\n            else:\n                lower_bound = mid"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while True:\n        if num < 0:\n            return N\n        num -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for num in range(1, N+1):\n        if abs(num - N) < closest:\n            closest = abs(num - N)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the number of digits in N\n    num_digits = len(str(N))\n\n    # Initialize variables\n    smallest_diff = float('inf')\n    closest_num = N\n\n    # Loop through all possible digits to find the closest smaller number\n    for i in range(1, 10):\n        # Calculate the current number with the i-th digit replaced with the i\n        new_num = N\n        new_num = str(int(new_num.replace(str(i), str(i-1))))\n\n        # Calculate the difference between the original number and the new number\n        diff = abs(N - int(new_num))\n\n        # If the new number is smaller, update the closest number and the smallest difference\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_num = new_num\n\n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n == 0:\n            return n\n        if abs(n) < abs(N):\n            return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Returns the smallest number N that is greater than n.\n    \"\"\"\n    smallest_num = None\n    for num in range(N+1):\n        if smallest_num is None or abs(num-N) < abs(smallest_num-N):\n            smallest_num = num\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create a list of numbers from 1 to N\n    nums = [i for i in range(1, N+1)]\n    # find the minimum number in the list\n    min_num = min(nums)\n    # calculate the difference between the minimum number and N\n    diff = N - min_num\n    # find the number that is the closest smaller number than N\n    if diff == 1:\n        return min_num\n    elif diff == 0:\n        return N\n    else:\n        return N - diff"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest word in the list.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest = 0\n    current = ''\n    # loop through the list of words\n    for word in list1:\n        # check if the current word is longer than the longest word\n        if len(word) > longest:\n            # update the longest word and its length\n            longest = len(word)\n            current = word\n    # return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables to keep track of the longest word and its length\n    longest_word = ''\n    length_longest_word = 0\n    \n    # loop through each word in the list\n    for word in list1:\n        # if the length of the current word is greater than the current longest word, update the longest word and its length\n        if len(word) > length_longest_word:\n            longest_word = word\n            length_longest_word = len(word)\n    \n    # return the length of the longest word\n    return length_longest_word"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(sub_str, \"is present in\", str1)\n    else:\n        print(sub_str, \"is not present in\", str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False\n    else:\n        print('Both inputs must be lists of strings.')\n        return None"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        raise ValueError(\"The input must be a list of string values.\")\n    for string in str1:\n        if string in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return False\n    for string in str1:\n        if string.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    elif n % 2!= 0 and n > 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Calculate the area of a square using the formula: area = side * side\n    side = 100\n\n    # Check if the area of the square is greater than or equal to the given number\n    if n >= side * side:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n/2)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is divisible by 10\n    if n % 10 == 0:\n        return \"undulating\"\n    else:\n        return \"not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 1 or n > 1000:\n        return \"Invalid input. Please enter a number between 1 and 1000.\"\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return \"The given number is not undulating.\"\n        return \"The given number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is odd or even\n    if n % 2 == 0: \n        return False\n    else: \n        # Initialize the sum of squares of all even numbers from 1 to n\n        sum_of_squares = 0\n        for i in range(2, n+1, 2): \n            sum_of_squares += i**2\n        return sum_of_squares % n == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, a and b. \n    It calculates the value of a to the power of b and returns the result.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i, item in enumerate(test_list):\n        if item[1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (i.e., the second element of each tuple)\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the first tuple (i.e., the first element of the tuple)\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=lambda x: x[1][1])[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list.index(sorted_list[0])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: (test_list[i][1], i))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the minimum length variable to infinity\n    min_length = float('inf')\n    # loop through each list in the list of lists\n    for lst in lst:\n        # calculate the length of the current list\n        length = len(lst)\n        # update the minimum length if the length is smaller than the current minimum length\n        if length < min_length:\n            min_length = length\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = lst[0][0]\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = 10000  # initialize the minimum length to a large number\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Initialize the length variable with the length of the first list\n    length = len(lst[0])\n    \n    # Iterate through the rest of the lists in the list\n    for i in range(1, len(lst)):\n        # Compare the length of the current list with the length of the previous list\n        if len(lst[i]) < length:\n            length = len(lst[i])\n    \n    # Return the length of the smallest list\n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = 999999999\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sub_list in lst:\n        sub_len = len(sub_list)\n        if sub_len < min_len:\n            min_len = sub_len\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize a variable to store the length of the smallest list in the list\n    min_length = len(lst[0])\n    # Iterate over each sub-list in the list\n    for sub_list in lst:\n        # Update the length of the smallest list if necessary\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = 1  # start with 1 as there is always 1 divisor\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is a list, recursively call the function on the list and update the frequency of each element in the dictionary\n        if isinstance(element, list):\n            for sub_element in element:\n                if sub_element in freq_dict:\n                    freq_dict[sub_element] += 1\n                else:\n                    freq_dict[sub_element] = 1\n        # If the element is not a list, increment its frequency in the dictionary\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    \n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the input list\n    flattened = [item for sublist in list1 for item in sublist]\n    \n    # Iterate over the flattened list and count the frequency of each element\n    for elem in flattened:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    \n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    total = 1\n    for num in numbers:\n        total *= num\n    \n    # divide the total by the length of the list\n    result = total / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    result = result / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_digits = \"01\"\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string = binary_digits[remainder] + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary = str(remainder) + binary\n    # Remove leading zeros\n    while binary.startswith('0') and len(binary) > 1:\n        binary = binary[1:]\n    # Return binary number as a string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    binary.reverse()\n    return \"\".join(binary)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize an empty list to store the binary digits\n    binary_digits = []\n\n    # loop through each bit of the decimal number, starting from the least significant bit\n    for bit in bin(n)[2:]:  # ignore the \"0b\" prefix and start at the second bit\n        # if the bit is a 1, append a 1 to the binary digits list\n        if bit == '1':\n            binary_digits.append('1')\n        # otherwise, append a 0\n        else:\n            binary_digits.append('0')\n\n    # reverse the list to get the correct order of digits\n    binary_digits = list(reversed(binary_digits))\n\n    # join the digits into a single string and return it\n    return ''.join(binary_digits)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and reverse it\n    num_str = str(num)[::-1]\n    \n    # Initialize variables to keep track of current palindrome and digits in the palindrome\n    palindrome = num_str\n    palindrome_digits = []\n    \n    # Iterate through the digits of the palindrome and check if they are less than the original number\n    for digit in palindrome:\n        if int(digit) < num:\n            break\n    \n    # If the digit found is less than the original number, we need to increment the digit and reverse the palindrome\n    if int(digit) == num:\n        palindrome_digits.append(int(digit))\n        palindrome = palindrome[::-1]\n        \n        # Iterate through the digits of the palindrome and check if they are less than the original number\n        for digit in palindrome:\n            if int(digit) < num:\n                break\n        \n        # If the digit found is equal to the original number, we need to increment the next digit\n        if int(digit) == num:\n            palindrome_digits.append(int(digit) + 1)\n        else:\n            palindrome_digits.append(int(digit))\n            \n    # Convert the palindrome digits back to an integer and add 1 to get the next smallest palindrome\n    next_smallest_palindrome = int(''.join(str(digit) for digit in palindrome_digits)) + 1\n    \n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = 10**(len(str(num))-1)\n    m = 10**(len(str(num))+1)\n    min_num = min(n, m)\n    \n    for i in range(1, 10):\n        current_num = num*10 + i\n        if current_num >= min_num:\n            return current_num\n    \n    return min_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def find_next_smallest_palindrome(num):\n        if is_palindrome(num + 1):\n            return num + 1\n        else:\n            return find_next_smallest_palindrome(num + 1)\n\n    next_num = find_next_smallest_palindrome(num)\n    if next_num > sys.maxsize or next_num < -sys.maxsize:\n        return None\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Function to check if a number is palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    next_num = num\n    while True:\n        next_num += 1\n        if is_palindrome(next_num):\n            return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Function to check if a number is palindrome or not\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Function to find the next smallest palindrome\n    def find_next_palindrome(num):\n        next_num = num\n        while True:\n            if is_palindrome(next_num):\n                return next_num\n            next_num += 1\n\n    # Find the next smallest palindrome\n    next_palindrome = find_next_palindrome(num)\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Remove all non-numeric characters from the input number\n    num = ''.join(filter(str.isdigit, str(num)))\n\n    # Convert the input number to a list of integers\n    num_list = list(map(int, num))\n\n    # Reverse the list and convert it back to a string\n    reversed_num = ''.join(str(x) for x in num_list[::-1])\n\n    # Check if the reversed number is greater than the original number\n    if int(reversed_num) > int(num):\n        # Add a zero at the beginning of the reversed number to make it a palindrome\n        reversed_num = '0' + reversed_num\n\n    # Convert the reversed number back to an integer and return it\n    return int(reversed_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # convert the integer to a string\n    str_num = str(num)\n\n    # reverse the string and convert it back to an integer\n    rev_num = int(str_num[::-1])\n\n    # check if the reverse is greater than the original number\n    if rev_num > num:\n        return rev_num\n    else:\n        # iterate through all the digits in the original number\n        for i in range(len(str_num)):\n            # get the digit and its index\n            digit = str_num[i]\n            index = len(str_num) - i - 1\n\n            # check if the digit is odd\n            if int(digit) % 2 == 1:\n                # create a list of all the possible palindromes of this digit\n                palindromes = [int(x) * 10**(index) for x in range(10)]\n\n                # check if any of them are greater than the original number\n                for palindrome in palindromes:\n                    if palindrome > num:\n                        return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    left, right = 0, len(num_str) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        if is_palindrome(int(num_str[:mid])) and is_palindrome(int(num_str[mid+1:])):\n            return int(num_str[:mid]) + int(num_str[mid+1:])\n        \n        if int(num_str[left:mid]) < int(num_str[mid+1:]):\n            left = mid + 1\n        else:\n            right = mid\n            \n    return 0"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_int = sys.maxsize  # This is used to store the maximum value of an integer in Python\n    palindromes = [num]  # This list will store all the palindromes of the specified integer\n    is_palindrome = True\n\n    while is_palindrome:\n        palindrome = 0\n        temp = num\n\n        while temp > 0:\n            remainder = temp % 10\n            palindrome = palindrome * 10 + remainder\n            temp //= 10\n\n        if palindrome not in palindromes:\n            is_palindrome = False\n            break\n\n        num = palindrome\n\n    next_palindrome = 1\n    while next_palindrome < max_int and (next_palindrome * next_palindrome) < num:\n        next_palindrome *= 10\n\n    if (next_palindrome * next_palindrome) == num:\n        return next_palindrome\n    else:\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        n = str(num)\n        if int(n) == int(n[::-1]):\n            return int(n)\n        num += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Ensure k is a positive integer\n    if k < 1:\n        return None\n    # Find the length of the array\n    n = len(arr)\n    # If k is equal to or greater than the length of the array, return None\n    if k > n:\n        return None\n    # Use binary search to find the kth element\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] == k:\n            return mid\n        elif arr[mid-1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the given array is empty\n    if not arr:\n        return None\n    \n    # Initialize two pointers i and j to 1\n    i = 1\n    j = len(arr)\n    \n    # While the pointers i and j are within the array\n    while i <= j:\n        # Calculate the midpoint of the array\n        mid = (i + j) // 2\n        \n        # If the kth element is found, return the mid element\n        if mid == k:\n            return arr[mid - 1]\n        \n        # If the kth element is greater than the mid element, we need to look to the left\n        elif mid < k:\n            i = mid + 1\n        \n        # If the kth element is smaller than the mid element, we need to look to the right\n        else:\n            j = mid - 1\n    \n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # check if k is valid\n    if k < 1 or k > n:\n        return None\n    # find the first k elements\n    for i in range(k - 1):\n        j = i + 1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        arr[i], arr[j - 1] = arr[j - 1], arr[i]\n    # return the kth element\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Initialize the left and right pointers\n    left = 1\n    right = len(arr)\n    \n    # Initialize the count of elements\n    count = 1\n    \n    # Loop until the count is equal to k\n    while count!= k:\n        # If the count is less than k, move the left pointer to the right\n        if count < k:\n            left += 1\n            \n        # If the count is greater than k, move the right pointer to the left\n        else:\n            right -= 1\n        \n        # Update the count\n        count = right - left\n    \n    # Return the element at the kth position\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # convert k to 0-based indexing\n    k -= 1\n    \n    # initialize two pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # loop until the pointers meet\n    while left <= right:\n        # find the midpoint\n        mid = (left + right) // 2\n        \n        # check if the midpoint is the kth element\n        if mid == k:\n            return arr[mid]\n        \n        # if the midpoint is greater than the kth element,\n        # search in the right half of the array\n        elif mid < k:\n            left = mid + 1\n            \n        # if the midpoint is less than the kth element,\n        # search in the left half of the array\n        else:\n            right = mid - 1\n            \n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Create a boolean list where all elements are initially True\n    is_prime = [True] * (len(arr) + 1)\n    is_prime[0] = is_prime[1] = False\n\n    # Sieve of Eratosthenes algorithm to mark all non-prime numbers\n    for i in range(2, int(len(arr)**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, len(arr) + 1, i):\n                is_prime[j] = False\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate through the array and count the number of primes\n    for num in arr:\n        if is_prime[num]:\n            count += 1\n            if count == k:\n                return num"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    for i in range(len(word)):\n        if i > 0 and word[i] == \"_\":\n            camel += word[i].upper()\n        else:\n            camel += word[i].lower()\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower() if i == 0 else word[i].upper() for i in range(1, len(word))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            if word[i] == '_':\n                camel_word += word[i+1].upper()\n            else:\n                camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into list of words\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words with underscores\n    return '_'.join(words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Initialize variables\n    camel_case = \"\"\n    word = word.lower()\n    # Iterate over each character in the word\n    for char in word:\n        # If the character is an uppercase letter, append the space and capitalize the letter\n        if char.isupper():\n            camel_case += \" \" + char.upper()\n        # If the character is a lowercase letter, append it to the camel case string\n        else:\n            camel_case += char\n    # Remove the extra space at the end of the camel case string\n    camel_case = camel_case.rstrip()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    if not word or word.isupper():\n        return word\n\n    parts = word.split('_')\n    result = parts[0]\n    for i in range(1, len(parts)):\n        result += parts[i].capitalize()\n\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    return components[0] + ''.join(x.capitalize() for x in components[1:])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m)+eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # If n is odd, we need to find the sum of n-1 cubed and m cubed\n    if n % 2 == 1:\n        return n-1**3 + m**3\n    # If n is even, we need to find the sum of n cubed and m-1 cubed\n    else:\n        return n**3 + (m-1)**3"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1:\n        return m\n    else:\n        # Recursive case\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    \n    if n == 1 or m == 1:\n        return 1\n    \n    if n == m:\n        return 2**n - 1\n    \n    if n % 2 == 0:\n        return (eulerian_num(n-1, m) + eulerian_num(n-1, m-1)) % (2**n - 1)\n    else:\n        return (eulerian_num(n-1, m-1) + eulerian_num(n-1, m)) % (2**n - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1: \n        return 1\n    else: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return m\n    elif n == 1:\n        return (2*m - 1) // 2\n    else:\n        return (m + eulerian_num(n-1, m)) % (2*m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row of the matrix with 1's\n    first_row = [1]*m\n\n    # Initialize the first column of the matrix with 1's\n    first_col = [1]*n\n\n    # Create a 2D array to store the result\n    result = [[0]*m for i in range(n)]\n\n    # Fill the result array using the recurrence relation\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                if j == 0:\n                    result[i][j] = 0\n                elif j == m-1:\n                    result[i][j] = first_col[j-1]\n                else:\n                    result[i][j] = first_col[j-1] + first_col[j+1]\n            elif i == n-1:\n                if j == 0:\n                    result[i][j] = first_row[j+1]\n                elif j == m-1:\n                    result[i][j] = first_row[j-1]\n                else:\n                    result[i][j] = first_row[j-1] + first_row[j+1]\n            else:\n                if j == 0:\n                    result[i][j] = first_row[j+1] + first_col[j+1]\n                elif j == m-1:\n                    result[i][j] = first_row[j-1] + first_col[j-1]\n                else:\n                    result[i][j] = first_row[j-1] + first_col[j-1] + first_row[j+1] + first_col[j+1]\n\n    # Return the last element of the last row\n    return result[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the variables\n    d = 0\n    a = 1\n    a_n = 1\n    a_nm1 = 0\n\n    # check if n and m are positive integers\n    if not (isinstance(n, int) and isinstance(m, int)):\n        print(\"n and m must be positive integers.\")\n        return\n\n    # check if m is greater than n\n    if m <= n:\n        print(\"m must be greater than n.\")\n        return\n\n    # find the first term of the series\n    for i in range(1, n+1):\n        d = i + m - 1\n        a_n = (a * d) // (i - 1)\n        a_nm1 = (a_n * i) // (m - 1)\n        a = a_nm1 + a_n\n\n    # print the final result\n    print(\"Eulerian number a(n, m) is:\", a)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    # Initialize variables\n    dp = [[1] * m for _ in range(n + 1)]\n\n    # Fill the first row with 1\n    for i in range(1, m + 1):\n        dp[0][i - 1] = 1\n\n    # Fill the rest of the matrix\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j - 1] = dp[i - 1][j] + dp[i][j - 1]\n\n    # Return the value of the last element of the matrix\n    return dp[n][m - 1]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in `sorted()` function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of the input list\n    for sublist in input_list:\n        # sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Append the list to the tuple\n    new_tup = new_list + test_tup\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the list to the tuple\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Check if the input is a list or a tuple\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        # Append the given list to the given tuples\n        test_tup = test_tup + tuple(test_list)\n        # Return the updated tuple\n        return test_tup\n    else:\n        # Raise an error if the input is not a list or a tuple\n        raise TypeError(\"Input must be a list and a tuple\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuples\n    test_list = tuple(test_list) + test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new list to append the tuples\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Add the list to the tuple using the extend() method\n    test_tup.extend(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n            \n    while len(num1) > 0:\n        merged_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        merged_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        merged_list.append(heapq.heappop(num3))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Merge num1 and num2 into a single sorted list\n    merged = sorted(num1 + num2)\n\n    # Merge num3 and merged into a single sorted list\n    sorted_list = sorted(num3 + merged)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # merge the three lists\n    merged_list = []\n    for i in range(len(num1)):\n        merged_list.append(num1[i])\n        if i < len(num2):\n            merged_list.append(num2[i])\n        if i < len(num3):\n            merged_list.append(num3[i])\n    # sort the merged list\n    merged_list.sort()\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, -heapq.heappop(num1))\n    heapq.heappush(merged_list, -heapq.heappop(num2))\n    while num3:\n        if -heapq.heappop(num3) <= -heapq.heappop(merged_list):\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(merged_list))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Combine three lists into one\n    combined_list = num1 + num2 + num3\n\n    # Use a max heap to sort the combined list\n    heapq.heapify(combined_list)\n\n    # Combine the sorted list into a single sorted list\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # initialize the heap with the three lists\n    heap1 = [-x for x in num1]\n    heap2 = [-x for x in num2]\n    heap3 = [-x for x in num3]\n\n    # merge the heaps using the merge heaps algorithm\n    heap = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] < heap2[0] or (heap1[0] == heap2[0] and heap1[1] < heap2[1]):\n            if heap1[0] < heap3[0] or (heap1[0] == heap3[0] and heap1[1] < heap3[1]):\n                heap.append(heap1.pop(0))\n            elif heap2[0] < heap3[0] or (heap2[0] == heap3[0] and heap2[1] < heap3[1]):\n                heap.append(heap2.pop(0))\n            else:\n                heap.append(heap3.pop(0))\n        else:\n            if heap2[0] < heap3[0] or (heap2[0] == heap3[0] and heap2[1] < heap3[1]):\n                heap.append(heap2.pop(0))\n            elif heap1[0] < heap3[0] or (heap1[0] == heap3[0] and heap1[1] < heap3[1]):\n                heap.append(heap1.pop(0))\n            else:\n                heap.append(heap3.pop(0))\n    \n    # concatenate the remaining heaps into a single sorted list\n    sorted_list = [heap1[0], heap2[0], heap3[0]]\n    for i in range(1, len(heap)):\n        sorted_list.append(heap[i][0])\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Convert the input lists to sets to remove duplicates\n    num1_set = set(num1)\n    num2_set = set(num2)\n    num3_set = set(num3)\n\n    # Merge the sets to get a single list\n    merged_set = num1_set.union(num2_set).union(num3_set)\n\n    # Convert the merged set back to a sorted list\n    merged_list = list(merged_set)\n\n    # Sort the merged list using heap sort\n    heapq.heapify(merged_list)\n    sorted_list = [heapq.heappop(merged_list) for _ in range(len(merged_list))]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # merge two lists into a single list\n    merged = num1 + num2\n\n    # merge the two merged lists with the third list\n    return merge(merged, num3)\n\ndef merge(lst1, lst2):\n    # merge two sorted lists into a single sorted list\n    merged = []\n    i = j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged.append(lst1[i])\n            i += 1\n        else:\n            merged.append(lst2[j])\n            j += 1\n    merged += lst1[i:]\n    merged += lst2[j:]\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list using heapq\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the lists to sets to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # merge the three sets into a single set\n    merged_set = num1.union(num2).union(num3)\n\n    # convert the merged set back to a list and sort it\n    sorted_list = sorted(list(merged_set))\n\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in s]\n\n    # Find the length of the string\n    length = len(bits)\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the rotations of the binary string\n    for i in range(n):\n        # Shift all bits to the left by one position\n        for j in range(length-1, 0, -1):\n            bits[j] = bits[j-1]\n        # Set the first bit to 1\n        bits[0] = 1\n\n        # Count the number of odd bits in the list of bits\n        count += sum([bit for bit in bits if bit % 2 == 1])\n\n    # Return the count of odd bits\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    # initialize variables\n    num_odd = 0\n    index = 0\n    \n    # loop through each character in the string\n    for char in s:\n        # convert character to integer\n        num = int(char)\n        \n        # check if the number is odd\n        if num % 2!= 0:\n            # increment the odd count\n            num_odd += 1\n        \n        # rotate the number by one position\n        num = num >> 1\n        \n        # check if the number is odd again\n        if num % 2!= 0:\n            # increment the odd count\n            num_odd += 1\n        \n        # rotate the number by one position again\n        num = num >> 1\n        \n        # check if the number is odd again\n        if num % 2!= 0:\n            # increment the odd count\n            num_odd += 1\n        \n        # rotate the number by one position again\n        num = num >> 1\n        \n        # check if the number is odd again\n        if num % 2!= 0:\n            # increment the odd count\n            num_odd += 1\n        \n        # check if the index is equal to the given number of times\n        if index == n-1:\n            # exit the loop\n            break\n        \n        # increment the index\n        index += 1\n    \n    # return the odd count\n    return num_odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return odd_Equivalent(s, n // 2) + odd_Equivalent(s + s, n // 2)\n    else:\n        count = 0\n        for i in range(n):\n            count += s.count('1')\n            s = s + s[::-1]\n        return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert the binary string to a list of integers\n    s = [int(i) for i in list(s)]\n\n    # initialize the count to zero\n    count = 0\n\n    # rotate the list of integers n times\n    for i in range(n):\n        s.insert(0, s.pop())\n\n    # loop through the list and count the odd numbers\n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize the result variable\n    result = 0\n\n    # initialize a counter for even digits\n    even_count = 0\n\n    # loop through the binary string s\n    for i in range(len(s)):\n        # if the current digit is even\n        if s[i] == '0':\n            # increment the even_count\n            even_count += 1\n        else:\n            # if the even_count is odd, increment the result variable\n            if even_count % 2 == 1:\n                result += 1\n            # reset the even_count\n            even_count = 0\n\n        # rotate the binary string s by n positions\n        if i >= n-1:\n            # append the first digit of s to the end of the new binary string\n            new_s = s[i]\n        else:\n            # append the current digit to the new binary string\n            new_s = s[i] + s[i+1]\n\n        # update the binary string s\n        s = new_s\n\n    # return the result\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_s = list(s)\n    for _ in range(n):\n        binary_s.append(binary_s.pop(0))\n    odd_count = sum(1 for b in binary_s if b == \"1\")\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # convert binary string to list of digits \n    binary = [int(i) for i in list(s)] \n    # initialize count to zero \n    count = 0 \n    # rotate the binary string n times \n    for i in range(n): \n        # append the last digit to the front of the list \n        binary.insert(0, binary.pop()) \n    # iterate over the rotated list and count the odd digits \n    for i in binary: \n        if i%2!=0: \n            count+=1 \n    # return the count of odd digits \n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    s = list(s)\n    for i in range(n):\n        s.append(s.pop(0))\n    for num in s:\n        if int(num) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    # initialize variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # rotate the binary string n times\n    for _ in range(n):\n        for k in range(len(s)//2):\n            temp = s[i]\n            s[i] = s[j]\n            s[j] = temp\n        \n        i += 1\n        j += 1\n    \n    # count the number of odd values in the rotated binary string\n    for char in s:\n        if int(char) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common_elements = set()\n    \n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list and add it to the common elements set\n        for element in lst:\n            common_elements.add(element)\n    \n    # Return the common elements set as a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # initialize an empty set to store common elements\n    common = set()\n    # loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist\n        for elem in sublist:\n            # add the element to the common set if it is not already present\n            if elem not in common:\n                common.add(elem)\n    # convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Convert nestedlist to a set to remove duplicates\n    set_nestedlist = set(nestedlist)\n\n    # Initialize an empty list to store common elements\n    common_elements = []\n\n    # Iterate through the set of nestedlist elements\n    for item in set_nestedlist:\n        # Count the number of occurrences of the item in the list\n        count = sum(1 for nestedlist_item in nestedlist if item in nestedlist_item)\n        # If the count is greater than 1, then add the item to the common_elements list\n        if count > 1:\n            common_elements.append(item)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(sum(nestedlist, []))\n    set2 = set()\n\n    for sublist in nestedlist:\n        set2.update(sublist)\n\n    return set1.intersection(set2)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_set = set()\n    for item in nestedlist:\n        common_set.update(set(item))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common = set()\n    # loop through each element in the nested list\n    for elem in nestedlist:\n        # loop through each element in the nested list\n        for other in nestedlist:\n            # check if the two elements are equal\n            if elem == other:\n                # add the element to the common set\n                common.add(elem)\n    # convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Loop through each list in the nested list\n    for item in nestedlist:\n        # If the list is not an empty list, loop through each item in the list\n        if item:\n            for i in item:\n                # Add the item to the common set if it is already in the list\n                if i in common:\n                    common.remove(i)\n    \n    # Convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_elements = set()\n    # Iterate through the nested lists and add the common elements to the set\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    # Return the common elements in a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                if nestedlist[j] not in common_elements:\n                    common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    # Remove leading and trailing whitespace from the input string\n    text = text.strip()\n\n    # Check if the string can be converted to an integer without raising an exception\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in range(len(list1)):\n            if len(list1[i])!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Check whether the list is empty or not\n    if not list1:\n        return True\n    # Check whether all the dictionaries in the list are empty or not\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    # Loop through each dictionary in the list\n    for dictionary in list1:\n        # Check if the dictionary is empty\n        if not dictionary:\n            # If it is, return False (all dictionaries are empty)\n            return False\n    # If all dictionaries are not empty, return True (at least one dictionary is not empty)\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries as an input and returns True if all dictionaries are empty, False otherwise.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        if isinstance(num, int):\n            result = result * 10 + num\n        else:\n            return None\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Define an empty integer variable to store the sum of the tuple elements\n    result = 0\n    \n    # Loop through each element in the tuple\n    for num in nums:\n        # Add the current element to the sum variable\n        result += num\n        \n    # Return the final sum\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        if isinstance(num, int) and num > 0:\n            result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums)!= tuple:\n        raise TypeError(\"Input must be a tuple of integers\")\n    if len(nums) == 0:\n        raise ValueError(\"Tuple must not be empty\")\n    for num in nums:\n        if type(num)!= int or num < 0:\n            raise ValueError(\"All integers must be positive\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n\n    :param nums: A tuple of positive integers.\n    :return: An integer.\n    \"\"\"\n    # Convert the tuple to a list of integers\n    nums = list(nums)\n\n    # Convert the list of integers to a single integer\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    # Loop through each sublist of the input list\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Try to convert the element to a float\n            try:\n                element = float(element)\n            # If the conversion fails, leave it as is\n            except ValueError:\n                pass\n    # Return the modified list of lists\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for item in test_list:\n        # If the element is convertible to a float, convert it to a float and store it in the same list\n        if isinstance(item, (int, float, complex)):\n            if isinstance(item, complex):\n                item = float(item.real) + float(item.imag) * 1j\n            else:\n                item = float(item)\n        # If the element is not convertible to a float, append it to a new list as a string\n        else:\n            new_list = []\n            for subitem in item:\n                if isinstance(subitem, (int, float, complex)):\n                    if isinstance(subitem, complex):\n                        subitem = float(subitem.real) + float(subitem.imag) * 1j\n                    else:\n                        subitem = float(subitem)\n                new_list.append(str(subitem))\n            item = new_list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                if element.lower() == 'nan':\n                    element = float('nan')\n                elif element.lower() == 'inf':\n                    element = float('inf')\n                elif element.lower() == '-inf':\n                    element = float('-inf')\n                else:\n                    element = float(element)\n            else:\n                element = float(element)\n            sublist[sublist.index(element)] = element\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                try:\n                    float(str(item))\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                if isinstance(test_list[i][j], str):\n                    test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(' ')\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Convert the string to a list of characters using the split() function\n    chars = list(string)\n\n    # Initialize an empty list to store the resulting words\n    words = []\n\n    # Initialize a variable to store the current index of the character list\n    index = 0\n\n    # Loop through the characters in the list\n    while index < len(chars):\n        # If the current character is a space, add the current word to the list and reset the word variable\n        if chars[index] =='':\n            words.append(''.join(chars[index:]))\n            index += 1\n        # Otherwise, move on to the next character in the list\n        else:\n            index += 1\n\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # split the string on the space character\n    words = string.split()\n    # convert the words to a list of strings\n    result = [word for word in words]\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character\n    words = string.split() \n    # Return the list of words\n    return words "
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    # Find the number of occurrences of the first element\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[0]:\n            count += 1\n        else:\n            break\n\n    # If the number of occurrences is 1, return the first element\n    if count == 1:\n        return arr[0]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Find the element with frequency 1 in the dictionary\n    for i in freq:\n        if freq[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array as input and returns the element that appears only once.\n    '''\n\n    # Initialize a hash table to store the indices of each element in the array\n    hash_table = {}\n\n    # Traverse through the array and store the indices of each element in the hash table\n    for i in range(len(arr)):\n        if arr[i] in hash_table:\n            hash_table[arr[i]] = None\n        else:\n            hash_table[arr[i]] = i\n\n    # Iterate through the hash table and find the element that appears only once\n    for key, value in hash_table.items():\n        if value is not None:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[arr.index(arr[i])]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Find the first element that appears only once in the array\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            break\n\n    # Find the element that appears only once\n    for j in range(i + 1, len(arr)):\n        if arr[j] == arr[i]:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        # If the count of the element is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the element is not in the dictionary yet, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary and find the element with a count of 1\n    for num, count in count_dict.items():\n        if count == 1:\n            return num\n\n    # If no element with a count of 1 is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for num in arr:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize a set to store unique elements of the array\n    unique_set = set()\n    # Traverse the array and add unique elements to the set\n    for i in range(n):\n        unique_set.add(arr[i])\n    # Traverse the set and find the element that appears only once\n    for num in unique_set:\n        count = 0\n        # Traverse the array and count the occurrences of each element\n        for i in range(n):\n            if num == arr[i]:\n                count += 1\n        # If the count is 1, return the element\n        if count == 1:\n            return num\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples.\n    '''\n    # initialize variables to store the minimum and maximum absolute values\n    min_val = float('inf')\n    max_val = float('-inf')\n    max_product = float('-inf')\n    # loop through the list of tuples\n    for tup in list1:\n        # loop through the tuple to get the absolute values of all the numbers\n        for num in tup:\n            # update the minimum and maximum absolute values\n            min_val = min(min_val, num)\n            max_val = max(max_val, num)\n            # calculate the product of the absolute values and update the maximum product\n            product = abs(min_val) * abs(max_val)\n            max_product = max(max_product, product)\n    # return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum absolute product of pairs of numbers in a list of tuples.\n\n    Parameters:\n    lst (list): A list of tuples, where each tuple contains two numbers.\n\n    Returns:\n    int: The maximum absolute product of pairs of numbers in a list of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    temp_product = 1\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            temp_product *= abs(list1[i][0]) * abs(list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    # create a dictionary to store the products of pairs of numbers\n    products = {}\n    # loop through the list and for each tuple, calculate the products\n    for tup in lst:\n        # calculate the product of the first and second elements in the tuple\n        product = tup[0] * tup[1]\n        # calculate the absolute value of the product\n        abs_product = abs(product)\n        # add the absolute product as a key to the dictionary with the tuple as the value\n        products[tuple(tup)] = abs_product\n    # loop through the dictionary and find the maximum value\n    max_value = max(products.values())\n    # loop through the dictionary and find the keys with the maximum value\n    max_keys = [key for key in products if products[key] == max_value]\n    # initialize the maximum product to be zero\n    max_product = 0\n    # loop through the keys and find the pair of numbers with the maximum absolute product\n    for key in max_keys:\n        # find the first and second elements of the key and calculate the product\n        first, second = key\n        product = first * second\n        # calculate the absolute value of the product\n        abs_product = abs(product)\n        # update the maximum product if the absolute product is greater than the current maximum\n        if abs_product > max_product:\n            max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Find the maximum absolute product of pairs of numbers within each tuple\n    max_products = [0, 0]\n    for tuple1 in list1:\n        max1, max2 = max_products\n        max_products = [max(abs(x1 * x2), max1, max2) for x1, x2 in zip(tuple1, max_products)]\n\n    # Find the maximum absolute product of pairs of numbers in the list\n    max_product = max_products[0]\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers and is_prime(i) and is_prime(sum(i, 1)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nprint(sum_amicable_numbers(10000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Define a function to check if a number is a prime number\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to calculate the sum of two numbers\n    def sum_of_two_numbers(num1, num2):\n        \"\"\"\n        Calculate the sum of two numbers.\n        \"\"\"\n        return num1 + num2\n\n    # Initialize the sum variable to zero\n    amicable_sum = 0\n\n    # Iterate over the numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is prime\n        if is_prime(i):\n            # Check if the number is also an amicable number\n            amicable_sum += i\n            j = i\n            while j <= limit and i!= j:\n                if sum_of_two_numbers(i, j) == j and is_prime(j):\n                    amicable_sum += j\n                j += 1\n\n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def is_amicable(num):\n        \"\"\"\n        Helper function to check if a number is amicable.\n        \"\"\"\n        def sum_of_divisors(n):\n            \"\"\"\n            Helper function to find the sum of all divisors of a number.\n            \"\"\"\n            sum_div = 0\n            for i in range(1, int(n**0.5)+1):\n                if n % i == 0:\n                    sum_div += i + n//i\n            return sum_div\n        if num < 2:\n            return False\n        return sum_of_divisors(num) == num\n\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if i > 1:\n            if i == sum_of_amicable_numbers:\n                sum_of_amicable_numbers += i\n            elif i == sum_of_amicable_numbers + 2:\n                sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(n):\n    sum_of_proper_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_proper_divisors += i\n        elif i!= 1:\n            sum_of_proper_divisors += n // i\n    return n == sum_of_proper_divisors\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(2, limit):\n        if is_amicable(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(sum_of_primes(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_primes(n):\n    '''\n    Calculate the sum of all prime numbers up to a specified number.\n    '''\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n            if sum(primes) >= n:\n                break\n        i += 1\n    return sum(primes)\n\nlimit = 200\nprint(sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable_number(num):\n    '''\n    Returns True if the given number is an amicable number, False otherwise.\n    '''\n    limit = int(num**0.5) + 1\n    for i in range(2, limit):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for num in range(1, limit+1):\n        if is_amicable_number(num):\n            result += num\n    return result\n\nlimit = int(input(\"Enter a number: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        for j in range(i, limit):\n            if is_amicable(i, j):\n                amicable_numbers.append((i, j))\n    return sum(a+b for a, b in amicable_numbers)\n\ndef is_amicable(a, b):\n    '''\n    Helper function to check if two numbers are amicable.\n    '''\n    if a == b:\n        return False\n    d = gcd(a, b)\n    return d == 1\n\ndef gcd(a, b):\n    '''\n    Helper function to calculate the greatest common divisor of two numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_amicable(a, b):\n    return is_prime(a + b) and is_prime(b + a)\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = []\n    for a in range(1, limit+1):\n        for b in range(a, limit+1):\n            if is_amicable(a, b):\n                amicable_numbers.append(a + b)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function calculates the angle of a complex number.\n    \n    Parameters:\n    a (float): The real part of the complex number.\n    b (float): The imaginary part of the complex number.\n    \n    Returns:\n    float: The angle of the complex number in radians.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n\n    Args:\n        a (complex): The real part of the complex number.\n        b (complex): The imaginary part of the complex number.\n\n    Returns:\n        float: The angle of the complex number in radians.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    \"\"\"\n    # Find the square of the sum of the real and imaginary parts of the complex numbers\n    c = a + b\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = cmath.phase(a+b*1j)*180/cmath.pi\n    return angle_rad, angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in radians.\n    '''\n    # Calculate the magnitude of the complex number\n    mag = cmath.sqrt(a*a + b*b)\n\n    # Calculate the angle of the complex number using the arccosine function\n    angle = cmath.acos(a/mag)\n\n    # Return the angle in radians\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Parameters:\n    a (complex): The real part of the complex number.\n    b (complex): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        count_zero = 0\n        count_one = 0\n        \n        for j in range(i, n):\n            if string[j] == '0':\n                count_zero += 1\n            elif string[j] == '1':\n                count_one += 1\n            \n            if count_zero > 0 and count_one > 0:\n                max_diff = max(max_diff, count_zero - count_one)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0 \n    for i in range(len(string)): \n        if string[i] == '0': \n            count = 0 \n            for j in range(i, len(string)): \n                if string[j] == '1': \n                    count += 1 \n                else: \n                    break \n            if count > 0: \n                max_diff = max(max_diff, count) \n    return max_diff "
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        sub_string = string[i:]\n        count_0 = sub_string.count('0')\n        count_1 = sub_string.count('1')\n        if count_0 > count_1:\n            diff = count_0 - count_1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count = [0] * 2\n    max_diff = 0\n    start = 0\n    \n    for i in range(n):\n        count[string[i] - '0'] += 1\n        \n        if i >= 2 and string[i - 1] == '0' and string[i - 2] == '0':\n            diff = count[1] - count[0]\n            max_diff = max(max_diff, diff)\n        \n        if string[i] == '1':\n            count[1] = (count[1] + 1) % 2\n        else:\n            count[0] = (count[0] + 1) % 2\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [0] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2] + 1)\n\n    return dp[n - 1]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables to keep track of the number of 0s and 1s in the current sub-string\n    num_0s = 0\n    num_1s = 0\n    # Initialize the maximum difference found so far\n    max_diff = 0\n    # Iterate over each character in the input string\n    for char in string:\n        # If the current character is a 0, increment the count of 0s\n        if char == '0':\n            num_0s += 1\n            num_1s -= 1\n            # If the count of 0s is greater than the count of 1s, update the maximum difference\n            if num_0s > num_1s:\n                max_diff = max(max_diff, num_0s - num_1s)\n        # If the current character is a 1, increment the count of 1s\n        elif char == '1':\n            num_1s += 1\n            num_0s -= 1\n            # If the count of 1s is greater than the count of 0s, update the maximum difference\n            if num_1s > num_0s:\n                max_diff = max(max_diff, num_1s - num_0s)\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    for i in range(n-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff = 1\n            for j in range(i+2, n):\n                if string[j] == '0':\n                    diff += 1\n                elif string[j] == '1':\n                    break\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # initialize variables\n    max_diff = 0\n    count_zeros = 0\n    count_ones = 0\n    current_diff = 0\n\n    # loop through the string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n\n        current_diff = abs(count_zeros - count_ones)\n\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    # Convert the string to a list of bits\n    bits = [int(bit) for bit in string]\n    # Initialize the result\n    result = 0\n    # Initialize a variable to store the current length\n    current_length = 0\n    # Loop through the list of bits\n    for bit in bits:\n        if bit == 0:\n            current_length += 1\n        else:\n            # Update the result if the current length is greater\n            if current_length > result:\n                result = current_length\n            # Reset the current length\n            current_length = 1\n    # Update the result if the last bit is a 1\n    if bits[-1] == 1:\n        result = max(result, len(bits) - current_length)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n\n    # Function to check if a number is a common divisor of both a and b.\n    def is_common_divisor(x, y):\n        return (a % x == 0) and (b % y == 0)\n\n    # Initialize the sum variable to 0.\n    sum_cd = 0\n\n    # Loop through all numbers between 1 and the smaller number.\n    for i in range(1, min(a, b) + 1):\n        # Check if the current number is a common divisor of both a and b.\n        if is_common_divisor(i, a) and is_common_divisor(i, b):\n            # Add the current number to the sum variable.\n            sum_cd += i\n\n    # Return the sum of common divisors.\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers as input and returns their sum of their common divisors.\n    '''\n    # Creating a list of all common divisors of a and b\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Summing up the elements of the list of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    # check if a and b are both positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        raise ValueError(\"Both a and b must be positive integers\")\n\n    # find the common divisors of a and b\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # calculate the sum of the common divisors\n    result = sum(divisors)\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a list of numbers from 1 to the smaller number\n    nums = list(range(1, min(a, b) + 1))\n    \n    # initialize a variable to store the sum of common divisors\n    common_divisor_sum = 0\n    \n    # iterate through the list of numbers\n    for num in nums:\n        # check if the number is a divisor of both a and b\n        if num % a == 0 and num % b == 0:\n            # add the number to the sum of common divisors\n            common_divisor_sum += num\n    \n    # return the sum of common divisors\n    return common_divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Calculate the sum of all divisors of the first number\n    divisor_sum = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisor_sum += i\n\n    # Calculate the sum of all divisors of the second number\n    divisor_sum_2 = 0\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisor_sum_2 += i\n\n    # Find the intersection of the two sets of divisors\n    common_divisors = set(divisor_sum).intersection(set(divisor_sum_2))\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common = set(a.__dict__.keys()) & set(b.__dict__.keys())\n    return sum(x for x in common if x in a.__dict__ and x in b.__dict__)\n\nprint(sum([1,2,3], [4,5,6])) # Output: 12"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # function to check if a number is a divisor of b\n    def is_divisor(a, b):\n        if b == 0:\n            return False\n        for i in range(2, b + 1):\n            if b % i == 0:\n                return False\n        return True\n\n    # function to find the sum of common divisors of two numbers\n    def sum_common_divisors(a, b):\n        common_divisors = []\n        for i in range(1, min(a, b) + 1):\n            if is_divisor(a, i) and is_divisor(b, i):\n                common_divisors.append(i)\n        return sum(common_divisors)\n\n    # calling the function\n    result = sum_common_divisors(a, b)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a set to store the common divisors of a and b\n    common_divisors = set()\n\n    # Iterate from 1 to the smaller number of a and b\n    for i in range(1, min(a, b) + 1):\n        # If a is divisible by i and b is divisible by i, add i to the set of common divisors\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 1\n    divisor = 2\n    while divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisor += divisor\n        divisor += 1\n    return common_divisor"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    product = 0\n    while y > 0:\n        # if y is odd, add x to product\n        if y & 1:\n            product += x\n        # shift y to the right by 1 bit\n        y >>= 1\n        # add x to product\n        x <<= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y > 0:\n        if y & 1:  # y is odd\n            result += x\n        x <<= 1  # double x\n        y >>= 1  # divide y by 2\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in a list of words and returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = [0] * 10\n    col_sum = [0] * 10\n\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n\n    for i in range(10):\n        if row_sum[i]!= i+1 or col_sum[i]!= i+1:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = [0] * 10\n    col_sums = [0] * 10\n    for i in range(10):\n        row_sums[my_matrix[i][0]] += 1\n        col_sums[my_matrix[0][i]] += 1\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if my_matrix[i][j]!= row_sums[my_matrix[i][j]] + col_sums[my_matrix[j][i]]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the dimensions of the matrix are 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"Invalid matrix dimensions.\"\n\n    # Check if all rows have the same length\n    row_lengths = [len(row) for row in my_matrix]\n    if len(set(row_lengths))!= 1:\n        return \"Invalid row lengths.\"\n\n    # Check if all columns have the same length\n    col_lengths = [len(col) for col in zip(*my_matrix)]\n    if len(set(col_lengths))!= 1:\n        return \"Invalid column lengths.\"\n\n    # Check if the matrix is a magic square\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    diag_sums = [row_sums[i] + col_sums[i] for i in range(3)]\n    if all(row_sums) == 0 or all(col_sums) == 0 or all(diag_sums) == 0:\n        return \"Not a magic square.\"\n    else:\n        return \"Magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 9 elements\n    if len(my_matrix)!= 9:\n        return False\n    \n    # Check if each row has 9 elements\n    for row in my_matrix:\n        if len(row)!= 9:\n            return False\n    \n    # Check if each column has 9 elements\n    for i in range(len(my_matrix[0])):\n        col = []\n        for j in range(len(my_matrix)):\n            col.append(my_matrix[j][i])\n        if len(set(col))!= 9:\n            return False\n    \n    # Check if the diagonal elements are unique\n    diag1 = []\n    diag2 = []\n    for i in range(len(my_matrix)):\n        diag1.append(my_matrix[i][i])\n        diag2.append(my_matrix[i][8-i])\n    if len(set(diag1))!= 9 or len(set(diag2))!= 9:\n        return False\n    \n    # Check if the main diagonal elements are unique\n    main_diag = []\n    for i in range(3):\n        main_diag.append(my_matrix[i][i])\n    if len(set(main_diag))!= 9:\n        return False\n    \n    # Check if the sub-diagonal elements are unique\n    sub_diag = []\n    for i in range(3):\n        sub_diag.append(my_matrix[i][8-i])\n    if len(set(sub_diag))!= 9:\n        return False\n    \n    # Check if the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only unique values\n    unique_values = set()\n    for row in my_matrix:\n        for value in row:\n            if value in unique_values:\n                return False\n            unique_values.add(value)\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j or i + j == len(my_matrix) - 1:\n                sum = 0\n                for k in range(len(my_matrix)):\n                    sum += my_matrix[i][k]\n                if sum == len(my_matrix) * len(my_matrix):\n                    return True\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j or j == len(my_matrix) - 1 - i:\n                sum = 0\n                for k in range(len(my_matrix)):\n                    sum += my_matrix[k][j]\n                if sum == len(my_matrix) * len(my_matrix):\n                    return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # check that the input matrix is a list of lists of integers\n    if not all(isinstance(row, list) for row in my_matrix):\n        return False\n    \n    # check that each row, column, and sub-diagonal contains the same number of integers\n    num_integers = len(my_matrix[0])\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= num_integers or len(set(my_matrix[i]))!= 1:\n            return False\n        for j in range(i+1, len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n        for k in range(i, len(my_matrix)):\n            if my_matrix[k][i]!= my_matrix[k][j]:\n                return False\n    # the matrix must be a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix has exactly 9 elements\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check that the matrix contains only integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return False\n    \n    # Check that the matrix has a unique sum of elements\n    row_sums = sum(row) for row in my_matrix\n    col_sums = [sum(row) for row in zip(*my_matrix)]\n    diag_sum = sum(my_matrix[i][i] for i in range(3))\n    if row_sums!= col_sums!= [0, 0, 0, 0, 0, 0, 0, 0, 0]!= diag_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for j in range(len(my_matrix[0])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum == col_sum:\n            return True\n        if i < len(my_matrix) - 2 and abs(row_sum - col_sum) == my_matrix[i+1][i+1]:\n            return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if each row, column, and diagonal contain the same values\n    for i in range(n):\n        if not all(my_matrix[j][i] == my_matrix[i][j] for j in range(n)):\n            return False\n        if not all(my_matrix[j][i] == my_matrix[j][i] for j in range(n)):\n            return False\n    # Check if the matrix can be formed by adding the values of the diagonal and the other values of the matrix\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    if diagonal_sum!= sum(row[j] for j in range(n) if j!= i):\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    if row_sums == col_sums:\n        magic_square = True\n    else:\n        magic_square = False\n    return magic_square"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = None\n    max_count = 0\n\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n    for item, freq_item in freq.items():\n        if freq_item == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Given a list of integers, return the item with the highest frequency.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = max(freq_dict.values())\n    max_item = None\n    \n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = -1\n    max_freq = -1\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n\n    for num in nums:\n        count_dict[num] += 1\n\n    max_count = max(count_dict.values())\n    max_item = None\n\n    for item, count in count_dict.items():\n        if count == max_count:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = max(freq.values())\n    return max(freq, key=lambda k: freq[k] == max_count)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(reversed(result))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_set = set(vowels)\n    reversed_vowels = []\n    for char in str1:\n        if char in vowels_set:\n            reversed_vowels.append(char)\n    reversed_vowels.reverse()\n    return ''.join(reversed_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    # create a set of vowels\n    reverse_str = ''\n    for char in str1:\n        # check if the character is a vowel\n        if char in vowels:\n            # if it is a vowel, add it to the start of the string\n            reverse_str += char\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_indices.append(i)\n    vowel_indices.sort(reverse=True)\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_set = set(vowels)\n    result = []\n    for char in str1:\n        if char.lower() in vowel_set:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = []\n\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str.append(char)\n    \n    return ''.join(reversed_str)\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str1 = str(tup1)\n    # Return the string\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_tup = \", \".join(map(str, tup1))\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = '('\n    for i in range(len(tup1)):\n        string += str(tup1[i]) + ', '\n    if string[-2:] == ', ':\n        string = string[:-2]\n    string += ')'\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = \"\"\n    for elem in tup1:\n        str_tup += str(elem)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ', '.join(str(x) for x in tup1)\n    return str_tup"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]  # creating a list of negative numbers\n    return sum(negatives)  # returning the sum of negative numbers"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n*(3*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    hex_num = n * (2 * n - 1)\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 1\n\n    for i in range(1, n+1):\n        print(a, end=\" \")\n        if i % 2 == 0:\n            a += b\n            b += c\n            c = a + b - c\n        else:\n            a += b\n            b += c\n            c = a + b - c - 1\n\n    print(\"\\nHexagonal number is:\", a)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        print(\"The input must be a positive integer.\")\n        return\n    \n    # initialize variables\n    a = 1\n    b = 5\n    \n    # iterate through the number of times specified by the user\n    for i in range(1, n+1):\n        # calculate the hexagonal number using the formula a^2 - b^2 = 2c^3\n        c = (a**2 - b**2)**0.5\n        # print the hexagonal number\n        print(c)\n        \n        # update the values of a and b\n        a = b\n        b = c\n        \n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 6 * n * hexagonal_num(n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0: \n        return None\n    \n    # Calculate the nth hexagonal number using the formula\n    # Hexagonal number = (3n - 1)^2 + (3n - 1)\n    return ((3 * n - 1) ** 2) + (3 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Finding the nth hexagon\n    num = (n - 1) // 2\n    # Finding the distance between the squares\n    distance = 1 - 4 * num + 6 * num**2\n    # Multiplying by 6 and adding 1 to get the nth hexagon\n    hexagon = 6 * (distance**0.5) + 1\n    return hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 3\n    e = 3\n    f = 1\n    \n    for i in range(n):\n        a = a + b\n        b = c + d\n        c = e + f\n        d = 2 * d + 1\n        e = 2 * e + 1\n        f = 2 * f + 1\n        \n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_number = 0\n    while hexagonal_number < n:\n        hexagonal_number += 6\n    return hexagonal_number - 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the counts of non-zeroes and zeroes\n    counts = array('i', [0]*len(nums))\n    \n    # loop through the array and count the non-zeroes and zeroes\n    for num in nums:\n        if num!= 0:\n            counts[num] += 1\n    \n    # find the ratio of zeroes to non-zeroes\n    non_zeros = 0\n    zeroes = 0\n    for count in counts:\n        non_zeros += count\n        zeroes += len(counts) - count\n    \n    return non_zeros / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of zeros to store the count of non-zeroes\n    zeros = array('i', [0] * len(nums))\n\n    # Iterate through the array\n    for num in nums:\n        # Increment the count of non-zeroes if the number is not zero\n        if num!= 0:\n            zeros[nums.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    non_zero_count = sum(zeros)\n    zero_count = len(zeros)\n    zero_ratio = non_zero_count / zero_count\n\n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the number of zeros and ones\n    count = array('i', [0] * (max(nums) + 1))\n\n    # iterate through the array and count the number of zeros and ones\n    for num in nums:\n        count[num] += 1\n\n    # calculate the ratio of zeros to non-zeroes\n    non_zeroes = sum(count[1:])\n    zeros = sum(count)\n    ratio = zeros / non_zeroes\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n\n    non_zero_count = len(nums) - sum(zero_count)\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count[0] / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize counters for zeroes and non-zeroes\n    zeroes = 0\n    ones = 0\n    # Loop through the array and increment counters\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            ones += 1\n    # Calculate the ratio and return as a float\n    return float(zeroes) / ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = zeros / non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of zeros and use it as a mask to count the number of zeroes in the input array\n    zeros = array('i', [0] * len(nums))\n    count = 0\n    for num in nums:\n        zeros[count] = num\n        if num == 0:\n            count += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    if count == 0:\n        return 0\n    else:\n        return count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize the counters\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Loop through the array\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio\n    zero_ratio = zero_count / non_zero_count\n    \n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize empty array to store count of zeroes and non-zeroes\n    zero_count_arr = array('i', [0, 0])\n\n    # Loop through each element of the array\n    for num in nums:\n        # Increment count of zeroes if element is zero\n        if num == 0:\n            zero_count_arr[0] += 1\n        # Decrement count of non-zeroes if element is non-zero\n        else:\n            zero_count_arr[1] += 1\n\n    # Divide count of zeroes by count of non-zeroes to get ratio of zeroes to non-zeroes\n    ratio = zero_count_arr[0] / zero_count_arr[1]\n\n    # Print the ratio of zeroes to non-zeroes\n    print(ratio)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 0\n    while power_of_two * 2 <= n:\n        if n % (2 ** power_of_two) == 0:\n            return True\n        power_of_two += 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(num):\n        return num & (num-1) == 0\n\n    def check_if_number_is_power_of_two(num):\n        return (num == 1) or (num % 2 == 0) and (is_power_of_two(num/2))\n\n    count = 0\n    while n > 0:\n        if check_if_number_is_power_of_two(n):\n            count += 1\n        n = n >> 1\n\n    if count >= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Function to check whether a number is a power of 2\n    def isPowerOfTwo(num):\n        return (num & (num - 1)) == 0\n\n    # Function to check whether a number is divisible by 2^p\n    def isDivisibleByPowerOfTwo(num, p):\n        return (num & (1 << p))!= 0\n\n    # Initializing variables\n    sum_of_powers = 0\n\n    # Looping through powers of 2\n    for i in range(31, -1, -1):\n        # Checking if i is divisible by 2^i\n        if isDivisibleByPowerOfTwo(n, i):\n            # If yes, adding it to the sum of powers\n            sum_of_powers += (1 << i)\n\n    # Checking whether the sum of powers is equal to n\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(1, 33):\n        if 2**i <= n:\n            if (n - 2**i).bit_length() == 1:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Function to check whether a number is a power of 2 or not\n    def is_power_of_2(num):\n        return num & (num - 1) == 0\n\n    # Check if the given number is power of 2\n    if is_power_of_2(n):\n        return True\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    is_sum_of_powers_of_2 = False\n    for i in range(1, n+1):\n        if is_power_of_2(i) and (n - i) in range(1, n+1):\n            is_sum_of_powers_of_2 = True\n            break\n\n    return is_sum_of_powers_of_2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += i\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n    \n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            if count == 0:\n                return False\n            count -= 1\n        else:\n            count += 1\n        n >>= 1\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        # iterate from 1 to n/2\n        for i in range(1, n // 2 + 1):\n            # check if i^2 is present in the given number\n            if i * i == n:\n                return True\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # convert the given number to a binary number\n    bin_n = bin(n)[2:]\n\n    # loop through all possible binary strings of length 1 to the length of bin_n\n    for i in range(1, len(bin_n)+1):\n        # calculate the power of 2 represented by the current binary string\n        power_of_2 = int(bin_n[:i], 2)\n\n        # if the sum of the power of 2 and the given number is equal to n, then the given number can be represented as the sum of powers of 2\n        if n == power_of_2 + int(bin_n[:i], 2):\n            return True\n\n    # if no combination of binary strings of length 1 to the length of bin_n has the property that the given number can be represented as the sum of powers of 2, return False\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n\nprint(circle_circumference(5))"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # pi is a mathematical constant\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # 2\u03c0r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r # formula to find circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # circumference = 2\u03c0r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened = []\n    \n    # Loop through each sub-list in the original list\n    for sublist in test_list:\n        # Loop through each element in the sub-list\n        for element in sublist:\n            # If the element is not a list, add it to the flattened list\n            if not isinstance(element, list):\n                flattened.append(element)\n    \n    # Return the flattened list as a set\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            flattened_list += extract_singly(i)\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def count_inversions(nums, start, end):\n        left = start\n        right = end\n        count = 0\n        while left < right:\n            while left < right and nums[left] <= nums[start]:\n                left += 1\n            while left < right and nums[right] >= nums[start]:\n                right -= 1\n            if left < right:\n                count += right - left\n                nums[left], nums[right] = nums[right], nums[left]\n        return count\n    \n    def pancake_sort_helper(nums, start, end):\n        if start >= end:\n            return\n        \n        pivot_index = pancake_partition(nums, start, end)\n        count = pancake_sort_helper(nums, start, pivot_index)\n        count += pancake_sort_helper(nums, pivot_index + 1, end)\n        return count\n    \n    def pancake_partition(nums, start, end):\n        pivot = nums[end]\n        left = start\n        for i in range(start, end):\n            if nums[i] <= pivot:\n                nums[i], nums[left] = nums[left], nums[i]\n                left += 1\n        nums[end], nums[left] = nums[left], nums[end]\n        return left\n    \n    return pancake_sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of numbers in ascending order using the Pancake Sort algorithm.\n    \"\"\"\n\n    def is_sorted(arr):\n        \"\"\"\n        Returns True if the array is sorted in ascending order, otherwise False.\n        \"\"\"\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n    def pancake_sort_helper(arr, start, end):\n        \"\"\"\n        Helper function for the pancake_sort function.\n        \"\"\"\n        if start >= end:\n            return\n\n        # Find the maximum element in the unsorted part of the array\n        max_index = start\n        for i in range(start, end):\n            if arr[i] > arr[max_index]:\n                max_index = i\n\n        # Swap the maximum element with the first element of the unsorted part\n        arr[start], arr[max_index] = arr[max_index], arr[start]\n\n        # Recursively sort the unsorted part of the array\n        pancake_sort_helper(arr, start + 1, end)\n\n    # Sort the array using the Pancake Sort algorithm\n    pancake_sort_helper(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize a variable to keep track of the largest index seen so far\n    max_index = 0\n\n    # Iterate through the list of indices\n    for i in range(len(nums)-1, 0, -1):\n        # Find the largest index in the list up to index i\n        max_index = max(nums.index(max(nums[:i])), max_index)\n\n        # Swap the largest and current elements in the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Make a copy of the list so that we don't modify it\n    nums_copy = nums[:]\n\n    # Sort the list using the bubble sort algorithm\n    for i in range(len(nums_copy)):\n        for j in range(len(nums_copy) - i - 1):\n            if nums_copy[j] > nums_copy[j + 1]:\n                # Swap the elements if they are in the wrong order\n                nums_copy[j], nums_copy[j + 1] = nums_copy[j + 1], nums_copy[j]\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    # The length of the list is equal to the number of pancakes in the\n    # circle, so we need to sort the list in decreasing order.\n    nums.sort(reverse=True)\n\n    # We need to remove the pancakes from the original list by swapping\n    # adjacent elements until we reach the end of the list.\n    for i in range(len(nums)):\n        # Find the index of the largest element to the left of the i-th\n        # element.\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n\n        # Swap the i-th element with the largest element to the left of it.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # loop through each element of the list\n    for i in range(n):\n        # find the maximum element in the remaining unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the i-th element with the maximum element found so far\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # print the sorted list after each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the largest element in the unsorted part of the array\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the last element\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # bubble sort algorithm\n    for i in range(n):\n        # compare each element with the one to its right\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                # swap the elements if the current one is greater than the one to its right\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    # print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    def sort_helper(arr, n):\n        # Step 1: Reverse the array\n        for i in range(n // 2):\n            arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]\n\n        # Step 2: Sort the array\n        for i in range(1, n):\n            # Find the maximum element in the unsorted part of the array\n            max_idx = i\n            for j in range(i):\n                if arr[j] < arr[max_idx]:\n                    max_idx = j\n\n            # Swap the maximum element with the last element of the unsorted part\n            arr[max_idx], arr[i] = arr[i], arr[max_idx]\n\n        # Step 3: Reverse the sorted part of the array\n        for i in range(n // 2):\n            arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]\n\n        return arr\n\n    # Sort the array by recursively calling the sort_helper function\n    return sort_helper(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Loop through the list\n    for i in range(n):\n        # Find the maximum element in the list starting from index i\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the element at index i\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n    list1 (list): List of items.\n    list2 (list): List of items.\n    list3 (list): List of items.\n\n    Returns:\n    int: Number of identical items in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for element in Input: \n        if isinstance(element, list): \n            count += 1\n    \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize variables to store the maximum absolute difference and the minimum element\n    max_diff = float('-inf')\n    min_elem = arr[0]\n    \n    # Iterate through the array and update the maximum absolute difference and minimum element\n    for elem in arr[1:]:\n        if elem < min_elem:\n            min_elem = elem\n        diff = elem - min_elem\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Define the polynomial equation as a quadratic\n    # ax^2 + bx + c = 0\n    # with c = -n/a and b = -n/a*x\n    # where a, b and c are constants\n    a2 = a**2\n    b2 = b**2\n    c = -n/(a*b)\n    b_x = -n/a\n    discriminant = b2 - 4*a2*c\n\n    # Check if the equation has a root\n    if discriminant < 0:\n        # The equation has no real roots\n        return None\n    elif discriminant == 0:\n        # The equation has only one real root\n        x = -b/(2*a)\n        y = x\n        return (x, y)\n    else:\n        # The equation has two real roots\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        y1 = x1**2 + x1*x2 + x2**2 - n\n        y2 = x1**2 + x1*x2 + x2**2 - n\n\n        # Sort the roots in order to find the smaller one\n        if y1 < y2:\n            return (x1, x2)\n        else:\n            return (x2, x1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-100, 100):\n        for y in range(-100, 100):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Define the range of possible values for x and y\n    x_range = range(-1000000, 1000000)\n    y_range = range(-1000000, 1000000)\n\n    # Iterate through all possible values of x and y\n    for x in x_range:\n        for y in y_range:\n            # Check if the current combination satisfies the equation\n            if a*x + b*y == n:\n                # If yes, return the solution as a tuple\n                return (x, y)\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_min = -100\n    x_max = 100\n    y_min = -100\n    y_max = 100\n\n    # check if a, b, and n are valid\n    if a == 0 or b == 0 or n == 0:\n        return None\n    if a == 1 and b == 0:\n        return (0, n // b)\n    if a == -1 and b == 0:\n        return (0, -n // b)\n    if a == 0 and b == 1:\n        return (n // a, 0)\n    if a == 0 and b == -1:\n        return (-n // a, 0)\n\n    # binary search to find x and y\n    while x_max - x_min > 1e-6:\n        x = (x_min + x_max) / 2\n        y = a * x + b\n        if y == n:\n            x_min = x\n        elif y < n:\n            x_min = x\n        else:\n            x_max = x\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0 and n % b == 0:\n        x = n // a\n        y = n // b\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # use the quadratic formula to find the discriminant\n    disc = b**2 - 4*a*n\n    if disc > 0:\n        x1 = (-b + disc**0.5) / (2*a)\n        x2 = (-b - disc**0.5) / (2*a)\n        return (x1, x2)\n    elif disc == 0:\n        x1 = -b / (2*a)\n        return (x1, x1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = -n/b\n            y = 0\n            return (x, y)\n    elif b == 0:\n        x = 0\n        y = -n/a\n        return (x, y)\n    else:\n        x1 = (-n + b**0.5)/(2*a)\n        y1 = (-n - b**0.5)/(2*a)\n        if x1.is_integer() and y1.is_integer():\n            return (x1, y1)\n        else:\n            x2 = (-n - b**0.5)/(2*a)\n            y2 = (-n + b**0.5)/(2*a)\n            if x2.is_integer() and y2.is_integer():\n                return (x2, y2)\n            else:\n                return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # use the quadratic formula to find x and y\n    # ax^2 + bx + c = 0\n    # x = (-b \u00b1 sqrt(b^2 - 4ac)) / 2a\n    # y = (-b \u00b1 sqrt(b^2 - 4ac)) / 2b\n    # where a, b, and c are the given coefficients and n is the given value of y\n    c = a**2 + b**2\n    if c == 0:\n        return None\n    \n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    \n    # calculate the two solutions\n    x1 = (-b - discriminant**0.5) / (2*a)\n    x2 = (-b + discriminant**0.5) / (2*a)\n    y1 = (-b - discriminant**0.5) / (2*b)\n    y2 = (-b + discriminant**0.5) / (2*b)\n    \n    # check if there is only one solution\n    if x1 == x2:\n        return (int(x1), None)\n    else:\n        return (int(x1), int(y1))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find all possible values of x and y that satisfy ax + by = n\n    x_values = []\n    y_values = []\n    for x in range(-1000000, 1000000):\n        for y in range(-1000000, 1000000):\n            if a*x + b*y == n:\n                x_values.append(x)\n                y_values.append(y)\n    \n    # check if there is at least one solution\n    if len(x_values) == 0 or len(y_values) == 0:\n        return None\n    \n    # return the first solution found\n    return (min(x_values), min(y_values))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list2 and remove all elements present in list1\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # loop through the set2 and remove the elements in set1\n    for item in set2:\n        if item in set1:\n            set1.remove(item)\n    # convert the modified set back to a list and return it\n    return list(set1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # create a new list to store the elements that are not in set2\n    new_list = [x for x in set1 if x not in set2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the list1 and remove elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Parameters:\n    list1 (list): The list to remove elements from.\n    list2 (list): The list containing the elements to remove.\n\n    Returns:\n    list: A new list with all elements from list1 that are not in list2.\n    \"\"\"\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    \n    i = 0\n    sum = 0\n    while i <= n//2:\n        sum += n - 2*i\n        i += 1\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n = n // 2\n        series_sum = n * (n + 1) // 2\n    else:\n        series_sum = (n + 1) * (n + 1) // 2\n\n    for i in range(1, n // 2 + 1):\n        series_sum += (i * (n - i)) // 2\n    \n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 10\n    else:\n        return n + sum_series(n - 2) + sum_series(n - 4)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initializing the sum variable to 0\n    sum_val = 0\n    # iterating from 0 to n // 2\n    for i in range(n // 2):\n        # adding the sum of (i - j - 1) to the sum_val for j = 0 to i\n        for j in range(i+1):\n            sum_val += (i - j - 1)\n    # returning the sum_val\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n-i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        return 0\n    \n    series_sum = 0\n    for i in range(0, n // 2):\n        series_sum += (n - 2*i)\n        \n    return series_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2)/(2*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-2*l+4*pi))/4\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s) / 2.0\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) * (tan(i * pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area using the formula: A = (s * (1/2) * l) * sin(pi/l)\n    area = (s * (1/2) * l) * sin(pi/l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using formula for regular polygon\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi * (s**2))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(pi/l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2)*l*tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = (2 * s) + ((l-2) * tan(pi/l))\n\n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n        \n    sum_divisors = sum(divisors)\n    return n == sum_divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function calculates the sum of the divisors of a given number.\n    It takes an integer as input and returns True if the sum of the divisors is the same as the input number.\n    '''\n    if n <= 1:\n        return True\n\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n//i\n\n    # Check if the sum of the divisors is the same as the input number\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #function to calculate the sum of the divisors of a given integer\n    def sum_divisors(n): \n        sum = 1 \n        for i in range(1, int(n**0.5)+1): \n            if n % i == 0: \n                sum += i \n                if i!= n//i: \n                    sum += n//i \n        return sum \n        \n    #checking if the sum of the divisors of two integers are the same\n    if sum_divisors(n) == sum_divisors(n+1): \n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are the same.\") \n    else: \n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are not the same.\") "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Determine if the sum of the divisors of two integers are the same.\n\n    Args:\n    n: an integer\n\n    Returns:\n    True if the sum of the divisors of n is the same as the sum of the divisors of n+1, False otherwise.\n    '''\n\n    # compute the sum of the divisors of n\n    div_sum_n = sum(range(1, n+1))\n\n    # compute the sum of the divisors of n+1\n    div_sum_n1 = sum(range(1, n+2))\n\n    # compare the sums\n    if div_sum_n == div_sum_n1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # loop through all numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n\n        # if n is divisible by i, check if i is divisible by the other half of n\n        if n % i == 0 and i * i == n:\n            return True\n\n    # if we reach here, n is not divisible by any number less than its square root\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        div_sum_list = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_sum_list.append(i)\n                div_sum_list.append(n//i)\n        return div_sum_list == list(set(div_sum_list))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = math.sqrt(n)\n    div2 = div1 + 1\n    \n    sum1 = 0\n    sum2 = 0\n    \n    for i in range(1, div1 + 1):\n        if n % i == 0:\n            sum1 += i\n            \n    for i in range(div2, n + 1):\n        if n % i == 0:\n            sum2 += i\n            \n    if abs(sum1 - sum2) < 10:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # calculate sum of divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            divs.append(n//i)\n    divs.append(n)\n    divs.sort()\n    divs_sum = sum(divs)\n    \n    # check if sum of divisors of n and the other number is same\n    if divs_sum == n:\n        print(n, \"is a perfect square!\")\n    else:\n        print(n, \"is not a perfect square.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    divisor_sum = 0\n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n            divisor_sum += i + n // i\n\n    divisor_sum += n\n\n    return divisor_sum == sum(divisors)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the position of each character in the English alphabet\n    char_pos = {}\n    # Iterate through the string\n    for i in range(len(str1)):\n        # If the character is a letter (ignoring case sensitivity) and its position has been seen before, increment the count\n        if str1[i].isalpha() and str1[i] in char_pos:\n            char_pos[str1[i]] += 1\n        # If the character is a letter (ignoring case sensitivity) and its position hasn't been seen before, add it to the dictionary with a count of 1\n        elif str1[i].isalpha():\n            char_pos[str1[i]] = 1\n    # Initialize a counter variable to store the number of times each character appears in the string\n    count = 0\n    # Iterate through the dictionary and add up the counts for each character that appears more than once\n    for i in char_pos.values():\n        if i > 1:\n            count += i\n    # Return the count of characters that appear more than once\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    \n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of each letter\n    count_dict = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n    \n    # Count the number of letters that occur at the same position in the string as in the English alphabet\n    same_position_count = sum(count_dict.values())\n    \n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    for i in str1:\n        if i.lower() in english_alphabet:\n            for j in english_alphabet:\n                if i.lower() == j:\n                    count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Iterate through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n\n        # If the character exists in the dictionary and its count is 1, increment the count at the current position in the English alphabet\n        if chr(i) in char_count and char_count[chr(i)] == 1:\n            char_count[chr(i)] += 1\n\n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the input string to lowercase\n    str1 = str1.lower()\n    # initialize the counter variable\n    count = 0\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # check if the character is at the same position in the string as in the English alphabet\n            if ord(char) == (ord('a') + count) % 26:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the character count\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char_lower = char.lower()\n\n        # If the lowercase character is in the dictionary, increment its count\n        if char_lower in char_count:\n            char_count[char_lower] += 1\n        # Otherwise, add the lowercase character to the dictionary with a count of 1\n        else:\n            char_count[char_lower] = 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters\n    count_dict = {}\n    # Iterate over the characters in the string\n    for char in str1:\n        # If the character is a letter (both uppercase and lowercase), add its index to the count dictionary\n        if char.isalpha():\n            index = ord(char) - ord('a')\n            if index in count_dict:\n                count_dict[index] += 1\n            else:\n                count_dict[index] = 1\n    # Return the count of characters\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize the count dictionary\n    count_dict = {}\n    \n    # Iterate over the characters in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it is, check if it's uppercase or lowercase\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n                \n    # Iterate over the characters in the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # Check if the current character matches the position of the letter in the string\n        if chr(i) in count_dict:\n            # If it does, increment the count for that letter in the output dictionary\n            count_dict[chr(i)] += 1\n                \n    # Return the output dictionary\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define a dictionary to store the number of occurrences of each character in the alphabet\n    char_count = {}\n\n    # Iterate through the string and update the count for each character in the alphabet\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the count for each character in the alphabet\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    # Set initial value\n    power = 1\n    \n    # Loop until power is greater than or equal to n\n    while power < n:\n        power <<= 1\n    \n    # Return the final power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the power of 2 to 1\n    power = 1\n\n    # loop until power is greater than or equal to n\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the next smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the next power of 2\n    next_power = 1\n    \n    # Loop while the current power is less than the input number\n    while next_power < n:\n        # Increment the next power by 1\n        next_power *= 2\n    \n    # Return the next power of 2\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power *= 2\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # loop until we find a power of 2 greater than or equal to n\n    while True:\n        # check if n is a power of 2\n        if n & (n-1) == 0:\n            return n\n        \n        # increase n by 1\n        n += 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a power of 2 or not\n    if n & (n - 1) == 0: \n        return n\n    \n    # Iterate until the next power of 2 is found\n    i = 1\n    while True:\n        if i >= n: \n            break\n        i <<= 1\n    \n    # Return the next power of 2\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return 2**n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n | (n & -n)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the next power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    This function takes two parameters: a list `a` and a number `x`.\n    The function returns the count of the number `x` in the list `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    This function takes two arguments: the list `a` and the number `x`. \n    It returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in x:\n        if a == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-m]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    # Loop through each element in the list from the specified range\n    for i in range(m, n+1):\n        # Add the element to the total if it is within the range\n        if i >= 0 and i < len(list1):\n            total += list1[i]\n    # Return the total sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    c = math.sqrt(3) * a\n    return 5 * c * c"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the sine and cosine of the angle of the base\n    s = math.sin(math.pi/5)\n    c = math.cos(math.pi/5)\n    # calculate the length of the longest side\n    p = a*c\n    # calculate the distance from the base to the vertex\n    v = a*s\n    # find the angle of the vertex to the center\n    theta = math.acos((p**2 + v**2 - a**2)/(2*p*v))\n    # calculate the perimeter of the pentagon\n    perimeter = 5*a + 10*theta\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    std_len = 3\n    for i in range(len(s) - std_len + 1):\n        if s[i:i+std_len] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item))\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for elem in test_tuple:\n        type_set.add(type(elem))\n    return len(type_set) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    elif len(test_tuple) == 1:\n        return True\n    else:\n        first_elem = type(test_tuple[0])\n        for elem in test_tuple[1:]:\n            if type(elem)!= first_elem:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(elem) for elem in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # using tuple unpacking to get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # iterating through the rest of the tuple elements\n    for element in test_tuple[1:]:\n        # checking if the data type of the current element matches the first element's data type\n        if type(element)!= data_type:\n            # if not, return False to indicate the data types are not equal\n            return False\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # convert all elements in the tuple to string\n    converted_tuple = tuple(str(x) for x in test_tuple)\n    # get the type of first element in the tuple\n    first_element_type = type(converted_tuple[0])\n    # iterate over all the elements in the tuple\n    for element in converted_tuple:\n        # check if the element is of same data type or not\n        if type(element)!= first_element_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count > n/2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1 # clears the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= (n-1) # clear the least significant bit set to 0 \n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1  # count the rightmost bit\n        n >>= 1  # shift the number to the right\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the string\n    for char in str:\n        # If the character has an odd index value, add it to the new string\n        if ord(char) % 2!= 0:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    \n    # loop through each character in the input string\n    for char in str:\n        # check if the index of the character is odd\n        if ord(char) % 2!= 0:\n            # if the index is odd, add it to the result string\n            result += char\n    \n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    odd_string = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_string += str[i]\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    # create an empty list to store the odd characters\n    result = []\n\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the index of the character is odd\n        if i % 2 == 1:\n            # append the character to the result list\n            result.append(string[i])\n\n    # convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(ord(c)-1) if i%2==0 else c for i, c in enumerate(str)])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the given range into binary\n    binary_range = bin(l)[2:].zfill(n) + bin(r)[2:].zfill(n)\n\n    # calculate the length of binary range\n    binary_len = len(binary_range)\n\n    # check if all bits are set\n    if binary_len == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits\n    count = 0\n    # Check all possible values of bits\n    for i in range(n + 1):\n        # If the bit is unset in the range, increment the count\n        if i & l == 0 and i & r == 0:\n            count += 1\n    # Check if the count is equal to 0, which means all bits are unset in the given range\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        temp = bin(i)[2:]\n        count += len(temp) - len(set(temp))\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Count the number of unset bits between l and r (inclusive)\n    unset_bits = bin(n & ~(2 ** l - 1) & ~(2 ** r - 1)).count('1')\n\n    # Check if all the bits are unset in the given range\n    if unset_bits == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if n is negative or not\n    if n < 0:\n        print(\"Error: Please enter a non-negative number.\")\n        return False\n\n    # Calculate the difference between r and l\n    diff = r - l\n\n    # Convert the binary representation of n to an integer\n    n = int(bin(n)[2:], 2)\n\n    # Calculate the binary representation of diff\n    diff_binary = bin(diff)[2:]\n\n    # Initialize the result variable to True\n    result = True\n\n    # Iterate over the digits of the binary representation of diff\n    for digit in diff_binary:\n        # Check if the digit is 1\n        if digit == '1':\n            # Calculate the index of the digit in n\n            index = int(digit) - 1\n\n            # Check if the bit at that index of n is 0\n            if (n >> index) & 1 == 0:\n                # If the bit is 0, the result variable is set to False and the loop is broken\n                result = False\n                break\n\n    # Return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Loop through all the bits in the binary representation of n\n    for i in range(l, r+1):\n        # If any bit is set, return False\n        if (n & (1 << i))!= 0:\n            return False\n\n    # If no bit is set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize variables to check if all bits are set or unset\n    unset_bit = True\n    set_bit = True\n\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the current bit is set or unset\n        if (n & (1 << i)):\n            unset_bit = False\n        else:\n            set_bit = False\n\n        # if both bits are set or unset, return False\n        if (unset_bit and set_bit):\n            return False\n\n    # if we get to this point, all bits are set or unset\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize variables\n    count = 0\n    \n    # Loop through all possible bits set in n\n    for i in range(l,r+1):\n        # Check if the i-th bit of n is set to 1\n        if (n & (1<<i)) == (1<<i):\n            count += 1\n            \n    # Check if all bits are set\n    if count == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes the number n, the starting and ending indices l and r,\n    and returns True if all the bits in the given range are unset and False otherwise.\n    \"\"\"\n    while l <= r:\n        if n & 1:  # if the least significant bit is set\n            return False\n        n >>= 1\n        l += 1\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative = [num for num in arr[:n] if num < 0]\n    positive = [num for num in arr[n:] if num > 0]\n    zero = [num for num in arr[n:] if num == 0]\n\n    if negative:\n        negative.sort(reverse=True)\n        arr[:n] = negative + zero + positive\n    else:\n        arr[:n] = zero + positive\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the minimum element in the array\n    min_val = min(arr)\n\n    # Initialize variables for positive and negative elements\n    positive = []\n    negative = []\n\n    # Iterate over the array\n    for num in arr:\n        # If the number is negative, add it to the negative list\n        if num < 0:\n            negative.append(num)\n        # If the number is positive or equal to the minimum element, add it to the positive list\n        else:\n            positive.append(num)\n\n    # Iterate over the arrays again and add the negative elements to the beginning of the positive list\n    for num in negative:\n        positive.insert(0, num)\n\n    # Truncate the array to the first n elements\n    arr = positive[:n]\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize two pointers, one for positive elements and one for negative elements\n    pos = 0\n    neg = 0\n    \n    # loop through the array, comparing elements at the pointers\n    while pos < n and neg < len(arr):\n        if arr[pos] >= 0:\n            pos += 1\n        else:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            pos += 1\n            neg += 1\n            \n    # loop through the remaining elements, appending them to the array in the correct order\n    while neg < len(arr):\n        if arr[neg] >= 0:\n            arr.append(arr.pop(neg))\n        else:\n            neg += 1\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize the variables for positive and negative elements\n    positive = 0\n    negative = 0\n    \n    # Loop through the array\n    for i in range(n):\n        if arr[i] >= 0:\n            # If the element is positive, move it to the front of the array\n            positive += 1\n            arr[positive], arr[i] = arr[i], arr[positive]\n        else:\n            # If the element is negative, move it to the end of the array\n            negative += 1\n            arr[negative], arr[i] = arr[i], arr[negative]\n    \n    # If there are any negative elements left, move them to the end of the array\n    if negative > 0:\n        arr[negative:], arr[:negative] = arr[:negative], arr[negative:]\n    \n    # Return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to count the number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n\n    # Loop through the array and count the number of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Create a new array to store the re-arranged elements\n    re_arr = []\n\n    # Loop through the original array and add the positive elements to the new array, then the negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            re_arr.append(arr[i])\n            re_arr.append(pos_count)\n            pos_count -= 1\n        else:\n            re_arr.append(arr[i])\n            re_arr.append(neg_count)\n            neg_count -= 1\n\n    # Copy the remaining elements from the original array to the new array\n    for i in range(n, len(arr)):\n        re_arr.append(arr[i])\n\n    # Return the new array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize two pointers: one for positive elements and one for negative elements\n    i = 0\n    j = n - 1\n\n    # Iterate through the array\n    while i <= j:\n        # If the current element is positive, swap with the next positive element\n        if arr[i] > 0:\n            i += 1\n        # If the current element is negative, swap with the next negative element\n        elif arr[i] < 0:\n            j -= 1\n        # If the current element is zero, move the next positive element\n        else:\n            i += 1\n\n    # Re-arrange the array so that all negative elements appear before positive ones\n    # In the same way as in the problem statement\n    arr[0], arr[n - 1] = arr[n - 1], arr[0]\n    for i in range(n - 2, -1, -1):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for negative elements and one for positive elements\n    negative_ptr = 0\n    positive_ptr = 0\n    # Iterate through the array and swap elements until the two pointers meet\n    while negative_ptr < n and positive_ptr < n:\n        # If the current element is negative, swap it with the element at the negative pointer\n        if arr[negative_ptr] < 0:\n            arr[negative_ptr], arr[positive_ptr] = arr[positive_ptr], arr[negative_ptr]\n            negative_ptr += 1\n            positive_ptr += 1\n        # If the current element is positive, move the positive pointer forward\n        else:\n            positive_ptr += 1\n    \n    # If there are still negative elements left, swap them with the first positive element\n    if negative_ptr < n:\n        for i in range(negative_ptr, n):\n            if arr[i] < 0:\n                arr[i], arr[positive_ptr] = arr[positive_ptr], arr[i]\n                positive_ptr += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize negative count and index\n    neg_count = 0\n    neg_index = 0\n\n    # Iterate over the array\n    for i in range(n):\n\n        # Check if the current element is negative\n        if arr[i] < 0:\n\n            # Increment the negative count\n            neg_count += 1\n\n            # Move the negative element to its correct position\n            while neg_index < neg_count:\n                arr[neg_index], arr[neg_index + 1] = arr[neg_index + 1], arr[neg_index]\n                neg_index += 1\n\n    # Check if there are any negative elements left in the array\n    if neg_count!= 0:\n\n        # Move the remaining negative elements to their correct positions\n        while neg_index < n:\n            arr[neg_index], arr[n - 1] = arr[n - 1], arr[neg_index]\n            neg_index += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create a separate array to store the negative elements\n    negative = []\n    \n    # Loop through the array and add negative elements to the negative array\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n    \n    # Add positive elements to the end of the array\n    positive = arr[n:]\n    \n    # Sort the positive elements in ascending order\n    positive.sort()\n    \n    # Concatenate the negative and positive arrays and return the result\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    \n    # Count the number of negative and positive elements in the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # Move negative elements to the beginning of the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[neg_count], arr[i] = arr[i], arr[neg_count]\n            neg_count += 1\n        else:\n            arr[pos_count], arr[i] = arr[i], arr[pos_count]\n            pos_count += 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # create a copy of the input string\n    str2 = str1.copy()\n    # loop over each character in the string\n    for i in range(len(str2)):\n        # if the character is a space, replace it with the specified character\n        if str2[i] =='':\n            str2[i] = char\n    # return the modified string\n    return ''.join(str2)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to store the n largest items\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    # add the remaining elements of the list to the heap\n    for i in range(n,len(list1)):\n        heapq.heappush(heap, -list1[i])\n    # extract the n largest elements from the heap and return them in a list\n    result = []\n    while len(heap) > 0:\n        result.append(-heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min-heap to keep track of the n largest items\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap back to a list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n        \n    # extract the top n items from the heap and add them to a new list\n    result = []\n    while len(min_heap) > 0:\n        result.append(-heapq.heappop(min_heap))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to find the n largest items in list1\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for item in list1[n:]:\n        if item > heap[0]:\n            heapq.heapreplace(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        min_heap.append(heapq.heappop(min_heap))\n\n    # insert the remaining elements in the heap\n    for item in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list into a heap (min heap)\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        \n    # Extract the n largest items from the heap and store them in a new list\n    result = []\n    while len(heap) > 0 and len(result) < n:\n        result.append(heapq.heappop(heap))\n        \n    # Reverse the order of the result list to get the n largest items\n    result.reverse()\n        \n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area.\n    \"\"\"\n    return 2 * r * h + 2 * r * r * h * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*pi*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * (h+r)\n    print(\"The lateral surface area of the cylinder is: \",lateral_area)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder using the formula:\n    # surface area = 2*pi*r^2*h\n    surface_area = 2*math.pi*(r**2)*h\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14159*r*r + 2*3.14159*h*h - 2*3.14159*r*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # The lateral surface area of a cylinder is 2*pi*r^2 + 2*pi*r*h\n    return 2*3.14159*(r**2) + 2*3.14159*r*h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # cube the side length\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    # loop through each bit of the input number\n    for bit in str(n):\n        # if the bit is even, append a '1' to the result string\n        if int(bit) % 2 == 0:\n            result += '1'\n        # if the bit is odd, append a '0' to the result string\n        else:\n            result += '0'\n    # convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the given number\n    for i in range(32):\n        # If the current bit is even, set the result to 1\n        if (n & (1 << i))!= 0:\n            result |= (1 << i)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits set to 1\n    even_bits = 0\n    \n    # loop through each bit in the number\n    for i in range(32):\n        # check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # if the bit is even, set it to 1 in the even_bits variable\n            even_bits |= 1 << i\n    \n    # return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n \n    even_bits = 0 \n    # Loop through each bit of n and check if it is even \n    for bit in bin(n)[2:]: \n        if int(bit) == 0: # If the bit is even \n            even_bits |= 1 # Set the corresponding bit of even_bits to 1 \n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            even_bits |= 1 << (bin(n)[2:].index(bit))\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer as an input and sets all even bits of that number.\n    For example, if the input is 12, the output should be 100.\n    '''\n    # Initialize an empty list to store the bits of the input number\n    bit_list = []\n\n    # Iterate over each bit of the input number\n    for i in range(32):\n        # If the current bit is even, append 1 to the bit_list\n        if n & (1 << i):\n            bit_list.append(1)\n        else:\n            bit_list.append(0)\n\n    # Convert the bit_list to an integer\n    output = int(\"\".join(str(bit) for bit in bit_list), 2)\n\n    return output"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ (1 << count)\n        count += 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Find the number of even bits in the given number\n    num_of_even_bits = 0\n    while n > 0:\n        if n % 2 == 0:\n            num_of_even_bits += 1\n        n //= 2\n        \n    # Set all even bits in the given number to 1\n    for i in range(num_of_even_bits):\n        n += 1\n        \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        if n & 1 == 0:\n            n |= 1\n        n >>= 1\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = Counter(test_list)\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list\n    unique_tuples = list(set(test_list))\n    # Create a dictionary to store the counts\n    counts = {}\n    # Loop through each tuple in the unique_tuples list\n    for tuple_ in unique_tuples:\n        # Use the Counter function from the Counter module to count the occurrences of each tuple in the list\n        count = Counter(test_list).get(tuple_, 0)\n        # Update the counts dictionary with the count of each tuple\n        counts[tuple_] = count\n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n\n    # loop through each tuple in the test_list\n    for tup in test_list:\n        # check if the current tuple is already in the count_dict\n        if tup in count_dict:\n            # if it is, increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # if it's not, add it to the count_dict with a count of 1\n            count_dict[tup] = 1\n\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the occurrence count\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the current tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of occurrence counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Use Counter to count the number of occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through each tuple in the list\n    for item in test_list:\n        # Check if the tuple is already in the dictionary\n        if item in count_dict:\n            # If it is, increment its count by 1\n            count_dict[item] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[item] = 1\n\n    # Return the dictionary of unique tuples and their counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    counter = Counter(unique_tuples)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    '''\n\n    # initialize a count variable to store the number of non-empty substrings\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)):\n        \n        # loop through each possible starting index for the substring\n        for j in range(i, len(str)+1):\n            \n            # check if the substring is non-empty\n            if str[j:j+i]!= '':\n                \n                # increment the count variable\n                count += 1\n                \n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize count to 0\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)): \n\n        # loop through each character starting from i+1 to the end of the string\n        for j in range(i+1, len(str)+1): \n\n            # check if the substring is non-empty (i.e., does not contain only white spaces)\n            if str[i:j]!='': \n                count += 1\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each character that comes after the current character in the string\n        for j in range(i+1, len(str)+1):\n            # if the substring between the current and next character is not empty, increment count by 1\n            if str[i:j]!= '':\n                count += 1\n    \n    # return count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    # initialize variable to store count of non-empty substrings\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)): \n        # loop through each substring of the current character \n        for j in range(i+1, len(str)+1): \n            # check if the substring is not empty and add it to the count variable\n            if str[i:j]!= \"\":\n                count += 1\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the total number of sequences\n    total_sequences = 0\n\n    # Initialize the list of previous elements\n    prev_elements = []\n\n    # Iterate through the range of elements from 0 to m\n    for i in range(m + 1):\n        # If the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2 * prev_elements[-1] and i <= m:\n            # Add the current element to the list of previous elements\n            prev_elements.append(i)\n            # Check if the current sequence is valid\n            if len(prev_elements) == n:\n                # If the current sequence is valid, increment the total number of sequences\n                total_sequences += 1\n                # Reset the list of previous elements\n                prev_elements = []\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Helper function to calculate the total number of sequences with given length and constraints\n    def count_sequences(length, last_num, next_num, current_num, count):\n        if length == 1:\n            count += 1\n        elif length > 1:\n            count_sequences(length-1, last_num, next_num, current_num, count)\n            if current_num - last_num >= 2*next_num and current_num - last_num <= m:\n                count_sequences(length-1, current_num, next_num, current_num, count)\n        return count\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Calculate the last number of the sequence and the next number of the sequence\n    last_num = 1\n    next_num = 2\n    \n    # Loop through all the positive integers from 1 to m\n    for i in range(1, m+1):\n        # Calculate the current number of the sequence\n        current_num = i\n        \n        # Calculate the total number of sequences with the given length and constraints\n        count = count_sequences(n, last_num, next_num, current_num, count)\n        \n        # Update the last number and the next number of the sequence\n        last_num = current_num\n        next_num += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize count and sequence length\n    count = 0\n    seq_len = 0\n    \n    # Check for the first element\n    if n > m:\n        return 0\n    elif n == m:\n        return 1\n    else:\n        count += 1\n        seq_len += 1\n    \n    # Iterate over remaining elements\n    for i in range(2, n+1):\n        # Check if the current element is within range\n        if i >= 2*seq_len and i <= m:\n            # Check if the previous element is within range\n            if i >= 2*seq_len-1 and i <= m-1:\n                count += get_total_number_of_sequences(m, i-1)\n        else:\n            break\n        \n        # Update the sequence length\n        seq_len = i\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+2, m+1, 2):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(seq):\n        prev = None\n        for elem in seq:\n            if prev is not None:\n                if elem < prev * 2 or elem > m:\n                    return False\n            prev = elem\n        return True\n\n    def memoize(f):\n        cache = {}\n        def wrapper(*args):\n            if args in cache:\n                return cache[args]\n            result = f(*args)\n            cache[args] = result\n            return result\n        return wrapper\n\n    @memoize\n    def get_combinations(length):\n        if length == 1:\n            return 2\n        elif length == 2:\n            return 2 * 2\n        else:\n            return 2 * 2 * 2 * get_combinations(length - 1)\n\n    total_sequences = 0\n    for i in range(1, n + 1):\n        total_sequences += get_combinations(i)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(m, m+n):\n        # Check if the sum of each sequence is less than or equal to m\n        if sum(i) <= m:\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, j, prev):\n        if j == n:\n            return 1\n        if i >= prev and i <= m and j < n:\n            return helper(i + 1, j + 1, i) + helper(i + 1, j + 1, prev)\n        return helper(i + 1, j, prev)\n\n    return helper(2, 1, 2)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2*n:\n        return 0\n    \n    total_sequences = 1\n    \n    for i in range(1, n+1):\n        for j in range(i, m+1, i):\n            total_sequences *= (m - j + 1) // i\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 1\n    for i in range(2, m+1):\n        for j in range(1, n+1):\n            if i >= 2 * j and i <= m:\n                total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the counter variable\n    count = 0\n    \n    # Initialize the array to store the previous element\n    prev_element = 0\n    \n    # Iterate over the range from 1 to m\n    for i in range(1,m+1):\n        \n        # If the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2*prev_element and i <= m:\n            \n            # Increment the counter\n            count += 1\n            \n            # Check if the current element is greater than the previous element\n            if i > prev_element:\n                \n                # Update the previous element\n                prev_element = i\n                \n                # Check if the length of the current sequence is equal to n\n                if len(str(i)) == n:\n                    \n                    # Increment the counter\n                    count += 1\n                    \n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Find the length of the first list\n    length = len(list1)\n    # Iterate over the first list from the end\n    for i in range(length-1,-1,-1):\n        # Check if the last element of the first list is the same as the element at the current index\n        if list1[i] == list2[0]:\n            # Replace the last element of the first list with the elements of the second list\n            list1[i] = list2[:]\n            # Remove the first element of the second list\n            list2 = list2[1:]\n            # Exit the loop\n            break\n        \n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    return list1, last_element"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the last element of the first list\n    last_element = list1[-1]\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = [list2[-1]] + list2[:-1]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return \"Error: Lists must have the same length.\"\n    else:\n        # loop through the list and replace the last element with the elements of the second list\n        for i in range(len(list1)-1):\n            list1[i] = list2[i]\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # loop through the list1 and add the elements from list2 to the end of the first list\n    for i in range(len(list1)-1, -1, -1):\n        list1.append(list2.pop(0))"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # check if the given number is a perfect square \n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N**2 == N:\n        return N + sqrt_N + 1\n    else:\n        return (sqrt_N + 1)**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n\n    \"\"\"\n    # calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    # round the square root to the nearest integer\n    sqrt_N = int(sqrt_N + 0.5)\n    # calculate the square of the nearest perfect square\n    next_square = int(sqrt_N * sqrt_N)\n    # calculate the difference between the next perfect square and N\n    diff = next_square - N\n    # calculate the next perfect square\n    next_N = diff + N\n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Define a function to find the square root of a number\n    def square_root(num):\n        return int(math.sqrt(num)) + 1\n\n    # Check if N is a perfect square\n    if int(math.sqrt(N)) * int(math.sqrt(N)) == N:\n        return int(math.sqrt(N)) + 1\n\n    # Calculate the next perfect square greater than N\n    while True:\n        next_num = square_root(N) * square_root(N)\n        if next_num > N:\n            return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Round down to the nearest integer\n    sqrt_N = int(sqrt_N)\n\n    # Calculate the next perfect square greater than sqrt_N\n    next_sqrt_N = sqrt_N * sqrt_N + 1\n\n    # If the next perfect square greater than sqrt_N is greater than the given number,\n    # then we have found the next perfect square\n    if next_sqrt_N > N:\n        return next_sqrt_N\n    else:\n        # Otherwise, we need to search for the next perfect square greater than sqrt_N\n        return next_Perfect_Square(next_sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        sqrt_N = math.sqrt(N)\n        if int(sqrt_N + 1) ** 2 == N:\n            return int(sqrt_N + 1) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert the input number to a float\n    N = float(N)\n\n    # Initialize variables\n    temp = N\n    square = 0\n\n    # Iterate till the square is greater than the input number\n    while square < N:\n        # Increment the square and check if it is a perfect square\n        square = square + 1\n        if math.isqrt(square) ** 2 == square:\n            # If it is a perfect square, check if it is greater than the input number\n            if square > N:\n                # If it is, return the square\n                return square\n            # If it is not, return the input number since it is already the next perfect square\n            else:\n                return N\n\n    # If the while loop completes without finding a perfect square, return the input number\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_square(n):\n        return math.sqrt(n) == int(math.sqrt(n))\n    \n    def is_perfect_square(n):\n        return n == int(math.sqrt(n))**2\n    \n    def next_prime(n):\n        i = n\n        while True:\n            i += 1\n            if is_prime(i):\n                return i\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_perfect_square(N):\n        N = int(math.sqrt(N))\n        if N < 2:\n            N = 2\n        while not is_square(N):\n            N += 1\n        return N\n    \n    def get_closest_prime(n):\n        i = n\n        while True:\n            i += 1\n            if is_prime(i):\n                return i\n    \n    m = N\n    while not is_square(m):\n        m += 1\n    \n    if m == 1:\n        m = 2\n    \n    i = m\n    \n    if m % 2 == 0:\n        i -= 1\n    \n    while i >= 2:\n        j = i*i\n        if j > m:\n            return i*i\n        if is_prime(j):\n            if j > N:\n                return j\n            else:\n                return get_closest_prime(j)\n        i -= 1\n    \n    return next_prime(m)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_Perfect_Square(N): \n    \"\"\"\n    This function takes a positive integer as input and returns the next perfect square greater than the input number.\n    \"\"\"\n    # Initialize a variable to store the next perfect square \n    next_square = N + 1\n    \n    # Loop until the next perfect square is greater than the input number N \n    while next_square <= N: \n        # Check if the next perfect square is a perfect square \n        if math.sqrt(next_square) == int(math.sqrt(next_square)): \n            return next_square\n        \n        # If the next perfect square is not a perfect square, increment the value of next_square by 1 \n        next_square += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        for i in range(n, 1000000001, 2):\n            if is_prime(i):\n                return i\n\n    x = N + 1\n    while not is_prime(x):\n        x += 1\n\n    next_prime_square = math.sqrt(x)\n    next_perfect_square = int(next_prime_square) + 1\n\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n\n    Args:\n        N (int): A positive integer.\n\n    Returns:\n        int: The next perfect square greater than N.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the left and right boundaries of the current range\n    left, right = 0, N\n    while left < right:\n        # Find the midpoint of the current range\n        mid = (left + right) // 2\n\n        # Check if the midpoint is a perfect square\n        if math.isqrt(mid) ** 2 == mid:\n            right = mid\n        else:\n            left = mid + 1\n\n    return left"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Create a new array dp[i] to store the maximum sum of a subarray of arr[0...i]\n    dp = [0] * n\n\n    # Initialize the maximum sum to the first element in the array\n    dp[0] = arr[0]\n\n    # Iterate through the array from index 1 to n-1\n    for i in range(1, n):\n        # If the element is increasing, add it to the current maximum sum\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        # If the element is decreasing, take the maximum of the current maximum sum and the sum of the previous maximum sum and the current element\n        else:\n            dp[i] = max(dp[i-1], dp[i-1] + arr[i])\n\n    # Return the maximum sum\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Given an array of integers, finds the maximum sum of a bitonic subsequence.\n\n    Args:\n        arr: List of integers representing the array.\n\n    Returns:\n        Maximum sum of a bitonic subsequence in the input array.\n    \"\"\"\n\n    # Initialize variables for the current and previous max sum\n    curr_sum = max_sum_prev = float('-inf')\n\n    # Iterate over the array from left to right\n    for num in arr:\n        # Check if the current number is increasing or decreasing\n        if num > curr_sum:\n            # If increasing, update the current sum and max sum\n            curr_sum = num\n            max_sum_prev = max(max_sum_prev, curr_sum)\n        elif num < curr_sum:\n            # If decreasing, update the previous sum\n            curr_sum = max(max_sum_prev, curr_sum)\n\n    return max_sum_prev"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # if the array is not bitonic, return the maximum element of the array\n    if n <= 1:\n        return max(arr)\n    # initialize the left and right pointers\n    left, right = 0, n - 1\n    # initialize the sum of the left and right subarrays\n    left_sum = arr[left]\n    right_sum = arr[right]\n    # initialize the maximum sum of the subarrays\n    max_left_sum = left_sum\n    max_right_sum = right_sum\n    # loop through the array from the middle to the right\n    for i in range(1, n-1):\n        # if the current element is less than the element at the left pointer, update the left pointer\n        if arr[i] < arr[left]:\n            left = i\n        # if the current element is greater than the element at the right pointer, update the right pointer\n        if arr[i] > arr[right]:\n            right = i\n        # calculate the sum of the left and right subarrays\n        current_left_sum = arr[left] + left_sum\n        current_right_sum = arr[right] + right_sum\n        # update the maximum sum of the left and right subarrays\n        max_left_sum = max(max_left_sum, current_left_sum)\n        max_right_sum = max(max_right_sum, current_right_sum)\n        # update the sums of the left and right subarrays\n        left_sum = current_left_sum\n        right_sum = current_right_sum\n    # return the maximum sum of the subarrays\n    return max(max_left_sum, max_right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    # Check if first two elements are increasing and decreasing\n    if arr[0] < arr[1] and arr[0] > arr[2]:\n        max_sum1 = arr[0] + arr[1] + arr[2]\n        max_sum2 = arr[0] + max(arr[1], arr[2])\n    else:\n        max_sum1 = max(arr[0], arr[1], arr[2])\n        max_sum2 = max(arr[0], max(arr[1], arr[2]))\n\n    # Check if last two elements are increasing and decreasing\n    if arr[-1] > arr[-2] and arr[-1] < arr[-3]:\n        max_sum3 = arr[-1] + arr[-2] + arr[-3]\n        max_sum4 = arr[-1] + max(arr[-2], arr[-3])\n    else:\n        max_sum3 = max(arr[-1], arr[-2], arr[-3])\n        max_sum4 = max(arr[-1], max(arr[-2], arr[-3]))\n\n    # Calculate the maximum sum of a bitonic subsequence\n    if max_sum1 > max_sum2 and max_sum1 > max_sum3 and max_sum1 > max_sum4:\n        max_sum = max_sum1\n    elif max_sum2 > max_sum1 and max_sum2 > max_sum3 and max_sum2 > max_sum4:\n        max_sum = max_sum2\n    elif max_sum3 > max_sum1 and max_sum3 > max_sum2 and max_sum3 > max_sum4:\n        max_sum = max_sum3\n    else:\n        max_sum = max_sum4\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    max_sum_so_far = float('-inf')\n    max_sum_ending_here = 0\n    curr_sum = 0\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is increasing, add it to the current sum\n        if arr[i] < arr[i + 1]:\n            curr_sum += arr[i]\n        # If the current element is decreasing, take the maximum of the current sum and the maximum sum ending here\n        else:\n            max_sum_ending_here = max(max_sum_ending_here, curr_sum)\n            curr_sum = 0\n\n    # Take the maximum of the current sum and the maximum sum ending here\n    max_sum_ending_here = max(max_sum_ending_here, curr_sum)\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum_ending_here"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # check if the array is increasing or decreasing\n    increasing = arr[1] < arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] > arr[i]:\n            increasing = False\n            break\n        elif arr[i+1] < arr[i]:\n            increasing = True\n            break\n\n    if increasing:\n        # max_sum_increasing[i] = max(max_sum_increasing[i-1], arr[i])\n        max_sum_increasing = [0] * n\n        max_sum_increasing[0] = arr[0]\n        for i in range(1, n):\n            max_sum_increasing[i] = max(max_sum_increasing[i-1], arr[i])\n        return max_sum_increasing[-1]\n    else:\n        # max_sum_decreasing[i] = max(max_sum_decreasing[i-1], arr[i])\n        max_sum_decreasing = [0] * n\n        max_sum_decreasing[0] = arr[0]\n        for i in range(1, n):\n            max_sum_decreasing[i] = max(max_sum_decreasing[i-1], arr[i])\n        return max_sum_decreasing[0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    \n    # Initialize variables\n    prev_diff = 0\n    curr_diff = 0\n    curr_sum = 0\n    max_sum = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n        \n        # Update the current difference and sum\n        curr_diff = diff if diff > 0 else -diff\n        curr_sum += curr_diff\n        \n        # Check if the sum is greater than the previous maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # Check if the difference is increasing\n        if diff > 0 and curr_diff < 0:\n            # Check if the previous difference was decreasing as well\n            if prev_diff > 0:\n                # Update the maximum sum if the current sequence is bitonic\n                max_sum = max(max_sum, curr_sum)\n        \n        # Update the previous difference\n        prev_diff = curr_diff\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return arr[0] if len(arr) == 1 else 0\n    \n    # initialize variables for the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # if the element is increasing, add it to the current subsequence sum\n        if arr[i] < arr[i-1]:\n            curr_sum += arr[i]\n        # otherwise, if the element is decreasing, check if it can be included in the current subsequence sum\n        else:\n            # if it can, add it to the maximum sum and reset the current subsequence sum to 0\n            curr_sum += arr[i]\n            max_sum = max(max_sum, curr_sum)\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables for the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and check if the current element is increasing or decreasing\n    for i in range(len(arr)):\n        if i % 2 == 0:  # Even elements\n            if arr[i] < arr[i-1]:  # Increasing element\n                current_sum += arr[i]\n            else:  # Decreasing element\n                current_sum = max(current_sum + arr[i], current_sum)\n        else:  # Odd elements\n            if arr[i] > arr[i-1]:  # Increasing element\n                current_sum += arr[i]\n            else:  # Decreasing element\n                current_sum = max(current_sum + arr[i], current_sum)\n        # Update the maximum sum if the current subsequence sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    Args:\n        number (float): The number whose square root is to be found.\n\n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n    # initialize variables\n    current = number\n    previous = 0\n    i = 0\n    # loop until the square root is within a certain tolerance\n    while abs(current - previous) > 1e-12:\n        # calculate the next approximation\n        next = (current + number/current) / 2\n        # update the current approximation\n        current = next\n        i += 1\n    # return the final approximation\n    return current"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Start with the first guess and the maximum allowed error\n    guess = 1.0\n    error = 0.0001\n\n    while error > 0.0001:\n        # Compute the next guess using the babylonian method\n        guess = guess - (guess**2 - number) / (2 * guess)\n\n        # Compute the error\n        error = abs(guess - number)\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 > number:\n            guess -= (number / guess)\n        else:\n            guess += (number / guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    next_guess = 1\n\n    while next_guess <= number:\n        guess = (guess + next_guess) / 2\n        next_guess = guess ** 2\n\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # calculate the initial guess for the square root\n    guess = number / 2\n\n    # calculate the number of iterations needed to converge\n    iterations = 0\n    while guess * guess > number:\n        guess = (number / guess) + guess / 2\n        iterations += 1\n\n    # calculate the final square root using the babylonian method\n    sqrt = guess\n\n    # print the number of iterations needed to converge and the final square root\n    print(\"Number of iterations needed to converge:\", iterations)\n    print(\"Final square root:\", sqrt)\n\n    return sqrt"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    guess = number // 2\n    previous_guess = 0\n    epsilon = 0.000001\n    maximum_iterations = 1000\n\n    # Initialize the iteration counter\n    iterations = 0\n\n    while abs(guess ** 2 - number) > epsilon and iterations < maximum_iterations:\n        previous_guess = guess\n        guess = (guess + number / guess) // 2\n        iterations += 1\n\n    # If the maximum iterations is reached, return the previous guess\n    if iterations == maximum_iterations:\n        return previous_guess\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # find the initial guess of the square root\n    guess = 0.5\n    \n    # initialize the number of iterations\n    i = 0\n    \n    while True:\n        # compute the next guess\n        next_guess = (guess + number/guess) / 2\n        \n        # check if the difference between the current guess and the square root is less than some tolerance\n        if abs(next_guess - math.sqrt(number)) < 0.00001:\n            # return the computed value\n            return next_guess\n        \n        # update the guess\n        guess = next_guess\n        \n        # increment the iteration counter\n        i += 1\n        \n        # check if the maximum number of iterations has been reached\n        if i > 1000:\n            print(\"Maximum number of iterations reached!\")\n            return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = number\n\n    while abs(y - x) > 0.0001:\n        x = (x + y) / 2\n        y = number / x\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = number / 2.0\n    prev_guess = 0.0\n    tolerance = 1e-6\n    iterations = 0\n\n    # iterate until the difference between the current guess and the previous guess is less than the tolerance\n    while abs(guess * guess - number) > tolerance and iterations < 1000:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2.0\n        iterations += 1\n\n    if iterations == 1000:\n        print(\"Maximum iterations reached.\")\n        return None\n\n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    old_guess = 0.0\n    guess = number / 2.0\n    max_iterations = 1000\n    \n    # Compute the square root using the babylonian method\n    for i in range(max_iterations):\n        old_guess = guess\n        guess = (guess + number / guess) / 2.0\n        \n        if abs(guess - old_guess) < 1e-6:\n            break\n            \n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    # Create a table to store length of longest palindromic subsequences of all \n    # substrings of given string. \n    table = [[0] * len(str) for i in range(len(str))] \n  \n    # Fill the table in bottom-up manner. \n    for i in range(len(str)): \n        table[i][i] = 1 \n  \n    # Find lengths of longest palindromic subsequences of all prefixes \n    # of given string. \n    for j in range(1, len(str)): \n        for i in range(j): \n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n            else: \n                table[i][j] = max(table[i+1][j], table[i][j-1]) \n  \n    # Return length of longest palindromic subsequence. \n    return table[0][len(str)-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Initialize a 2D table to store the length of longest palindromic subsequence ending at each position\n    table = [[0] * len(str) for _ in range(len(str))]\n    \n    # Fill the table in bottom up manner\n    for i in range(len(str)):\n        table[i][i] = 1\n    \n    for i in range(len(str) - 1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n    \n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            \n    # Return the length of the longest palindromic subsequence ending at the last position\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    if len(s) <= 1:\n        return len(s)\n    \n    n = len(s)\n    dp = [1] * n\n    \n    for i in range(1, n-1):\n        if s[i] == s[i+1]:\n            dp[i] = 2 + dp[i-1]\n    \n    # find the longest palindrome in dp\n    max_length = max(dp)\n    for i in range(n-1, -1, -1):\n        if dp[i] == max_length and (i+max_length <= n-1 and s[i:i+max_length+1] == s[i:i+max_length+1][::-1]):\n            max_length = i+1\n    \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize the two pointers to the first and last character of the string\n    i = 0\n    j = 0\n    max_length = 1\n\n    # Loop through the string and compare the characters at the two pointers\n    while i < n and j < n:\n        if s[i] == s[j]:\n            # If the characters are the same, increase the length of the palindrome by 2\n            length = 2\n            i += 1\n            j += 1\n            max_length = max(max_length, length)\n        elif j > 0 and s[i] == s[j-1]:\n            # If the characters are different and the previous character was also the same,\n            # take the maximum length between the current length and the length of the current palindrome\n            length = j - i + 1\n            i += 1\n            max_length = max(max_length, length)\n        else:\n            # If the characters are different and the previous character was not the same,\n            # move the right pointer to the next character\n            j += 1\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    # Initialize variables\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    # Fill dp table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                dp[i][j] = dp[j][i-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[j][i])\n\n    # Return length of longest palindromic subsequence\n    return dp[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = 1\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n            max_len = 2\n            start = i\n\n    for i in range(n - 3, -1, -1):\n        for j in range(i + 2, n):\n            if s[i] == s[j]:\n                if i == j:\n                    dp[i][j] = 2\n                    max_len = 2\n                    start = i\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                    if dp[i][j] > max_len:\n                        max_len = dp[i][j]\n                        start = i\n\n    return max_len\n\ndef longest_palindromic_subsequence_length(s):\n    return longest_palindromic_subsequence(s)\n\nif __name__ == \"__main__\":\n    s = input(\"Enter a string: \")\n    print(\"Length of the longest palindromic subsequence:\", longest_palindromic_subsequence_length(s))"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store lengths of longest palindrome subsequence of all prefixes of the given string\n    table = [[0]*(len(str)) for i in range(len(str)+1)]\n\n    # Initialize the table with zeros to start\n    for i in range(len(str)+1):\n        table[0][i] = 0\n\n    # Fill the table using dynamic programming approach\n    for i in range(1,len(str)+1):\n        for j in range(1,len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n    lps_arr = [0] * n\n    lps_arr[0] = 0\n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps_arr[i] = lps_arr[i-1] + 2\n        else:\n            lps_arr[i] = max(lps_arr[i-1], lps_arr[i-lps_arr[i-1]-1])\n\n    return lps_arr[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    for i in range(n):\n        dp[i][i] = 1\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n        for j in range(i + 2, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each index\n    dp = [[0] * len(str) for _ in range(len(str))]\n\n    # initialize the first column and first row of the array\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # fill in the rest of the array using dynamic programming\n    for length in range(3, len(str) + 1):\n        for start in range(len(str) - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    # return the length of the longest palindromic subsequence\n    return dp[-1][-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum variable to 0\n    sum_harmonic = 0\n    # loop through the range of 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum of i\n        harmonic = 1/(i + 1)\n        # add the harmonic sum to the sum variable\n        sum_harmonic += harmonic\n    # return the sum variable\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n) * (n*(n-1)*(2*n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2 * n - 1) / (n - 1) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1.0 / (n * harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 / 2\n    else:\n        return 1 / (2 * n - 1) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n*(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in array_nums2\n    freq_dict = {}\n    for num in array_nums2:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate over array_nums1 and find the intersection of its elements with elements of array_nums2\n    intersection = []\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # Loop through array_nums2 and check if each element is in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            # Decrement the frequency of the element in the dictionary\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays\n    common_nums = [num for num in array_nums1 if num in array_nums2]\n\n    # Return the intersection of the two arrays\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    for num in set1:\n        if num in set2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each number in array_nums2\n    frequency = {}\n    for num in array_nums2:\n        frequency[num] = frequency.get(num, 0) + 1\n\n    # Iterate over array_nums1 and check if each number is in the dictionary\n    intersection = []\n    for num in array_nums1:\n        if num in frequency and frequency[num] > 0:\n            intersection.append(num)\n            frequency[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the elements of the two arrays.\n    dict1 = {}\n    dict2 = {}\n\n    # Iterate over the elements of the first array and add them to the dictionary.\n    for num in array_nums1:\n        dict1[num] = True\n\n    # Iterate over the elements of the second array and add them to the dictionary.\n    for num in array_nums2:\n        if num in dict1:\n            dict1[num] = True\n        else:\n            del dict1[num]\n\n    # Create an empty list to store the intersection of the two arrays.\n    intersection = []\n\n    # Iterate over the elements of the first dictionary and add them to the intersection list if they are still in the dictionary.\n    for num in dict1:\n        intersection.append(num)\n\n    # Return the intersection list.\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from array_nums1 to remove duplicates\n    set_nums1 = set(array_nums1)\n\n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # iterate through array_nums2 and add to the intersection if it is in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty list to store the intersection\n    intersection = []\n    # Loop through each number in array_nums1\n    for num1 in array_nums1:\n        # Loop through each number in array_nums2\n        for num2 in array_nums2:\n            # If the numbers are equal, add them to the intersection list\n            if num1 == num2:\n                intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two empty sets to store the common elements of the two arrays\n    common_set1 = set()\n    common_set2 = set()\n    # iterate through the first array and add the elements to the common set\n    for num in array_nums1:\n        common_set1.add(num)\n    # iterate through the second array and add the elements to the common set\n    for num in array_nums2:\n        common_set2.add(num)\n    # find the intersection of the two sets and store them in a new set\n    intersection_set = common_set1.intersection(common_set2)\n    # convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new empty list to store the inserted elements\n    result = []\n    # iterate through the original list\n    for item in list:\n        # insert the element before each item in the original list\n        result.append(element)\n        result.append(item)\n    # return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    # loop through each element in the list\n    for i in range(len(list)):\n        # insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list.\n\n    Parameters:\n    lst (list): the list to insert the element into\n    elem (any): the element to insert\n\n    Returns:\n    list: the resulting list with the element inserted before each element in the original list\n    \"\"\"\n    # initialize a new list to hold the modified elements\n    modified_lst = []\n    # loop through each element in the original list\n    for i in range(len(lst)):\n        # insert the element before the current element\n        modified_lst.insert(i, elem)\n        # append the original element to the modified list\n        modified_lst.append(lst[i])\n    # return the modified list\n    return modified_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # unpack complex number\n        real, imag = number\n        \n        # calculate magnitude and angle of complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        \n        # print polar coordinates\n        print(\"Magnitude:\", magnitude)\n        print(\"Angle:\", angle, \"degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # convert numbers to complex numbers\n    nums = [complex(num1, num2) for num1, num2 in zip(numbers[::2], numbers[1::2])]\n\n    # calculate the modulus and angle of each complex number\n    angles = [cmath.phase(num) for num in nums]\n    modulus = [cmath.abs(num) for num in nums]\n\n    # convert the modulus and angle to tuples\n    polar_coords = [(angle, modulus) for angle, modulus in zip(angles, modulus)]\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    result = []\n    for number in numbers:\n        # Convert to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Format the output\n        formatted_number = f\"{r:.2f} ({theta:.2f})\"\n        result.append(formatted_number)\n        \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the given complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(f'({r:.2f}, {theta:.2f})')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(\"{:.2f}+{:.2fi}\".format(real, imag))\n\nif __name__ == \"__main__\":\n    numbers = [1+2j, 3-4j, 5+6j, 7-8j]\n    convert(numbers)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r, theta = cmath.polar(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append([real, imag])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n\n    for number in numbers:\n        complex_numbers.append(cmath.rect(number))\n\n    return complex_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num) for num in numbers.split()]\n    polar_coordinates = []\n    \n    for num in complex_numbers:\n        real, imag = num.real, num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        \n        polar_coordinates.append((mag, phase))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(num)\n        polar = (magnitude, angle)\n        result.append(polar)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as an argument and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            combos.append((l[i],) + j)\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(c) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations of length n with replacement (i.e., without duplicates) from l\n    comb = combinations_with_replacement(l, n)\n\n    # Create a list of tuples for each combination\n    result = []\n    for c in comb:\n        result.append(tuple(c))\n\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    count = 0\n    for i in range(2, n+1):\n        if primes[i]:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number `n` and returns the number of prime numbers less than `n`.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    A helper function to check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # initialize a boolean array \"is_prime[0..n]\" and\n    # \"is_prime[i] = true\" if i is prime, else false\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n\n    # Create a sieve of Eratosthenes\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    # count the number of prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # initialize a boolean list to keep track of prime numbers\n    is_prime = [True] * (n+1)\n    \n    # initialize a counter variable to keep track of prime numbers\n    count = 0\n    \n    # loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        \n        # if a number is prime, mark all its multiples as composite\n        if is_prime[i]:\n            count += 1\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    \n    # return the final count of prime numbers\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    '''\n    A helper function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # find the maximum element in each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    # create a new tuple with the maximum elements\n    new_tup = (max_tup1, max_tup2)\n    \n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Maximize the first element\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    # Maximize the second element\n    if max_tup[1] > test_tup2[1]:\n        max_tup = (max_tup[0], max_tup[1])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    # Initialize the max_tuple with the first tuple\n    max_tuple = test_tup1\n    \n    # Iterate over the second tuple and compare its elements with the elements of the max_tuple\n    for element in test_tup2:\n        # Check if the element is greater than the max element in the max_tuple\n        if element > max(max_tuple):\n            # If yes, update the max_tuple with the new element\n            max_tuple = tuple(sorted(max_tuple + (element,), reverse=True))\n    \n    # Return the max_tuple\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1[0], test_tup2[0])\n    max_tuple = (max_num, test_tup1)\n    if max_num == test_tup1[0]:\n        max_tuple = (max_num, test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the maximum element(s) among them.\n    '''\n    max_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        if not max_tup:\n            max_tup = tup\n        else:\n            for i in range(len(max_tup)):\n                if max_tup[i] < tup[i]:\n                    max_tup = tup[:i] + (max(max_tup[i], tup[i]),) + tup[i+1:]\n                    break\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Initialize variables to store the maximum values\n    max1 = max2 = float('-inf')\n    \n    # Loop through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    \n    # Return the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # loop through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            # swap the values if the first tuple has a smaller value\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n\n    # return the max tuple\n    return test_tup1 if max(test_tup1) >= max(test_tup2) else test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Initialize variables\n    count = 0\n    prime = 2\n    \n    # Loop through numbers to find nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if number is prime\n        if all(i % prime!= 0 for i in range(2, prime)):\n            prime += 1\n        count += 1\n    \n    # Return nth newman\u2013shanks\u2013williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n): \n        '''\n        A helper function to check if a number is prime or not.\n        '''\n        if n <= 1: \n            return False\n        for i in range(2, int(n**0.5) + 1): \n            if n % i == 0: \n                return False\n        return True\n\n    def is_newman_prime(n, k): \n        '''\n        A helper function to check if a number is newman-shanks-williams prime or not.\n        '''\n        if n <= 1: \n            return False\n        if n == 2: \n            return True\n        if n % 2 == 0: \n            return False\n        if n % 3 == 0: \n            return False\n        if n % 5 == 0: \n            return False\n        if n % 7 == 0: \n            return False\n        if n % 11 == 0: \n            return False\n        if n % 13 == 0: \n            return False\n        if n % 17 == 0: \n            return False\n        if n % 19 == 0: \n            return False\n        for i in range(5, int(n**0.5) + 1, 6): \n            if n % i == 0: \n                return False\n        for i in range(11, int(n**0.5) + 1, 10): \n            if n % i == 0: \n                return False\n        for i in range(13, int(n**0.5) + 1, 12): \n            if n % i == 0: \n                return False\n        for i in range(17, int(n**0.5) + 1, 16): \n            if n % i == 0: \n                return False\n        for i in range(19, int(n**0.5) + 1, 18): \n            if n % i == 0: \n                return False\n        return True\n\n    if n <= 0: \n        return None\n    count = 0\n    p = 2\n    while count < n: \n        if is_newman_prime(p, 3): \n            count += 1\n        p += 1\n    return p - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the sequence of numbers\n    sequence = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Define the prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n-1):\n        prime = False\n        while not prime:\n            num = sequence[i]\n            if num not in primes:\n                for j in range(i+2, len(sequence)):\n                    if sequence[j] % num == 0:\n                        break\n                else:\n                    primes.append(num)\n                    prime = True\n\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    prime_list = [2, 3] # start with the first two primes\n    \n    for i in range(5, n+1):\n        is_prime = True\n        for prime in prime_list:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n            if len(prime_list) == n:\n                return prime_list[-1]\n    return \"No prime number found.\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 1\n    while True:\n        b = 2\n        while True:\n            if a % b == 0:\n                break\n            b += 1\n        if b * b > n:\n            break\n        a += 1\n    return a - 1\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"newman-shanks-williams prime number is:\", newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define a function to check if a number is a newman-shanks-williams prime\n    def is_newman_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to find the nth newman-shanks-williams prime\n    def nth_newman_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_newman_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    prime = []\n    \n    while prime[-1] < n:\n        is_prime = True\n        for i in range(2, p):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime.append(p)\n        p += 1\n        \n    return prime[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the list of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Initialize the list of non-primes\n    non_primes = [p for p in range(54, 100) if p % 2 == 1 or p % 3 == 0 or p % 5 == 0]\n\n    # Initialize the count of primes found so far\n    count = 0\n\n    # Loop over the non-primes list up to the nth prime\n    for i in range(count, n):\n\n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n\n    # Check if the nth prime is in the list of primes\n    if n - count == 1:\n        return primes[n - 1]\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    This function returns the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n\n    # Loop through all odd numbers up to the square root of n\n    while p**2 <= n:\n        # If p is prime, add it to the count and divide n by p\n        if n % p == 0:\n            count += 1\n            n //= p\n        # Otherwise, increment p by 2\n        else:\n            p += 2\n\n    # If n is a prime power, add it to the count\n    if n > 1:\n        count += 1\n\n    # If the count is greater than n, n is a newman\u2013shanks\u2013williams prime\n    if count > n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must have same length\")\n        return\n    \n    # Perform element-wise division and return the result as a tuple\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # perform element-wise division operation using zip() function\n    result = [num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)]\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n\n    # Perform element-wise division\n    result_tup = tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Warning: Division by zero encountered in tuple:\", test_tup1)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples are not equal.\")\n        return\n    \n    # Check if both tuples contain only numbers\n    for num in test_tup1 + test_tup2:\n        if not isinstance(num, (int, float)):\n            print(\"Error: Both tuples should contain only numbers.\")\n            return\n    \n    # Perform element-wise division on the tuples\n    result_tup = tuple(num1/num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup = result_tup + (result,)\n        except ZeroDivisionError:\n            print(\"Cannot divide by zero.\")\n            return\n    \n    print(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use the slicing technique to split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Determine the length of the second part of the list\n    second_part_length = len(list1) - L\n    \n    # Create the two parts of the list\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Define the list for the first part\n    part1 = []\n    # Loop through the list and add elements to part1 until the length of part1 is L\n    for i in range(L):\n        if i < len(list1):\n            part1.append(list1[i])\n    # Define the list for the second part\n    part2 = list1[L:]\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    if len(lst) < L:\n        print(\"Error: list is too short to split.\")\n        return None, None\n    else:\n        first_part = lst[:L]\n        second_part = lst[L:]\n        return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the length of the list is greater than L\n    if len(list1) > L:\n        # slice the list into two parts\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # return the two parts as a tuple\n        return (first_part, second_part)\n    else:\n        # return the original list as a tuple if the length of the list is less than L\n        return (list1, )"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length1 = 0\n    length2 = 0\n    for i in range(len(list1)):\n        length1 += 1\n        if length1 == L:\n            length1 = 0\n            length2 += 1\n    list1_part1 = list1[:length2]\n    list1_part2 = list1[length2:]\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    L = min(L, n)\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"List is too small to split into two parts.\")\n    mid = len(list1) // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None, None\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 + int(h_age/2)\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): The age of the human in hours\n\n    Returns:\n    int: The dog's age in dog's years\n    \"\"\"\n\n    dog_years = 7 * h_age / 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    years_in_dog_years = 7\n    dog_years = h_age * years_in_dog_years\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_per_week = 52\n    years_per_month = 12\n    years_per_year = 1\n    age = h_age / years_per_week\n    age = age / years_per_month\n    age = age / years_per_year\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    years = h_age * 7\n\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        sub_list = S[i:i+step]\n        result.append(sub_list)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    L = []\n    for i in range(0, n, step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Add the current sublist to the result list\n        result.append(S[i:i+step])\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S) or step <= 0:\n        raise ValueError(\"Step must be a positive integer less than or equal to the length of the list\")\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    i = 0\n    while i < n:\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if isinstance(S, list) and isinstance(step, int):\n        n = step\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        else:\n            result = []\n            for i in range(0, len(S), n):\n                result.append(S[i:i+n])\n            return result\n    else:\n        raise TypeError(\"Input must be a list and an integer\")"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 6 * l**2\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l + 6 * l + 12"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(2, n+1, 2):\n        odd_sum += i*i\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of i to sum_of_squares\n        sum_of_squares += i*i\n        \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a counter variable to keep track of odd numbers\n    count = 0\n    # initialize the sum variable to keep track of the sum of squares of odd numbers\n    sum_of_squares = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum of squares of odd numbers\n        sum_of_squares += i*i\n        # increment the counter variable\n        count += 1\n    # return the sum of squares of odd numbers\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the star number variable\n    star_num = 1\n    \n    # Iterate through the range of n\n    for i in range(1, n+1):\n        # Multiply the current value of star_num by 2\n        star_num *= 2\n    \n    # Return the final value of star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the first n stars\n    stars = ['*' for i in range(n)]\n\n    # Add more stars if necessary\n    for i in range(n - len(stars)):\n        stars.append('*')\n\n    # Return the final list of stars\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    star_num = 1\n\n    # Loop through each digit in the input number\n    for i in range(1, n+1):\n        # Add the current digit to the sum of the previous two digits\n        num += star_num\n        # Multiply the result by 10 to get the next digit\n        star_num = num * 10\n\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first star\n    star = '*'\n    # loop through the remaining n-1 stars\n    for i in range(1, n-1):\n        # add a space between each star\n        star +=''\n        # add the current star to the end of the star string\n        star += star\n    # add the last star to the end of the star string\n    star += '*'\n    # print the result\n    print(star)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n+1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    num = 1\n    star = '*'\n    count = 0\n\n    # loop to generaten'th star number\n    while count < n:\n        print(star * num, end=' ')\n        num += 1\n        count += 1\n\n    # print a newline to move to next line\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer as input and returns then'th star number.\n    \"\"\"\n    # Define the base sequence of numbers\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    # Calculate the value of then'th star number\n    nth_star_num = (sequence[n-1] * (n-1)) // 2\n\n    return nth_star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the sum of stars\n    sum_of_stars = 0\n    \n    # Loop through each number from 1 to n and add the number to the sum\n    for i in range(1, n+1):\n        sum_of_stars += i\n    \n    # Return the sum of stars\n    return sum_of_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first star number\n    start = 1\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # print the current star number\n        print(\"*\" * start)\n        # update the start number for the next iteration\n        start = (start * 2) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a string as input and returns the ASCII value of the character.\n    '''\n    k = k.lower()\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character (string) as input and returns its ASCII value.\n    '''\n    # Convert the character to its ASCII value\n    ascii_value = ord(k)\n    # Return the ASCII value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    if k.isalpha():\n        return ord(k)\n    else:\n        return -1"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if even_index % 2 == 0:\n                sum += arr[i]\n            even_index += 1\n            \n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if number is even\n            sum += arr[i]\n            count += 1\n        if count % 2 == 0:  # check if count is even\n            sum += arr[i]  # add even number to sum\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_sum -= arr[i-1]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n            if count % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result += i * i * i * i * i\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum_even_powers += i**5\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        if i % 2 == 0: \n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum_even_powers = 0\n\n    # iterate through the first n even natural numbers and add their fifth powers to the sum\n    for i in range(2, n+1, 2):\n        sum_even_powers += i ** 5\n\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power_n = 0\n    for i in range(n):\n        sum_even_power_n += i ** 5\n    return sum_even_power_n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers\n\nn = 1000\nresult = even_Power_Sum(n)\nprint(\"The sum of the first\", n, \"even natural numbers raised to the fifth power is:\", result)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_even_powers += i ** 5\n    return sum_of_even_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear_element for tuple in test_list for rear_element in tuple]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_item in test_list:\n        rear_list.append(tuple_item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Create a new tuple that has the same elements as the first tuple\n    new_tup = tuple(test_tup1)\n\n    # Loop through the elements of the second tuple and subtract the corresponding element of the first tuple\n    for i in range(len(new_tup)):\n        new_tup[i] -= test_tup2[i]\n\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the two tuples must be the same\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    print(test_tup1)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n    \n    # Create a new tuple with the difference between the elements of the two input tuples\n    difference_tup = tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    \n    print(\"The difference between the two input tuples is:\", difference_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return None\n    else:\n        new_tup = ()\n        for i in range(len(test_tup1)):\n            if i in test_tup2:\n                new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n            else:\n                new_tup = new_tup + (test_tup1[i],)\n        return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # checking if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of equal length.\"\n    \n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    if n < 2:\n        return 0\n\n    even_coeff_sum = 0\n    for i in range(2, n+1, 2):\n        even_coeff_sum += math.comb(n, i)\n\n    return even_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # initialize the sum of even index binomial coefficients to zero\n    sum_even_binomial_coeffs = 0\n\n    # loop through each index i from 0 to n-1\n    for i in range(n):\n        # compute the even index binomial coefficient for i\n        even_binomial_coeff = math.comb(n, i)\n        # add the even index binomial coefficient to the sum of even index binomial coefficients\n        sum_even_binomial_coeffs += even_binomial_coeff\n\n    # return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        coeff_sum = 0\n        for i in range(1, n+1, 2):\n            coeff_sum += math.comb(n, i)\n        return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    i = 0\n    while i <= n:\n        if i % 2 == 0:\n            result += math.comb(n, i)\n        i += 1\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        coeff = math.factorial(n) // math.factorial(i-1) // math.factorial(n-i+2)\n        if i % 2 == 0:\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through each i from 0 to n\n    for i in range(0, n+1):\n        # calculate the even index binomial coefficient\n        even_i = math.comb(n, i)\n\n        # check if the coefficient is even\n        if even_i % 2 == 0:\n            # add the even index binomial coefficient to the sum\n            sum += even_i\n\n    # return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Calculate the binomial coefficient using math.comb()\n            binomial_coeff = math.comb(n, i-1)\n            # Check if the binomial coefficient is even\n            if binomial_coeff % 2 == 0:\n                total += binomial_coeff\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % 2 == 0 and j % 2 == 0:\n                sum += i * j\n\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of the even index binomial coefficients of n.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    # Initialize sum variable to 0\n    coeff_sum = 0\n    # Iterate through each even index coefficient\n    for i in range(2, n+1, 2):\n        # Calculate the coefficient\n        coeff = math.comb(n, i)\n        # Add the even index coefficient to the sum\n        coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize the sum to zero\n    sum_even = 0\n    # loop through the even indices from 0 to n-1\n    for i in range(0, n, 2):\n        # find the binomial coefficient of i and n-i\n        coeff = math.comb(n-1, i-1)\n        # add the coefficient to the sum\n        sum_even += coeff\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume\n\npi = 3.14159265358979323846\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\nprint(\"The volume of the cylinder is:\", volume_cylinder(radius, height))"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.1415926535 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = 3.14 * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # Calculate the volume using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = 1/3 * 3.14159 * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Filter dictionary to only include entries with values greater than or equal to n\n    new_dict = {key: value for key, value in dict.items() if value >= n}\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, element in enumerate(test_tup):\n        if i > 0 and element == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = []\n    for i in range(1, n+1):\n        num_list.append(i*(4*i-3))\n    return num_list[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(n):\n        decagonal += 2*i**2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function checks whether a given number is a decagonal number or not.\n    A decagonal number is a positive integer whose square is equal to the sum of its digits.\n    '''\n    # convert number to string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(n)))\n    # calculate the sum of the digits and the square of the number\n    sum_of_digits = sum(int(digit) for digit in number_str)\n    square_of_number = int(number_str) ** 2\n    # check if the sum of the digits and the square of the number is equal to the number itself\n    if sum_of_digits == square_of_number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i * (2 * i - 1)\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Function to find the nth decagonal number\n    def nth_decagonal(n):\n        '''\n        Find the nth decagonal number.\n        '''\n        return (n * (3 * n - 1)) / 2\n\n    # Check if the input is a valid integer\n    if not isinstance(n, int):\n        return False\n\n    # Check if the input is non-negative\n    if n < 0:\n        return False\n\n    # Check if the input is less than 1,000\n    if n > 999:\n        return False\n\n    # Call the nth_decagonal function and return the result\n    return nth_decagonal(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Compute the first n numbers of the decagonal sequence\n    decagonal_sequence = [1] * n\n    for i in range(2, n+1):\n        decagonal_sequence[i-1] = decagonal_sequence[i-1] + decagonal_sequence[i-2]\n    \n    # Return the nth number in the sequence\n    return decagonal_sequence[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the first and last digits of the decagonal number\n    first_digit = 1\n    last_digit = 10\n\n    # Initialize the sum of the first and last digits\n    sum_of_digits = first_digit + last_digit\n\n    # Iterate until the sum of the first and last digits is greater than or equal to n\n    while sum_of_digits < n:\n        # Update the last digit to the previous number of digits\n        last_digit = last_digit - 1\n        # Calculate the new sum of the first and last digits\n        sum_of_digits = first_digit + last_digit\n        # Increment the first digit\n        first_digit = first_digit + 1\n\n    # Return True if the sum of the first and last digits is equal to n, otherwise False\n    return sum_of_digits == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Base case: if n is less than 4, then it's not a decagonal number\n    if n < 4:\n        return False\n\n    # Calculate the sum of the squares of the first n odd numbers\n    odd_squares = sum([x**2 for x in range(1, n+1, 2)])\n\n    # Calculate the sum of the squares of the first n even numbers\n    even_squares = sum([x**2 for x in range(2, n+1, 2)])\n\n    # Return True if the sum of the squares of the first n odd and even numbers are equal,\n    # indicating that it's a decagonal number\n    return odd_squares == even_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a counter variable to keep track of the number of rows \n    rows = 0\n    # Initialize a counter variable to keep track of the current number\n    num = 1\n    \n    # Loop through each row\n    while rows <= n:\n        # Loop through each column\n        for col in range(1, rows + 1):\n            # Check if the current number is a decagonal number\n            if (rows * (rows + 1)) // 2 == num:\n                return True\n            # Increment the counter for the current row\n            num += 1\n        # Increment the counter for the number of rows\n        rows += 1\n    \n    # If the function reaches here, no decagonal number was found\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_nums = [1, 6, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n    if n <= 9:\n        return decagonal_nums[n-1]\n    else:\n        return decagonal_nums[9] + is_num_decagonal(n-9)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the array and compare each element to the input element\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # return the boolean and the index position of the element\n            return True, i\n        else:\n            # return the boolean and -1 if the element is not found\n            return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create a set to store unique elements\n    unique_set = set()\n\n    # loop through each element in the list\n    for element in test_list:\n        # if the element is already in the set, it is not unique\n        if element in unique_set:\n            return False\n        # otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n\n    # if no element was found to be in the set, it is unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list of integers as input and checks if all the integers in the list are unique or not.\n    \"\"\"\n\n    # convert the list to a set to remove duplicates\n    set_list = set(test_list)\n\n    # check if the length of the set is equal to the length of the list\n    if len(set_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique,\n    else it returns False.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique or False otherwise.\n    '''\n    unique_set = set(test_list)\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        print(\"All elements are unique\")\n    else:\n        print(\"Some elements are not unique\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    # Create an empty list to hold the results\n    result = []\n    # Loop through the two lists and subtract each element from the corresponding element in the other list\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have equal lengths\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have equal lengths\")\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists are not of equal lengths.\")\n        return\n    \n    sub_list = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Subtract the two lists element-wise and return the result\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the elements of the two lists and subtract them element-wise\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        if int(i) > n % 10:\n            return False\n        count += 1\n        n //= 10\n    return count <= len(str(n))"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] <= i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    frequencies = {}\n    \n    for digit in digits:\n        if digit in frequencies:\n            frequencies[digit] += 1\n        else:\n            frequencies[digit] = 1\n    \n    for digit in frequencies:\n        if frequencies[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10 # Initialize frequency list with 10 elements, one for each digit\n    for digit in str(n): # Iterate over each digit in the integer\n        freq[int(digit)] += 1 # Increment the frequency of each digit\n    \n    for i in range(1, 10): # Iterate over each digit from 1 to 9\n        if freq[i] > n//10: # Check if frequency of i is greater than or equal to the quotient of n by 10\n            return False # If so, return False\n        \n    return True # If all frequencies are less than or equal to the digit itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # initialize an array of size 10 to store the frequency of digits\n    \n    # loop through each digit in the integer and update the frequency array\n    while n:\n        freq[n%10] += 1\n        n //= 10\n        \n    # loop through the frequency array and check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 1 and freq[i] > i:\n            return False\n            \n    # if all the digits have frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    frequency = [0] * 10\n    for digit in digits:\n        frequency[digit] += 1\n    for digit in frequency:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0, 0, 0, 0, 0, 0, 0, 0, 0] # Initialize an array of frequency of each digit\n\n    while n > 0: # While the number is greater than 0\n        freq[n % 10] += 1 # Increment the frequency of the last digit\n        n //= 10 # Remove the last digit from the number\n\n    for i in range(len(freq)):\n        if freq[i] > 1: # If the frequency of digit i is greater than 1\n            return False # Return False as the frequency of digit i is greater than 1\n        elif freq[i] > 0: # If the frequency of digit i is greater than 0\n            if i == 0: # If the digit is 0\n                if freq[i] > n // 10: # If the frequency of digit 0 is greater than the quotient of the number by 10\n                    return False # Return False as the frequency of digit 0 is greater than the quotient of the number by 10\n            else: # If the digit is not 0\n                if freq[i] > n % (10 ** (i-1)): # If the frequency of digit i is greater than the remainder of the number after dividing by 10^i-1\n                    return False # Return False as the frequency of digit i is greater than the remainder of the number after dividing by 10^i-1\n\n    return True # Return True as all the digits have a frequency less than or equal to itself"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize an array of frequency of each digit\n\n    # count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    # if the function passes all the checks, it returns True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Iterate through the list\n    for item in list:\n        # Check if the item is equal to the element\n        if item!= element:\n            return False\n    # If we get here, all items are equal to the element\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element, otherwise it returns False.\n    '''\n    for i in range(len(lst)):\n        if lst[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a.*b{2,3}\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\w{2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"The pattern has been found.\")\n    else:\n        print(\"The pattern has not been found.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a{1,}(b){2,3}')\n    result = re.search(pattern, text)\n\n    if result:\n        print('The string contains \"a\" followed by two or three \"b\" characters.')\n    else:\n        print('The string does not contain \"a\" followed by two or three \"b\" characters.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=b.{2,3})')\n    match = pattern.search(text)\n    if match:\n        print(\"The string contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a\\1{2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"The string contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\w{2,3}b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?=.*a)(?=.*b)(?=.*b.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the original array\n    sum_original = sum(a)\n\n    # Initialize the largest sum and its index\n    max_sum = float('-inf')\n    max_sum_index = 0\n\n    # Calculate the sum of each repeated element\n    repeated_sum = sum(a) * k\n\n    # Iterate through the array and check for the maximum sum\n    for i in range(n):\n        # Calculate the sum of the array formed by repeating the original array k times\n        repeated_array_sum = sum_original * k + i * a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and its index\n        if repeated_array_sum > max_sum:\n            max_sum = repeated_array_sum\n            max_sum_index = i\n\n    # Return the maximum sum and its index\n    return max_sum, max_sum_index\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    a: list of integers, the original array\n    n: integer, the length of the array\n    k: integer, the number of times to repeat the array\n\n    Returns:\n    int, the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # initialize the sum of the first k elements as the maximum sum\n    max_sum = sum(a[:k])\n\n    # for each index i from k to n-1, calculate the sum of the i-th element and the next i-k elements\n    for i in range(k, n):\n        max_sum = max(max_sum, a[i] + a[i-k])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the given array\n    total_sum = sum(a)\n\n    # Initialize the maximum sum and current sum\n    max_sum = 0\n    current_sum = 0\n\n    # Loop through the given array and repeat it k times\n    for i in range(n):\n        current_sum = total_sum\n        for j in range(k):\n            current_sum -= a[i]\n            current_sum += a[i]\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # calculate the sum of the original array\n    total_sum = sum(a)\n    # check if the length of the array is less than k\n    if n < k:\n        return 0\n    # calculate the sum of the repeated array\n    repeated_sum = sum(a[:k])\n    # calculate the maximum sum\n    max_sum = total_sum\n    # calculate the sum of the first k elements\n    first_k_sum = sum(a[:k])\n    # calculate the sum of the first k-1 elements\n    first_k_minus_one_sum = sum(a[:k-1])\n    # calculate the sum of the first k-2 elements\n    first_k_minus_two_sum = sum(a[:k-2])\n    # calculate the sum of the first k-3 elements\n    first_k_minus_three_sum = sum(a[:k-3])\n    # loop through the array from index 0 to n-k+1\n    for i in range(k):\n        # calculate the sum of the next k elements\n        next_k_sum = first_k_sum + first_k_minus_one_sum + first_k_minus_two_sum + first_k_minus_three_sum\n        # update the maximum sum if the next k-th element is greater\n        if next_k_sum > max_sum:\n            max_sum = next_k_sum\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum as the first element of the array\n    max_sum = a[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Calculate the sum of the first k elements of the array\n        sum_1 = sum(a[:i+1][:k])\n        \n        # Calculate the sum of the remaining elements of the array\n        sum_2 = sum(a[i+1:])\n        \n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, max(sum_1, sum_2))\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        a: list of integers\n        n: int, the length of the input array\n        k: int, the number of times to repeat the input array\n\n    Returns:\n        int, the maximum sum of a contiguous array in the modified array\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Repeat the input array k times\n    for i in range(k):\n        current_sum += a[i]\n        current_sum %= n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Subtract the current_sum and the first element of the array\n    current_sum = (n - current_sum) - a[0]\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_sub_array_sum = float('-inf')\n    start = 0\n\n    for i in range(k):\n        if i == 0:\n            max_sum = max(max_sum, sum(a))\n        else:\n            max_sum += max(max_sum, sum(a))\n        a = a[1:] + [a[0]]\n        max_sub_array_sum = max(max_sub_array_sum, max_sum)\n\n    return max_sub_array_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum and prefix sum\n    prefix_sum = [0] * (n+1)\n    max_sum = float('-inf')\n\n    # Iterate through the array k times\n    for i in range(k):\n        # Add the current element to the sum\n        prefix_sum[i+1] = prefix_sum[i] + a[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum found so far\n        max_sum = max(max_sum, prefix_sum[i+1])\n\n    # Iterate through the array from the second element and find the maximum sum of a contiguous array formed by repeating the given array k times\n    for i in range(n-k+1):\n        # Calculate the sum of the current array\n        current_sum = prefix_sum[i] + prefix_sum[i+1] + a[i+1]\n        # Update the maximum sum if the current sum is greater than the maximum sum found so far\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = [0]*(n*k)  # modified array with k copies of a repeated n times\n    \n    # copy the given array to the modified array\n    for i in range(n):\n        mod_a[i] = a[i]\n    \n    # calculate the sum of the modified array\n    mod_sum = sum(mod_a)\n    \n    # initialize the maximum sum to be the sum of the given array\n    max_sum = sum(a)\n    \n    # find the maximum sum of a contiguous array in the modified array\n    for i in range(n, 2*n):\n        mod_a[i] = mod_a[i-n] + a[i-n]\n        mod_sum += mod_a[i] - mod_a[i-n]\n        if mod_sum > max_sum:\n            max_sum = mod_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = [a[i] for i in range(n)]\n    for i in range(k-1):\n        modified_array.append(a[i])\n    max_sum = max(a)\n    for i in range(k):\n        modified_array.pop(0)\n        max_sum = max(max_sum, max_sub_array_sum(modified_array))\n    return max_sum\n\ndef max_sub_array_sum(arr):\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i] + max_sum)\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    num = 0\n\n    while num <= n:\n        num += 2\n        sum += num ** 2\n\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count * count\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_squares = 0\n    current_number = 0\n    # Iterate through the first n even natural numbers\n    while current_number <= n:\n        sum_of_squares += current_number ** 2\n        current_number += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the square of the number and add it to the sum of squares\n        sum_of_squares += i*i\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_square += count**2\n        count += 1\n    return sum_square"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum_squares = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current even natural number to the sum variable\n        sum_squares += i*i\n    # Return the final sum variable\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    maxLength = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    This function takes in a list of lists and finds the list of maximum length in the list of lists.\n    '''\n    maxLength = 0\n    for sublist in list1:\n        if len(sublist) > maxLength:\n            maxLength = len(sublist)\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length_so_far = 0\n        for item in sublist:\n            if len(str(item)) > max_length_so_far:\n                max_length_so_far = len(str(item))\n        max_lengths.append(max_length_so_far)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables\n    max_length_list = []\n    max_length = 0\n    \n    # iterate through each list in the list of lists\n    for i in range(len(list1)):\n        # get the length of the current list\n        length = len(list1[i])\n        # if the length is greater than the current max length, update max length and add the current list to the max length list\n        if length > max_length:\n            max_length = length\n            max_length_list = [list1[i]]\n        # if the length is equal to the current max length, add the current list to the max length list\n        elif length == max_length:\n            max_length_list.append(list1[i])\n    \n    # return the max length list\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty dictionary to store the number of ways for each color\n    color_count = {}\n    for i in range(k):\n        color_count[i] = 0\n\n    # Calculate the number of ways for each color\n    for i in range(2, n+1):\n        for j in range(k):\n            # Check if the current color is adjacent to the previous color in the fence\n            if j > 0 and i % 2 == 0:\n                # If yes, add the number of ways for the current color to the number of ways for the previous color\n                color_count[j-1] += color_count[j]\n\n    # Return the total number of ways\n    return sum(color_count.values())"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the number of ways to 0 \n    count = 0\n    \n    # Initialize a list to keep track of the colors used so far\n    used_colors = []\n    \n    # Iterate over all possible ways of painting the fence\n    for i in range(2**n):\n        \n        # Convert the integer i to binary and convert the first digit to 0 or 1\n        binary = bin(i)[2:].zfill(n)\n        \n        # Iterate over all possible colors\n        for color in range(k):\n            \n            # Check if the color is used in the current way of painting the fence\n            if color not in used_colors and binary[color] == '1':\n                \n                # Check if there are at most 2 adjacent posts with the same color\n                if len([1 for index, bit in enumerate(binary) if index > 0 and bit == '1']) <= 2:\n                    # If yes, increment the count\n                    count += 1\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # initialize variables\n    ways = [1] * k\n    for i in range(1, n - 1):\n        for j in range(1, k - 1):\n            ways[j] = ways[j] * (n - i) // (j - 1) * (2 - i) // j\n    return ways[k - 1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty dictionary to store the count of ways of painting the fence\n    ways = {}\n    \n    # Initialize a helper function to check if two adjacent posts have the same color\n    def same_color(i, j, color):\n        return fence[i] == color and fence[j] == color\n    \n    # Iterate through all possible fence patterns\n    for color in range(k):\n        # Initialize an empty list to store the fence pattern\n        fence = [color] * n\n        \n        # Keep adding fence patterns until we have found the one that paints the fence with at most 2 adjacent posts with the same color\n        while True:\n            # Count the number of ways of painting the fence that has at most 2 adjacent posts with the same color\n            count = 0\n            for i in range(n - 1):\n                for j in range(i + 1, n):\n                    if same_color(i, j, color):\n                        count += 1\n            ways[(color, tuple(fence))] = count\n            \n            # If the number of ways of painting the fence that has at most 2 adjacent posts with the same color is at least 2, we have found the pattern\n            if count >= 2:\n                break\n            \n            # Try to add a new fence pattern that has at most 2 adjacent posts with the same color\n            fence.append(fence.pop(0))\n            \n            # If we have painted the fence with at most 2 adjacent posts with the same color, we have found a pattern\n            if count >= 2:\n                break\n    \n    # Return the count of ways of painting the fence with at most 2 adjacent posts with the same color\n    return ways[(k - 1, tuple(range(n)))]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(n):\n        for j in range(i+2, min(i+5, n)):\n            ways += 1\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[1][1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(start, end, colors, ways):\n        if start == end:\n            ways[start] = 1\n            return ways[start]\n        if colors == 0:\n            return 0\n        ways[start] = 0\n        for i in range(start+1, end):\n            if colors - 1 >= i - start and colors - 1 >= i - end:\n                ways[start] += count_ways(i, end, colors - 1, ways)\n        return ways[start]\n    \n    return count_ways(0, n, k, [0] * (n + 1))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(used, color_count, index, paths):\n        if color_count > 0:\n            # Base case: all colors used or no more colors left to use\n            if color_count == 0 or (used == k and used > 0):\n                paths.append(used)\n                return\n            for i in range(index, n):\n                # Try to use this post\n                used[i] = True\n                backtrack(used, color_count - 1, i + 1, paths)\n                used[i] = False\n        else:\n            # Backtrack: color_count is negative\n            if index > 0:\n                backtrack(used, color_count, index - 1, paths)\n            else:\n                # No more posts to use, backtrack to the last used post\n                backtrack(used, color_count, used[-1], paths)\n\n    # Initialize the used array to False and the paths list to empty\n    used = [False] * n\n    paths = []\n\n    # Call the recursive function to count the number of ways\n    backtrack(used, k, 0, paths)\n\n    return len(paths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a 2D array to store the number of ways of painting the fence\n    fence_painting_count = [[0] * k for _ in range(n+1)]\n\n    # initialize the first row and first column to 1\n    for i in range(1, k+1):\n        fence_painting_count[0][i-1] = 1\n\n    # fill in the rest of the array\n    for i in range(1, n+1):\n        for j in range(k):\n            if j == 0 or fence_painting_count[i-1][j] + fence_painting_count[i-1][j+1] <= k:\n                fence_painting_count[i][j] = fence_painting_count[i-1][j] + fence_painting_count[i-1][j+1]\n            else:\n                fence_painting_count[i][j] = fence_painting_count[i-1][j]\n\n    return fence_painting_count[n][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # initialize a list of lists to store the counts of ways\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n\n    # initialize the first row and column to 1\n    for i in range(n + 1):\n        dp[i][0] = 1\n\n    # fill the rest of the dp table\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if dp[i - 1][j] == 1:\n                dp[i][j] = dp[i - 1][j]\n            elif j > 1 and dp[i - 1][j - 1] == 1:\n                dp[i][j] = dp[i][j - 1]\n            else:\n                dp[i][j] = 0\n\n    # return the count of ways\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and finds their quotient rounded down to the nearest integer.\n    '''\n    return round(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        print(\"Cannot divide by zero!\")\n        return None\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    if m*q < n:\n        q += 1\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:  \n        return None  \n    else:  \n        return find(m,n%m)  \n  \nn = int(input(\"Enter first number: \"))  \nm = int(input(\"Enter second number: \"))  \nprint(\"Quotient of\",n,\"and\",m,\"is\",find(n,m))  "
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if (n % m) > 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n\n    if quotient == m:\n        quotient -= 1\n\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w <= h:\n        if h < w:\n            side = w\n        else:\n            side = h\n    else:\n        if w < h:\n            side = h\n        else:\n            side = w\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the length of the first and second sides of a right angled triangle and returns the length of the third side.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Find the length of the right angled triangle\n    s = math.sqrt(w**2 + h**2)\n    \n    # Find the hypotenuse\n    hypotenuse = math.sqrt(w**2 + s**2)\n    \n    # Find the semi-perimeter\n    semiperimeter = 2 * s\n    \n    # Find the area of the triangle\n    area = math.sqrt(s**2 - w**2)\n    \n    # Find the other side of the right angled triangle\n    third_side = (hypotenuse**2 - semiperimeter**2) / (2 * area)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 - (w/2)**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt((w**2)+(h**2))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the first and second sides of the right angled triangle\n    side1 = w/2\n    side2 = h/2\n\n    # Calculate the third side of the right angled triangle\n    third_side = math.sqrt(side1**2 + side2**2)\n\n    # Return the third side of the right angled triangle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two input arguments, w and h, which are the lengths of the sides of a right angled triangle. \n    The function then calculates the hypotenuse of the right triangle using the Pythagorean theorem, which is sqrt(w^2 + h^2).\n    Finally, the function returns the third side of the right angled triangle, which is the opposite of the hypotenuse.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    third_side = 2*w - c\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the first and second sides\n    a = math.sqrt(w ** 2 + h ** 2)\n    b = math.sqrt(w ** 2 + (h/2) ** 2)\n\n    # calculate the length of the third side\n    c = a * math.sin(math.radians(60))\n\n    # return the value of the third side\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # calculate the length of the hypotenuse\n    c = math.sqrt(w**2+h**2)\n    \n    # calculate the square of the leg of the right triangle\n    s = (w**2+h**2-c**2)/(2*w)\n    \n    # calculate the length of the leg of the right triangle\n    a = math.sqrt(s**2+w**2)\n    \n    # calculate the length of the opposite side of the right triangle\n    b = math.sqrt(s**2+h**2)\n    \n    # calculate the length of the hypotenuse of the right triangle\n    d = math.sqrt(a**2+b**2)\n    \n    return c"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n\n    # Loop through the list and compare each element with the current maximum value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n            \n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = (i for i in range(1, number+1) if number % i == 0)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number//i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # count the inversions in the array up to i-th index\n        left, right = 0, i\n        while left < right:\n            j = left + (right - left) // 2\n            if arr[j] > arr[i]:\n                count += right - j\n                right = j\n            else:\n                left = j + 1\n        # count the inversions in the array from i+1th index to the end\n        left, right = i+1, n\n        while left < right:\n            j = left + (right - left) // 2\n            if arr[j] > arr[i]:\n                count += right - j\n                right = j\n            else:\n                left = j + 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is two elements of the array that are in the wrong order.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(1, n):\n        inv_count += sum(1 for j in range(i) if arr[j] > arr[i])\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # count inversions using counting sort algorithm\n    count = [0] * n\n    inv_count = 0\n    for i in range(n):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            count[j] += count[j-1]\n            j -= 1\n        count[j] += 1\n        if j < i:\n            inv_count += (count[i] + count[j-1]) // 2\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # function to merge two sorted subarrays \n    def merge(arr, temp, l, m, r): \n        i = j = k = 0\n  \n        while i < m and j < r: \n            if arr[i] <= arr[j]: \n                temp[k] = arr[i] \n                i += 1 \n            else: \n                temp[k] = arr[j] \n                j += 1 \n  \n            k += 1 \n  \n        while i < m: \n            temp[k] = arr[i] \n            i += 1 \n            k += 1 \n  \n        while j < r: \n            temp[k] = arr[j] \n            j += 1 \n            k += 1 \n  \n        for i in range(l, r+1): \n            arr[i] = temp[i] \n\n  \n    # function to count inversions in a sorted subarray \n    def count_inversions(arr, temp, l, r): \n        if l < r: \n            m = l + (r-l)//2\n  \n            # count inversions in left subarray \n            count_inversions(arr, temp, l, m) \n  \n            # count inversions in right subarray \n            count_inversions(arr, temp, m+1, r) \n  \n            # merge the sorted subarrays \n            merge(arr, temp, l, m, r) \n  \n            # count inversions in the merged subarray \n            i = l \n            j = m+1 \n            inv_count = 0 \n  \n            while i <= m and j <= r: \n                if arr[i] <= arr[j]: \n                    i += 1 \n                else: \n                    inv_count += m - i + 1 \n                    j += 1 \n  \n            return inv_count \n  \n    # call the function to count inversions \n    return count_inversions(arr, [0] * len(arr), 0, len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    # Recursively count inversions in each half\n    left_inv_count = get_Inv_Count(left_arr)\n    right_inv_count = get_Inv_Count(right_arr)\n\n    # Count inversions using two pointers\n    left = 0\n    right = len(right_arr) - 1\n    while left <= right:\n        if right_arr[right] >= left_arr[left]:\n            left += 1\n        else:\n            inv_count += right - left + 1\n            right -= 1\n\n    return inv_count + left_inv_count + right_inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n\n    # Divide the array into two halves \n    left_half = arr[:n//2] \n    right_half = arr[n//2:] \n\n    # Recursively count inversions in each half \n    left_count = get_Inv_Count(left_half) \n    right_count = get_Inv_Count(right_half) \n\n    # Count inversions in the original array \n    inv_count = 0 \n    i = j = 0 \n    while i < len(left_half) and j < len(right_half): \n        if left_half[i] <= right_half[j]: \n            if left_half[i] < arr[j]: \n                inv_count += len(left_half) - i \n            i += 1 \n        else: \n            if right_half[j] < arr[i]: \n                inv_count += len(right_half) - j \n            j += 1 \n\n    # Return the total inversion count \n    return left_count + right_count + inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += len(arr) - j - 1 \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def count_inversions(arr):\n        n = len(arr)\n        inv_count = 0\n\n        for i in range(n):\n            inv_count += merge_sort(arr[:i] + arr[i+1:]).count(arr[i])\n\n        return inv_count\n\n    return count_inversions(arr)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Count inversions using merge sort algorithm\n    inv_count = 0\n    inv_arr = []\n    for i in range(n):\n        inv_arr.append([])\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                inv_arr[i].append(j)\n    # Merge inv_arr into one array and count the total inversions\n    inv_count = 0\n    for i in range(n):\n        inv_count += len(inv_arr[i])\n        for j in range(n):\n            for k in range(n):\n                inv_count += inv_arr[i][k] - inv_arr[i][k-1]\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    Args:\n        lst (list): A list of lists to flatten.\n\n    Returns:\n        list: A flattened list.\n\n    Example:\n        >>> flatten_list([[1, 2], [3, [4, 5]], 6])\n        [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list as input and returns a flattened list.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    \n    # Loop through each element in the nested list\n    for element in list1:\n        # If the element is a list, recursively flatten it\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            # Otherwise, add the element to the flattened list\n            flattened_list.append(element)\n    \n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # create an empty list to store flattened elements\n    flattened_list = []\n    # loop through each element of the list\n    for item in list1:\n        # if the item is a list, recursively call flatten_list() on it and append the result to flattened_list\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        # if the item is not a list, append it to flattened_list\n        else:\n            flattened_list.append(item)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    \n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flattened_list.append(item)\n                \n    flatten(list1)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as an input and flattens it into a single level list.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i, item in enumerate(stdata):\n        for j, subitem in enumerate(item[1]):\n            max_agg = max(max_agg, subitem)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to create a dictionary to store the max value for each customer\n    max_agg = defaultdict(float)\n\n    for s, t, p in stdata:\n        # Calculate the maximum aggregate for each customer\n        max_agg[s] += t * p\n\n    # Find the maximum value in the dictionary and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    max_aggr = 0\n    max_set = []\n    for i in range(len(stdata)-1):\n        if stdata[i][1] < stdata[i+1][1]:\n            max_aggr += stdata[i][1]\n            max_set.append(stdata[i])\n        else:\n            max_aggr += stdata[i+1][1]\n            max_set.append(stdata[i+1])\n    max_aggr += stdata[-1][1]\n    max_set.append(stdata[-1])\n    return max_aggr, max_set"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the maximum aggregate of each product\n    max_dict = defaultdict(int)\n\n    # iterate through the list of tuples and calculate the maximum aggregate for each product\n    for product, price in stdata:\n        max_dict[product] = max(max_dict[product], price)\n\n    # return the maximum aggregate for all products\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n    for customer, items in stdata.items():\n        # Add the total price for each item to the aggregate for that customer\n        for item, price in items.items():\n            max_aggs[customer] += price\n    # Find the maximum aggregate from the defaultdict and return it\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n    # Loop through the list of tuples and update the count of each item\n    for item in stdata:\n        count_dict[item[0]] += 1\n    # Calculate the maximum aggregate by looping through the count_dict and finding the maximum value\n    max_aggregate = max(count_dict.values())\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each product\n    freq = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for product, price in stdata:\n        # Increment the frequency count of the product\n        freq[product] += 1\n\n    # Initialize the maximum aggregate to 0\n    max_agg = 0\n\n    # Iterate over the frequency count dictionary and calculate the maximum aggregate\n    for count in freq.values():\n        max_agg = max(max_agg, price * count)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples of the form (date, amount) and\n    returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the current balance and date\n    balances = defaultdict(float)\n    \n    # Loop through the list of tuples\n    for date, amount in stdata:\n        # Subtract the amount from the balance for the date\n        balances[date] -= amount\n    \n    # Find the maximum balance in the balances dictionary\n    max_balance = max(balances.values())\n    \n    # Loop through the dates and add the amounts to the max_balance\n    for date, amount in stdata:\n        if balances[date] < 0:\n            # If the balance is negative, add the amount to the max balance\n            max_balance += amount\n            \n    # Return the maximum aggregate\n    return max_balance"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input, where each tuple contains a student ID and their \n    aggregate score. It calculates the maximum aggregate and returns it as a single value.\n    '''\n    # Create a dictionary to store the student ID and their aggregate score\n    student_scores = defaultdict(int)\n\n    # Iterate through the list of tuples and add the aggregate score to the dictionary\n    for student, score in stdata:\n        student_scores[student] += score\n\n    # Find the maximum aggregate in the dictionary and return it\n    max_aggregate = max(student_scores.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    max_aggregate = 0\n    for row in stdata:\n        for item in row:\n            max_aggregate = max(max_aggregate, item)\n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        first_sum = sum([int(digit) for digit in binary_str[:n]])\n        last_sum = sum([int(digit) for digit in binary_str[-n:]])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_num = bin(i)[2:]\n        if sum(bin_num[:n]) == sum(bin_num[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n, 2 ** (n+1)):\n        for j in range(2 ** n, 2 ** (n+1)):\n            if sum(map(int, bin(i)[2:].zfill(n))) == sum(map(int, bin(j)[2:].zfill(n))):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        if sum(int(bit) for bit in binary_seq[:n]) == sum(int(bit) for bit in binary_seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        sum_first_n = sum([int(digit) for digit in binary_str[:n]])\n        sum_last_n = sum([int(digit) for digit in binary_str[n:]])\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    # Helper function to find the sum of the first n bits\n    def first_sum(num, n):\n        return sum([int(bit) for bit in bin(num)[2:].zfill(n)])\n\n    # Helper function to find the sum of the last n bits\n    def last_sum(num, n):\n        return sum([int(bit) for bit in bin(num)[-n-2:].zfill(n)])\n\n    # Initialize the count to zero\n    count = 0\n\n    # Iterate through all possible binary numbers of length 2n\n    for i in range(2**(2*n)):\n        # Convert the binary number to an integer and get the sums of the first and last n bits\n        first_num = int(bin(i)[2:], 2)\n        last_num = i - first_num\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if first_sum(first_num, n) == last_sum(last_num, n):\n            # Increment the count if the condition is met\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = i & ((1 << n) - 1)\n        last_n_bits = i >> n\n        if first_n_bits == (last_n_bits << n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if sum(int(x) for x in bin(i)[2:].zfill(n)) == i - (2**n - 1):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    # Function to check if a given sequence is a binary sequence of length 2n with equal sum of first n bits and last n bits\n    def is_binary_seq(sequence):\n        if len(sequence)!= 2*n:\n            return False\n        first_sum = 0\n        last_sum = 0\n        for i in range(n):\n            if sequence[i] == '0':\n                first_sum += 1\n            elif sequence[i] == '1':\n                first_sum -= 1\n        for i in range(n, len(sequence)):\n            if sequence[i] == '0':\n                last_sum += 1\n            elif sequence[i] == '1':\n                last_sum -= 1\n        return first_sum == last_sum\n    \n    # Function to find all binary sequences of length 2n with equal sum of first n bits and last n bits\n    def find_binary_seq(start, sequence, count):\n        if start == 2**n - 1:\n            if is_binary_seq(sequence):\n                count += 1\n            return count\n        \n        for i in range(2):\n            sequence[start] = '0'\n            count = find_binary_seq(start+1, sequence, count)\n            sequence[start] = '1'\n            count = find_binary_seq(start+1, sequence, count)\n        return count\n    \n    # Find all binary sequences of length 2n with equal sum of first n bits and last n bits\n    count = 0\n    sequence = ['0']*2*n\n    find_binary_seq(0, sequence, count)\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n)-1):\n        first_n_bits = bin(i)[2:]\n        last_n_bits = bin(i-1)[2:]\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    stack = [(d, depth)]\n    while stack:\n        node, current_depth = stack.pop()\n        if isinstance(node, dict):\n            for key, value in node.items():\n                stack.append((value, current_depth + 1))\n        else:\n            depth = max(depth, current_depth)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(x) for x in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            current_depth = current_depth + 1\n            max_depth = max(max_depth, current_depth)\n        else:\n            current_depth = 1\n        if max_depth == current_depth:\n            return current_depth\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Base case: dictionary has zero or one elements\n    if len(d) == 0 or len(d) == 1:\n        return 1\n    \n    # Recursive case: dictionary has more than one element\n    else:\n        # Initialize a variable to store the depth of the dictionary\n        depth = 0\n        \n        # Loop through each value in the dictionary\n        for value in d.values():\n            # Add the depth of the value to the total depth of the dictionary\n            depth += dict_depth(value)\n        \n        # Return the total depth of the dictionary\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n        elif isinstance(value, (list, tuple)):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth += dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for k, v in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a rotation count and returns the element at the given index after rotating the array by the given number of rotations.\n\n    Args:\n        arr (list): The original array to be rotated.\n        ranges (list): A list of tuples containing the start and end indices for each range to be rotated.\n        rotations (int): The number of rotations to be performed.\n        index (int): The index of the element to be found after rotating the array.\n\n    Returns:\n        int: The element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n    # Extract the values of the element at the given index and rotate the array\n    element = arr[index]\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the new index\n    new_index = index - rotations\n    for i in range(len(ranges)):\n        if ranges[i][0] <= new_index <= ranges[i][1]:\n            new_index += len(arr) - 1 - rotations\n\n    if new_index < 0 or new_index >= len(arr):\n        return \"Invalid index\"\n    else:\n        return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, number of rotations and an index as input and returns the element at the specified index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n\n    for i in range(len(ranges)):\n        arr = arr[ranges[i][0]:ranges[i][1]]\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges (pairs of indices), and a number of rotations, and returns the element at the given index after rotating the array.\n    '''\n\n    # Initialize variables\n    current_index = 0\n    current_range = ranges[0]\n    result = None\n\n    # Rotate the array\n    for i in range(rotations):\n        if current_index == index:\n            result = arr[current_range[0]]\n            break\n        current_index += 1\n        current_range = ranges[current_index]\n\n    # If the element is not found\n    if result is None:\n        raise ValueError(\"Element not found after rotating the array.\")\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # find the element at the given index\n    element = arr[index]\n\n    # loop through the rotations and find the element at the new index\n    for i in range(rotations):\n        element = find_element(element, ranges)\n\n    # return the element at the new index\n    return element\n\n\ndef find_element(element, ranges):\n    '''\n    Recursive function to find the element after a rotation.\n    '''\n    # if the element is not in the range, return the element\n    if element not in ranges:\n        return element\n\n    # if the element is in the range, find the element after a rotation\n    # and recursively call the function with that element\n    return find_element(ranges[element], ranges)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes the following parameters:\n    arr: the array to search in\n    ranges: the number of rotations for each range\n    rotations: the total number of rotations to perform\n    index: the index of the element to find\n\n    This function returns the element at the given index after performing the specified number of rotations.\n    '''\n\n    # initialize the result to None\n    result = None\n\n    # loop through the ranges and rotations\n    for i in range(len(ranges)):\n        # loop through the number of rotations for this range\n        for j in range(ranges[i]):\n            # rotate the array\n            arr = rotate_array(arr, rotations[i])\n            # check if the index is valid in the rotated array\n            if index < len(arr):\n                # if it is, set the result to the current element\n                result = arr[index]\n                break\n\n    # return the result\n    return result\n\n\ndef rotate_array(arr, rotations):\n    '''\n    This function takes the following parameters:\n    arr: the array to rotate\n    rotations: the number of rotations to perform\n\n    This function returns the rotated array after performing the specified number of rotations.\n    '''\n\n    # initialize the result to the original array\n    result = arr\n\n    # loop through the number of rotations\n    for i in range(rotations):\n        # rotate the array by swapping the first and last elements\n        result = result[1:] + [result[0]] + result[:-1]\n\n    # return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr = rotate(arr)\n        ranges = rotate(ranges)\n    for i in range(index):\n        arr = rotate(arr)\n        ranges = rotate(ranges)\n    return arr[index]\n\ndef rotate(arr):\n    n = len(arr)\n    temp = arr[n-1]\n    for i in range(n-1, 0, -1):\n        arr[i] = arr[i-1]\n    arr[0] = temp\n    return arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges, rotations, and index as input and returns the element at the given index after the given number of rotations.\n    \n    Args:\n        arr (list): The list to search in.\n        ranges (list): A list of range tuples containing the starting and ending indices of each sublist in arr.\n        rotations (int): The number of rotations to perform.\n        index (int): The index of the element to find after rotations.\n        \n    Returns:\n        int: The element at the given index after rotations.\n    \"\"\"\n    \n    # Initialize a variable to store the element we find\n    result = None\n    \n    # Iterate through each range and rotate the sublist to find the element at the given index\n    for start, end in ranges:\n        # Slice the sublist to get the appropriate sublist after the rotation\n        rotated_sublist = arr[start:end]\n        \n        # Rotate the sublist by the desired number of rotations\n        for _ in range(rotations):\n            rotated_sublist.append(rotated_sublist.pop(0))\n        \n        # Check if the element at the given index exists in the rotated sublist\n        if index < len(rotated_sublist):\n            result = rotated_sublist[index]\n            break\n            \n    # If the element was not found, return None\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the length of the array and the number of rotations needed to find the element\n    length = len(arr)\n    rotations_needed = 0\n    for i in range(length - 1, -1, -1):\n        if arr[i] == ranges[index]:\n            rotations_needed = i\n            break\n\n    # Perform the required number of rotations\n    for _ in range(rotations_needed - rotations):\n        for i in range(length // 2):\n            arr[i], arr[length - i - 1] = arr[length - i - 1], arr[i]\n\n    # Find the element after the rotations\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, range of rotations, and an index.\n    It finds the element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n    # initialize variables to store the rotated array and the current element\n    rotated_array = []\n    current_element = arr[0]\n\n    # rotate the array by the given number of rotations\n    for i in range(rotations):\n        rotated_array = [current_element] + arr[1:] + [rotated_array[-1]]\n        current_element = rotated_array.pop()\n\n    # find the element at the given index after rotating the array by the given number of rotations\n    for i in range(index + 1, len(rotated_array) + index + 1):\n        if rotated_array[i % len(rotated_array)] == arr[index]:\n            return rotated_array[i % len(rotated_array)]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, the number of rotations, and the index of the element to find.\n    It then calculates the new index after rotating the array by the specified number of rotations.\n    It then returns the element at the new index.\n    \"\"\"\n    # Calculate the new index after rotating the array by the specified number of rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p[a-z]*')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Split the list of words into individual words\n    words = re.findall(r'\\b[a-zA-Z]+\\b',''.join(words))\n    # Filter the list to only include words starting with 'p'\n    words = [word for word in words if word[0] == 'p']\n    # Return the two words starting with 'p'\n    if len(words) == 2:\n        return words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # use regex to find words starting with 'p'\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n\n    # return the two words found\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'p\\w+', words)\n    return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize dp array and dp[i] will store maximum sum of increasing subsequence from prefix up to index i\n    dp = [0] * n\n    dp[0] = a[0]\n    # iterate over indices from 1 to n-1\n    for i in range(1, n):\n        # check if k is less than or equal to i and if i-k is less than 0\n        if k <= i and i-k >= 0:\n            # if i-k is negative, there is no reason to continue searching for a subsequence\n            if i-k < 0:\n                break\n            # if i-k is not negative, check if the sum of subsequence from prefix up to index i-k is greater than the previous sum\n            if dp[i-k] > dp[i]:\n                dp[i] = dp[i-k] + a[i]\n        # if k is greater than i, update dp[i] with the current sum plus the value of the current element\n        else:\n            dp[i] = dp[i-1] + a[i]\n    # return maximum sum of increasing subsequence from prefix up to index n-1\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return 0\n    \n    if index == 0:\n        return a[0]\n    \n    dp = [0] * (n + 1)\n    \n    dp[0] = a[0]\n    dp[1] = max(dp[0], a[1])\n    \n    for i in range(2, n + 1):\n        if i > index:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = max(dp[i - 1], a[i] + dp[i - index])\n        \n        if i == k:\n            dp[i] += a[k]\n    \n    return dp[n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a list to store maximum sum of increasing subsequence for each index\n    max_sum = [0] * n\n    \n    # Initialize a variable to store maximum sum of increasing subsequence\n    max_sum_so_far = 0\n\n    # Initialize a variable to store maximum sum of increasing subsequence till kth index\n    max_sum_k = 0\n\n    # Loop through all indices\n    for i in range(1, n):\n\n        # If the current index is equal to kth index, then update the max sum of increasing subsequence till kth index\n        if i == k:\n            max_sum_k = max(max_sum_k, a[i])\n\n        # If the current index is greater than kth index, then update the max sum of increasing subsequence till current index\n        if i > k:\n            # If the current element is greater than the element at previous index, then include it in the current subsequence\n            if a[i] > a[i-1]:\n                max_sum[i] = max(max_sum[i], max_sum[i-1] + a[i])\n            # If the current element is less than or equal to the element at previous index, then don't include it in the current subsequence\n            else:\n                max_sum[i] = max(max_sum[i], max_sum[i-1])\n\n        # Update the maximum sum of increasing subsequence for the current index and store it in max_sum_so_far\n        max_sum_so_far = max(max_sum_so_far, max_sum[i])\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and current sum variables to negative infinity\n    max_sum = -float('inf')\n    curr_sum = 0\n\n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If the element at i is greater than k, then update the current sum\n        if a[i] > k:\n            curr_sum = max(curr_sum + a[i] - k, 0)\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n    for i in range(index, n):\n        prefix_sum += a[i]\n        if i == k:\n            max_sum = max(max_sum, prefix_sum)\n        elif prefix_sum > max_sum:\n            max_sum = prefix_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # base case: if index is greater than n, return 0\n    if index > n:\n        return 0\n\n    # base case: if index is equal to n and k is greater than n, return 0\n    if index == n and k > n:\n        return 0\n\n    # base case: if k is greater than n, return max sum of increasing subsequence from index to n\n    if k > n:\n        return max_sum_increasing_subseq(a, n, n, 0)\n\n    # base case: if k is equal to index, return the maximum value of a[i]\n    if k == index:\n        return max(a[index], a[index-1])\n\n    # recursive case: if a[index] is greater than a[k], return the sum of increasing subsequence from index to k\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index, k-1) + a[index]\n    # recursive case: if a[index] is less than or equal to a[k], return the maximum sum of increasing subsequence from index to k\n    else:\n        return max_sum_increasing_subseq(a, n, index, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return a[0]\n\n    prev_sum = max_sum_increasing_subseq(a, n, index-1, k)\n\n    if a[index] > a[index-1]:\n        # The next element is greater than the previous one, so we can extend the previous subsequence\n        return a[index] + prev_sum\n    else:\n        # The next element is less than or equal to the previous one, so we can only extend the current one\n        return prev_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    a - list of integers\n    n - length of the list a\n    index - index of the element for which we need to find the maximum sum of increasing subsequence\n    k - index of the kth element after i\n\n    Returns:\n    max_sum - maximum sum of increasing subsequence from prefix until ith index and including kth element\n    \"\"\"\n\n    if index == k:\n        # if kth element is at ith index, we don't need to consider anything\n        return a[index], index\n\n    if index == n:\n        # if we are at the end of the array, we can't include a kth element\n        return 0, 0\n\n    # we need to include a kth element\n    a[index], max_sum_including_k, max_sum_without_k = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # if kth element is after i, we need to exclude it\n    if k < index:\n        a[index], max_sum_without_k, max_sum_including_k = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # if a[index] is greater than all the elements till now, we can include it\n    if a[index] > max_sum_without_k:\n        return a[index], max_sum_including_k, max_sum_without_k\n\n    # otherwise, we can exclude it and return the maximum sum of increasing subsequence till now\n    return max_sum_without_k, max_sum_including_k, max_sum_including_k\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return 0, 0\n\n    # Initialize max_sum and max_ending_here\n    max_sum = float('-inf')\n    max_ending_here = 0\n\n    # Initialize the prefix sum array\n    prefix_sum = [0] * (n + 1)\n\n    # Compute prefix sum of array a\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Iterate through all possible starting points\n    for start in range(1, index + 1):\n        # Initialize current_sum and current_ending_here\n        current_sum = prefix_sum[start]\n        current_ending_here = a[start - 1]\n\n        # Iterate through all ending points\n        for end in range(start, n + 1):\n            # Check if the ending point satisfies the constraint\n            if end - start == k:\n                current_sum += prefix_sum[end] - prefix_sum[start]\n                current_ending_here = max(current_ending_here, a[end - 1])\n            else:\n                current_sum += current_ending_here\n                current_ending_here = max(current_ending_here, a[end - 1])\n\n            # Update max_sum if the current_sum is greater\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum, prefix_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # initialize sum, prefix sum, and prev index variables\n    sum_prev = 0\n    prefix_sum_prev = 0\n    prev_index_prev = -1\n\n    # initialize max sum, max prefix sum, and max prev index variables\n    max_sum = float('-inf')\n    max_prefix_sum = float('-inf')\n    max_prev_index = -1\n\n    # loop through all indices except i and k\n    for i in range(n-1):\n\n        # check if current element is greater than k\n        if a[i] > k:\n\n            # calculate sum and prefix sum of increasing subsequence\n            sum_curr = a[i] + sum_prev\n            prefix_sum_curr = a[i] + prefix_sum_prev\n\n            # update max sum, max prefix sum, and max prev index\n            if sum_curr > max_sum:\n                max_sum = sum_curr\n                max_prefix_sum = prefix_sum_curr\n                max_prev_index = i\n\n            # update sum, prefix sum, and prev index\n            sum_prev = sum_curr\n            prefix_sum_prev = prefix_sum_curr\n            prev_index_prev = i\n\n        # check if current element is not greater than k\n        else:\n\n            # update sum, prefix sum, and prev index\n            sum_prev = sum_prev + a[i]\n            prefix_sum_prev = prefix_sum_prev + a[i]\n            prev_index_prev = i\n\n    # check if k is present in increasing subsequence\n    if a[index] > k:\n\n        # calculate sum and prefix sum of increasing subsequence\n        sum_curr = a[index] + sum_prev\n        prefix_sum_curr = a[index] + prefix_sum_prev\n\n        # update max sum, max prefix sum, and max prev index\n        if sum_curr > max_sum:\n            max_sum = sum_curr\n            max_prefix_sum = prefix_sum_curr\n            max_prev_index = index\n\n    # return maximum sum and maximum prefix sum\n    return max_sum, max_prefix_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new tuple with the same elements as the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # set the elements in the new tuple to the indices specified in the colon\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i] = j\n    # return the new tuple with the colon\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the tuple\n    colon = deepcopy(tuplex)\n    \n    # Create a list of indices to slice the tuple along the first axis\n    indices = [i for i in range(len(tuplex[0])) if i % m == 0]\n    \n    # Slice the tuple along the first axis using the indices list\n    colon_x = tuple(colon[i] for i in indices)\n    \n    # Create a list of indices to slice the tuple along the second axis\n    indices = [i for i in range(len(colon_x)) if i % n == 0]\n    \n    # Slice the tuple along the second axis using the indices list\n    colon_y = tuple(colon_x[i] for i in indices)\n    \n    return colon_y"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[n*i:n*(i+1)]))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # loop through the rows of the new tuple\n    for i in range(m):\n        # loop through the columns of the new tuple\n        for j in range(n):\n            # get the index of the element to be copied\n            index = i*n+j\n            \n            # get the element to be copied\n            element = new_tuplex[index]\n            \n            # get the index of the column to be moved to\n            move_to_col = (j+1)%n\n            \n            # move the element to the new tuple\n            new_tuplex[i*n+j] = new_tuplex[i*n+move_to_col]\n            \n            # move the element to the new column\n            new_tuplex[i*n+move_to_col] = element\n    \n    # return the new tuple with the colon\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        new_elem = deepcopy(tuplex[i])\n        for j in range(n):\n            new_elem[j] = new_elem[j] + 1\n        colon.append(new_elem)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[0],) + tuple(new_tuplex[1:])\n    return new_tuplex[:n]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m] =''\n    new_tuplex = tuple(new_tuplex)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # reverse the elements of the tuple\n    tuplex_copy = tuplex_copy[::-1]\n    # create a new tuple with m copies of the first element and n copies of the last element\n    new_tuplex = (tuplex_copy[:m] * m) + (tuplex_copy[-n:] * n)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the tuple to avoid modifying the original\n    tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex)\n    # Initialize a list to store the colon\n    colon = []\n    # Loop through the tuple from the end to the beginning\n    for i in range(length-1,-1,-1):\n        # Append the first m elements of the tuple\n        colon.extend(tuplex[:m])\n        # Append the last n-m elements of the tuple\n        colon.extend(tuplex[-n:])\n        # Remove the first m elements of the tuple\n        tuplex = tuplex[m:]\n        # Remove the last n-m elements of the tuple\n        tuplex = tuplex[:-n]\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(deepcopy(tuplex)[:m] + (tuplex[m],) * (n-1) + deepcopy(tuplex)[m:])"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products\n    largest_products = []\n\n    # Loop over the specified number of products\n    for _ in range(N):\n        # Find the largest product of two numbers from the first list and the second list\n        largest_product = max(nums1[-1] * nums2[-1], nums2[-1] * nums1[-1])\n\n        # Add the largest product to the list of largest products\n        largest_products.append(largest_product)\n\n        # Remove the largest product from the first and second lists\n        nums1.pop()\n        nums2.pop()\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables\n    largest_products = []\n    index1 = 0\n    index2 = 0\n\n    # Loop through the lists\n    while len(largest_products) < N:\n        # Calculate the product of the two selected factors\n        product = nums1[index1] * nums2[index2]\n\n        # Check if the product is larger than the current largest product\n        if product > largest_products[-1] or not largest_products:\n            largest_products.append(product)\n\n        # Move the indices towards the middle of the lists\n        index1 += 1\n        index2 += 1\n        if index1 == len(nums1):\n            index1 = 0\n        if index2 == len(nums2):\n            index2 = 0\n\n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product_1 = nums1[0]\n    largest_product_2 = nums2[0]\n\n    # Loop through the remaining N products to find the largest ones\n    for i in range(N):\n        # Calculate the product of the largest products and the smallest of the two lists\n        product = largest_product_1 * nums1[i] * nums2[i]\n\n        # Update the largest products with the new product and the smallest of the two lists\n        largest_product_1 = max(largest_product_1, product)\n        largest_product_2 = max(largest_product_2, product)\n\n    return largest_product_1, largest_product_2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two lists to store the maximum products and their indices\n    max1, max1_idx = 0, -1\n    max2, max2_idx = 0, -1\n\n    # Iterate through the first list\n    for i in range(N):\n        # Calculate the product of the current number and all the numbers in the second list\n        product = nums1[i]\n        for j in range(len(nums2)):\n            product *= nums2[j]\n        # Compare the product to the maximum product and its index\n        if product > max1:\n            max2, max2_idx = max1, max1_idx\n            max1, max1_idx = product, i\n        elif product > max2:\n            max2, max2_idx = product, i\n\n    # Print the indices of the maximum products\n    for i in range(N):\n        if i!= max1_idx:\n            print(i, max1_idx)\n    for i in range(N):\n        if i!= max2_idx:\n            print(i, max2_idx)\n    print(\"The maximum product is\", max1)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Initialize the maximum value and the corresponding indices\n    max_value = float('-inf')\n    max_indices = []\n    # Loop through the indices in the range of N\n    for i in range(N):\n        # Calculate the product of the two largest numbers in each list\n        product1 = nums1[i] * nums1[i+1]\n        product2 = nums2[i] * nums2[i+1]\n        # Update the maximum value and the corresponding indices\n        if product1 > max_value:\n            max_value = product1\n            max_indices = [i, i+1]\n        if product2 > max_value:\n            max_value = product2\n            max_indices = [i, i+1]\n    # Return the indices of the largest products\n    return max_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables\n    product_sum = 0\n    max_product = 0\n    \n    # Loop through the specified number of pairs\n    for i in range(N):\n        # Calculate the product of the two largest numbers\n        product = nums1[-1] * nums2[-1]\n        \n        # Update the product sum and the maximum product\n        product_sum += product\n        max_product = max(max_product, product)\n        \n        # Remove the two largest numbers from each list\n        nums1.pop()\n        nums2.pop()\n    \n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the maximum product from nums1\n    max_product_1 = max(nums1)\n\n    # initialize a variable to store the number of products\n    count = 0\n\n    # loop through the nums2 list\n    for num in nums2:\n        # multiply the current number with the maximum product from nums1\n        product = num * max_product_1\n\n        # if the product is greater than the current maximum product, update the maximum product and count\n        if product > max_product_1:\n            max_product_1 = product\n            count += 1\n\n        # if the count is equal to the N, break out of the loop\n        if count == N:\n            break\n\n    # return the maximum product from nums1\n    return max_product_1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    max_products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max_products = [product]\n            elif product == max_product:\n                max_products.append(product)\n        if len(max_products) == N:\n            break\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        print(\"Error: N cannot be larger than the length of the input lists.\")\n        return\n    \n    largest_products = []\n    for i in range(N):\n        product1 = max(nums1) * max(nums1[i+1:])\n        product2 = max(nums2) * max(nums2[i+1:])\n        largest_products.append(max(product1, product2))\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Define a helper function to find the largest product of two given lists\n    def largest_product_of_two_lists(lst1, lst2):\n        max_product = 0\n        for i in range(len(lst1)):\n            for j in range(len(lst2)):\n                product = max(lst1[i] * lst2[j], lst1[i] * lst2[j+1], lst1[i+1] * lst2[j], lst1[i+1] * lst2[j+1])\n                max_product = max(max_product, product)\n        return max_product\n\n    # Find the maximum product of the two lists\n    max_product = largest_product_of_two_lists(nums1, nums2)\n\n    # Split the maximum product into N parts\n    N_parts = max_product // N\n\n    # Initialize two lists to store the N parts of the maximum product\n    parts1 = [0] * N\n    parts2 = [0] * N\n\n    # Find the N parts of the maximum product\n    for i in range(N):\n        for j in range(len(nums1)):\n            for k in range(len(nums2)):\n                product = nums1[j] * nums2[k]\n                if product == parts1[i]:\n                    parts1[i] += 1\n                elif product == parts2[i]:\n                    parts2[i] += 1\n\n    # Return the N parts as a list\n    return parts1, parts2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n\n    Args:\n        a: A number.\n        b: Another number.\n\n    Returns:\n        The maximum of a and b.\n    \"\"\"\n    return max(a, b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    tuple_str = ()\n    # loop through each character in the string\n    for char in str1:\n        # append each character to the tuple\n        tuple_str += (char,)\n    # return the tuple of characters\n    return tuple_str"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given integer.\n    \"\"\"\n    while n & 1 == 0: # check if the last bit is 0\n        n >>= 1 # shift right to remove the last bit\n    return n << 1 # shift left to set the leftmost unset bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function will set the left most unset bit in the given number n.\n    \"\"\"\n    # To set the left most unset bit, we check if the binary representation of n has at least one '1'\n    # If yes, we find the position of the '1' and set the corresponding bit to 1\n    # If no, we return the original number n\n    \n    if bin(n).count('1') >= 1:\n        left_most_unset_bit_index = bin(n).find('1')\n        return n | (1 << left_most_unset_bit_index)\n    else:\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_count = 0\n    while n > 0:\n        n = n & (n-1) # clear the rightmost bit set to 1\n        bit_count += 1\n    return bit_count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Iterate through each bit in the integer\n    for i in range(31, -1, -1): \n        # If the current bit is already set, keep going to the next bit\n        if (n & (1 << i)): \n            continue \n        # Set the current bit to 1\n        else: \n            n |= (1 << i) \n            break\n    \n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in the given number.\n    \"\"\"\n    # Initialize variables for the leftmost unset bit and its position\n    unset_bit = -1\n    pos = -1\n\n    # Iterate through all bits of the number\n    for i in range(32):\n        # If the current bit is unset, update unset_bit and its position\n        if n & (1 << i) == 0:\n            unset_bit = n & (1 << i)\n            pos = i\n            break\n\n    # Set the leftmost unset bit to 1 and return the updated number\n    return n ^ unset_bit ^ (1 << pos)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the left most unset bit to -1\n    left_most_unset_bit = -1\n    \n    # Iterate through the bits of the integer n\n    for i in range(31, -1, -1):\n        # If the ith bit is 0, update the left most unset bit\n        if (n >> i) & 1 == 0:\n            left_most_unset_bit = i\n            break\n    \n    # Set the left most unset bit of the integer n to 1\n    n |= (1 << left_most_unset_bit)\n    \n    # Return the updated integer n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given integer.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # while the least significant bit is 0\n        n >>= 1 # shift the number to the right by 1\n    return n << 1 # return the number shifted by 1 to the left"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize the result to the least significant bit of the integer\n    result = n & -n\n\n    # Loop through the integer, setting each bit to the opposite of its value\n    for i in range(n.bit_length() - 1, 0, -1):\n        bit = (1 << i) & n\n        if (bit & result) == 0:\n            result |= bit\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # iterate through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # if the ith bit is 0, set the ith bit of the result to 1 and break out of the loop\n        if n & (1 << i) == 0:\n            n |= 1 << i\n            break\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # calculating the volume of the cone\n    V = (1/3) * math.pi * r**2 * h\n    \n    # printing the volume of the cone\n    print(\"The volume of the cone is:\", V)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with a base radius r and height h.\n\n    :param r: float, the base radius of the cone\n    :param h: float, the height of the cone\n    :return: float, the volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r * r * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while n > 1:\n        power += 1\n        n = n // 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer input and returns the highest power of 2 that is less than or equal to the input.\n    '''\n    # If n is 1, then it is already a power of 2 and we return n.\n    if n == 1:\n        return n\n    \n    # If n is less than 1, then it is not a power of 2 and we return 0.\n    if n < 1:\n        return 0\n    \n    # If n is already a power of 2, we return n.\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the least power of 2 greater than or equal to n.\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initialize the highest power of 2 to be less than or equal to 1\n    highest_power_of_2 = 1\n    \n    # loop until the highest power of 2 is greater than n\n    while highest_power_of_2 <= n:\n        # increase the highest power of 2 by 1\n        highest_power_of_2 = 2 * highest_power_of_2\n    \n    # return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the result variable with 0\n    result = 0\n    # Loop through all the powers of 2 from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # If the square of the current power of 2 is less than or equal to n, set the result to that power\n        if i**2 <= n:\n            result = i\n    # Return the result\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(1, n+1):\n            if n % i == 0:\n                return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    # Find the highest power of 2 that is less than or equal to n\n    while n > 1:\n        n = n // 2\n\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n as input and returns the n-th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        prev = 1\n        curr = 0\n        for i in range(2, n+1): \n            next_num = (prev + curr) % 2\n            prev = curr\n            curr = next_num\n        return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize first two Lucas numbers\n    lucas_num1 = 2\n    lucas_num2 = 1\n    \n    # Iterate n-1 times to get the nth Lucas number\n    for i in range(n-1):\n        # Update the values of lucas_num1 and lucas_num2\n        lucas_num3 = lucas_num1 + lucas_num2\n        lucas_num1 = lucas_num2\n        lucas_num2 = lucas_num3\n    \n    # Return the nth Lucas number\n    return lucas_num2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) "
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number.\n\n    :param n: The index of the Lucas number to find.\n    :return: Then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers in the sequence\n    a = 2\n    b = 1\n    # Loop through the sequence to find the nth number\n    for i in range(n):\n        # Calculate the next number in the sequence\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the nth number in the sequence\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Base case\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        # Recursive case\n        lucas_prev = 2\n        lucas_curr = 1\n        for i in range(2, n+1): \n            lucas_next = lucas_prev + lucas_curr\n            lucas_prev = lucas_curr\n            lucas_curr = lucas_next\n        return lucas_curr"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list and apply the format string\n    for i in range(len(list_)):\n        # Convert the element to a string using the format method\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary with keys from list1\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n    \n    # fill in values for each key from list2 and list3\n    for i in range(len(l2)):\n        for j in range(len(l2[i])):\n            result[l1[i]][l2[i][j]] = l3[i][j]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert first list to dictionary\n    first_dict = {i:j for i,j in zip(l1, l2)}\n    \n    # Convert second list to dictionary\n    second_dict = {i:j for i,j in zip(l1, l3)}\n    \n    # Combine both dictionaries into a nested dictionary\n    result_dict = {**first_dict, **second_dict}\n    \n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): list of strings\n        l2 (list): list of integers\n        l3 (list): list of floats\n\n    Returns:\n        dict: nested dictionary with lists as values\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # check if list i is empty\n        if not l1[i]:\n            continue\n        # create a new key for the dictionary\n        key = l1[i]\n        # check if the key already exists in the result\n        if key in result:\n            # if so, check if the list is already a dictionary\n            if isinstance(result[key], dict):\n                # if so, add the list as a value to the dictionary\n                result[key].update({l2[i]: l3[i]})\n            else:\n                # if not, create a new dictionary with the list as a value\n                new_dict = {l2[i]: l3[i]}\n                # update the result with the new dictionary\n                result[key] = new_dict\n        else:\n            # if the key doesn't exist, create a new dictionary with the list as a value\n            result[key] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings.\n        l2 (list): List of integers.\n        l3 (list): List of floats.\n\n    Returns:\n        dict: Nested dictionary where each key-value pair is a list.\n    \"\"\"\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    for i in range(len(l1)):\n        d[l1[i]].append(l3[i])\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]].append(l3[i])\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    result = {}\n    for i, list_ in enumerate(lists):\n        for item in list_:\n            result[i] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Inputs:\n    - l1: a list of lists\n    - l2: a list of dictionaries\n    - l3: a list of tuples\n\n    Output:\n    - A nested dictionary with the input lists converted to nested dictionaries.\n    '''\n    nested_dict = {}\n    for i, lst in enumerate(l1):\n        nested_dict[lst[0]] = {}\n        for j, item in enumerate(lst[1:]):\n            nested_dict[lst[0]][l2[i][j]] = item\n    for i, tup in enumerate(l3):\n        nested_dict[tup[0]] = {}\n        for j, item in enumerate(tup[1:]):\n            nested_dict[tup[0]][item] = l3[i][j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize the dictionary with the keys and values from the first list\n    d1 = {l1[0]: l1[1]}\n\n    # Loop through the remaining lists and add their values to the dictionary as a list\n    for i in range(2, len(l1)):\n        if type(l1[i]) == list:\n            for j in range(len(l1[i])):\n                d1[l1[i][j]] = l1[i+1][j]\n        else:\n            d1[l1[i]] = l1[i+1]\n\n    # Loop through the second list and add its values to the dictionary as a nested dictionary\n    for i in range(len(l2)):\n        if type(l2[i]) == list:\n            d2 = {l2[i][0]: l2[i][1]}\n            for j in range(1, len(l2[i])):\n                if type(l2[i][j]) == list:\n                    for k in range(len(l2[i][j])):\n                        d2[l2[i][j][k]] = l2[i+1][j][k]\n                else:\n                    d2[l2[i][j]] = l2[i+1][j]\n            d1[l2[i][0]] = d2\n        else:\n            d1[l2[i]] = l2[i+1]\n\n    # Loop through the third list and add its values to the dictionary as a nested dictionary\n    for i in range(len(l3)):\n        if type(l3[i]) == list:\n            d3 = {l3[i][0]: l3[i][1]}\n            for j in range(1, len(l3[i])):\n                if type(l3[i][j]) == list:\n                    for k in range(len(l3[i][j])):\n                        d3[l3[i][j][k]] = l3[i+1][j][k]\n                else:\n                    d3[l3[i][j]] = l3[i+1][j]\n            d1[l3[i][0]] = d3\n        else:\n            d1[l3[i]] = l3[i+1]\n\n    return d1"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    result = {}\n\n    # iterate through the first list\n    for i in range(len(l1)):\n        # get the current value of the list\n        value = l1[i]\n\n        # check if the current value is a list\n        if isinstance(value, list):\n            # if it is, recursively call the function to convert the nested list\n            nested_result = convert_list_dictionary(value[0], value[1], value[2])\n            # update the result dictionary with the nested dictionary\n            result[i] = nested_result\n        else:\n            # if it's not, simply add it to the result dictionary as is\n            result[i] = value\n\n    # iterate through the second list\n    for i in range(len(l2)):\n        # get the current value of the list\n        value = l2[i]\n\n        # check if the current value is a list\n        if isinstance(value, list):\n            # if it is, recursively call the function to convert the nested list\n            nested_result = convert_list_dictionary(value[0], value[1], value[2])\n            # update the result dictionary with the nested dictionary\n            result[i] = nested_result\n        else:\n            # if it's not, simply add it to the result dictionary as is\n            result[i] = value\n\n    # iterate through the third list\n    for i in range(len(l3)):\n        # get the current value of the list\n        value = l3[i]\n\n        # check if the current value is a list\n        if isinstance(value, list):\n            # if it is, recursively call the function to convert the nested list\n            nested_result = convert_list_dictionary(value[0], value[1], value[2])\n            # update the result dictionary with the nested dictionary\n            result[i] = nested_result\n        else:\n            # if it's not, simply add it to the result dictionary as is\n            result[i] = value\n\n    # return the final result\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(start, end):\n        if start == end:\n            return n\n        mid = (start + end) // 2\n        left_max = max(helper(start, mid), helper(mid + 1, end))\n        right_max = max(helper(start, mid), helper(mid + 1, end))\n        return max(left_max + n, right_max + n)\n\n    return helper(1, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return n\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    def euclidian_algorithm(a, b):\n        while b!= 0:\n            temp = b\n            b = a % b\n            a = temp\n        return a\n    \n    # Compute the sum of the first n terms\n    sum_n = (n * (n + 1)) // 2\n    \n    # Compute the sum of the first n/2 terms using the Euclidian algorithm\n    sum_n_half = euclidian_algorithm(n, (2 * n) - 1)\n    \n    # Compute the sum of the first n/3 terms using the Euclidian algorithm\n    sum_n_third = euclidian_algorithm(n, (3 * n) - 1)\n    \n    # Compute the sum of the first n/4 terms using the Euclidian algorithm\n    sum_n_fourth = euclidian_algorithm(n, (4 * n) - 1)\n    \n    # Compute the sum of the first n/5 terms using the Euclidian algorithm\n    sum_n_fifth = euclidian_algorithm(n, (5 * n) - 1)\n    \n    # Compute the maximum sum possible using the Euclidian algorithm\n    max_sum = sum_n_half + sum_n_third + sum_n_fourth + sum_n_fifth\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    \n    # calculate f(n/2)\n    if n % 2 == 0:\n        f_n_2 = get_max_sum(n//2)\n    else:\n        f_n_2 = get_max_sum(n//2) + n\n    \n    # calculate f(n/3)\n    if n % 3 == 0:\n        f_n_3 = get_max_sum(n//3)\n    else:\n        f_n_3 = get_max_sum(n//3) + n\n    \n    # calculate f(n/4)\n    if n % 4 == 0:\n        f_n_4 = get_max_sum(n//4)\n    else:\n        f_n_4 = get_max_sum(n//4) + n\n    \n    # calculate f(n/5)\n    if n % 5 == 0:\n        f_n_5 = get_max_sum(n//5)\n    else:\n        f_n_5 = get_max_sum(n//5) + n\n    \n    # calculate the maximum sum using the given equation\n    max_sum = max(f_n_2, f_n_3, f_n_4, f_n_5)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        elif n == 3:\n            return 14\n        elif n == 4:\n            return 29\n        elif n == 5:\n            return 49\n        else:\n            return f(n//2) + f(n//3) + f(n//4) + f(n//5) + n\n        \n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    max_sum = n\n    max_sum = max(max_sum, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    max_list = []\n    for item in input_list:\n        if len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to keep track of the maximum length and the corresponding list\n    max_length = 0\n    max_list = []\n    \n    # Iterate over the list and update the max_length and max_list variables as needed\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    \n    # Return the list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Convert tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # Check if the set is empty\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        # if they are equal, then there are no duplicates\n        return True\n    else:\n        # if they are not equal, then there are duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the unique elements of the tuple\n    unique_elements = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    return len(unique_elements) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to eliminate duplicates\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    if len(test_tup) == len(unique_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and checks if it contains any duplicates.\n    '''\n    unique_list = list(set(test_tup)) # convert to list and remove duplicates\n    if len(unique_list) == len(test_tup): # check if list has same length as input tuple\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through each element of the tuple\n    for elem in test_tup:\n        # If the element is already in the set, return False\n        if elem in unique_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(elem)\n\n    # If no duplicates were found, return True\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character with a frequency of 1 in the dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(string):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Parameters:\n    str1 (str): The string to search in.\n\n    Returns:\n    str: The first non-repeated character in the string, or None if there is none.\n\n    \"\"\"\n    # Create a dictionary to store the counts of each character in the string\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # Find the first non-repeated character by iterating over the keys of the dictionary\n    for char in char_counts:\n        if char_counts[char] == 1:\n            return char\n\n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    set_str = set(str1)\n    # Check if the set is empty (if all characters are repeated)\n    if not set_str:\n        return None\n    # Convert the set back to a list and return the first character\n    return list(set_str)[0]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    str1 = list(str1)\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n\nstring = \"abc\"\nprint(check_char(string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the regex pattern\n    if re.match(regex, string):\n        # If the string matches the regex pattern, check if the first and last characters are equal\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.search(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Get the middle two numbers\n    middle_numbers = sorted_numbers[1:-1]\n\n    # Calculate the median\n    median = sum(middle_numbers) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as arguments and returns their median.\n    The median is the middle number when the numbers are arranged in ascending order.\n    If the numbers are arranged in descending order, the median is the middle number when the numbers are arranged in descending order.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    middle_index = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        # even number of numbers\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # odd number of numbers\n        return sorted_numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes in three numbers as inputs and returns their median.\n    '''\n    # sorting the three numbers\n    sorted_numbers = sorted([a, b, c])\n    # getting the middle number\n    middle_number = sorted_numbers[1]\n    # calculating the median\n    if (len(sorted_numbers) % 2 == 0):\n        median = (sorted_numbers[0] + middle_number) / 2\n    else:\n        median = middle_number\n    # returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of all three numbers and sort it in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the length of the list\n    length = len(numbers)\n\n    # Calculate the median\n    if length % 2 == 0:\n        # If the length of the list is even, take the average of the two middle numbers\n        median = (numbers[length//2 - 1] + numbers[length//2]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = numbers[length//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2] + numbers[n//2 - 1])/2\n    else:\n        median = numbers[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the given numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Find the median based on the length of the list\n    if len(numbers) % 2 == 0:\n        # If the list length is even, then the median is the average of the two middle numbers\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        # If the list length is odd, then the median is the middle number\n        median = numbers[len(numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median based on the length of the sorted list\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # find the index of the median\n    mid = len(sorted_numbers) // 2\n    \n    # return the median\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    numbers = sorted([a,b,c])\n\n    # find the midpoint of the sorted list\n    midpoint = len(numbers)//2\n\n    # return the median number\n    if len(numbers) % 2 == 0:\n        return (numbers[midpoint-1] + numbers[midpoint]) / 2\n    else:\n        return numbers[midpoint]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # calculate the indices of the two middle numbers\n    middle_index = len(nums) // 2\n\n    # calculate the middle numbers\n    middle_num1 = nums[middle_index - 1]\n    middle_num2 = nums[middle_index]\n\n    # calculate the median by averaging the two middle numbers\n    median = (middle_num1 + middle_num2) / 2\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    \n    for num in nums:\n        sum_of_digits_list.append(sum([int(digit) for digit in str(num)]))\n        \n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        digits = list(str(num))\n        sum += sum(map(int, digits))\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits of each number\n    sum_list = []\n    # Iterate over each number in the input list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits and add it to the sum_list\n        sum_list.append(sum(digits))\n    # Return the sum_list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = 0\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        result += sum(digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and loop through each character in the string\n        for char in str(num):\n            # Convert each character to an integer and add it to the sum of digits\n            sum_digits += int(char)\n    \n    # Return the sum of digits\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n\n    # iterate over each number in the list\n    for num in nums:\n\n        # convert the number to a string\n        num_str = str(num)\n\n        # compute the sum of digits in the string\n        sum_of_digits = sum(int(digit) for digit in num_str)\n\n        # add the sum of digits to a running total\n        total_sum += sum_of_digits\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = sum(int(digit) for digit in str(num))\n        result.append(digits)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Calculate the length of the input tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    \n    # Check if the input tuples have the same length\n    if tup1_len!= tup2_len:\n        raise ValueError('The input tuples must have the same length.')\n    \n    # Create an empty list to store the result\n    result_list = []\n    \n    # Perform the mathematical bitwise xor operation across the input tuples\n    for i in range(tup1_len):\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the given tuples\n    tup1, tup2 = test_tup1\n    # iterate over the elements of the tuples\n    for i in range(len(tup1)):\n        # perform the bitwise xor operation on the elements of the tuples\n        tup1[i] = tup1[i] ^ tup2[i]\n    # return the modified tuples\n    return tup1, tup2"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # loop through each element in the tuples and perform bitwise xor operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Use the ^ operator to perform the bitwise xor operation\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(x^y for x,y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples into individual variables\n    tup1, tup2 = test_tup1\n    # perform bitwise xor operation on the individual variables\n    xor_result = tup1 ^ tup2\n    # return the result as a tuple\n    return (xor_result,)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[tup] = 1\n    # calculate the total number of tuples in the list\n    total_tuples = len(test_list)\n    # return the number of unique tuples in the list\n    return total_tuples - sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    unique_tuples = []\n    for key, value in freq_dict.items():\n        unique_tuples.append((key, value))\n    return unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for item in test_list:\n        if not set(item) & set(test_list):\n            count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n\n    Parameters:\n    test_list (list): a list of tuples\n\n    Returns:\n    int: the number of unique tuples in the given list\n    \"\"\"\n\n    unique_tuples = set()\n\n    for tup in test_list:\n        unique_tuples.add(tup)\n\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Checking if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length\")\n        return None\n    \n    # Initializing a new empty tuple to store the result\n    result_tuple = ()\n    \n    # Performing index wise addition of tuple elements in the given two nested tuples\n    for i in range(len(test_tup1)):\n        # Getting the i-th element of both tuples\n        x = test_tup1[i]\n        y = test_tup2[i]\n        # Adding the elements and appending it to the result tuple\n        result_tuple += (x + y,)\n    \n    # Returning the result tuple\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # initialize a new tuple to store the sum of elements\n    result_tup = tuple([0] * len(test_tup1[0]))\n\n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # iterate over the elements of the second tuple\n        for j in range(len(test_tup2[0])):\n            # add the corresponding elements of the two tuples\n            result_tup[j] += test_tup1[i][j] + test_tup2[i][j]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the length of the first tuple\n    len1 = len(test_tup1)\n    # Get the length of the second tuple\n    len2 = len(test_tup2)\n    # Initialize a new empty tuple to store the sum of two nested tuples\n    sum_tup = ()\n    # Check if the length of the two nested tuples are equal\n    if len1 == len2:\n        # Loop through each element in the first tuple\n        for i in range(len1):\n            # Add the element from both tuples at the same index\n            sum_tup += (test_tup1[i] + test_tup2[i],)\n        # Return the sum_tup\n        return sum_tup\n    else:\n        # If the length of the two nested tuples are not equal, raise an error\n        raise ValueError(\"The two nested tuples are not of equal length.\")"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        # Check if the length of the first tuple is equal to the length of the second tuple\n        for i in range(len(test_tup1)):\n            # Perform index wise addition of the elements of the two tuples\n            test_tup1[i] += test_tup2[i]\n        # Return the updated tuple\n        return test_tup1\n    else:\n        # If the length of the first tuple is not equal to the length of the second tuple, return the original tuple\n        return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n            print(test_tup1)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to store the result\n    result_tup = ()\n\n    # loop through the elements of the two tuples and add them together using index-wise addition\n    for i in range(len(test_tup1)):\n        # get the element at index i from each tuple\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # perform index-wise addition\n        result_tup += (elem1 + elem2,)\n\n    # return the new tuple with the result\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return \"Both inputs must be tuples\"\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same length\"\n\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            return \"All elements of the nested tuple must be tuples\"\n\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            return \"All elements of the nested tuple must have the same length\"\n\n    total_tup = tuple()\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            total_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    return total_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result_tup = []\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements in the two tuples\n            result_tup.append(test_tup1[i][j] + test_tup2[i][j])\n    # return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(inner_result)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the smallest one.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n\n    Parameters:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    int: the minimum of the two numbers\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists within the tuple\")\n    else:\n        print(\"The element does not exist within the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Using modulo operator to find the remainder after division by 2\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    if x % 2 == 0: # If x is even\n        return 'Even'\n    else: # If x is odd\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Using the bitwise XOR operator ^, we can find the parity of the number.\n    if x^x >> 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number as an argument and returns whether it's odd or even.\n    \"\"\"\n    if x % 2 == 0: # If the number is even, it's not odd.\n        return False\n    else: # If the number is odd, it's even.\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # check if the number is odd or even\n    if x%2 == 1: \n        return \"The number is odd\" \n    else: \n        return \"The number is even\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0: \n        print(\"The parity of\", x, \"is even\") \n    else: \n        print(\"The parity of\", x, \"is odd\") "
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    num_list = list(str(n))\n    max_digit = max(num_list)\n    next_digit = max_digit + 1\n    while next_digit > 9:\n        next_digit = 1\n    num_list[num_list.index(max_digit)] = str(next_digit)\n    next_num = int(''.join(num_list))\n    return next_num\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # find the maximum value among the digits in the number\n    max_digit = max(int(digit) for digit in str(n))\n    # create a dictionary to store the position of each digit in the rearranged number\n    digit_pos = {digit: i for i, digit in enumerate(str(n))}\n    # iterate through all possible rearrangements of the digits and check if any rearrangement has a value greater than the max value\n    for i in range(10):\n        rearranged = ''\n        # iterate through each digit in the rearranged number\n        for digit in str(n):\n            # if the digit is already at the current position in the rearrangement, move to the next digit\n            if digit_pos[digit] == i:\n                rearranged += digit_pos[(i+1) % 10]\n            # if the digit is not at the current position in the rearrangement, add it to the rearrangement\n            else:\n                rearranged += digit\n        # check if the rearrangement has a value greater than the max value\n        if int(rearranged) > max_digit:\n            # if it does, return the rearranged number\n            return rearranged\n    # if no rearrangement has a value greater than the max value, return the original number\n    return str(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_digit = max(str(n))\n    new_num = 0\n    for i in range(len(str(n))):\n        if max_digit == str(n)[i]:\n            new_num += 10**i\n    new_num = new_num + n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Find the length of the given number\n    num_len = len(num_str)\n    \n    # Initialize variables for the length of the next bigger number and its digits\n    next_num_len = 0\n    next_num_str = ''\n    \n    # Loop through the digits of the given number\n    for digit in num_str:\n        # If the length of the current digit is greater than the next bigger number length,\n        # update the next bigger number length and its digits\n        if int(digit) > next_num_len:\n            next_num_len = int(digit)\n            next_num_str = digit\n    \n    # Convert the next bigger number to an integer and add one\n    next_num = int(next_num_str) + 1\n    \n    # Return the next bigger number\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    def get_digits(num):\n        return [int(digit) for digit in str(num)]\n    \n    def reorder_digits(digits):\n        if len(digits) <= 2:\n            return digits\n        \n        middle = len(digits) // 2\n        left = reorder_digits(digits[:middle])\n        right = reorder_digits(digits[middle:])\n        \n        return left + right\n    \n    def rearrange(num):\n        digits = get_digits(num)\n        reordered_digits = reorder_digits(digits)\n        return int(''.join(str(digit) for digit in reordered_digits))\n    \n    return rearrange(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # First, find the largest digit in the given number\n    largest = 0\n    for digit in str(n):\n        if int(digit) > largest:\n            largest = int(digit)\n    \n    # Next, use the digits of the largest number to create the next bigger number\n    next_bigger = 0\n    for digit in str(n):\n        if int(digit) == largest:\n            next_bigger += 1\n        else:\n            break\n    next_bigger = str(next_bigger) + largest\n    \n    # Finally, convert the next bigger number to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n    new_digits = [digit for digit in digits if digit!= max_digit]\n    max_index = digits.index(max_digit)\n    new_digits.insert(max_index + 1, max_digit)\n    new_number = int(''.join(map(str, new_digits)))\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a string\n    num = str(n)\n    # Find the first digit that has a non-zero value\n    for i in range(len(num)):\n        if num[i]!= '0':\n            # Get the value of the first digit\n            first_digit = int(num[i])\n            # Shift the rest of the digits to the right\n            rest = num[i+1:]\n            shift = 0\n            while rest.startswith('0'):\n                shift += 1\n                rest = rest[1:]\n            # Rearrange the digits of the rest of the digits\n            result = str(first_digit) + rest[shift:] + rest[:shift]\n            # Convert the resulting string back to an integer\n            return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize the result as the input number\n    result = n\n    \n    # Iterate through each digit in the input number\n    for digit in str(n):\n        # Calculate the position of the digit in the result\n        pos = len(result) - int(digit) - 1\n        \n        # If the position is negative, set it to 0\n        if pos < 0:\n            pos = 0\n        \n        # Replace the digit at the current position with the digit of the input number\n        result = result[:pos] + str(int(digit)) + result[pos+1:]\n        \n        # If the result is equal to the input number, we have reached the next bigger number\n        if result == str(n):\n            break\n    \n    # Convert the result to an integer\n    next_bigger = int(result)\n    \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num = str(n)\n    \n    # initialize the result variable\n    result = ''\n    \n    # loop through the digits of the given number\n    for digit in num:\n        # determine the index of the digit in the list of digits\n        index = digits.index(digit)\n        \n        # increment the index by 1\n        index += 1\n        \n        # check if the index is greater than or equal to the length of the list of digits\n        if index >= len(digits):\n            # set the index to 0\n            index = 0\n        \n        # add the digit at the new index to the result\n        result += digits[index]\n    \n    # convert the result to an integer\n    result = int(result)\n    \n    # return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Convert the input lists into tuples for min heap\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n\n    # Initialize the result list\n    result = []\n\n    # Compare the first element of nums1 and the first element of nums2.\n    # If they are equal, add a pair to the result and remove the first element of nums1 and the first element of nums2 from the heaps.\n    # Otherwise, the smaller element of nums1 should be added to the result, and the larger element of nums1 should be removed from the heaps.\n    while k > 0 and len(result) < k:\n        if nums1[0] <= nums2[0]:\n            result.append((nums1[0], nums2[0]))\n            heapq.heappop(nums1)\n            heapq.heappop(nums2)\n            k -= 1\n        else:\n            result.append((nums1[0], nums2[0]))\n            heapq.heappop(nums1)\n            k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Returns the k smallest pairs which consist of one element from nums1 and one element from nums2.\n    \"\"\"\n    heap = []\n\n    # Initialize the heap with the first element of each list\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n\n    # Keep track of the result list\n    result = []\n\n    # Pop the smallest k elements from the heap\n    while k > 0:\n        _, pair = heapq.heappop(heap)\n        result.append(pair)\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n\n    # create a heap with the smaller elements first\n    for num in nums1 + nums2:\n        heapq.heappush(heap, num)\n\n    # take k pairs from the heap and add to result\n    while len(result) < k:\n        pair = (heapq.heappop(heap), heapq.heappop(heap))\n        if pair not in result:\n            result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n    \n    # iterate through the first array\n    for num1 in nums1:\n        # create a list to store the pairs of (num1, num2) which are smaller than or equal to num1\n        pairs_with_num1 = []\n        \n        # iterate through the second array\n        for num2 in nums2:\n            # if num2 is smaller than num1, add a pair to the list\n            if num2 <= num1:\n                pairs_with_num1.append((num1, num2))\n                \n        # sort the list of pairs in ascending order based on the second element of the pairs\n        pairs_with_num1.sort(key=lambda x: x[1])\n        \n        # if the size of the list of pairs is less than k, add the remaining elements to the min heap\n        if len(pairs_with_num1) < k:\n            for pair in pairs_with_num1:\n                heapq.heappush(min_heap, pair)\n        # if the size of the list of pairs is greater than or equal to k, add the first k elements to the min heap\n        else:\n            for i in range(k):\n                heapq.heappush(min_heap, pairs_with_num1[i])\n    \n    # create a list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # iterate through the min heap\n    while min_heap:\n        # add the smallest pair to the list of k smallest pairs\n        k_smallest_pairs.append(heapq.heappop(min_heap))\n    \n    # return the list of k smallest pairs\n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of elements\n    min_heap = []\n\n    # Iterate through the first array and for each element, check if there is a pair in the second array\n    # whose sum is less than or equal to the current element\n    for num1 in nums1:\n        heapq.heappush(min_heap, [-num1, num1])\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Create a new array to store the k smallest pairs\n    result = []\n\n    # Iterate through the min heap and for each pair, add the smaller element to the result array\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        if not result or pair[0] > -result[-1][1]:\n            heapq.heappush(min_heap, pair)\n            result.append(pair)\n        elif pair[0] == -result[-1][1]:\n            result.append(pair)\n            if len(result) == k:\n                break\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a heap of (num1, num2, index) tuples\n    heap = [(num1, num2, i) for i, num1 in enumerate(nums1) for num2 in nums2]\n    heapq.heapify(heap)\n    \n    # create a min heap of size k\n    min_heap = []\n    \n    # iterate over the heap until k elements have been added to the min heap\n    while k > 0:\n        # extract the top element from the heap and add it to the min heap\n        num1, num2, index = heapq.heappop(heap)\n        min_heap.append((num1, num2))\n        k -= 1\n        \n        # if there are more elements in the heap, add them to the heap again\n        if len(heap) > 0:\n            num1, num2, index = heapq.heappop(heap)\n            heapq.heappush(heap, (min(num1, num2), max(num1, num2), index))\n    \n    # return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n            if len(pairs) == k:\n                break\n    pairs.sort()\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    result = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(result) < k:\n                result.append(pair)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a heap of size k to store the smallest k pairs\n    min_heap = []\n    # iterate through the two arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # calculate the sum of the numbers\n            current_sum = num1 + num2\n            # if the sum is less than or equal to the smallest number in the heap, add the pair to the heap\n            if len(min_heap) == 0 or current_sum <= min_heap[0][0]:\n                heapq.heappush(min_heap, (current_sum, (num1, num2)))\n                # if the length of the heap exceeds k, remove the smallest number from the heap\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    # extract the k smallest pairs from the heap and return them as a list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n\n    # Build the heaps of numbers from both arrays\n    for num in nums1:\n        heapq.heappush(heap1, num)\n\n    for num in nums2:\n        heapq.heappush(heap2, num)\n\n    # Find the smallest k pairs from the heaps\n    result = []\n    while k > 0 and heap1 and heap2:\n        pair = (heap1[0], heap2[0])\n        result.append(pair)\n        if pair[0] == pair[1]:\n            heapq.heappop(heap1)\n            heapq.heappop(heap2)\n            k -= 1\n        elif pair[0] < pair[1]:\n            heapq.heappop(heap1)\n        else:\n            heapq.heappop(heap2)\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n\n    list1.sort(key=lambda x: (-x[1], -x[0]))\n    min_product = list1[0][0] * list1[0][1]\n\n    for i in range(1, len(list1)):\n        product = list1[i][0] * list1[i][1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a dictionary to store the products for each tuple\n    products = {}\n    \n    # loop through the list of tuples\n    for tup in list1:\n        # calculate the product of the tuple\n        product = 1\n        for num in tup:\n            product *= num\n        # add the product to the dictionary\n        if product in products:\n            products[product] += 1\n        else:\n            products[product] = 1\n    \n    # initialize the minimum product\n    min_product = float('inf')\n    \n    # loop through the dictionary to find the minimum product\n    for product, count in products.items():\n        if count > 0 and product < min_product:\n            min_product = product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # calculate the product of the tuple elements\n            product = list1[i][0] * list1[j][1]\n\n            # if the product is less than the minimum product, update the variable\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create an empty list to store the minimum products\n    min_products = []\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through each tuple in the list that comes after i\n        for j in range(i+1, len(list1)):\n            # find the product of the two tuples and store it in min_products\n            min_products.append(list1[i][0] * list1[j][1])\n\n    # find the minimum value in min_products\n    min_product = min(min_products)\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through each tuple in the list that comes after i\n        for j in range(i+1, len(list1)):\n            # if the product is less than min_product, update min_product\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Create a list of tuples\n    tuples_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            tuples_list.append((list1[i], list1[j]))\n\n    # Sort the list of tuples by the product of the elements\n    tuples_list.sort(key=lambda x: x[0] * x[1])\n\n    # Extract the pair of tuples with the smallest product\n    min_tuple = tuples_list[0]\n\n    # Return the minimum product\n    return min_tuple[0] * min_tuple[1]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate over the tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(list(i))\n    list2.sort(key=lambda x: (x[1], x[0]))\n    min_product = 1\n    for i in range(len(list2)):\n        if list2[i][1] < list2[i+1][1]:\n            min_product = min(min_product, list2[i][0] * list2[i+1][0])\n        else:\n            min_product = min(min_product, list2[i][0] * list2[i+1][0])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum and maximum values of the first tuple\n    min_val = list1[0][0]\n    max_val = list1[0][0]\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Check if the first element of the tuple is smaller than the current minimum value\n        if tup[0] < min_val:\n            # Update the minimum value\n            min_val = tup[0]\n        # Check if the first element of the tuple is larger than the current maximum value\n        elif tup[0] > max_val:\n            # Update the maximum value\n            max_val = tup[0]\n        # Check if the second element of the tuple is smaller than the current minimum value\n        if tup[1] < min_val:\n            # Update the minimum value\n            min_val = tup[1]\n        # Check if the second element of the tuple is larger than the current maximum value\n        elif tup[1] > max_val:\n            # Update the maximum value\n            max_val = tup[1]\n    # Compute the minimum product\n    min_product = min_val * max_val\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], (int, float)):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval, key=len)\n    elif isinstance(listval[0], bool):\n        return all(listval)\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the list and compare each value to the current minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_value = listval[0]\n    \n    # Loop through the list to find the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    \n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value with first element of the list\n    min_val = listval[0]\n    # Loop through the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the current minimum, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, (list, tuple)):\n        raise TypeError(\"Input must be a list or tuple\")\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to first element of the list\n    min_val = listval[0]\n    # iterate through the list, comparing each element to the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(?<!^)(?=[A-Z])', r' ', word)\n    word = re.sub(r'_', r'', word)\n    return word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given word to a regular expression pattern\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    # Split the word into words using the regular expression pattern\n    words = pattern.split(word)\n    # Convert the first word to camel case using capitalization\n    words[0] = words[0].capitalize()\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words and capitalize the first letter of each word\n    words = word.split('_')\n    camel_case = [word.capitalize() for word in words]\n    # Join the words into a single string with a space between them\n    camel_case_str =''.join(camel_case)\n    # Replace any remaining underscores with camel case words\n    camel_case_str = re.sub(r'_([a-z])', r'\\1', camel_case_str)\n    return camel_case_str"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('([a-z])([A-Z])')\n    return pattern.sub(r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert all the words to lower case and split them into a list\n    words = word.split('_')\n\n    # Initialize an empty string to store the camel case string\n    camel_case_string = ''\n\n    # Iterate over the words and capitalize the first letter of each word and append it to the camel case string\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_string += words[i]\n        else:\n            camel_case_string += words[i][0].upper() + words[i][1:]\n\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Replace all underscores with spaces\n    word = re.sub('_','', word)\n    # Capitalize the first letter of each word\n    return ''.join([word[0].upper() + word[1:].lower() for word in word.split()])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word into a list of words based on underscores\n    words = re.findall(r'[a-z][a-z0-9]*', word)\n\n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].upper()\n\n    # Convert the rest of the letters of each word to lowercase\n    for i in range(1, len(words)):\n        words[i] = words[i][0].lower() + words[i][1:]\n\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # remove underscores from the string\n    word = re.sub('_', '', word)\n    \n    # split the string into words and capitalize the first letter of each word\n    words = word.split()\n    words_list = [word.capitalize() for word in words]\n    \n    # join the words with underscores to form the camel case string\n    camel_case_string = '_'.join(words_list)\n    \n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    first_char = word[0].lower()\n    rest_of_word = ''.join([c.capitalize() for c in word[1:]])\n    return f\"{first_char}{rest_of_word}\""
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('([a-z])([A-Z])')\n    return pattern.sub(r'\\1_\\2', word).lower()"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list with odd numbers removed.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:  # if the number is even, add it to the new list\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        return \"Invalid index\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = set(list1)\n    # Convert the set back to a list to preserve the order of the tuples\n    final_list = list(unique_list)\n    # Check if the length of the list is greater than n\n    if len(final_list) > n:\n        # If n is greater than or equal to the length of the list, return the nth element\n        return final_list[n-1]\n    else:\n        # If n is greater than the length of the list, return None\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Extracting the nth element from the list of tuples\n    nth_element = list1[n][1]\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Invalid index\")\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    elif n == 1:\n        return list1[0]\n    else:\n        return extract_nth_element(list1[1:], n-1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # convert list of tuples to list of lists of elements\n    list2 = [list(x) for x in list1]\n    # check if n is valid\n    if n > len(list2):\n        print('n is greater than the length of the list')\n        return None\n    # extract nth element\n    element = list2[n-1]\n    # convert list of lists of elements back to list of tuples\n    element = tuple(element)\n    return element"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Loop through each value in list1 and check if it exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n    # If no value in list1 exists in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # check if any value in the first list is also in the second list\n    for value in list1:\n        if value in list2:\n            return True\n\n    # if we get here, no value in the first list is also in the second list\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks if there are any common elements between them.\n    It returns True if there is a common element, and False otherwise.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create a set of values in list2 that are also in list1\n    set2 = set(list2)\n    # create a set of values in list1 that are also in list2\n    set1 = set(list1)\n    # find the intersection of the two sets\n    common = set2.intersection(set1)\n    # check if any value in common is in list1\n    return any(x in list1 for x in common)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # convert the input lists to sets to remove duplicates and improve performance\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # loop through the set of the first list and check if each element exists in the set of the second list\n    for element in set1:\n        if element in set2:\n            return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # loop through each item in the first list\n    for item in list1:\n        # check if the item exists in the second list\n        if item in list2:\n            return True\n    # if we get here, then no overlapping values were found\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Convert the lists into sets so that we can check for overlapping values\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any value in set1 exists in set2\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1: \n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)): \n        if arr[i] > max_product: \n            max_product = arr[i]\n            min_product = arr[i]\n        elif arr[i] < min_product: \n            min_product = arr[i]\n\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers and returns a tuple of the pair with the highest product\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair of integers that have the highest \n    product.\n    '''\n    # Finding the minimum and maximum values of the array\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in arr:\n        if i < min_val:\n            min_val = i\n        if i > max_val:\n            max_val = i\n            \n    # Finding the pair with highest product\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    first = None\n    \n    for num in arr:\n        if num < 0:\n            first = None\n            current_product = 1\n        else:\n            if first is None:\n                first = num\n            current_product *= num\n            if current_product > max_product:\n                max_product = current_product\n                \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    # Find the maximum value in the array\n    max_val = arr[0]\n    \n    # Find the minimum value in the array\n    min_val = arr[0]\n    \n    # Initialize the maximum product pair as (minimum value, maximum value)\n    max_pair = (min_val, max_val)\n    \n    # Loop through the remaining elements in the array\n    for i in range(1, len(arr)):\n        # Check if the current element is greater than the maximum value\n        if arr[i] > max_val:\n            # If it is, update the maximum value and set the corresponding minimum value as the current element\n            max_val = arr[i]\n            min_val = arr[i]\n        else:\n            # If it's not, update the corresponding minimum value as the current element\n            min_val = min(min_val, arr[i])\n            \n        # Check if the current product pair is greater than the maximum product pair found so far\n        if (min_val * max_val) > max_pair[0] * max_pair[1]:\n            # If it is, update the maximum product pair\n            max_pair = (min_val, max_val)\n            \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize max_product and max_product_pair variables\n    max_product = float('-inf')\n    max_product_pair = (0, 0)\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two subarrays\n            product = arr[i] * arr[j]\n\n            # If the product is greater than max_product, update max_product and max_product_pair\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    # Initialize two variables to keep track of the two largest and two smallest numbers seen so far\n    largest = arr[0]\n    second_largest = float('-inf')\n    smallest = arr[0]\n    second_smallest = float('inf')\n    \n    # Loop through each number in the array and update the largest and smallest as needed\n    for num in arr:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest:\n            second_largest = num\n            \n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n            \n    # Compute the product of the two largest and two smallest numbers found\n    product = largest * second_largest\n    \n    # Return the product\n    return product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the indices of the two\n    elements in the array that have the highest product.\n    '''\n\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_product_indices = None\n\n    for i in range(len(arr)):\n        max_left = float('-inf')\n        max_right = float('-inf')\n\n        for j in range(i, len(arr)):\n            window_product = arr[i] * arr[j]\n\n            if window_product > max_product:\n                max_product = window_product\n                max_product_indices = (i, j)\n\n            if arr[j] > max_left:\n                max_right = max_left\n                max_left = arr[j]\n            elif arr[j] > max_right:\n                max_right = arr[j]\n\n    return max_product_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    for i in arr:\n        max1 = max(i, max1*i)\n        max2 = max(i, max2*i)\n        min1 = min(i, min1*i)\n        min2 = min(i, min2*i)\n    return max(max1, max2), min(min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    # create an empty dictionary to store common first elements in tuple\n    common_elements = {}\n\n    # loop through the list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        element = tup[0]\n        # check if the element is already in the dictionary\n        if element in common_elements:\n            # if it is, increment its count\n            common_elements[element] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            common_elements[element] = 1\n\n    # create an empty list to store the groups of common elements\n    groups = []\n\n    # loop through the dictionary and create groups of common elements\n    for key, value in common_elements.items():\n        if value == len(Input):\n            # if the count is equal to the length of the list of tuples, create a group with the key and append it to the groups list\n            group = [key]\n            groups.append(group)\n        elif value > 1:\n            # if the count is greater than 1, create a group with the key and append it to the groups list\n            group = [key]\n            groups.append(group)\n\n    # return the groups list\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples, where each tuple has all the common elements from the given list.\n    \"\"\"\n    # Create an empty dictionary to store the common elements for each tuple.\n    common_elements = {}\n    # Loop through the list of tuples.\n    for tup in Input:\n        # For each tuple, loop through its elements and add them to the common elements dictionary if they haven't been added already.\n        for elem in tup:\n            if elem in common_elements:\n                common_elements[elem].append(tup)\n            else:\n                common_elements[elem] = [tup]\n    # Create a new list to store the common elements for each group.\n    common_groups = []\n    # Loop through the dictionary to create the common groups.\n    for elem, tups in common_elements.items():\n        # If the number of tuples in the group is greater than or equal to 2, add the group to the new list of common groups.\n        if len(tups) >= 2:\n            common_groups.append(tups)\n    # Return the new list of common groups.\n    return common_groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = set()\n    for tup in Input:\n        if tup[0] in first_element:\n            first_element.remove(tup[0])\n        else:\n            first_element.add(tup[0])\n    return list(first_element)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tup in Input:\n        if common_element is None or tup[0] == common_element:\n            common_element = tup[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty list to store common elements\n    common = []\n\n    # loop through the given list of tuples\n    for tup in Input:\n        # extract the first element from each tuple\n        first = tup[0]\n\n        # check if the first element is already in the common list\n        if first not in common:\n            # if not, append it to the list\n            common.append(first)\n\n    # return the list of common elements\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append((Input[i][0],Input[i][1],Input[j][1]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j and Input[i][0] == Input[j][0]:\n                common_elements.add(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    # Create a dictionary to store the count of each first element in the list of tuples\n    count_dict = {}\n\n    # Iterate over each tuple in the input list\n    for tup in Input:\n        # If the first element is not in the dictionary, add it with a count of 1\n        if tup[0] not in count_dict:\n            count_dict[tup[0]] = 1\n        # If the first element is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup[0]] += 1\n\n    # Find the first element with the highest count in the dictionary and return it\n    max_count = max(count_dict.values())\n    for key, value in count_dict.items():\n        if value == max_count:\n            return key"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    This function will take a list of tuples and group them based on their common first element.\n    '''\n    common_elements = []\n    for tup in Input:\n        common = tup[0]\n        if common in common_elements:\n            common_elements[common].append(tup)\n        else:\n            common_elements[common] = [tup]\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        if len(set(Input[i][:1])) == 1:\n            common.append(Input[i][0])\n    return common"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0]) \n    max_elem = lst[0] \n    for i in range(1, len(lst)): \n        if len(lst[i]) > max_len: \n            max_len = len(lst[i]) \n            max_elem = lst[i] \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0 \n    max_elem = ''\n\n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize the maximum length variable to zero\n    max_length = 0\n    # Initialize the maximum element variable to None\n    max_element = None\n    # Loop through the list and update the maximum length and element if necessary\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    # Return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_length:\n            max_length = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize variables for max_len and max_element\n    max_len = 0\n    max_element = None\n    \n    # loop through the list\n    for i in range(len(lst)):\n        # get the length of the current element\n        len_i = len(str(lst[i]))\n        \n        # check if the length of the current element is greater than max_len\n        if len_i > max_len:\n            # update max_len and max_element\n            max_len = len_i\n            max_element = lst[i]\n    \n    # return the max_element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(x) for x in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # initialize the total sum to zero\n    total_sum = 0\n\n    # iterate over the list of numbers\n    for num in list1:\n        # round the number to the nearest integer\n        rounded_num = round(num)\n        # add the rounded number to the total sum\n        total_sum += rounded_num\n\n    # print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initializing the sum to zero\n    sum = 0\n    # Iterating from 2 to n, checking if each number is even\n    for i in range(2, n+1, 2): \n        # Adding the cube of each even number to the sum\n        sum += i**3\n    # Returning the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize a variable to store the cube sum\n    sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(n): \n        # Calculate the cube of the even natural number\n        cube = i ** 3\n        \n        # Add the cube to the sum\n        sum += cube\n        \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize variables to hold the sum and cube sum\n    cube_sum = 0\n    sum_even = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(n):\n        # Calculate the cube of the even number\n        cube = i**3\n\n        # Check if the cube is odd or even\n        if cube % 2 == 0:\n            # If it is even, add it to the cube sum\n            cube_sum += cube\n\n            # Add the even number to the sum\n            sum_even += i\n\n    # Return the cube sum and the sum of the first n even numbers\n    return cube_sum, sum_even"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    count = 0\n    while count < n:\n        cube_sum += count ** 3\n        count += 1\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1):\n        sum_cubes += i**3\n    return sum_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 0\n    while i < n:\n        cube_sum += i**3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(str.join, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    result = result[:-len(delimiter)]\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join([str(elem) for elem in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Concatenate each element of a given tuple by the given delimiter.\n\n    Args:\n    test_tup (tuple): Tuple of elements to concatenate.\n    delimiter (str): Delimiter to use between elements. Default value is space.\n\n    Returns:\n    str: Concatenated string of elements.\n    \"\"\"\n\n    # Concatenate each element of the tuple\n    concatenated_string = delimiter.join(str(element) for element in test_tup)\n\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize variable to store sum of cubes\n    sum_of_cubes = 0\n    \n    # loop through first n natural numbers and calculate cubes\n    for i in range(n):\n        sum_of_cubes += i**3\n        \n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes/n\n    \n    # return the result\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of the first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i*i*i\n    average_cube = sum_cube / (n*n*n)\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    average = sum / n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function finds the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n        count += 1  \n    return sum_of_cubes/count  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    # Initialize a variable to store the count of cubes\n    count = 0\n\n    # Use a for loop to iterate over the first n numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number\n        cube = i**3\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube\n        # Increment the count of cubes\n        count += 1\n\n    # Calculate the average of cubes and return it\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n        count += 1\n    avg_cube = sum_cube/count\n    return avg_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for string in test_tuple:\n        if string[-1] in ['A', 'E', 'I', 'O', 'U']:\n            rear_element.append(string[-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for element in test_tuple:\n        if isinstance(element, str):\n            rear_list.append(element[-1])\n        else:\n            rear_list.append(element)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes in a tuple of strings and returns a new tuple of the same length where each element is the rear index element of the corresponding string in the input tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_strings = []\n    for i in range(len(test_tuple)):\n        extracted_strings.append(test_tuple[i][-1])\n    return extracted_strings"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string_index in range(len(test_tuple)-1, -1, -1):\n        rear_elements.append(test_tuple[string_index])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, s in enumerate(test_tuple):\n        rear_indices.append(len(s)-1)\n    return rear_indices"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, elem):\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for i in lst:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Filter odd numbers\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n    \n    # If there are no matches, return the input string as is\n    if len(matches) == 0:\n        return dt\n    \n    # Extract the date components from the first match\n    year, month, day = matches[0]\n    \n    # Convert the date components to the desired format\n    yyyy, mm, dd = map(int, [year, month, day])\n    return f'{dd}-{mm}-{yyyy}'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Define the regular expression pattern for matching the date format in yyyy-mm-dd format\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n\n    # Use re.match() method to search for the date format in the input string\n    match = re.match(pattern, dt)\n\n    # If the date format is found, extract the year, month, and day from the match object\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Use the strftime() method to format the date in dd-mm-yyyy format\n        result = f\"{day}-{month}-{year}\"\n\n        return result\n\n    # If the date format is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    # check if match is None or group(0) is None\n    if not match or not match.group(0):\n        return None\n    # extract the date components\n    year, month, day = match.groups()\n    # convert the date components to desired format\n    desired_format = day + '-' + month + '-' + year\n    # return the desired format\n    return desired_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_format = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    return yyyy_mm_dd_format.sub(r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_format = day + '-' + month + '-' + year\n        return new_format\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() function to replace the matched pattern with the desired format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\1-\\2', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regex pattern for matching yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # define regex pattern for matching dd-mm-yyyy format\n    pattern2 = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    \n    # use re.search() to find all matches of pattern in dt\n    match = re.search(pattern, dt)\n    \n    # if a match is found, use re.sub() to replace the format\n    if match:\n        date_str = match.group(0)\n        new_date = date_str.replace('-', '/')\n        # use re.search() to find all matches of pattern2 in new_date\n        match2 = re.search(pattern2, new_date)\n        # if a match is found, use re.sub() to replace the format\n        if match2:\n            new_date_str = match2.group(0)\n            new_dt = datetime.datetime.strptime(new_date_str, '%d/%m/%Y')\n            return new_dt\n        else:\n            print('Error: Cannot convert date format.')\n    else:\n        print('Error: Invalid date format.')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the '-' with a space and swap the order of the month and day.\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = yyyy_mm_dd.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = '-'.join((day, month, year))\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = int((h-1)/3)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step size\n    h = 1\n    # Do gaps of h elements\n    while h < n // 3:\n        h = 3 * h + 1\n    # While gap is less than array length\n    while h >= 1:\n        # Insertion sort for gap size h\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        # Decrease gap size\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # The following value is chosen based on the choice of the Shellsort algorithm.\n    gap = n // 2\n    \n    while gap > 0:\n        # Iterate over the array by shifting the elements by the gap.\n        for i in range(gap, n):\n            # Compare the current element with its adjacent elements and exchange them if necessary.\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Reduce the gap by half after each pass.\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    if len(test_tup1) == len(test_tup2):\n        return tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n    else:\n        print(\"Error: Tuples do not have the same length.\")\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (test_tup1[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    result = []\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # extract the elements of the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # and the elements together to get the elementwise and tuple\n        and_elem = elem1 & elem2\n        # append the and tuple to the result list\n        result.append(and_elem)\n    # return the result list\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the and tuples\n    and_tup_list = []\n    # Iterate through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from both tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Calculate the and tuple of the corresponding elements\n        and_tup = elem1 & elem2\n        # Append the and tuple to the list\n        and_tup_list.append(and_tup)\n    # Return the list of and tuples\n    return and_tup_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        directrix = (-b)/(2*a)\n    else:\n        directrix = \"No solution\"\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The parabola has no real roots.\")\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b ** 2 - 4 * a * c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(\"The directrix is the point where the parabola crosses the y-axis.\")\n        print(\"Root 1:\", root1)\n        print(\"Root 2:\", root2)\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        print(\"The directrix is the point where the parabola crosses the y-axis.\")\n        print(\"Root 1:\", root)\n    else:\n        print(\"The directrix cannot be found.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Compute the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is non-negative, there exists a real root\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    else:\n        x1 = None\n        x2 = None\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5)/(2*a)\n        return x\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        print(\"The discriminant is negative or zero.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters, a, b, and c, representing the coefficients of a quadratic equation. \n    It then calculates the directrix of the parabola and returns the value.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + discriminant**(1/2)) / (2*a)\n        x2 = (-b - discriminant**(1/2)) / (2*a)\n        return x1, x2\n    else:\n        return \"The discriminant is negative. The equation is not a parabola.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Calculate the two roots of the discriminant\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n    else:\n        root1 = None\n        root2 = None\n        \n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        return (-b) / (2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    det = b**2 - 4*a*c\n    if det > 0:\n        return (-b + det**0.5) / (2*a)\n    elif det == 0:\n        return -b / (2*a)\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if the intersection of the two sets is not empty\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for item in list2:\n        if item in list1:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # check if the lists are the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # use a set to keep track of the common elements\n    common = set()\n    \n    # iterate through the lists\n    for i in range(len(list1)):\n        # check if the current element is in the second list\n        if list1[i] in list2:\n            # add the element to the common set\n            common.add(list1[i])\n    \n    # return true if there is at least one common element, false otherwise\n    return bool(common)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create an empty set to store common elements\n    common = set()\n\n    # Loop through each element in list1\n    for i in list1:\n        # If the element is in list2, add it to the common set\n        if i in list2:\n            common.add(i)\n\n    # If the common set is not empty, return True\n    if common:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * base1 * height\n\n    # Calculate the difference between the area of the base of the trapezium and the area of the trapezium\n    area_difference = area - base_area\n\n    # Calculate the area of the trapezium between the bases\n    area_between_bases = 0.5 * (base2 + base1) * height\n\n    # Calculate the area of the trapezium between the bases\n    area_between_bases = area_between_bases - area_between_bases\n\n    # Calculate the sum of the area of the trapezium between the bases and the difference between the area of the base of the trapezium and the area of the trapezium\n    area_sum = area_between_bases + area_difference\n\n    # Calculate the median length of the trapezium\n    median_length = area_sum / area\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    base_sum = base1 + base2\n    area = 0.5 * height * (base_sum + base1 + base2)\n    return (area - base1) * height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium using the trapezoidal rule.\n    The trapezoidal rule states that the length of the trapezium is\n    equal to half the width of the base and the height of the trapezium.\n    '''\n    width = (base1 + base2) / 2  # calculate the width\n    return width * height / 2     # calculate the median length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium's sides\n    side1 = 0.5 * (base1 + base2)\n    side2 = 0.5 * height\n\n    # Calculate the length of the trapezium's base\n    base = 0.5 * (side1 + side2)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base * height\n\n    # Calculate the area of the base\n    area_base = 0.5 * base * base\n\n    # Calculate the area of the trapezium's right half\n    area_right = 0.5 * (side1 + side2) * height\n\n    # Calculate the area of the trapezium's left half\n    area_left = 0.5 * (side1 + side2) * (height - height)\n\n    # Calculate the median area\n    median_area = (area + area_right + area_left) / 3\n\n    # Calculate the median length of the trapezium's sides\n    median_side1 = 0.5 * (side1 + side2)\n    median_side2 = 0.5 * (side1 + side2)\n\n    # Calculate the median length of the trapezium's base\n    median_base = 0.5 * (side1 + side2)\n\n    # Calculate the median length of the trapezium's height\n    median_height = height\n\n    # Calculate the median length of the trapezium's diameter\n    median_diameter = 0.5 * (side1 + side2) * height\n\n    # Return the median lengths of the trapezium's sides, base, height, and diameter\n    return median_side1, median_side2, median_base, median_height, median_diameter"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    return 2 * area / (base1 + base2 + height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Args:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    '''\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    s = (base1 + base2 + height) / 2\n\n    # Calculate the length of the sides of the trapezium using the area formula\n    side1 = 0.5 * s * base1\n    side2 = 0.5 * s * base2\n    side3 = 0.5 * s * height\n\n    # Sort the sides of the trapezium in ascending order\n    sides = [side1, side2, side3]\n    sides.sort()\n\n    # Calculate the median length of the trapezium\n    median_length = sides[1]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_length = base1 * height / 2\n    base2_length = base2 * height / 2\n    total_length = base1_length + base2_length\n    return total_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    # calculate the length of the left trapezium half\n    left_half_area = area - 0.5 * base2 * (height-height)\n    # calculate the length of the right trapezium half\n    right_half_area = 0.5 * base2 * (height-height)\n    # find the median length of the trapezium by taking the average of the two halves\n    median = 0.5 * (left_half_area + right_half_area)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the base of the trapezium\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the height of the trapezium\n    height_half = height / 2\n\n    # Calculate the area of the base\n    area_base = base * height_half\n\n    # Calculate the area of the trapezium\n    area_trapezium = area - area_base\n\n    # Calculate the area of the hypotenuse\n    area_hypotenuse = base1 ** 2 + base2 ** 2\n\n    # Calculate the ratio of the two areas\n    ratio = area_trapezium / area_hypotenuse\n\n    # Calculate the median length of the trapezium\n    median = area_trapezium / ratio\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at position\", arr.index(i))\n            return True\n    print(\"The number is not greater than any element in the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{arr[i]} is greater than {number}\")\n            return True\n    print(f\"{number} is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than = False\n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if number > i:\n            print(f\"{number} is greater than {i}\")\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b\\w*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=(b+))'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(matches[0])\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # return the last digit of the given number\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers.\n    \"\"\"\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char)%2!=0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = set(str1) - set('aeiouAEIOU')\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for char in str1:\n        if char.isalnum() and int(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in string if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the output\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the new string\n        if int(char) % 2!= 0:\n            new_str += char\n    # Return the new string with all odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Initialize an empty list to store the even characters\n    even_list = []\n    # Loop through each character in the list\n    for char in char_list:\n        # If the character is odd, add it to the even list\n        if char % 2!= 0:\n            even_list.append(char)\n    # Join the even list into a string and return it\n    return ''.join(even_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_count = 0\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_count += 1\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 1:\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum() and ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) not in bidirectional_pairs and (test_list[j], test_list[i]) not in bidirectional_pairs:\n                bidirectional_pairs.append((test_list[i], test_list[j]))\n    return len(bidirectional_pairs)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        if num > 1:\n            for i in range(2, num+1):\n                if (num % i) == 0:\n                    single_num *= i\n                    break\n            else:\n                single_num *= num\n                break\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the integers in the list\n    total = 0\n    \n    # iterate over the list and add each integer to the total\n    for i in L:\n        total += i\n        \n    # return the total as the single integer\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    \n    if len(L) == 1:\n        return L[0]\n    \n    result = 0\n    \n    for i in range(len(L)):\n        if L[i] % 10 == 0:\n            result += L[i]\n    \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single *= num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for i in L:\n        single_num += i\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove all non-alphanumeric characters and convert to lowercase\n    text = re.sub(r'[^a-zA-Z0-9]', '', text).lower()\n    # Split the sentence into words\n    words = text.split()\n    # Find the first adverb and its position\n    for i, word in enumerate(words):\n        if re.match(r'\\b(?:re|am|was|were|is|are|wasn\\'t|weren\\'t|isn\\'t|aren\\'t)\\b', word):\n            return word, i\n    return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(a|an|the|in)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            position = text.index(match)\n            print(f\"Adverb '{match}' found at position {position}\")\n    else:\n        print(\"No adverbs found in the text.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'\\b(only|too|just|very|rarely|seldom|sometimes|never|rarely|hardly|a lot|much|little|rarely|often|only|little|not at all|a little|a lot|seldom|almost always|sometimes|never|rarely|hardly|much|seldom|almost always|sometimes|never|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely|hardly|much|seldom|rarely"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the given sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Loop through the adverbs and find their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Find the position of the first occurrence of the adverb in the sentence\n        position = text.find(adverb)\n        print(f'The adverb {adverb} appears at position {position}')\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern to find adverbs\n    pattern = r'\\b\\w*[a-z]*\\b\\s*adverb\\b\\s*[a-z]*\\b\\w*'\n    \n    # Find all matches of the pattern in the given sentence\n    matches = re.findall(pattern, text)\n    \n    # Initialize empty list to store positions of adverbs\n    adverb_positions = []\n    \n    # Iterate over all matches and add their positions to the list\n    for match in matches:\n        # Split the match into words\n        words = match.split()\n        # Check if the first word is an adverb\n        if words[0] in ['very','really', 'always', 'often','very often', 'rarely', 'infrequently','sometimes', 'occasionally','seldom', 'almost never', 'never']:\n            # Get the position of the first word in the sentence\n            start_index = text.find(words[0])\n            # Add the position to the list of adverb positions\n            adverb_positions.append(start_index)\n            \n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern to match adverbs\n    pattern = r\"\\b(?:(?:adv|advmod|advcl|advb|advoc|advtemp|advcladj|advpl)s?\\b)\\b\"\n    # Use re.findall() method to find all occurrences of adverbs in the sentence\n    matches = re.findall(pattern, text)\n    # Return the list of adverbs and their positions\n    return [(match, text[match.start():match.end()].index(match)) for match in matches]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the pattern to match adverbs\n    pattern = r'\\b(very|really|actually|quite|not really|rather|well|kinda|just a bit|little|much|a lot|pretty|really|actually|much|a lot|quite|rather|well|kinda|just a bit|little|much|a lot|pretty|actually|really|quite|not really|pretty|kinda|rather|well|just a bit|little|much|a lot|not really|actually|quite|not really|much|kinda|well|just a bit|little|a lot|not really|actually|quite|not really|much|kinda|well|just a bit|a lot|not really|actually|quite|not really|much|kinda|well|just a bit|a lot|not really|actually|quite|not really|much|kinda|well|just a bit|a lot|not really)\\b'\n\n    # Use the re.findall() function to find all the matches\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverbs and their positions\n    for i, match in enumerate(matches):\n        print(f\"Adverb: '{match}' | Position: {i+1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match for adverbs\n    pattern = r'\\b(adv|adv\\w*)\\b'\n\n    # Search for adverbs in the given text using the pattern\n    match = re.search(pattern, text)\n\n    # If adverbs are found, return their positions and the matched adverb\n    if match:\n        return match.span() + (match.group(0),)\n    # If no adverbs are found, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text using regular expressions\n    adverbs = re.findall(r'\\b(a(d)?(d[ie])?|an?|the)\\b', text, flags=re.IGNORECASE)\n    \n    # Loop through the adverbs and print their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        print(f'Adverb \"{adverb}\" found at position {i+1}.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for finding adverbs\n    pattern = r'\\b\\w+(ed|ing|inged|inging|ed|edly|ingly|ed|edly|ingly)\\b'\n    # Search the sentence for adverbs using the pattern\n    matches = re.findall(pattern, text)\n    # Print the adverbs and their positions\n    for match in matches:\n        # Extract the adverb and its position\n        adverb = match[0]\n        position = text.find(adverb)\n        # Print the adverb and its position\n        print(f\"Adverb: {adverb}, Position: {position}\")\n    # Return the list of adverb positions\n    return matches"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n\n    # Calculating the volume of the cube\n    V = l**3\n\n    # Calculating the surface area of the cube\n    A = 6 * l**2\n\n    # Returning the surface area of the cube\n    return A\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l + 12*l + 8"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l + 12 * l + 8"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2  # Formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of integers to store positive numbers in the array\n    pos_nums = array('i')\n\n    # iterate through the array and check if each number is positive or not\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n\n    # calculate the ration of positive numbers\n    pos_count = len(pos_nums)\n    neg_count = len(nums) - pos_count\n    pos_ratio = pos_count / neg_count\n\n    # return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of positive numbers to all numbers in the array.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n    \n    ratio = pos_count / len(arr)\n    print(f\"The ratio of positive numbers is: {ratio}\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize variables to store the positive numbers and their count\n    pos_nums = []\n    count = 0\n\n    # Iterate through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n            count += 1\n\n    # Calculate the ration of positive numbers\n    if count == 0:\n        return 0\n    else:\n        return count / len(pos_nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_arr = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n\n    if len(positive_arr) > 0:\n        positive_ratio = len(positive_arr) / len(nums)\n        return positive_ratio\n    else:\n        return None"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = 0\n    neg_nums = 0\n    for num in nums:\n        if num > 0:\n            pos_nums += 1\n        elif num < 0:\n            neg_nums += 1\n    pos_ratio = pos_nums / len(nums)\n    neg_ratio = neg_nums / len(nums)\n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store the positive numbers\n    positive_nums = array('i')\n    # Iterate through the input array\n    for num in nums:\n        # If the number is positive, append it to the positive_nums array\n        if num > 0:\n            positive_nums.append(num)\n    # Calculate the length of the positive_nums array\n    length = len(positive_nums)\n    # If the length of the array is 0, return 0\n    if length == 0:\n        return 0\n    # Calculate the sum of the elements in the positive_nums array\n    sum_positive = sum(positive_nums)\n    # Calculate the ration of positive numbers\n    ratio = sum_positive / length\n    # Return the ration as a float\n    return float(ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    pos_ratio = pos_count / len(nums)\n    neg_ratio = neg_count / len(nums)\n    \n    print(\"Positive numbers: {:.2f}\".format(pos_ratio))\n    print(\"Negative numbers: {:.2f}\".format(neg_ratio))"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize the largest negative number with negative infinity\n\n    for num in list1:  # iterate over each element in the list\n        if num < 0 and num > largest:  # if the element is negative and greater than the current largest negative number\n            largest = num  # update the largest negative number\n\n    return largest  # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')  # initialize largest to negative infinity\n    \n    for num in list1:\n        if num < 0 and num > largest:  # if number is negative and larger than largest\n            largest = num\n            \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest \n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    largest_num = -1\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0] # initialize largest to the first element of the list\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest: # if the current element is negative and greater than largest, update largest\n            largest = list1[i]\n    return largest # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            max_neg = max(max_neg, num)\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple in test_list:\n        trimmed_tuple = tuple[:K]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create a new list to store the trimmed tuples\n    trimmed_list = []\n    # Loop through the given tuple list\n    for tup in test_list:\n        # Create a new list to store the trimmed tuple elements\n        new_tup = []\n        # Loop through the tuple elements\n        for elem in tup:\n            # If the element is not None, append it to the new tuple list\n            if elem is not None:\n                new_tup.append(elem)\n            # If the number of elements in the new tuple is greater than or equal to k,\n            # add the new tuple to the trimmed_list\n            elif len(new_tup) >= K:\n                trimmed_list.append(new_tup)\n                # Reset the new tuple list to store the trimmed elements\n                new_tup = []\n        # If there are any remaining elements in the new tuple, append them to the trimmed list\n        if len(new_tup) > 0:\n            trimmed_list.append(new_tup)\n    # Return the trimmed_list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate over the tuple list and trim each tuple by k\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][K:])\n        trimmed_list.append(trimmed_tup)\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append((test_list[i][0], test_list[i][1][0:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # initialize an empty list to store trimmed tuples\n    trimmed_list = []\n    for tup in test_list:\n        # if the length of the tuple is greater than k, trim the tuple and append it to the trimmed list\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            # if the length of the tuple is less than or equal to k, append the tuple as is to the trimmed list\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if len(test_list[i]) > 1:\n                if len(test_list[i]) - 1 == j:\n                    del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        while len(tup) > K:\n            tup.pop()\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append((test_list[i][0], test_list[i][1][:K]))\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    # Perform multiplication of tuple elements\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # If both tuples have the same length, then perform index wise multiplication\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n    # If one tuple has a smaller length, then perform multiplication on the smaller length with zeroes.\n    elif len(test_tup1) < len(test_tup2):\n        return tuple(map(lambda x, y: x * y, test_tup1, [0] * (len(test_tup2) - len(test_tup1))))\n\n    # If one tuple has a larger length, then perform multiplication on the larger length with zeroes.\n    else:\n        return tuple(map(lambda x, y: x * y, [0] * (len(test_tup1) - len(test_tup2)), test_tup2))"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # initialize a result tuple of the same length as test_tup1 and test_tup2\n    result_tup = [0] * len(test_tup1)\n\n    # iterate through each element in test_tup1 and test_tup2\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements in test_tup1 and test_tup2\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have equal lengths\")\n        return\n\n    for i in range(len(test_tup1)):\n        print(f\"Index {i+1}: {test_tup1[i] * test_tup2[i]}\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for item in tup:\n        count[item] += 1\n    \n    for item in lst:\n        if item in count:\n            count[item] += 1\n    \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element in the list.\n    '''\n    count = Counter(lst)\n    count_dict = {}\n    for item in tup:\n        if item in count:\n            count_dict[item] = count[item]\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as arguments and returns a dictionary where the keys are the elements of the tuple and the values are the number of occurrences of that element in the tuple.\n    '''\n    count_dict = Counter(tup)\n    for i in lst:\n        count_dict[i] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    return cnt[lst]"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = Counter(lst)\n    count_dict_result = {}\n    for elem, count in count_dict.items():\n        if elem in tup:\n            count_dict_result[elem] = count\n    return count_dict_result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            print(i, count[i])"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    lst_set = set(lst)\n    \n    for item in lst_set:\n        count = count_dict.get(item, 0)\n        print(f\"{item}: {count}\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)  # Counter function from the collections module is used to count the occurrence of all elements in the tuple\n    for item in lst: \n        if item in count:  # If the element is present in the tuple, its count is incremented \n            count[item] += 1 \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments: \n    1. tup: a tuple \n    2. lst: a list\n    \n    The function counts the occurrences of all elements of list in the tuple and returns a Counter object.\n    '''\n    count = Counter(tup)\n    for elem in lst: \n        count[elem] += 1\n    return count "
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # loop through each element in the list\n    for num in nums:\n        # find the cube of the current element and store it back in the list\n        nums[nums.index(num)] = num ** 3\n    return nums"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n\n    Args:\n    n (int): The number of Perrin numbers to generate.\n\n    Returns:\n    int: The sum of the generated Perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_perrin_numbers = 0\n    for i in range(1, n+1):\n        sum_of_perrin_numbers += 1/i\n    return sum_of_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize a list to store the perrin numbers\n    perrins = []\n\n    # Calculate the sum of perrin numbers up to n\n    for i in range(1, n+1):\n        perrins.append(2*i)\n\n    # Calculate the sum of the perrins\n    sum_perrins = sum(perrins)\n\n    return sum_perrins"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n\n    Args:\n    n (int): the maximum value of the Perrin numbers to be generated\n\n    Returns:\n    int: the sum of Perrin numbers from 1 to n\n\n    '''\n    # Initialize variables\n    sum_perrin = 0\n    num_perrin = 1\n\n    # Loop through each number and calculate its Perrin number\n    while num_perrin <= n:\n        sum_perrin += num_perrin\n        num_perrin += 1\n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    for i in range(1, n+1):\n        p = (p*i)//(i+1)\n        s += p\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i**3 + i**2 - i)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 5, 13, 41, 125, 313, 8125, 21597]\n    sum_of_perrin_numbers = 0\n    \n    for number in perrin_numbers:\n        sum_of_perrin_numbers += number\n        \n        if sum_of_perrin_numbers >= n:\n            break\n    \n    return sum_of_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 3, 4, 6, 8, 12, 16, 20, 25, 30]\n    total_sum = 0\n    for i in perrin_numbers:\n        total_sum += i\n        if total_sum > n:\n            break\n    return total_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and extracts the strings of specified size from the list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        result.append(i[0:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for string in str_list:\n        result.append(string[:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l, n):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:n] for s in l if len(s) >= n]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a list of string values.\n\n    Args:\n    - str_list (list): list of string values\n    - size (int): size of the desired strings\n\n    Returns:\n    - list: list of strings of specified size\n    '''\n    result = []\n    for s in str_list:\n        result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(l), l):\n        result.append(str[i:i+l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    return [s[:l] for s in l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and a number l as input and returns a new list containing the specified size of strings from the input list.\n    '''\n    return str_list[:l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): List of string values.\n        size (int): Size of the string to be extracted.\n\n    Returns:\n        list: A list of strings of the specified size.\n    \"\"\"\n    return [str[i:i+size] for str in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all the whitespaces from it.\n    '''\n    text2 = re.sub('\\s+','', text1) # Using regular expression to remove multiple whitespaces\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all spaces and tabs with a single space\n    text1 = re.sub(r'\\s+','', text1)\n    # remove any leading or trailing spaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text2 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # remove all whitespace characters from the string\n    text = re.sub(r'\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_amount = sale_amount - actual_cost\n    if loss_amount >= 0:\n        return 0\n    else:\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            even_factors += i\n        i += 1\n    if n > 1:\n        even_factors += n\n    return even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = []\n    # Finding all even factors of the number\n    for i in range(2, n+1, 2):\n        if n%i == 0:\n            evenFactors.append(i)\n\n    # Summing all even factors\n    sum = sum(evenFactors)\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    i = 2\n    while i <= math.sqrt(n): \n        if n % i == 0: \n            if i % 2 == 0: \n                evenSum += i \n            n = n // i \n        else: \n            i += 1\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of its even factors.\n    '''\n    even_factors = [x for x in range(2, int(math.sqrt(n))+1) if n % x == 0 and x % 2 == 0]\n    return sum(even_factors)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use the re.findall() method to find all words in the text that contain 'z'\n    words_containing_z = re.findall('\\w+z\\w+', text)\n    \n    # Return the list of words containing 'z'\n    return words_containing_z"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+z\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z\\w+)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # define the regular expression pattern to match the word containing 'z'\n    pattern = r'\\b(z)\\w+\\b'\n\n    # search the text for the pattern and return the matched text\n    return re.search(pattern, text).group()"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\w*\\b') # matches any word containing 'z'\n    matches = pattern.findall(text) # finds all matches in the text\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z\\b'\n    match = re.search(pattern, text)\n    if match:\n        print('Found a word containing \"z\":', match.group())\n    else:\n        print('No word containing \"z\" found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and not(year % 4) or (year % 400 == 0 and not(year % 100)) or (year % 4 == 0 and not(year % 100)):\n        if monthnum2 == 2:\n            if year % 400 == 0:\n                num_days = 29\n            elif year % 100 == 0:\n                num_days = 28\n            else:\n                num_days = 29\n        else:\n            num_days = 30\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            num_days = 30\n        elif monthnum2 == 2:\n            num_days = 28\n        else:\n            num_days = 31\n    return num_days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    # Check if the given month number is a valid month number\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number.\")\n        return\n    \n    # Check if the given month number contains 31 days\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in [4, 6, 9, 11]:\n        if monthnum2 % 2 == 0:\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    elif monthnum2 in [2]:\n        days_in_month[1] = 29\n    \n    # Check if the given month number contains 30 days\n    for i in range(len(days_in_month)):\n        if days_in_month[i] == 30:\n            if i < monthnum2 - 1:\n                days_in_month[i] = 29\n    \n    # Check if the given month number contains 31 days\n    for i in range(len(days_in_month)):\n        if days_in_month[i] == 31:\n            if i < monthnum2 - 1:\n                days_in_month[i] = 28\n    \n    # Check if the given month number contains 30 or 31 days\n    for i in range(len(days_in_month)):\n        if days_in_month[i] in [30, 31]:\n            if i < monthnum2 - 1:\n                print(\"The given month number contains 31 days.\")\n                return\n    \n    # If none of the above conditions are satisfied, then the given month number does not contain 31 days\n    print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        if monthnum in [4, 6, 9, 11]:\n            if monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0):\n                return days_in_month[monthnum-1]\n            else:\n                return days_in_month[monthnum-1] + 1\n        else:\n            return days_in_month[monthnum-1]\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        if monthnum2 == 2:\n            if (datetime.date(2021, 2, 29) - datetime.date(2021, 2, 1)).days > 30:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum2, \"contains 31 days.\")\n    elif monthnum2 in [4, 6, 9, 11]:\n        print(monthnum2, \"contains 30 days.\")\n    else:\n        print(monthnum2, \"contains 28 or 29 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate through the list of strings and reverse each string\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Use list comprehension to reverse each string in the list\n    reversed_list = [string[::-1] for string in stringlist]\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist_min = None\n    min_len = len(lst) + 1 # assume all sublists have length greater than or equal to min_len\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            sublist_min = sublist\n    \n    return sublist_min"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Find the minimum length of sublist\n    min_len = float('inf')\n    for i in range(len(lst)):\n        sublst = lst[i]\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n\n    # Return the sublist with minimum length\n    for i in range(len(lst)):\n        sublst = lst[i]\n        if len(sublst) == min_len:\n            return sublst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    # Find the length of the list\n    n = len(lst)\n    \n    # Initialize a variable to store the minimum length sublist\n    min_len = float('inf')\n    \n    # Initialize a variable to store the sublist with minimum length\n    min_sublist = []\n    \n    # Loop through the list\n    for i in range(n):\n        # Loop through the list starting from index i+1 to find a sublist with minimum length\n        for j in range(i+1, n):\n            # Check if the current sublist has a length less than minimum length\n            if len(lst[i:j+1]) < min_len:\n                # If it does, update minimum length and minimum sublist\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # sorting the given list\n    lst.sort()\n\n    # storing the length of the list\n    n = len(lst)\n\n    # keeping track of the minimum length sublist\n    min_sublist = None\n\n    # checking for all possible sublists\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                sublist = lst[i:j+1]\n                if min_sublist is None or len(sublist) < len(min_sublist):\n                    min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Find the length of the sublist with minimum length\n    min_len = float('inf')\n    sublist = []\n\n    for i in range(len(lst)):\n        # Check if the current sublist has minimum length\n        curr_len = len(lst[i])\n        if curr_len < min_len:\n            min_len = curr_len\n            sublist = lst[i]\n\n    # Return the sublist with minimum length\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') #initialize the minimum length to infinity\n    min_sublist = [] #initialize the list to store the minimum sublist\n\n    for sublist in lst: #iterate through all the sublists\n        if len(sublist) < min_len: #check if the length of the sublist is less than the current minimum length\n            min_len = len(sublist) #update the minimum length\n            min_sublist = sublist #update the minimum sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    for i in range(len(lst)):\n        min_len = min(len(sublist) for sublist in lst[i:])\n        min_sublist.append(lst[i][:min_len])\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            if len(sub_lst) < min_len:\n                min_len = len(sub_lst)\n                min_lst = sub_lst\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    \n    # Use the regular expression pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Loop through the matches and remove each uppercase substring from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', string)\n\n    # Loop through each uppercase substring found and replace it with an empty string\n    for substring in uppercase_substrings:\n        string = string.replace(substring, '')\n\n    # Return the updated string with uppercase substrings removed\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # define the pattern to match uppercase substrings\n    pattern = r'[A-Z][a-z]+'\n\n    # find all uppercase substrings using the pattern\n    matches = re.findall(pattern, str1)\n\n    # loop through the matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'')\n\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes in a string as input, removes all uppercase substrings from it, and returns the resulting string.\n    '''\n\n    # Use regular expressions to find all uppercase substrings in the string\n    uppercase_substrings = re.findall('[A-Z]', string)\n\n    # Remove all uppercase substrings from the string and return the result\n    for uppercase_substring in uppercase_substrings:\n        string = string.replace(uppercase_substring, '')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Remove uppercase substrings\n    result = [word for word in words if word.islower()]\n\n    # Join the words back into a string\n    return''.join(result)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]'\n    substrings = re.findall(pattern, str1)\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist in the input list.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for sublist in lst for x in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            pass\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if type(sublist) == list:\n            for item in sublist:\n                print(item)\n        else:\n            print(sublist)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of each sublist to a new list\n        for element in sublist:\n            Extracted.append(element)\n    return Extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Iterate through the list and extract the first element of each sublist\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and extracts the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            res.append(sublist[0])\n        else:\n            res.append(sublist)\n    return res"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # sort the list\n    list1.sort()\n    # initialize an empty list to store the combinations\n    combinations = []\n    # loop through all possible indices\n    for i in range(len(list1)):\n        # initialize an empty list to store the current combination\n        combination = []\n        # loop through all possible indices after the current index\n        for j in range(i+1, len(list1)+1):\n            # add the current element to the combination\n            combination.append(list1[i])\n            # check if the sum of the combination is greater than or equal to the target sum\n            if sum(combination) >= target_sum:\n                # if the sum is greater than or equal to the target sum, add the combination to the list of combinations\n                combinations.append(combination)\n                # break out of the inner loop\n                break\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as an argument and returns a list of all possible combinations of its elements.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            k = j + i - 1\n            combination = list1[j:k+1]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns all possible combinations of its elements.\n\n    Example:\n    >>> combinations_list([1, 2, 3])\n    [(1, 2), (1, 3), (2, 3)]\n    '''\n\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            res.append(lst[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combinations = []\n    # create a loop that iterates over each element in the list\n    for i in range(len(list1)):\n        # create an empty list to store the remaining elements\n        remaining = list1[:i] + list1[i+1:]\n        # create a loop that iterates over each remaining element\n        for j in range(len(remaining)):\n            # create a combination of the remaining and current elements\n            combination = remaining[j] + [list1[i]]\n            # append the combination to the list of combinations\n            combinations.append(combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list to store the combinations\n    combinations = []\n\n    # Iterate over all possible pairs of elements in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Append the pair to the combinations list\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    \n    # Initialize the result list\n    result = []\n    \n    # Base case: if the list has only one element, return it as a combination\n    if len(list1) == 1:\n        return [list1]\n    \n    # Recursive case: for each element in the list, find all possible combinations of the rest of the elements\n    for i in range(len(list1)):\n        rest = list1[:i] + list1[i+1:]\n        for comb in combinations_list(rest):\n            result.append([list1[i]] + comb)\n    \n    # Return the final result list\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through the elements of the list\n    for i in range(len(list1)):\n        # loop through the remaining elements of the list\n        for j in range(i+1, len(list1)+1):\n            # create a tuple of the elements in the current combination\n            combination = tuple(list1[i:j])\n            # append the combination to the list of combinations\n            combinations.append(combination)\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product*num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_so_far = max_ending_here = float('-inf')\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to store the maximum subarray product and the current subarray product\n    max_product = arr[0]\n    current_product = 1\n\n    # Loop through the array and update the maximum product and the current subarray product\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product*arr[i])\n        max_product = max(max_product, current_product)\n\n    # Return the maximum subarray product\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a list to store the values in the dictionary\n    values = []\n    # Iterate over the dictionary and append the values to the list\n    for value in dict.values():\n        values.append(value)\n    # Check if all the values in the list are equal to the value of n\n    if all(value == n for value in values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = dict.values()\n    if len(value)!= 1 or len(value[0])!= n:\n        return False\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 1\n    value = dict[list(dict.keys())[0]]\n    for key in dict.keys():\n        if dict[key]!= value:\n            count += 1\n            value = dict[key]\n        if count == n:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert the dictionary to a list of lists\n    lst = [[value for key, value in item.items()] for item in dict.items()]\n    # Check if all lists have the same length\n    if all(len(lst[0]) == len(lst[i]) for i in range(len(lst))):\n        # Check if all lists have the same elements in the same order\n        if all(all(lst[0][i] == lst[i][i] for i in range(len(lst[0]))) for lst in lst):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if value == dict.values()[0]:\n            count += 1\n        else:\n            return False\n    return True if count == n else False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key in dict:\n        if key not in values:\n            values.append(dict[key])\n    \n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for key, value in dict.items():\n        if all_same:\n            all_same = value == dict[key]\n        else:\n            all_same = all_same and value == dict[key]\n    return all_same"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None and value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value is not None and value!= '':\n            if isinstance(value, dict):\n                drop_empty(value)\n            elif isinstance(value, list):\n                for item in value:\n                    if item is not None and item!= '':\n                        if isinstance(item, dict):\n                            drop_empty(item)\n            else:\n                continue\n        else:\n            dict1.pop(key)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary\n    new_dict = {}\n    # loop through each item in the original dictionary\n    for item in dict1.items():\n        # if the item is not empty, add it to the new dictionary\n        if item[1]!= '':\n            new_dict[item[0]] = item[1]\n    # return the new dictionary\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create an empty list to store the non-empty items\n    result = []\n    # Loop through each item in the input dictionary\n    for item in dict1:\n        # If the item is not an empty string or None, append it to the result list\n        if item!= '' and item is not None:\n            result.append(item)\n    # Return the result list\n    return result"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Create a list of increasing subsequences\n    subseq = []\n    max_val = 0\n    for i in range(n):\n        while len(subseq) > 0 and arr[i] > arr[subseq[-1]]:\n            subseq.pop()\n        subseq.append(i)\n        max_val = max(max_val, arr[i] * (len(subseq) * subseq[0]))\n        \n    # Return the maximum value of the subsequences\n    return max_val"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_product = float('-inf')\n    curr_product = 1\n    prev_max_product = float('-inf')\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            curr_product = arr[i]\n        else:\n            curr_product = arr[i] * prev_max_product\n        if curr_product > max_product:\n            max_product = curr_product\n        if curr_product < 0:\n            curr_product = 1\n        if max_product < 0:\n            max_product = 1\n        prev_max_product = max_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Create a list of increasing subsequences\n    subseq = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                subseq[i] = max(subseq[i], subseq[j] * arr[i])\n\n    # Find the maximum product\n    max_prod = subseq[0]\n    for i in range(1, n):\n        max_prod = max(max_prod, subseq[i])\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables for finding the maximum subsequence of arr\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    \n    # Traverse through the array and update the above variables\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here, max_ending_here*arr[i], min_ending_here*arr[i])\n        min_ending_here = min(min_ending_here, temp*arr[i])\n        \n        # Update the maximum subsequence of arr so far\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i-1]:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            temp = max_ending_here\n            max_ending_here = max(max_ending_here*arr[i], max_ending_here*arr[i+1])\n            max_product = max(max_product, max_ending_here)\n            min_ending_here = min(min_ending_here*arr[i], min_ending_here*arr[i+1])\n        else:\n            temp = min_ending_here\n            min_ending_here = min(min_ending_here*arr[i], min_ending_here*arr[i+1])\n            max_product = max(max_product, max_ending_here)\n            max_ending_here = temp\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_sum = float('-inf')\n        min_sum = float('inf')\n        for i in range(n):\n            max_sum = max(max_sum + arr[i], arr[i])\n            min_sum = min(min_sum + arr[i], arr[i])\n        return max(max_sum, min_sum)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        else:\n            max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_so_far\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Find the pairwise addition of the neighboring elements of the given tuple.\n\n    :param test_tup: a tuple of numbers\n    :return: the pairwise addition of the neighboring elements\n    \"\"\"\n\n    # If the input tuple has less than 2 elements, return None\n    if len(test_tup) < 2:\n        return None\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop over the first and second elements of the tuple\n    for i in range(len(test_tup)):\n        # Add the current element and the next element to the sum\n        sum += test_tup[i] + test_tup[i+1]\n\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a new tuple to store the pairwise sums\n    new_tup = ()\n    \n    # loop through the tuple and add the neighboring elements as the sum\n    for i in range(len(test_tup)-1):\n        new_tup += (test_tup[i] + test_tup[i+1],)\n    \n    # return the updated tuple\n    return new_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Get the length of the tuple\n    length = len(test_tup)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each element of the tuple\n    for i in range(length):\n        # Loop through each element of the tuple again\n        for j in range(i+1, length):\n            # Add the pairwise sum of the current elements to the result list\n            result.append(test_tup[i] + test_tup[j])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # First, we check if the input tuple has more than one element.\n    if len(test_tup) < 2:\n        print(\"Tuple must have more than one element.\")\n        return\n    \n    # Next, we loop through the tuple and calculate the sum of the neighboring elements.\n    sum_of_neighboring_elements = 0\n    for i in range(1, len(test_tup)-1):\n        sum_of_neighboring_elements += test_tup[i]\n    \n    # Finally, we return the sum of the neighboring elements.\n    return sum_of_neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # unpack the tuple\n    a, b = test_tup\n    # add the neighboring elements of the tuple\n    total = a + b + a + b\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Using list slicing to get the neighboring elements\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to zero\n    total = 0\n    # loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    # return the sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    \n    return test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(x + y for x, y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number n as input and returns the remainder of the product of the array\n    with all the elements in n. The remainder is computed as the remainder of the sum of the products of each element \n    in the array with all the elements in n.\n\n    Parameters:\n    arr: list\n        An array of integers.\n    n: int\n        A positive integer.\n\n    Returns:\n    int\n        The remainder of the product of the array with all the elements in n modulo n.\n    \"\"\"\n    product_sum = sum(arr[i] * (n - arr[i]) for i in range(len(arr)))\n    return product_sum % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    # Calculate the product of the array\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Calculate the modulo\n    modulo = product % n\n    \n    return modulo"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize a variable to store the product of the array multiplication\n    product = 1\n\n    # Iterate over each element in the array\n    for num in arr:\n        # Calculate the remainder after dividing the product by n\n        remainder = product % n\n\n        # Add the remainder to the product\n        product = (product * num) % n\n\n    # Return the final product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes two arrays arr1 and arr2 and returns their product modulo n.\n    \"\"\"\n    # Find the product of the two arrays\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return \"The list must contain at least 2 numbers.\"\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + 1 == l[i + 1]:\n                return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # check if the length of the list is less than 3\n    if len(l)<3:\n        return False\n\n    # iterate through the list and check if there is a consecutive number\n    for i in range(len(l)-2):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) < 2:\n        return \"The list should have at least two elements.\"\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers\n    or False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return False\n    elif len(l) == 1:\n        return True\n    else:\n        if l[0] == l[1]:\n            return False\n        else:\n            for i in range(len(l) - 1):\n                if l[i+1] - l[i]!= 1:\n                    return False\n            return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two lists of tuples and returns a new list that contains all the common elements\n    in both lists. The order of the tuples does not matter, and the function returns the common elements in\n    the same order as they appear in the first list.\n    \"\"\"\n    # First, create a set of tuples from the first list\n    set_1 = set(test_list1)\n    # Then, create a set of tuples from the second list\n    set_2 = set(test_list2)\n    # Finally, create a new set that contains only the common elements between the two sets\n    common_set = set_1.intersection(set_2)\n    # Convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the list of tuples to a set to remove duplicates\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection_set = set_list1.intersection(set_list2)\n\n    # Convert the set back to a list of tuples and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store the unique elements from both list\n    unique_elements = set(test_list1) & set(test_list2)\n    # Convert the set to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n\n    intersection_set = test_set1.intersection(test_set2)\n\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort the lists first\n    test_list1.sort()\n    test_list2.sort()\n    \n    # Initialize an empty list to store the intersection\n    intersection = []\n    \n    # Iterate through the lists using a nested loop\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # Compare the elements at indices i and j\n        if test_list1[i] == test_list2[j]:\n            # Add the intersection element to the list\n            intersection.append(test_list1[i])\n            # Move both pointers one step forward\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            # Move the pointer to the right\n            i += 1\n        else:\n            # Move the pointer to the right\n            j += 1\n    \n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create an empty dictionary to store the intersection of tuples\n    intersection_dict = {}\n\n    # loop through the first list and check if each tuple is present in the second list\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                # if a tuple is present in both lists, add it to the dictionary\n                if i in intersection_dict:\n                    intersection_dict[i] += 1\n                else:\n                    intersection_dict[i] = 1\n\n    # create an empty list to store the intersection of tuples\n    intersection_list = []\n\n    # loop through the dictionary and add tuples to the intersection list\n    for key, value in intersection_dict.items():\n        intersection_list.append((key, value))\n\n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # convert both the lists to sets to get the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # convert the sets to tuples\n    tuple1 = tuple(set1)\n    tuple2 = tuple(set2)\n    # find the intersection of the two tuples\n    intersection = tuple(set1 & set2)\n    # return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    # Loop through the first list and check if each element is present in the second list\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.add(element)\n    # Return the common elements as a tuple\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    \n    result = []\n    for item in test_list1:\n        if item in test_list2 and item not in result:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create a set of elements from the first list\n    set1 = set(test_list1)\n\n    # Create a set of elements from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes a string and two characters as inputs and replaces all occurrences of the first character with the second character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is the character to be replaced\n        if str1[i] == ch:\n            # Replace it with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    # Return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Check if the character to be replaced is in the string\n    if ch in str1:\n        # Replace the character\n        str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert dictionary to list of tuples (key, value)\n    data = list(dict1.items())\n    # sort list of tuples by value in descending order\n    data.sort(key=lambda x: x[1], reverse=True)\n    # convert list of tuples back to dictionary\n    sorted_dict = dict(data)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value.\n\n    Parameters:\n    dict1: A dictionary with integer keys and values.\n\n    Returns:\n    A sorted dictionary by value.\n    \"\"\"\n    sorted_dict = {}\n    for key, value in sorted(dict1.items(), key=lambda item: item[1], reverse=True):\n        sorted_dict[key] = value\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    count = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    # Create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_count)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(counter.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in an array of numbers and returns the sum of the largest and smallest values.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return max(nums[0], nums[1])\n    else:\n        biggest = nums[0]\n        smallest = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > biggest:\n                biggest = nums[i]\n            elif nums[i] < smallest:\n                smallest = nums[i]\n        return biggest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Return the sum of the first and last elements\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"Array must have at least two elements\"\n    else:\n        sorted_nums = sorted(nums)\n        return sorted_nums[-1] + sorted_nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    \n    smallest = float('inf')\n    largest = float('-inf')\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest value\n    return nums[0] + nums[1]"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Iterate through the words\n    for i in range(len(words)):\n        # Check if the current word is lowercase\n        if words[i].islower():\n            # Remove the word from the list\n            words.pop(i)\n            # Decrement the index\n            i -= 1\n    # Convert the list back to a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function removes all lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern for lowercase substrings\n    pattern = r'\\b[a-z]\\w*\\b'\n    # Use the re.sub() method to replace all matches of the pattern with an empty string\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'[^a-zA-Z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # Regular expression to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Find all occurrences of lowercase substrings\n    matches = re.findall(pattern, string)\n    # Remove all lowercase substrings from the string\n    result = re.sub(pattern, '', string)\n    # Return the modified string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    str2 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the search() method of the pattern object to search for matches\n    matches = pattern.findall(str1)\n    # Remove the lowercase substrings from the string\n    for match in matches:\n        str1 = re.sub(r'\\b'+match+r'\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regex to find all lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    result = re.findall(pattern, str1)\n    # Remove all lowercase substrings from the string\n    for substring in result:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into a list of words\n    str1 = str1.lower()\n    words = str1.split()\n\n    # Initialize an empty list to store the non-lowercase words\n    non_lowercase = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is all uppercase\n        if word.isupper():\n            # If it is, add it to the non-lowercase list\n            non_lowercase.append(word)\n        else:\n            # If it isn't, check if it contains a lowercase letter\n            if any(char.islower() for char in word):\n                # If it does, add it to the non-lowercase list\n                non_lowercase.append(word)\n\n    # Join the non-lowercase words back into a string and return it\n    return''.join(non_lowercase)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings.\n    '''\n    # Convert the string to lowercase to match the pattern\n    string = string.lower()\n\n    # Define the regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]'\n\n    # Use the re.sub() function to remove all lowercase substrings\n    string = re.sub(pattern, '', string)\n\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the first digit of n.\n    \"\"\"\n    # first digit of a number is always the rightmost digit\n    return str(n)[-1]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as an input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # initialize a variable to store the first digit of the number\n    first_digit = 0\n    \n    # loop through each digit of the number and add it to the first_digit variable\n    while n > 0:\n        first_digit += n % 10\n        n //= 10\n    \n    # return the first_digit variable\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = ord(num_str[0]) - ord('0')\n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    # Find the index of the first digit in the string\n    index = num.index('1')\n    # Return the first digit of the number\n    return int(num[index])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert the integer to a string\n    str_n = str(n)\n    \n    # Extract the first digit of the string\n    first_digit = str_n[0]\n    \n    # Return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a Python function to find the first digit of a given number.\n    '''\n    #initialize the variable to hold the first digit\n    first_digit = 0\n    #check if the number is greater than 0\n    if n > 0:\n        #initialize a counter variable to count the number of digits in the number\n        counter = 0\n        #initialize a variable to hold the remainder of the division of the number by 10\n        remainder = 0\n        #loop through each digit in the number\n        while n > 0:\n            #divide the number by 10 and keep the remainder\n            remainder = n % 10\n            #add the remainder to the counter variable\n            counter += 1\n            #divide the number by 10 again to remove the remainder\n            n = n // 10\n        #check if the counter variable is equal to 1, indicating that the number has only one digit\n        if counter == 1:\n            #assign the first digit to the variable\n            first_digit = remainder\n    #return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first = str(n)[0]\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of that number.\n    \"\"\"\n    # check if the input is an integer\n    if not isinstance(n, int):\n        return \"Please enter an integer.\"\n    \n    # check if the input is greater than 0\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    # find the first digit of the input number\n    first_digit = n % 10\n    \n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    str_num = str(n)\n    # Return the first character of the string\n    return str_num[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    '''\n    # initialize a new empty list\n    new_lst = []\n    # loop through each number in the input list\n    for num in lst:\n        # if the number is odd, add it to the new list\n        if num % 2!= 0:\n            new_lst.append(num)\n    # return the new list containing only odd numbers from the input list\n    return new_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list containing only the odd numbers from a given list of integers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list with only the odd integers.\n    '''\n    new_list = []\n    for num in lst:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # create an empty list to store the odd numbers\n    odd_list = []\n\n    # iterate through the list and append odd numbers to the new list\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    # return the new list of odd numbers\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers as input and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # sum of cubes of first n natural numbers\n    sum_cubes = (n * (n+1) * (2*n+1)) // 6\n    # sum of first n natural numbers\n    sum_first_n = n * (n+1) // 2\n    \n    # return the difference between the two sums\n    return abs(sum_cubes - sum_first_n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # function to calculate the sum of cubes\n    def sum_of_cubes(n):\n        return sum(num**3 for num in range(1, n+1))\n    \n    # function to calculate the sum of first n natural numbers\n    def sum_of_numbers(n):\n        return sum(range(1, n+1))\n    \n    # calculate the sum of cubes and the sum of first n natural numbers\n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_numbers_n = sum_of_numbers(n)\n    \n    # calculate the difference\n    difference = sum_of_cubes_n - sum_of_numbers_n\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(n + 1)])\n\n    # calculate the sum of first n natural numbers\n    sum_of_numbers = sum(range(n + 1))\n\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    #initialize variables\n    first_n_sum = 0\n    sum_cubes = 0\n    i = 1\n\n    #calculate the first n natural numbers sum\n    while i <= n:\n        first_n_sum += i\n        i += 1\n\n    #calculate the sum of cubes of the first n natural numbers\n    i = 1\n    while i <= n:\n        sum_cubes += i**3\n        i += 1\n\n    #return the difference between the sum of cubes and the first n natural numbers sum\n    return abs(sum_cubes - first_n_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # Compute the sum of the first n natural numbers\n    sum_sum = sum([i for i in range(1, n+1)])\n    \n    # Return the difference between the two sums\n    return cube_sum - sum_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to calculate the sum of cubes of a list of numbers\n    def sum_of_cubes(numbers):\n        return sum(num ** 3 for num in numbers)\n\n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes_n = sum_of_cubes(range(1, n+1))\n\n    # Find the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n\n    # Calculate the difference\n    diff = sum_of_cubes_n - sum_n\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    diff = sum_cubes - sum_natural\n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the array and check for pairs whose xor is odd\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of integers and an integer N as input. \n    It counts the number of pairs whose xor value is odd.\n\n    :param A: list of integers\n    :param N: an integer\n\n    :return: an integer representing the number of odd pairs in the array.\n    \"\"\"\n\n    # Initialize a variable to keep track of the count of odd pairs\n    odd_count = 0\n\n    # Iterate over the array using a for loop\n    for i in range(N):\n        # Calculate the xor of the current element and the remaining elements\n        xor = A[i] ^ (A[i+1:N+1] if i+1 < N else 0)\n        # If the xor is odd, increment the odd_count variable\n        if xor % 2 == 1:\n            odd_count += 1\n\n    # Return the count of odd pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n\n    Args:\n        A (list): list of integers, which are the elements of the list.\n        N (int): number of integers in the list.\n\n    Returns:\n        int: the number of pairs whose xor value is odd.\n\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize count variable\n    count = 0\n\n    # Loop through all pairs of elements\n    for i in range(N):\n        for j in range(i+1,N):\n            # Calculate xor of the elements\n            xor = A[i] ^ A[j]\n\n            # Check if xor is odd\n            if xor % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lower_string = string.lower()\n    # Create a new string with all characters in the original string toggled to their opposite case\n    new_string = ''\n    for char in lower_string:\n        if char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char.upper()\n        new_string += new_char\n    # Return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to lowercase\n    lower_string = string.lower()\n    # Create an empty string to store the toggled characters\n    toggled_string = \"\"\n    # Loop through each character in the string\n    for char in lower_string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        elif char.islower():\n            toggled_string += char.upper()\n        # If the character is not uppercase or lowercase, append it to the new string\n        else:\n            toggled_string += char\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    \n    # convert both numbers to strings and split them into lists of digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_list = list(num1_str)\n    num2_list = list(num2_str)\n    \n    # loop through each digit in the lists and calculate the difference between them\n    for i in range(len(num1_list)):\n        diff = int(num1_list[i]) - int(num2_list[i])\n        sum_diff += diff\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Initialize the sum of the per-digit differences\n    diff_sum = 0\n    # Loop through each digit in both numbers\n    for i in range(len(n1_str)):\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        # Add the per-digit difference to the sum\n        diff_sum += diff\n    # Return the sum of the per-digit differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the input numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # initialize the sum to 0\n    total_sum = 0\n\n    # loop through each digit in the strings\n    for i in range(len(num1_str)):\n        # calculate the per-digit difference between the corresponding digits\n        digit_diff = abs(ord(num1_str[i]) - ord(num2_str[i]))\n\n        # add the per-digit difference to the total sum\n        total_sum += digit_diff\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    for i in range(10):\n        digit1 = n1 // 10**i\n        digit2 = n2 // 10**i\n        total += abs(digit1 - digit2)\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    digit_sum = 0\n    while n1 > 0 or n2 > 0:\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # calculate the difference between the numbers\n    diff = abs(n1 - n2)\n    # initialize a variable to store the sum of the differences\n    total_diff = 0\n    # iterate through each digit of the difference and add the difference to the sum\n    while diff > 0:\n        digit = diff % 10\n        total_diff += digit\n        diff //= 10\n    # return the total sum of the differences\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = 0\n    for i in range(len(digit_list1)):\n        diff = abs(digit_list1[i] - digit_list2[i])\n        sum_diff += diff * (i + 1)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits_1 = [int(digit) for digit in str(n1)]\n    digits_2 = [int(digit) for digit in str(n2)]\n    # Calculate the per-digit difference between the two integers\n    diff = [abs(d1 - d2) for d1, d2 in zip(digits_1, digits_2)]\n    # Sum up the per-digit differences\n    sum_diff = sum(diff)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between the two integers.\n    \"\"\"\n    difference = 0\n    for i in range(len(str(n1))):\n        difference += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return difference"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    This function takes a list of integers and the size of the sublist as input and returns the sum of the largest contiguous sublist.\n    '''\n    max_sum = arr[0]\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(len(a)):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i >= size-1:\n            max_ending_here -= a[i-size+1]\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n        \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n            current_start = i\n\n    return max_sum, current_start, current_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if i >= size - size:\n            current_sum -= a[i - size + 1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        # If the current element is negative, reset the current_sum to 0\n        if a[i] < 0:\n            current_sum = 0\n        \n        # Add the current element to the current_sum\n        current_sum += a[i]\n        \n        # If the current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return max_sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples into a single tuple\n    union_tup = test_tup1 + test_tup2\n    \n    # Convert the tuple into a set to remove duplicates\n    union_set = set(union_tup)\n    \n    # Convert the set back into a tuple and sort it in ascending order\n    sorted_union_tup = sorted(union_set)\n    \n    # Convert the tuple back into a string and print it\n    print(\"The union of the elements of the tuples is:\", sorted_union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two input tuples\n    union_set = test_tup1 | test_tup2\n\n    # Convert the union set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # Output the union list as a string\n    print(\"The union of the two tuples is:\", end=\" \")\n    print(\" \".join(str(x) for x in union_list))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Initialize an empty list to store the union\n    union = []\n\n    # Add all the elements of the first tuple to the union\n    union += test_tup1\n\n    # Add all the elements of the second tuple to the union\n    union += test_tup2\n\n    # Remove duplicates from the union\n    unique_union = list(dict.fromkeys(union))\n\n    # Sort the union in ascending order\n    unique_union.sort()\n\n    # Output the union in sorted order\n    print(unique_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Use set() to remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list in ascending order\n    sorted_list = sorted(unique_list)\n    \n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize an empty list to store the union of the elements of the two tuples\n    union_list = []\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # If the element is not already in the union list, append it to the list\n        if element not in union_list:\n            union_list.append(element)\n    # Loop through each element in the second tuple\n    for element in test_tup2:\n        # If the element is not already in the union list, append it to the list\n        if element not in union_list:\n            union_list.append(element)\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # Remove duplicates and sort the resulting tuple\n    unique_tup = sorted(set(combined_tup))\n\n    # Output the sorted unique tuple\n    print(\"Union of elements of tuples:\", unique_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples into sets to remove duplicates\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Find the union of the sets\n    union_set = unique_tup1.union(unique_tup2)\n\n    # Convert the set back into a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Initialize a variable to store the length of the current sublist\n        length = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n\n            # Increment the length of the current sublist\n            length += 1\n\n            # Update the maximum length if the current sublist is longer than the maximum\n            if length > max_length:\n                max_length = length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = 1\n        else:\n            if lst[i] > lst[i-1]:\n                max_length += 1\n            else:\n                max_length = 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    else:\n        return max(len(sublist) for sublist in lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for sublist in lst:  \n        if len(sublist) > max_length:  \n            max_length = len(sublist)  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list and finds the length of the longest sublists.\n    \"\"\"\n    longest = 0\n    current_length = 0\n    for i in lst:\n        if len(i) > current_length:\n            longest = current_length\n            current_length = len(i)\n        else:\n            current_length = max(current_length, len(i))\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 1\n        else:\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[j]) > max_length:\n                max_length = len(lst[j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_len = 1\n    curr_len = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        tempLength = 0\n        for j in range(len(sublist)):\n            if sublist[j] == sublist[j+1]:\n                tempLength += 1\n            else:\n                tempLength = 0\n            if tempLength > maxLength:\n                maxLength = tempLength\n    return maxLength\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_len = 1\n        elif lst[i]!= lst[i-1]:\n            max_len = max(max_len, i)\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?:(?<!\\\\)\"|$)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expressions to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?:(?!\\\\)\"|(?<=\\\\)\"(?!\\\\))'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern to match quoted values\n    matches = re.findall(pattern, text) # find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r\"(?:\\\"([^\\\"]+)\\\"|\\[[^\\]]+\\])\"\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"' # matches \" and any characters until next \"\n    matches = re.findall(pattern, text) # finds all occurrences of pattern in text\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Using a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Counting the number of pairs where both elements are unequal\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n\n    Args:\n        word (str): The string to be split into characters.\n\n    Returns:\n        list: A list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into digits\n    digits = [int(digit) for digit in str(n)]\n    # Use the built-in sum() function to add up the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum = 0\n\n    # Convert the integer to a string and iterate over its digits\n    for digit in str(n):\n        # Convert each digit to an integer and add it to the sum\n        sum += int(digit)\n\n    # Return the sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit in the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        \n        # Remove the last digit from the integer\n        n = n // 10\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and then to a list of digits\n    digits = list(str(n))\n\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Iterate over the digits and add them to the total\n    for digit in digits:\n        total += int(digit)\n\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string and split it into a list of digits\n    digits = [int(d) for d in str(n)]\n    # calculate the sum of the digits\n    result = sum(digits)\n    # return the result\n    return result"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    # Check if the list has only one element\n    elif len(list1) == 1:\n        return True\n    # Check if the list is sorted\n    elif list1[0] <= list1[1]:\n        for i in range(1, len(list1)-1):\n            if list1[i] <= list1[i-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is already sorted\n    if len(list1) == 1:\n        return True\n    \n    # check if the first element is smaller than the last element\n    if list1[0] > list1[-1]:\n        return False\n    \n    # check if the remaining elements are sorted recursively\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if it is sorted in ascending order or False otherwise.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    '''\n    A function to check if a specified list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist of strings in the given list\n    for sublist in list1:\n        # sort the sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(list1):\n        list1[i] = sorted(sublist)\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a list of numbers.\n    \"\"\"\n    # create an empty dictionary to store unique numbers\n    unique_nums = {}\n    # loop through each number in the list\n    for num in nums:\n        # if the number is not already in the dictionary, add it\n        if num not in unique_nums:\n            unique_nums[num] = True\n    # create a new list of unique numbers\n    unique_nums_list = []\n    # loop through the dictionary and add the unique numbers to the new list\n    for key in unique_nums.keys():\n        unique_nums_list.append(key)\n    return unique_nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a dictionary to store the unique numbers\n    unique_nums = {}\n\n    # Iterate over the given lists\n    for lst in nums:\n        # Iterate over the elements in the list\n        for num in lst:\n            # If the number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n\n    # Convert the dictionary keys to a list and return it\n    return list(unique_nums.keys())"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # create an empty dictionary to store unique numbers and their indices\n    unique_nums = {}\n\n    # iterate through the input lists and append each unique number to the dictionary\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums[nums[i][j]] = i\n\n    # create a new list to store the unique numbers from the input lists\n    unique_nums_list = []\n\n    # iterate through the unique numbers dictionary and append the numbers to the new list\n    for num in unique_nums:\n        unique_nums_list.append(num)\n\n    # return the new list with unique numbers\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    # loop through each list and add each number to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    # convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    '''\n\n    # Create a set from the input list\n    unique_nums = set(list_data)\n\n    # Find the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_nums = list(set(list_data))  # Create a set of unique numbers from the input list\n    product = 1  # Initialize the product to 1\n    \n    # Calculate the product of the unique numbers\n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set to store unique numbers\n    unique_set = set()\n\n    # Iterate over the input list\n    for num in list_data:\n        # If the number is not in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * h\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    # S = 2 * pi * r * h\n    s = 2 * math.pi * r * h\n\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r  # Formula for cylinder surface area\n    volume = (3.14 * r ** 2) + (3.14 * r ** 2)  # Formula for cylinder volume\n    surface_area = (area * h) / 3.14159  # Formula for area of cone that surrounds the cylinder\n    return surface_area, volume"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the volume of the cylinder\n    V = math.pi * r ** 2 * h\n    \n    # Calculate the surface area of the cylinder\n    A = 2 * math.pi * r * h\n    \n    return A, V"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * pi * r * h\n\npi = 3.14159265359\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\n\nprint(\"The surface area of the cylinder is:\", surfacearea_cylinder(r, h))"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*(r**2+h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * r + 2 * math.pi * h * r"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2 + h**2)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B and returns True if B is a sublist of A, False otherwise.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    if len(B) == 0:\n        return True\n\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(B in A[i:] for i in range(len(A)))"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        i = 0\n        j = 0\n        while i < len(A):\n            if A[i] == B[j]:\n                j += 1\n            i += 1\n        return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function checks whether a list A is a sublist of list B or not.\n    Returns True if A is a sublist of B, False otherwise.\n    '''\n    if len(A) > len(B): \n        return False\n    elif len(A) == len(B): \n        for i in range(len(A)): \n            if A[i]!= B[i]: \n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n!= 0: \n        n = n//10 \n    return n%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 0: \n        fact *= n \n        n //= 10\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # check if n is a number\n    if type(n)!= int:\n        raise TypeError(\"Input should be an integer\")\n\n    # calculate factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # extract the last digit of factorial\n    last_digit = fact % 10\n\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of its factorial.\n    '''\n    # get the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # get the last digit of the factorial\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    while n > 0:\n        digit = n % 10\n        factorial *= digit\n        n //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize factorial to 1\n    factorial = 1\n    \n    # Loop through each digit of n\n    for digit in str(n):\n        # Multiply factorial by 10\n        factorial *= 10\n        \n        # Add the last digit of n to the factorial\n        factorial += int(digit)\n    \n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # loop through each digit in the number\n    for digit in str(n):\n        # calculate the factorial of the digit and append it to a list\n        factorials.append(digit * (factorial(int(digit)) ** int(digit)))\n    # find the last digit in the factorial list and return it\n    return factorials[-1]"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n > 0:\n        n, r = divmod(n, 10)\n        return r\n    return None"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    if len(list1) > len(list2):\n        for i in range(len(list2), len(list1)+len(list2), len(list2)):\n            result.append(list2[i-len(list2)])\n        for i in range(len(list3), len(list1)+len(list2)+len(list3), len(list3)):\n            result.append(list3[i-len(list3)])\n    elif len(list1) < len(list2):\n        for i in range(len(list1), len(list2)+len(list1), len(list1)):\n            result.append(list1[i-len(list1)])\n        for i in range(len(list3), len(list2)+len(list1)+len(list3), len(list3)):\n            result.append(list3[i-len(list3)])\n    else:\n        for i in range(len(list1), len(list2)+len(list3), len(list3)):\n            result.append(list3[i-len(list3)])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    flat_list = []\n    while i < len(list1) + len(list2) + len(list3):\n        if i < len(list1):\n            flat_list.append(list1[i])\n            i += 1\n        elif i < len(list1) + len(list2):\n            flat_list.append(list2[i - len(list1)])\n            i += 1\n        else:\n            flat_list.append(list3[i - len(list1) - len(list2)])\n            i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    list1 (list): First list of equal length to list2 and list3.\n    list2 (list): Second list of equal length to list1 and list3.\n    list3 (list): Third list of equal length to list1 and list2.\n\n    Returns:\n    list: Flat list of interleaved elements from the given lists.\n\n    Example:\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8])\n    [1, 4, 7, 2, 5, 8, 3]\n\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # iterate over each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # return the final interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the 3 lists into a single list\n    combined_list = list1 + list2 + list3\n    # Flatten the combined list into a single list\n    flat_list = [item for sublist in combined_list for item in sublist]\n    # Return the flat list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        \n        i += 1\n        j += 1\n        k += 1\n        \n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        \n        i += 1\n        j += 1\n        \n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        \n        i += 1\n        k += 1\n        \n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        \n        j += 1\n        k += 1\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # iterate through each element in the first tuple\n    for elem1 in test_tup1:\n\n        # check if the element is present in the second tuple\n        if elem1 not in test_tup2:\n            dissimilar.append(elem1)\n\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n    # Create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n    # Find the elements in set1 that are not in set2\n    dissimilar_elements = set1.symmetric_difference(set2)\n    # Return a list of the dissimilar elements\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create empty list to store dissimilar elements\n    dissimilar = []\n    \n    # iterate through the first tuple and compare it with the second tuple\n    for elem in test_tup1:\n        # if element is not in the second tuple, add it to the list\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n    \n    # iterate through the second tuple and compare it with the first tuple\n    for elem in test_tup2:\n        # if element is not in the first tuple, add it to the list\n        if elem not in test_tup1:\n            dissimilar.append(elem)\n    \n    # return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of the elements in the first tuple that are not present in the second tuple.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x): \n        '''\n        Function to check if the element is even or not.\n        '''\n        if isinstance(x, int) and x % 2 == 0: \n            return True\n        else: \n            return False\n    \n    result = []\n    for sub_tuple in test_tuple:\n        even_list = [even_fnc(x) for x in sub_tuple]\n        result.append(tuple(filter(is_even, even_list)))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_tuple.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def nested_tuple(nested_tuple):\n        '''\n        Write a function to check if all elements in the nested tuple are even or odd.\n        '''\n        even_list = []\n        for i in nested_tuple:\n            if even_fnc(i):\n                even_list.append(i)\n            else:\n                continue\n        return even_list\n    \n    # Check if all elements in the test tuple are even or odd\n    if isinstance(test_tuple, tuple):\n        test_list = []\n        for i in test_tuple:\n            if isinstance(i, tuple):\n                if nested_tuple(i):\n                    test_list.append(i)\n            else:\n                if even_fnc(i):\n                    test_list.append(i)\n    return test_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through each element in the nested tuple\n    for i in range(len(test_tuple)):\n        # If the element is a tuple, recursively call the function\n        if isinstance(test_tuple[i], tuple):\n            even_ele(test_tuple[i], even_fnc)\n        # If the element is not a tuple, call the specified even_fnc function\n        else:\n            even_fnc(test_tuple[i])"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            even_list.append(test_tuple[i])\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Check if the given test_tuple is a nested mixed tuple\n    if not isinstance(test_tuple, tuple):\n        raise ValueError(\"The given input is not a nested mixed tuple.\")\n\n    # Check if the first element of the nested mixed tuple is a tuple\n    if not isinstance(test_tuple[0], tuple):\n        raise ValueError(\"The first element of the nested mixed tuple is not a tuple.\")\n\n    # Loop through the tuple elements\n    new_tuple = []\n    for element in test_tuple[0]:\n\n        # Check if the element is even using the given even_fnc\n        if even_fnc(element):\n\n            # If the element is even, append it to the new_tuple\n            new_tuple.append(element)\n\n    # Return the new tuple with uneven elements removed\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            for sub_item in item:\n                if isinstance(sub_item, even_fnc):\n                    even_list.append(sub_item)\n        else:\n            if isinstance(item, even_fnc):\n                even_list.append(item)\n\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x): \n        if isinstance(x, int): \n            return x % 2 == 0 \n        elif isinstance(x, tuple): \n            return all(is_even(y) for y in x) \n        else: \n            return False\n    \n    return tuple(y for x in test_tuple for y in x if is_even(y) and even_fnc(x))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x): \n        if isinstance(x, tuple): \n            return all(map(is_even, x)) and all(map(lambda y: even_fnc(y), x))\n        return even_fnc(x)\n\n    return tuple(filter(is_even, test_tuple))"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b + 2*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    return 2 * (b * s + s * b + b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) + (2 * b * s) + (b ** 2 * s ** 2) - (b ** 2 * (s ** 2 - 2 * s))"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = b * s * 2 # calculate the area of the pyramid\n    return area # return the surface area of the pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square pyramid\n    area = b*s + b*s + b*s + b*s\n    # Return the calculated surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + s*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s + b*s + s*(4*s-b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(b+s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    # Calculate the area of the base and height\n    base_area = b * b\n    height_area = s * b\n\n    # Calculate the area of the triangle using Heron's formula\n    area_triangle = 0.5 * b * s * (s - b)\n\n    # Combine the two areas to get the total surface area\n    total_area = base_area + height_area + area_triangle\n\n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"The dictionary is empty.\"\n    else:\n        return \"The dictionary is not empty.\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n\n    Parameters:\n    dict1 (dict): The dictionary to check.\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    if not dict1:  # check if dictionary is empty\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number using recursion.\n    The nth catalan number is the number of ways of selecting k objects from a set of n objects, where each object can be chosen once or more.\n    The nth catalan number is the sum of the binomial coefficients for k=0,1,2,...,n.\n    '''\n\n    # Base case\n    if num == 0:\n        return 1\n\n    # Recursive case\n    else:\n        return catalan_number(num-1) + num * catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, num + 1):\n            result += (i * catalan_number(num - i)) / (i + 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return n * catalan_number(n - 1) // (2 * n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    This function returns nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    >>> catalan_number(5)\n    155\n    >>> catalan_number(10)\n    90350\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative Catalan numbers are not defined.\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        catalan = [0] * (n + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, n + 1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - 1 - j]\n        return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return catalan_number(n-1) + 4 * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number recursively.\n\n    Args:\n        n (int): The index of the Catalan number to calculate.\n\n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Args:\n        num (int): The value of n.\n\n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n\n    # Check if n is an integer.\n    if not isinstance(num, int):\n        raise TypeError(\"n must be an integer.\")\n\n    # Check if n is a positive integer.\n    if num <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize the first two rows of the matrix.\n    n = num\n    matrix = [[1, 1], [1, 0]]\n\n    # Calculate the rest of the matrix row by row.\n    for i in range(2, n + 1):\n        new_row = [0] * (2 * i - 1)\n        for j in range(2 * i - 1):\n            if j == 0 or j == i - 1:\n                new_row[j] = matrix[i - 1][j - 1] + matrix[i - 1][j]\n            else:\n                new_row[j] = matrix[i - 1][j - 1] + matrix[i - 1][j] + matrix[i - 1][j + 1]\n        matrix.append(new_row)\n\n    # Return the nth element of the matrix.\n    return matrix[n][0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n\n    Args:\n        text (str): A string to search for adverbs in.\n\n    Returns:\n        list: A list of tuples containing the adverb and its position in the string.\n    \"\"\"\n    pattern = re.compile(r'(?<![\\w])ly(?=[\\w])')\n    matches = pattern.findall(text)\n\n    # Convert list of matches to list of tuples containing adverb and position\n    adverbs = [(match, text.find(match)) for match in matches]\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all occurrences of words ending with \"ly\"\n    ly_words = re.findall(r'\\b[a-z]+ly\\b', text)\n\n    # Iterate through each word and check if it ends with \"ly\"\n    for i, word in enumerate(ly_words):\n        # Check if the previous word in the sentence is a preposition or verb\n        if i > 0 and (ly_words[i-1] in ('in', 'on', 'with') or ly_words[i-1][-1] in ('a', 'e', 'i', 'o', 'u')):\n            # If the previous word is preposition or verb ending with \"ly\", return the current word and its position\n            return word, i\n\n    # If no adverb ending with \"ly\" is found, return None\n    return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    # Use re.findall() function to find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Create an empty list to store the positions of the adverbs found\n    adverb_positions = []\n    # Loop through all matches and append their positions to the list\n    for match in matches:\n        # Use re.search() function to find the first occurrence of the pattern in the match\n        position = re.search(pattern, match).start()\n        adverb_positions.append(position)\n    # Return the list of adverb positions found\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[lL][yY]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w*[ly]\\b', re.IGNORECASE)\n    matches = pattern.finditer(text)\n\n    # Iterate through the matches and return the first adverb and its positions\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all matches of the pattern \".*ly$\" (matches any word with a \"ly\" at the end)\n    matches = re.findall(r'\\b.*ly\\b', text)\n    \n    # Iterate over the matches and extract the position and the adverb\n    adverbs = []\n    for match in matches:\n        # Split the match at the \"ly\" and extract the position\n        position = text.index(match)\n        # Extract the adverb from the match\n        adverb = match[:-2]\n        # Add the adverb to the list of adverbs\n        adverbs.append((position, adverb))\n    \n    # Sort the adverbs by their position in the text\n    adverbs.sort(key=lambda x: x[0])\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        print(f\"Adverb found: {text[start:end]}\\nPositions: {start}, {end}\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap of size n and initialize the item count to 0\n    min_heap = [(-x[1], x) for x in items[:n]]\n    heapq.heapify(min_heap)\n\n    # Iterate through the remaining items in the dataset and update the heap\n    for item in items[n:]:\n        cost, item = item\n        if cost < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-cost, item))\n\n    # Return the n most expensive items from the heap\n    return [item[1] for cost, item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    heap = []\n\n    # Iterate over the items in the dataset and add the items to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap has more than n items, remove the least expensive item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the size of the heap becomes greater than n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items from the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the number of items to return\n    and returns a list of the n most expensive items in the list.\n    '''\n    # Create a min-heap of the items and return its top n items\n    return heapq.nlargest(n, items)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items in descending order of price\n    items.sort(key=lambda x: x[1], reverse=True)\n    # find the n most expensive items and return them\n    return [item[0] for item in items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n    # Iterate over the items in the dataset\n    for item in items:\n        # If the heap is empty or if the item is cheaper than the smallest item in the heap,\n        # add the item to the heap\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        # If the heap is full and we have reached n items, remove the smallest item from the heap\n        elif len(min_heap) == n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_half = l[:n]\n    second_half = l[n:]\n    return second_half + first_half"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return 'List length should be greater than or equal to the nth element'\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        raise ValueError(\"n must be between 0 and the length of the list\")\n    first_part = l[:n]\n    second_part = l[n:]\n    l = first_part + second_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return None\n    else:\n        # Split the list at nth element\n        split_list = l[:n] + l[n:]\n        return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if len(l) >= n:\n        left = l[:n]\n        right = l[n:]\n        return left + [right]\n    else:\n        return \"List should be longer than the split point.\""
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and an integer n as input.\n    The function splits the list at the nth element and adds the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        # Split the list at the nth element\n        split_index = n\n        sub_list = l[:split_index] + l[split_index+1:]\n        # Add the first part to the end of the sub_list\n        sub_list.extend(l[:split_index])\n        return sub_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    \n    # add part1 to the end of part2\n    result = part2 + part1\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list and the index at which to split it.\n    It splits the list at the nth element and adds the first part to the end.\n    \"\"\"\n    # Check if the index is valid\n    if n > len(l) or n < 0:\n        return \"Invalid index\"\n    \n    # Split the list at the index\n    first_part = l[:n]\n    last_part = l[n:]\n    \n    # Concatenate the first part and last part\n    new_list = first_part + last_part\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the input is valid\n    if n >= len(l):\n        return None\n    # Split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    # Concatenate the two parts and return the result\n    return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Combine the two parts and return the result\n    return first_part + second_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to a tuple\n    tupx = tuple(listx)\n    # return the converted tuple\n    return tupx"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Convert the list to a tuple\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to keep track of largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # iterate through the list of numbers and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    # return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    # find the smallest value in the list\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # find the largest value in the list\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 0:\n        return max(nums) - min(nums)\n    else:\n        print(\"The list is empty or None\")"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List must have at least two elements.\"\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        min_val = min(nums)\n        max_val = max(nums)\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # initialize largest and smallest variables to the first element of the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # loop through the list to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Initialize the largest and smallest variables with the first value in the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**2 == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers a and b, and returns a list of the perfect squares between a and b.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**2 == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i**2\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Finding all the perfect squares between a and b\n    perfect_squares = set()\n    for i in range(a, b+1):\n        if i*i == a:\n            perfect_squares.add(i)\n        elif i*i == b:\n            perfect_squares.add(i)\n        else:\n            continue\n    # Returning the perfect squares found\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Iterate from a to b\n    for i in range(a, b+1):\n        # Check if the square root of i is an integer\n        if int(i**0.5) ** 2 == i:\n            # If it is, return i\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds the perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a counter for perfect squares\n    count = 0\n    \n    # Check for perfect squares between a and b\n    while a <= b:\n        a_squared = a * a\n        b_squared = b * b\n        \n        # Check if the square is within the given range\n        if a_squared <= b_squared <= b_squared + a:\n            count += 1\n        \n        # Increment a and b by 1\n        a += 1\n        b -= 1\n        \n    # Return the count of perfect squares found\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a list to store perfect squares\n    squares = []\n\n    # Loop through all possible values of a and b\n    for i in range(a, b+1):\n        # Check if the square of i is a perfect square\n        if i*i == a:\n            # If it is, add it to the list of perfect squares\n            squares.append(i)\n        elif i*i == b:\n            # If it is, add it to the list of perfect squares\n            squares.append(i)\n        elif i*i > a and i*i < b:\n            # If it's between the two given numbers, check if it's a perfect square\n            if (i+1)*(i+1) == a:\n                # If it is, add it to the list of perfect squares\n                squares.append(i+1)\n            elif (i-1)*(i-1) == b:\n                # If it is, add it to the list of perfect squares\n                squares.append(i-1)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle from degrees to radians\n    theta = cmath.pi * theta / 180.0\n    \n    # Calculate the x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the converted coordinates\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n\n    Args:\n    r: radius of the circle\n    theta: angle of the point on the circle\n\n    Returns:\n    x: x-coordinate of the point\n    y: y-coordinate of the point\n    \"\"\"\n    # Convert the angle to radians\n    theta = cmath.pi * theta / 180\n\n    # Calculate the x and y coordinates of the point\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    x (float): x-coordinate\n    y (float): y-coordinate\n    \"\"\"\n\n    # Convert angle to complex number\n    phi = cmath.radians(theta)\n\n    # Calculate x and y\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r,theta) to rectangular coordinates (x,y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate system.\n    theta (float): The angle (in radians) of the polar coordinate system.\n\n    Returns:\n    (float,float): The rectangular coordinates (x,y) of the polar coordinate system.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2+y**2)\n    phi = cmath.phase(x+y*1j)\n    rect_x = r*cmath.cos(phi)\n    rect_y = r*cmath.sin(phi)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(1j*theta)\n\nx = 1\ny = 0\nz = polar_rect(x,y)\nprint(\"Polar coordinates:\", x, y)\nprint(\"Rectangular coordinates:\", z.real, z.imag)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    else:\n        print(\"List must have at least two elements\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The list must have at least 2 elements to be swapped.\")\n    else:\n        # Swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The swapped list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check that the input is a list\n    if not isinstance(newList, list):\n        raise TypeError('Input must be a list')\n    \n    # Swap the first and last elements\n    first_last = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = first_last\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(newList, list):\n        raise TypeError(\"Input is not a list\")\n\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        raise ValueError(\"Input list has less than 2 elements\")\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is empty\n    if not newList:\n        return None\n    # Set the first and last elements\n    first = newList[0]\n    last = newList[-1]\n    # Create a new list with the swapped elements\n    newList = [last, first] + newList[:-1]\n    # Return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    else:\n        # swapping the first and last elements\n        first_last = newList[0], newList[-1]\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # printing the modified list\n        print(\"Modified list: \", newList)\n        # printing the swapped elements\n        print(\"Swapped elements: \", first_last)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the length of the list is greater than 1\n    if length > 1:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    if k > n // 2:\n        k = n - k\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1:\n        return n\n\n    if k == 2:\n        return n * (n - 1) // 2\n\n    return n * binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to zero\n    sum = 0\n\n    # Calculate the binomial coefficient using the formula:\n    # C(n,k) = n! / (k! * (n-k)!)\n    Cnk = factorial(n) // (factorial(k) * factorial(n-k))\n\n    # Calculate the product of consecutive binomial coefficients using the formula:\n    # P(k,n-k) = C(n,k) / (k + 1)\n    for i in range(k,n+1):\n        Pik = Cnk / (i + 1)\n        sum += Pik\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n*binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    Find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_ = 0\n    for i in range(k, n+1):\n        sum_ += (i * binomial_Coeff(n, i-1)) / (i - k + 1)\n    return sum_"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of the product of consecutive binomial co-efficients to 0\n    sum_product = 0\n    \n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1, k+1):\n        for j in range(i, k+1):\n            sum_product += (n-j+1) * (j) // i\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Initialize the coefficients\n    coeff = 1\n\n    # Iterate k times\n    for i in range(k):\n        # Update the coefficient\n        coeff = (n-i) // (k-i)\n\n        # Update the sum\n        sum += coeff\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n\n    coeff = 1\n    for i in range(k):\n        coeff *= (n - i) // i\n\n    return coeff\n\ndef sum_of_product(n):\n    if n == 0:\n        return 0\n\n    product = 1\n    for i in range(1, n+1):\n        product *= binomial_Coeff(n, i)\n\n    return product\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The sum of the product of consecutive binomial co-efficients is:\", sum_of_product(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_product = 0\n    for i in range(1,n+1): \n        for j in range(1,min(i,k)+1): \n            sum_product += i*j\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(1, k+1):\n        coeff *= n - i + 1\n        coeff //= i\n    return coeff\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): number of elements in the set\n    k (int): number of consecutive elements to be included in the sum\n\n    Returns:\n    float: sum of the product of consecutive binomial co-efficients\n    \"\"\"\n\n    if k > n:\n        return 0.0\n\n    # Initialize the sum\n    sum = 0.0\n\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1, k+1):\n        sum += binomial_coefficient(n,i)\n\n    return sum\n\ndef binomial_coefficient(n,k):\n    \"\"\"\n    Calculates the binomial coefficient using the formula:\n\n        n! / (k! * (n-k)!)\n\n    Parameters:\n    n (int): number of elements in the set\n    k (int): number of consecutive elements to be included in the sum\n\n    Returns:\n    float: binomial coefficient\n    \"\"\"\n\n    if k > n:\n        return 0.0\n\n    factorial = 1.0\n    for i in range(1, k+1):\n        factorial *= n-i+1.0\n        factorial /= i\n\n    return factorial"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0+)(\\d+\\.\\d+\\.){3}\\d+\\.\\d+$', r'\\1\\2', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as input and removes leading zeroes from it.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n\n    if ip_pattern.match(ip):\n        return re.sub(r'^\\d+\\.', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as a string and removes any leading zeroes from it.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return re.sub(r'(\\.0)+', '', ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = ''.join(ip.split('.')[1:])\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$\"\n    if re.match(pattern, ip):\n        return re.sub(r\"^0+(?=\\d)\", \"\", ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet\n    ip = re.sub(r'^\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?=\\d)', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should have at least two elements to calculate the difference of even and odd numbers.\"\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0 and odd % 2 == 0:\n            return even - odd\n        else:\n            return \"The first even and first odd numbers should be even.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count * odd_count) - (even_count + odd_count)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even_num is None:\n                even_num = list1[i]\n            elif odd_num is None:\n                odd_num = list1[i]\n        else:\n            if even_num is None:\n                even_num = list1[i]\n            elif odd_num is None:\n                odd_num = list1[i]\n    \n    if even_num is None:\n        even_num = 0\n    if odd_num is None:\n        odd_num = 0\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list of numbers as input and returns the difference of the first even and first odd number.\n    '''\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = [num for num in list1 if num % 2 == 0]\n    odd_num = [num for num in list1 if num % 2!= 0]\n    if even_num and odd_num:\n        return abs(even_num[0] - odd_num[0])\n    else:\n        return None\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = [num for num in list1 if num % 2 == 0][0]\n    odd_first = [num for num in list1 if num % 2 == 1][0]\n    return even_first - odd_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number in the list.\n    \"\"\"\n    # Find the index of the first even number in the list\n    even_index = next(i for i, x in enumerate(lst) if x % 2 == 0)\n    \n    # Find the index of the first odd number in the list\n    odd_index = next(i for i, x in enumerate(lst) if x % 2!= 0)\n    \n    # Calculate the difference between the even and odd numbers\n    return lst[even_index] - lst[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n            \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 == 1 and odd is None:\n            odd = num\n        elif num % 2 == 0 and even is not None:\n            break\n        elif num % 2 == 1 and odd is not None:\n            break\n    return even - odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    count=0\n    for i in range(n) : \n        if(str1[i]!=str2[i]) : \n            count+=1\n            if(str1[i]=='0' and str2[i]=='1') : \n                str1[i]='1'\n                str2[i]='0'\n            else : \n                str1[i]='0'\n                str2[i]='1'\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert them to the same binary number.\n    '''\n    # Initialize two lists to store the binary numbers\n    list1 = []\n    list2 = []\n\n    # Convert the binary strings to lists of integers\n    for i in range(len(str1)):\n        if str1[i] == '1':\n            list1.append(1)\n        else:\n            list1.append(0)\n\n    for i in range(len(str2)):\n        if str2[i] == '1':\n            list2.append(1)\n        else:\n            list2.append(0)\n\n    # Initialize two variables to keep track of the number of bits swapped and the number of swaps required\n    swap = 0\n    swap_required = 0\n\n    # Check for swaps in the first binary string and update the swap count and swap count required variables\n    while swap < len(list1) and swap < len(list2):\n        if list1[swap] == list2[swap]:\n            swap += 1\n        else:\n            list1[swap], list2[swap] = list2[swap], list1[swap]\n            swap_required += 1\n            swap += 1\n\n    # Check for swaps in the second binary string and update the swap count and swap count required variables\n    while swap < len(list1) and swap < len(list2):\n        if list1[swap] == list2[swap]:\n            swap += 1\n        else:\n            list1[swap], list2[swap] = list2[swap], list1[swap]\n            swap_required += 1\n            swap += 1\n\n    # Check for any remaining swaps in the first string\n    while swap < len(list1):\n        list1[swap], list2[swap] = list2[swap], list1[swap]\n        swap_required += 1\n        swap += 1\n\n    # Check for any remaining swaps in the second string\n    while swap < len(list2):\n        list1[swap], list2[swap] = list2[swap], list1[swap]\n        swap_required += 1\n        swap += 1\n\n    return swap_required"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Initialize variables\n    swap_count = 0\n    left_index = 0\n    right_index = len(str1) - 1\n\n    # Compare the two binary numbers\n    while left_index < right_index:\n        if str1[left_index]!= str2[right_index]:\n            # Swap the characters\n            str1[left_index], str1[right_index] = str1[right_index], str1[left_index]\n            str2[left_index], str2[right_index] = str2[right_index], str2[left_index]\n            swap_count += 1\n            left_index += 1\n            right_index -= 1\n        else:\n            # Move to the next character\n            left_index += 1\n            right_index -= 1\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # remove any leading zeroes in the binary strings\n    str1 = str1.lstrip('0')\n    str2 = str2.lstrip('0')\n    \n    # if the binary strings are of different lengths, return -1 (impossible to convert)\n    if len(str1)!= len(str2):\n        return -1\n\n    # if the binary strings are the same length, we can simply compare them and return the minimum number of swaps required\n    return min([i for i in range(len(str1)) if str1[i]!= str2[i]])"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to integers and get the number of bits\n    n1 = int(str1,2)\n    n2 = int(str2,2)\n    num_bits = max(len(bin(n1)[2:]),len(bin(n2)[2:]))\n    \n    # Initialize a boolean array to store the swaps required for each bit\n    swaps = [False]*num_bits\n    \n    # Loop through the bits of the integers and count the number of swaps required\n    for i in range(num_bits):\n        if str1[i]!= str2[i]:\n            if not swaps[i]:\n                swaps[i] = True\n            elif not swaps[num_bits - 1 - i]:\n                swaps[num_bits - 1 - i] = True\n    \n    # Count the number of swaps required for the rest of the bits\n    for i in range(num_bits,8):\n        if not swaps[i]:\n            swaps[i] = True\n    \n    # Find the minimum number of swaps required\n    min_swaps = 0\n    for i in range(num_bits):\n        if swaps[i]:\n            min_swaps += i\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Check if both strings have the same length\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same length\"\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Initialize a dictionary to store the number of set bits in each string\n    set_bits = {}\n\n    # Initialize variables to store the number of set bits in str1 and str2\n    count_str1 = 0\n    count_str2 = 0\n\n    # Iterate through each character in both strings\n    for char in str1 + str2:\n        # If the character is a 1, update the count of set bits in str1 and str2\n        if char == '1':\n            count_str1 += 1\n            count_str2 += 1\n        # If the character is a 0, update the count of set bits in str1\n        elif char == '0':\n            count_str1 += 1\n        # If the character is not a 0 or a 1, return an error message\n        else:\n            return \"Both strings must contain only 0s and 1s\"\n\n    # Check if both strings have equal number of set bits\n    if count_str1!= count_str2:\n        return \"Both strings must have the same number of set bits\"\n\n    # Calculate the minimum number of swaps required\n    min_swaps = min(min_swaps, abs(count_str1 - count_str2))\n\n    # Calculate the minimum number of swaps required for each digit in the strings\n    for i in range(len(str1)):\n        # If the count of set bits in the i-th digit of str1 is greater than the count of set bits in the i-th digit of str2, swap the digits\n        if set_bits[str1[i]] > set_bits[str2[i]]:\n            min_swaps = min(min_swaps, abs(set_bits[str1[i]] - set_bits[str2[i]]))\n        # If the count of set bits in the i-th digit of str1 is less than the count of set bits in the i-th digit of str2, swap the digits\n        elif set_bits[str1[i]] < set_bits[str2[i]]:\n            min_swaps = min(min_swaps, abs(set_bits[str1[i]] - set_bits[str2[i]]))\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings into lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Find the length of the binary strings\n    length = max(len(list1), len(list2))\n    \n    # Initialize variables for swaps and current position of swapped bits\n    swaps = 0\n    pos = 0\n    \n    # Iterate through the binary strings\n    while pos < length:\n        # Check if the current positions have equal bits\n        if list1[pos] == list2[pos]:\n            pos += 1\n        # If not, swap the bits\n        else:\n            list1[pos], list2[pos] = list2[pos], list1[pos]\n            swaps += 1\n    \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize a variable to store the count of swaps required\n    swap_count = 0\n    \n    # Iterate through the binary numbers from right to left\n    for i in range(len(str1) - 1, -1, -1):\n        # If the leftmost digit of str1 is not equal to the rightmost digit of str2, swap them\n        if str1[i]!= str2[i]:\n            swap_count += 1\n            # If the swaps required so far is greater than the difference between the binary numbers, return the count\n            if swap_count > abs(num1 - num2):\n                return swap_count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize variables\n    n = len(str1)\n    m = len(str2)\n    swap_count = 0\n    \n    # Convert str1 and str2 to binary numbers\n    bin1 = bin(int(str1, 2))[2:].zfill(n)\n    bin2 = bin(int(str2, 2))[2:].zfill(m)\n    \n    # Calculate number of swaps required\n    for i in range(n):\n        if bin1[i]!= bin2[i]:\n            swap_count += 1\n    \n    # Return minimum number of swaps required\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Find the length of the two binary numbers\n    n = len(str1)\n\n    # Initialize a boolean array to keep track of swaps\n    swaps = [False] * n\n\n    # Traverse through the two binary numbers\n    for i in range(n):\n        # If both digits are same, no swap required\n        if str1[i] == str2[i]:\n            continue\n\n        # If str1[i] is greater, swap with str2[i]\n        if str1[i] > str2[i]:\n            # Find the index of str2[i]\n            j = str2.find(str2[i])\n\n            # If j is not found, we need to swap with the first digit\n            if j == -1:\n                j = 0\n\n            # Swap str1[i] and str2[j]\n            str1[i], str2[j] = str2[j], str1[i]\n\n            # Mark the swap as required\n            swaps[i] = True\n            swaps[j] = True\n\n        # If str2[i] is greater, swap with str1[i]\n        else:\n            # Find the index of str1[i]\n            j = str1.find(str1[i])\n\n            # If j is not found, we need to swap with the first digit\n            if j == -1:\n                j = 0\n\n            # Swap str1[i] and str2[j]\n            str1[i], str2[j] = str2[j], str1[i]\n\n            # Mark the swap as required\n            swaps[i] = True\n            swaps[j] = True\n\n    # Count the number of swaps\n    count = 0\n    for i in range(n):\n        if swaps[i]:\n            count += 1\n\n    # Return the count of swaps\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns their size in bytes.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the variable to store the size of the tuple\n    size = 0\n    # Loop through each item in the tuple\n    for item in tuple_list:\n        # Add the size of each item to the total size\n        size += sys.getsizeof(item)\n    # Return the total size of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # calculate size of each tuple element\n    size = sys.getsizeof(tuple_list[0][0])\n    for tup in tuple_list:\n        for elem in tup:\n            size += sys.getsizeof(elem)\n    # multiply size by number of tuples\n    size *= len(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size_in_bytes += sys.getsizeof(tuple_list[i]) * len(tuple_list[i])\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments, arr1, arr2, and k, which are lists of integers.\n    It sorts the two arrays and returns the kth smallest element from the sorted array.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    return -1  # If k is greater than the length of the longer array."
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Get the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers i and j to the first element of the two arrays\n    i = 0\n    j = 0\n\n    # Initialize a variable count to 0\n    count = 0\n\n    # Traverse the two arrays and count the elements in each array\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            count += n1 - i\n            i += 1\n        else:\n            count += n2 - j\n            j += 1\n\n    # Add the remaining elements from the smaller array\n    count += n1 + n2 - i - j\n\n    # Return the kth element\n    if k <= count:\n        return arr1[i-1]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters:\n    arr1 - sorted array\n    arr2 - sorted array\n    k - the value of k we want to find the kth element of arr1 and arr2\n    \n    This function first initializes two pointers - i and j - to the beginning of the arrays.\n    It then compares the elements at the current pointers and increments the pointer with the smaller value.\n    If the element at the current pointer is equal to the kth element, the function returns the kth element.\n    If the kth element is greater than the element at the current pointer, then the function moves the j pointer to the right to find the kth element.\n    If the kth element is less than the element at the current pointer, then the function moves the i pointer to the right to find the kth element.\n    \n    If the kth element is not found, the function returns None.\n    \"\"\"\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n    \n    if k == 1:\n        return arr1[i] if i < len(arr1) else arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    n1, n2 = len(arr1), len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element of two sorted arrays.\n    \"\"\"\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    return (i + j) // 2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function finds the kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    # Compare the first elements of both arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the current elements are same, move both pointers one step further\n            i += 1\n            j += 1\n\n    # Check which array has the remaining elements\n    if i == len(arr1):\n        # kth element in arr2\n        return arr2[j]\n    else:\n        # kth element in arr1\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize the current index for the first array\n    i = 0\n\n    # Initialize the current index for the second array\n    j = 0\n\n    # Initialize the result variable\n    result = None\n\n    # Loop until we have found the kth element\n    while i < len(arr1) and j < len(arr2):\n        # Compare the elements at the current indices\n        if arr1[i] < arr2[j]:\n            # Move to the next element in the first array\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # Move to the next element in the second array\n            j += 1\n        else:\n            # If the elements are equal, compare the indices\n            if k == 1:\n                # If we have found the kth element, return it\n                return arr1[i]\n            elif k == len(arr1) - i:\n                # If we have found the kth element, return it\n                return arr1[i] - len(arr1[i:])\n            else:\n                # If the elements are equal, move to the next kth element\n                k -= 1\n                # Move to the next element in the first array\n                i += 1\n\n    # If we have not found the kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[k-1] if i == len(arr1) else arr2[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(number)\n    # Calculate the sum of the cubes of each digit of the number\n    sum_of_cubes = sum([int(digit)**3 for digit in num_str])\n    # Check if the sum of the cubes of each digit of the number is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Function to check if a given number is an Armstrong number or not.\n    \"\"\"\n    num = n\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        temp //= 10\n        num += digit**3\n    return num == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize a variable to store the sum of the digits of the number\n    digit_sum = 0\n\n    # Loop through each digit of the number and add its value to the digit_sum variable\n    while number > 0:\n        digit = number % 10\n        digit_sum += digit ** 3\n        number //= 10\n\n    # Check if the digit_sum is equal to the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # initializing the variable to 0\n    sum = 0\n\n    # converting the given number into a string\n    number_str = str(number)\n\n    # iterating over each digit in the string and multiplying the digit to itself\n    for digit in number_str:\n        sum += int(digit) ** len(number_str)\n\n    # checking whether the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n\n    # calculate the sum of the cube of each digit in the number\n    digit_sum = sum([int(digit)**3 for digit in str(number)])\n\n    # check whether the calculated sum is equal to the original number\n    return digit_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    total = 0\n    for digit in num_str:\n        total += int(digit)**len(num_str)\n\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    number = str(number)\n\n    # Initialize the sum to zero\n    sum_of_squares = 0\n\n    # Loop through each digit of the number\n    for digit in number:\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Calculate the square of the digit and add it to the sum\n        sum_of_squares += digit ** 3\n\n    # Check if the sum of squares equals the original number\n    return sum_of_squares == int(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Finding the length of the number\n    num_length = len(str(number))\n\n    # Initializing the sum variable\n    sum = 0\n\n    # Iterating through the number from 1 to the length of the number\n    for i in range(1, num_length + 1):\n        # Getting the power of each digit\n        power = int(number / (10 ** (num_length - i)))\n\n        # Adding the power to the sum\n        sum += power ** i\n\n    # Comparing the sum with the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n    \"\"\"\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return s == n\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    power = len(num_str)\n\n    armstrong_num = 0\n    temp_num = num\n\n    while temp_num > 0:\n        digit = temp_num % 10\n        armstrong_num += digit ** power\n        temp_num //= 10\n\n    if num == armstrong_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    print(\"Sum of first\", n, \"natural numbers is:\", sum)\n    print(\"Average of first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_numbers = 0\n    count = 0\n    \n    # iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add each number to the sum\n        sum_of_numbers += i\n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum_of_numbers / count\n    \n    # print the results\n    print(\"Sum of the first {} natural numbers is: {}\".format(n, sum_of_numbers))\n    print(\"Average of the first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    sum_count = 0\n    for i in range(1, n+1):\n        sum_num += i\n        sum_count += 1\n    average = sum_num / sum_count\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    print(\"Sum of first\", n, \"natural numbers:\", sum)\n    print(\"Average of first\", n, \"natural numbers:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character. If there is no repeated character, it returns None.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the string again and find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # if no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # initialize an empty dictionary to store the count of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n\n    # loop through each character in the string again and find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character if it exists. If not, it returns None.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # create an empty dictionary to store the count of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1 # increment the count of the character if it already exists in the dictionary\n        else:\n            char_count[char] = 1 # add the character to the dictionary with a count of 1 if it does not already exist\n    for char in char_count:\n        if char_count[char] > 1: # check if the count of the character is greater than 1\n            return char # return the first character with a count greater than 1\n    return None # if no character is found with a count greater than 1, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == 2:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # find the first repeated character\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(i)\n    result = []\n    for i in l:\n        if i <= math.sqrt(n):\n            result.append(i)\n    return result"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a number is a lucid number or not.\n    '''\n    if num < 1000:\n        return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 2\n\n    while i <= n:\n        is_lucid = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n        i += 1\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = [2]\n    for i in range(3, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n + 1):\n        if i % 2!= 0:\n            if sum(int(digit) for digit in str(i)) <= n:\n                ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n\n\ndef is_lucid(n):\n    '''\n    Write a helper function to check if a given integer is a lucid number.\n    '''\n    return all(n % i!= 0 for i in range(2, int(n**0.5)+1))"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    \n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Remove any leading or trailing whitespaces\n    s = s.strip()\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse the order of words\n    reversed_words = words[::-1]\n    # join the words back together with spaces\n    result =''.join(reversed_words)\n    # return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the order of the words\n    return \" \".join(reversed_words) # join the words with spaces and return the result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using whitespace as a delimiter\n    words = s.split()\n    # reverse the words in the list\n    words.reverse()\n    # join the reversed words together with whitespace as a delimiter\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n    \n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    \n    # Join the reversed words back into a string\n    reversed_s = \" \".join(reversed_words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_words.append(word[::-1])\n    \n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into a list of words\n    words = words[::-1]  # reverse the list in place using slicing\n    reversed_string =''.join(words)  # join the words back into a string with spaces\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number or not.\n    A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match)\n            yield match, start, end\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n\n    if matches:\n        # print(matches)\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None\n\ntext = \"This is a test string with literals like a and b\"\npattern = r'\\ba\\b'\nresult = find_literals(text, pattern)\nif result:\n    print(\"Matching substring:\", result[0])\n    print(\"Start index:\", result[1])\n    print(\"End index:\", result[2])"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = text[match.start():match.end()]\n        return literal, match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.search() function to search the text for the pattern\n    match = re.search(pattern, text)\n    \n    # If no match is found, return None\n    if match is None:\n        return None\n    \n    # Return the matching substring, start index, and end index\n    return match.group(), match.start(), match.end()"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n * (2 * n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Define the first and second bell numbers\n    b0, b1 = 1, 1\n\n    # Loop through the first n-1 bell numbers\n    for i in range(2, n): \n        # Calculate the next bell number by adding the previous two\n        b = b0 + b1\n        # Update the previous bell numbers\n        b0, b1 = b1, b\n\n    # Return the nth bell number\n    return b1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Recursive case\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        for i in range(2, n+1): \n            print(i, end=' ')\n        print()\n        bell = 0\n        for i in range(1, n+1): \n            bell += bell_Number(i-1)\n            print(bell, end=' ')"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * bell_Number(n // 2)) + (1 if n % 4 == 0 else 0)\n    else:\n        return bell_Number((n - 1) // 2) + (1 if n % 4 == 0 else 0)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth Bell number using the Fibonacci sequence.\n    \"\"\"\n    fib_seq = [0, 1]\n    while len(fib_seq) < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    This function calculates and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input and returns a new list with the same elements,\n    except for the kth element (which is removed from the list).\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Define a list to store the elements of the list\n    new_list = []\n    \n    # Iterate through the list from the second element\n    for i in range(1, len(list1)):\n        # Append the elements of the list to the new_list\n        new_list.append(list1[i])\n        \n        # Check if the length of the new_list is equal to L, if yes, break the loop\n        if len(new_list) == L:\n            break\n    \n    # Return the new_list with the k'th element removed\n    return new_list[1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the kth element from a list.\n\n    Args:\n        lst (list): List of elements.\n        k (int): Index of the element to be removed.\n\n    Returns:\n        list: List with the same elements, but the k'th element removed.\n    \"\"\"\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1) - L\n    new_list = []\n    for i in range(len(list1)-1):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1  # since index starts at 0, we need to subtract 1 from the value of L\n    list1.pop(k)  # remove the k'th element from the list\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the length of the matrix\n    m = len(test_list)\n    # find the length of the first row\n    n = len(test_list[0])\n    # check if the input N is valid\n    if N > n:\n        return None\n    # initialize the max value\n    max_val = float('-inf')\n    # iterate over the rows of the matrix\n    for i in range(m):\n        # find the N'th column of the i-th row\n        col = [row[N-1] for row in test_list[:i]]\n        # find the maximum value in the N'th column\n        if max(col) > max_val:\n            max_val = max(col)\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n            return max_val\n        else:\n            pass\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    if len(test_list) == 0:\n        return None\n\n    max_val = float('-inf')\n    for row in test_list:\n        if N <= len(row):\n            max_val = max(max_val, row[N-1])\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the length of the first row\n    length = len(test_list[0])\n    \n    # find then'th column index\n    n_index = N - 1\n    \n    # find the max of then'th column\n    max_value = max(row[n_index] for row in test_list)\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    \n    for i in range(len(test_list)):\n        if i == N:\n            max_val = max(test_list[i])\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the longest row in the matrix\n    max_len = max(len(row) for row in test_list)\n    # Initialize an empty list to store the max values\n    max_values = []\n    # Loop through each row in the matrix\n    for i in range(len(test_list)):\n        # Check if the current row has then'th column\n        if i == N-1:\n            # If so, add the maximum value of that column to the list\n            max_values.append(max(test_list[i]))\n        # If the current row does not have then'th column, pad it with zeros\n        else:\n            # Pad the row with zeros to the length of the longest row\n            padded_row = [0]*max_len\n            # Add the padded row to the list of max values\n            max_values.append(padded_row)\n    # Return the list of max values\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_num = max(test_list[i][N-1])\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                print(max_num, end=' ')\n            else:\n                print(test_list[i][j], end=' ')"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function calculates the cumulative sum of all the values in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Create an empty list to store the cumulative sum\n    cumulative_sum_list = []\n\n    # Iterate through the tuple list and append the cumulative sum of each element to the cumulative_sum_list\n    for element in test_list:\n        cumulative_sum_list.append(sum(element))\n\n    # Return the cumulative_sum_list\n    return cumulative_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n    # Traverse through the tuple list\n    for i in test_list:\n        # Check if the current value is already in the cumulative sum list\n        if i not in cum_sum:\n            # If not, append it to the list and update the cumulative sum accordingly\n            cum_sum.append(i)\n            cum_sum.append(sum(cum_sum))\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input, finds the cumulative sum of all the values that are present in the list,\n    and returns the result as a single value.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Iterate through the tuple list\n    for val in test_list:\n        # Add the value to the cumulative sum\n        cum_sum += val\n        \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cumulative_sum = []\n    # Loop through each element in the tuple list\n    for element in test_list:\n        # If the element is not already present in the cumulative sum, add it to the list and update the cumulative sum\n        if element not in cumulative_sum:\n            cumulative_sum.append(element)\n            cumulative_sum[-1] = cumulative_sum[-1] + cumulative_sum[-2]\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        length = len(num)\n        average = total / length\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        sum_of_nums = sum(num_tuple)\n        averages.append(sum_of_nums / len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        num_sum = 0\n        for num in num_tuple:\n            num_sum += num\n        average = num_sum / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of the tuple elements using the sum() and len() functions\n        avg = sum(tup) / len(tup)\n        # Append the average to the list of averages\n        averages.append(avg)\n\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(sum(nums[i])/len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Initialize a variable to keep track of the sum of the values in the tuple\n        total = 0\n        # Loop through each value in the tuple and add it to the sum\n        for val in tup:\n            total += val\n        # Divide the sum by the number of values in the tuple to get the average\n        average = total / len(tup)\n        # Append the average to the list of averages\n        averages.append(average)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple)/len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the averages\n    avg_list = []\n    \n    # loop through each tuple in the input list\n    for tup in nums:\n        # loop through each element in the tuple\n        for elem in tup:\n            # add the element to the total sum\n            total += elem\n            \n    # divide the total sum by the total number of elements to get the average\n    avg = total / len(nums)\n    \n    # append the average to the list of averages\n    avg_list.append(avg)\n    \n    # return the list of averages\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n    \n    # Perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # initialize a new tuple with the same length as the input tuples\n    result_tup = tuple([0] * len(test_tup1))\n\n    # iterate over each element of the input tuples and perform element-wise modulo\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] % test_tup2[i]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not equal.\")\n        return\n    \n    # Perform element-wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of the same length\"\n    else:\n        result = ()\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] % test_tup2[i],)\n        return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Perform element-wise modulo on the tuples\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n    # Return the result as a tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    current_point = (0, 0)\n    current_direction = 0\n    jump_count = 0\n\n    # loop through steps\n    for i in range(steps):\n        # update current point and direction\n        if current_direction == 0:\n            current_point = (current_point[0], current_point[1] + 1)\n            current_direction = 1\n        else:\n            current_point = (current_point[0] + 1, current_point[1])\n            current_direction = 0\n\n        # check for reaching destination point\n        if current_point == (d, 0):\n            return jump_count + 1\n\n    # if destination point is not reached, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Check if the given length of steps is valid\n    if steps <= 0:\n        return 0\n    \n    # Initialize variables\n    steps_taken = 0\n    steps_left = steps\n    \n    # Iterate while steps_left is greater than 0\n    while steps_left > 0:\n        \n        # Check if there is a step left in the given number of steps\n        if steps_left >= d:\n            steps_taken += 1\n            steps_left -= d\n            \n        # If not, jump to the nearest multiple of d\n        else:\n            steps_taken += (steps_left // d) + 1\n            steps_left -= (steps_left // d) * d\n            \n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 1\n    while i <= steps:\n        if d == 0:\n            d = -d\n            jumps += 1\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    start_point = 0\n    current_point = 0\n\n    while current_point < len(steps):\n        if steps[current_point] <= d:\n            d -= steps[current_point]\n            current_point += 1\n            jumps += 1\n        else:\n            d -= steps[current_point]\n            current_point += 1\n            jumps += 1\n            start_point = current_point\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    \n    # Initialize variables\n    n = len(steps)\n    dp = [steps[0]]\n    jumps = 0\n    \n    # Iterate through the list of steps\n    for i in range(1, n):\n        if steps[i] <= d:\n            # If the step is smaller than d, add it to the list and continue\n            dp.append(dp[-1] + steps[i])\n        else:\n            # If the step is greater than d, we need to do a jump to reach (d, 0)\n            if i == n-1:\n                return -1\n            \n            # Initialize variables for the jump\n            j = 1\n            prev_jump = dp[-1]\n            temp_dp = []\n            \n            # Iterate until we reach the destination point\n            while (d, 0) not in temp_dp and i+j < n:\n                if i+j < n and steps[i+j] <= d:\n                    temp_dp.append(dp[-1] + steps[i+j])\n                else:\n                    temp_dp.append(prev_jump + j * (d-prev_jump))\n                prev_jump = temp_dp[-1]\n                j += 1\n            \n            # Update the jumps count and return the number of jumps required\n            jumps += j-1\n            return jumps\n    \n    # If we reach here, the solution is not possible\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Calculate the number of jumps required to reach (d, 0)\n    jumps = steps // d\n    \n    # If the number of jumps is less than the number of steps, calculate the remaining number of steps to reach (d, 0)\n    if jumps < steps:\n        remaining_steps = steps - (jumps * d)\n        \n        # Calculate the minimum number of jumps required to reach (d, 0) from origin\n        min_jumps = remaining_steps // d\n        \n        # If the remaining number of steps is less than the minimum number of jumps, then the remaining steps must be a multiple of d\n        if remaining_steps % d!= 0:\n            min_jumps += 1\n    \n    # Return the minimum number of jumps required to reach (d, 0) from origin\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    This function takes in the number of steps required to reach the point (d, 0) from the origin, and the step size (d).\n    It returns the minimum number of jumps required to reach the point.\n    \"\"\"\n    jumps = 0\n    current_step = 0\n    jumps_taken = 0\n    while current_step < steps:\n        if current_step % 2 == 0:\n            current_step += 2\n        else:\n            current_step += 1\n        jumps_taken += 1\n        if d >= jumps_taken:\n            jumps += 1\n            d -= jumps_taken\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize two variables\n    i, j = 0, 0\n    # Initialize a counter variable\n    count = 0\n    # Loop through the given number of steps\n    while i < steps:\n        # Move down if j is less than d\n        if j < d:\n            j += 1\n        # Move up if j is greater than or equal to d\n        else:\n            i += 1\n            j = 0\n            count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_pos = (0, 0)\n    visited = set()\n\n    while steps > 0:\n        if current_pos in visited:\n            return jumps\n\n        visited.add(current_pos)\n        next_pos = (current_pos[0], current_pos[1] + d)\n\n        if steps == 1:\n            jumps += 1\n\n        steps -= 1\n        current_pos = next_pos\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    start = (0, 0)\n    dest = (d, 0)\n    jumps = 0\n    \n    # Check if the starting point is already in the destination\n    if start == dest:\n        return 0\n    \n    # Initialize a set to store visited points\n    visited = set()\n    \n    # BFS algorithm to find all possible paths\n    queue = [start]\n    while queue:\n        current = queue.pop(0)\n        visited.add(current)\n        \n        # Check if the current point is already in the destination\n        if current == dest:\n            return jumps\n        \n        # Check all possible next points\n        for next_point in [(current[0]+1, current[1]), (current[0], current[1]+1)]:\n            # Check if the next point is already visited\n            if next_point in visited:\n                continue\n            # Check if the next point is within the boundaries of the grid\n            if 0 <= next_point[0] < len(steps) and 0 <= next_point[1] < len(steps[0]):\n                # Add the next point to the queue\n                queue.append(next_point)\n                jumps += 1\n                \n    # If no valid path is found, return -1\n    return -1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length!\")\n        return\n    \n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero!\")\n            return\n        else:\n            nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of both lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    \n    # Divide each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize the count of numbers and non-numbers\n    count_num = 0\n    count_non_num = 0\n    # iterate through the string\n    for char in test_str:\n        # if the character is a digit\n        if char.isdigit():\n            # increment the count of numbers\n            count_num += 1\n        else:\n            # if the character is not a digit\n            # increment the count of non-numbers\n            count_non_num += 1\n    # initialize the final string\n    final_str = ''\n    # iterate through the string again\n    for char in test_str:\n        # if the character is a digit\n        if char.isdigit():\n            # add the character to the final string\n            final_str += char\n    # add the remaining non-numbers to the final string\n    final_str += ''.join(test_str[count_num:])\n    # return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Find all the numbers in the string\n    nums = [i for i in test_str if i.isdigit()]\n    \n    # Sort the numbers in reverse order\n    nums.sort(reverse=True)\n    \n    # Move the numbers to the end of the string\n    for num in nums:\n        test_str = test_str.replace(num, '')\n        test_str = num + test_str\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Loop through the string and replace each number with a space\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str = test_str[:i] +'' + test_str[i:]\n    \n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list to store the numbers\n    num_list = []\n\n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n\n    # reverse the num_list\n    num_list.reverse()\n\n    # join the numbers together with an empty space as a separator\n    moved_num_str = ''.join(num_list)\n\n    # return the moved number string\n    return moved_num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = ''.join(filter(str.isdigit, test_str))\n    result = test_str.replace(numbers, '') + numbers\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # convert the string to a list of characters\n    chars = list(test_str)\n\n    # initialize two pointers, one to the beginning and one to the end of the list\n    left = 0\n    right = len(chars) - 1\n\n    # swap characters until the left pointer reaches the right pointer\n    while left < right:\n        # if the left character is a digit, move it to the end of the string\n        if chars[left].isdigit():\n            chars[left], chars[right] = chars[right], chars[left]\n        # move the left pointer to the right\n        left += 1\n        # move the right pointer to the left\n        right -= 1\n\n    # convert the list of characters back to a string\n    result = ''.join(chars)\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    non_num_list = []\n    \n    # split the string into two lists, one with numbers and one without\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    \n    # join the two lists together and return the result\n    return ''.join(non_num_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    numbers = []\n    result = ''\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the numbers list\n        if char.isdigit():\n            numbers.append(char)\n        # If the character is not a number, append it to the result string\n        else:\n            result += char\n    \n    # Loop through the numbers list and append them to the result string in reverse order\n    for num in numbers[::-1]:\n        result += num\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if not num_list:\n        return test_str\n    return ''.join(num_list) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # initialize an empty list to store numbers\n    nums = []\n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # otherwise, append the character to the end of the string\n        else:\n            test_str = test_str + char\n    # concatenate the nums list with the rest of the string and return the result\n    return \"\".join(nums) + test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in non-descending order\n    a.sort()\n    # initialize the maximum subset size\n    max_subset_size = 0\n    # initialize the current subset size\n    current_subset_size = 0\n    # loop through the list\n    for num in a:\n        # if the current number is divisible by 2, add it to the current subset\n        if num % 2 == 0:\n            current_subset_size += 1\n        # if the current subset size is greater than the maximum subset size, update the maximum subset size\n        if current_subset_size > max_subset_size:\n            max_subset_size = current_subset_size\n        # if the current subset size becomes 0, decrement the current subset size\n        if current_subset_size == 0:\n            current_subset_size -= 1\n    # return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Initialize variables\n    max_size = 1\n    curr_size = 1\n    max_start = 0\n    max_end = 0\n    \n    # Loop through the list of numbers\n    for i in range(len(a)):\n        # Check if the current number is divisible by the previous number\n        if a[i] % a[max_start] == 0:\n            # If it is, update the current size and end index\n            curr_size += 1\n            max_end = i\n        else:\n            # If not, update the maximum size and start and end indices\n            if curr_size > max_size:\n                max_size = curr_size\n                max_start = i\n            curr_size = 1\n            \n    # Check if the last number was divisible by the maximum start number\n    if a[len(a)-1] % a[max_start] == 0:\n        max_size += 1\n    else:\n        max_size = 1\n        \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables\n    max_length = 0\n    max_subset = []\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # Initialize variables\n        current_subset = [a[i]]\n        length = 1\n        # Iterate through the remaining elements of the list\n        for j in range(i+1, len(a)):\n            # Check if the pair is divisible\n            if a[j] % a[i] == 0:\n                # Add the pair to the current subset\n                current_subset.append(a[j])\n                length += 1\n            # If the pair is not divisible, break the loop\n            else:\n                break\n        # Update the maximum length and subset\n        if length > max_length:\n            max_length = length\n            max_subset = current_subset\n\n    # Return the maximum subset\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_size = 0\n    max_subset = []\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Loop through the list\n    for i in range(len(a)):\n        # Initialize variables\n        size = 1\n        current_subset = [a[i]]\n        \n        # Loop through the list from the current index to the end\n        for j in range(i+1, len(a)):\n            # Check if the current pair is divisible\n            if a[j] % a[i] == 0:\n                # If it is, add it to the current subset and increase the size\n                current_subset.append(a[j])\n                size += 1\n                # If we have a larger subset, update the max_size and max_subset\n                if size > max_size:\n                    max_size = size\n                    max_subset = current_subset.copy()\n    \n    # Return the largest subset\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the input list in ascending order\n    a.sort()\n\n    # initialize the maximum subset size and current subset size\n    max_size = 0\n    curr_size = 1\n\n    # loop through the input list\n    for i in range(1, len(a)):\n        # if the next number is not divisible by the current number, increment the current subset size\n        if a[i] % a[curr_size - 1]!= 0:\n            curr_size += 1\n\n        # if the current subset size is greater than the maximum subset size, update the maximum subset size\n        if curr_size > max_size:\n            max_size = curr_size\n\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n    \n    max_size = max(dp)\n    max_subset = []\n    for i in range(n-1, -1, -1):\n        if dp[i] == max_size:\n            max_subset.append(a[i])\n            if a[i-1] % a[i] == 0:\n                max_size -= 1\n                break\n                \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize a counter for the largest subset\n    max_size = 0\n\n    # Iterate over the list of numbers\n    for i in range(len(a)):\n        # Initialize a counter for the current subset size\n        current_size = 1\n\n        # Iterate over the remaining unsorted numbers\n        for j in range(i+1, len(a)):\n            # If the remaining numbers are divisible by the current number\n            if a[j] % a[i] == 0:\n                # Increase the counter for the current subset size\n                current_size += 1\n\n        # Update the maximum subset size if the current one is larger\n        max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Initialize a variable to store the maximum subset size\n    max_size = 0\n\n    # Iterate over all possible subsets of the list\n    for subset in itertools.combinations(a, len(a)):\n        # Check if every pair is divisible by its count in the subset\n        divisible = True\n        for i in range(len(subset) - 1):\n            if subset[i] % count_dict[subset[i+1]]!= 0:\n                divisible = False\n                break\n        if divisible:\n            max_size = max(max_size, len(subset))\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    i, j = 0, 0\n    max_size = 0\n    while j < len(a):\n        if a[j] % a[i] == 0:\n            j += 1\n            max_size = max(max_size, j-i)\n        else:\n            i += 1\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the given list\n    a.sort()\n\n    # Initialize variables\n    n = len(a)\n    largest_size = 0\n    current_size = 0\n    current_start = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # If the current element is not divisible by the previous element, increment the current size\n        if a[i] % a[current_start]!= 0:\n            current_size += 1\n        # If the current element is divisible by the previous element, update the current size and move the start index\n        else:\n            current_size += 1\n            current_start = i\n\n        # Update the largest size if the current size is greater\n        if current_size > largest_size:\n            largest_size = current_size\n\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists and sort it\n    total_list = arr1 + arr2\n    total_list.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (total_list[n//2-1] + total_list[n//2])/2\n    else:\n        median = total_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Calculate the median based on the length of the array\n    if n % 2 == 0:\n        # If the array has an even length, take the average of the middle two elements\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        # If the array has an odd length, take the middle element\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Calculate the middle index\n    mid = n // 2\n\n    # Check if the length of the list is odd or even\n    if n % 2 == 1:\n        # Find the median element by sorting the list and finding the middle element\n        sorted_list = sorted(merged_list)\n        median = sorted_list[mid]\n    else:\n        # Find the median by sorting the list and finding the average of the middle two elements\n        sorted_list = sorted(merged_list)\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two sorted arrays into one sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Check if the length of the merged array is odd or even\n    if n % 2 == 1:\n        # Find the middle element of the merged array and return it\n        return merged_arr[n // 2]\n    else:\n        # Find the two middle elements of the merged array and return them\n        return (merged_arr[n // 2 - 1] + merged_arr[n // 2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Check if the two lists are of same size\n    if n!= len(arr1) or n!= len(arr2):\n        raise ValueError(\"Both lists must have same size.\")\n\n    # Merge the two lists into one\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Get the middle index\n    mid = n // 2\n\n    # If the length of the list is even, return the average of the two middle numbers\n    if n % 2 == 0:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        return merged_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the middle index\n    mid = n // 2\n\n    # Return the median (if there is one)\n    if n % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one\n    arr = arr1 + arr2\n    \n    # Sort the merged list\n    arr.sort()\n    \n    # Find the median index\n    mid = n // 2\n    \n    # Return the median element\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists into one\n    merged = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged)\n\n    # Calculate the length of the sorted list\n    length = len(sorted_list)\n\n    # Calculate the median index\n    median_index = length // 2\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # Calculate the mean of the two middle elements\n        median = (sorted_list[median_index - 1] + sorted_list[median_index]) / 2\n    else:\n        # Return the middle element\n        median = sorted_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two arrays into one\n    merged_arr = arr1 + arr2\n    # sort the merged array\n    merged_arr.sort()\n    # calculate the median\n    if n % 2 == 0:\n        return (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        return merged_arr[n//2]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is empty\n    if len(newList) == 0:\n        return []\n\n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0], newList[0]]\n\n    # Check if the list has more than one element\n    else:\n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n        # Return the modified list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    #check if the list is empty\n    if len(newList) == 0:\n        print(\"Error: The list is empty.\")\n        return\n\n    #swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Reverse the list\n    newList.reverse()\n    # Find the index of the first and last elements\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    # Interchange the first and last elements\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    # Reverse the reversed list again\n    newList.reverse()\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # Interchanging the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    else:\n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Define the maximum possible area of a triangle with side length r\n    max_area = 0.5 * r ** 2\n\n    # Define a counter variable to keep track of how many triangles have been considered\n    n = 0\n\n    # Define the starting angle of the first triangle\n    angle = 0\n\n    # Loop through all possible angles and calculate the area of the current triangle\n    while angle < 2 * math.pi:\n        # Calculate the area of the current triangle\n        area = 0.5 * r * math.sin(angle) ** 2\n\n        # If the current triangle's area is greater than the maximum possible area, update the maximum possible area\n        if area > max_area:\n            max_area = area\n\n        # Increment the counter variable\n        n += 1\n\n        # Increment the starting angle of the next triangle by 0.5 radians\n        angle += 0.5 * math.pi\n\n    # Return the maximum possible area of a triangle that can be inscribed in a semicircle with the given radius\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Formula for calculating the area of a triangle using Heron's formula\n    s = (3 * r**2)**0.5\n    area = (s * (s - r)) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the radius of the largest semicircle\n    max_radius = r - math.sqrt(3) * r**2 / 2\n    \n    # Find the area of the largest triangle inscribed in the semicircle\n    area = math.pi * max_radius**2 / 4\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2 * (1 + 2 * (r/2)**2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * math.sin(math.acos(r/2))\n    return math.sqrt(3) * (s * s)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * (math.sin(math.pi/3))\n    b = r * (math.sin(2*math.pi/3))\n    c = r * (math.sin(4*math.pi/3))\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2*r\n    b = 2*r\n    c = r*r\n\n    # Using Heron's formula\n    s = (a + b + c) / 2\n    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the semi-circle radius\n    semi_r = r - 2*r**0.5\n\n    # find the area of a triangle with sides of length 1\n    area = 1/2 * semi_r * r\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculating the semi-circle area\n    area_semi_circle = 3.14 * (r ** 2)\n    \n    # Calculating the perimeter of the smallest triangle\n    perimeter_1 = 3 * r\n    perimeter_2 = 3 * (r ** 2) / 4\n    \n    # Calculating the area of the smallest triangle\n    area_1 = (perimeter_1 ** 2) / (4 * perimeter_2)\n    \n    # Calculating the area of the largest triangle\n    area_2 = area_semi_circle - area_1\n    \n    return area_2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the area of a triangle with sides of length r\n    area = 0.5 * r * r\n    \n    # Find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area_max = 3 * r**2\n    \n    # Find the minimum area triangle that can be inscribed in a semicircle with radius r\n    area_min = area_max - area\n    \n    # Return the maximum area triangle\n    return area_max"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            if mid + 1 < len(array) and array[mid + 1]!= mid + 1:\n                start = mid + 1\n            else:\n                end = mid - 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == len(array) - 1:\n            if array[mid] == mid + 1:\n                return mid + 1\n            else:\n                return mid + 2\n\n        if array[mid] == mid:\n            if mid == 0:\n                return 1\n            else:\n                start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # If the input array is empty or contains only one number, return 1\n    if len(array) == 0 or len(array) == 1:\n        return 1\n\n    # Find the middle index of the array\n    mid = (start + end) // 2\n\n    # Recursively call the function for the left and right half of the array\n    if start <= mid:\n        if array[mid] == mid + 1:\n            return find_First_Missing(array, start, mid - 1)\n        else:\n            return find_First_Missing(array, mid + 1, end)\n    else:\n        if array[mid] == mid + 1:\n            return find_First_Missing(array, mid + 1, end)\n        else:\n            return find_First_Missing(array, start, mid - 1)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if len(array) == 0:\n        return None\n    if len(array) == 1:\n        return array[0]\n    if end is None:\n        end = len(array)-1\n    \n    result = array[0]\n    for num in array[start:end+1]:\n        if num > result:\n            result = num\n    return result + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    while start<=end:\n        mid = (start+end)//2\n        if mid>0 and array[mid]>array[mid-1]:\n            end = mid-1\n        elif mid<len(array)-1 and array[mid]<array[mid+1]:\n            start = mid+1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if i!= array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers\n    :type array: list\n    :param start: The starting index for the array\n    :type start: int\n    :param end: The ending index for the array (default: None)\n    :type end: int\n    :return: The smallest missing number in the sorted array\n    :rtype: int\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return end+1\n    if array[start]!= start:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return find_First_Missing(array,start+1,end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Find the length of the array\n    length = len(array)\n\n    # If no start and end values are given, assume the array starts from 1\n    if start == 0 and end is None:\n        start = 1\n\n    # If the start value is greater than the length of the array, assume the array starts from the end\n    if start > length:\n        start = length\n\n    # If the end value is greater than the length of the array, assume the array ends at the end\n    if end > length:\n        end = length\n\n    # Initialize the missing number to start value\n    missing = start\n\n    # Iterate over the range of the array\n    for i in range(start, end):\n        # If the current number is greater than the missing number, update the missing number\n        if array[i] > missing:\n            missing = array[i]\n        # If the current number is smaller than the missing number, it is a duplicate and we need to increment the missing number\n        else:\n            missing += 1\n\n    # If the last number in the array is greater than the missing number, update the missing number to the last number in the array\n    if array[end-1] > missing:\n        missing = array[end-1]\n\n    # Return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list: \n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if y > 0:\n        sub.append((x, y-1))\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 11:\n        sub.append((x+1, y))\n    if y < 11:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1,y))\n    if x < 29:\n        sub.append((x+1,y))\n    if y > 0:\n        sub.append((x,y-1))\n    if y < 29:\n        sub.append((x,y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    if x - 1 >= 0:\n        adj.append((x-1, y))\n    if x + 1 < 10:\n        adj.append((x+1, y))\n    if y - 1 >= 0:\n        adj.append((x, y-1))\n    if y + 1 < 10:\n        adj.append((x, y+1))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele):\n    '''\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    # Find the adjacent coordinates in a clockwise direction\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    # Add the adjacent coordinates to the sublist\n    sub.extend(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0: \n        sub.append(ele) \n    else: \n        for i in range(len(sub)): \n            if sub[i][0] == ele[0] + 1: \n                sub.append((ele[0] + 1, ele[1])) \n            elif sub[i][0] == ele[0] - 1: \n                sub.append((ele[0] - 1, ele[1])) \n            elif sub[i][1] == ele[1] + 1: \n                sub.append((ele[0], ele[1] + 1)) \n            elif sub[i][1] == ele[1] - 1: \n                sub.append((ele[0], ele[1] - 1)) \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adjacent = []\n    for i in range(len(ele)):\n        if i == 0:\n            adjacent.append((ele[i], ele[i+1]))\n        elif i == len(ele)-1:\n            adjacent.append((ele[i], ele[i-1]))\n        else:\n            adjacent.append((ele[i], ele[i-1]))\n            adjacent.append((ele[i], ele[i+1]))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (x+i, y+j)!= ele and (x+i, y+j)!= (0, 0):\n                adj.append((x+i, y+j))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            for j in range(i+1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            # move the zero to the end of the list\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    # remove the extra zeros at the end of the list\n    num_list = num_list[:count]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize variables for the index of non-zero elements\n    non_zero_index = 0\n    \n    # Loop through the list of numbers\n    for i in range(len(num_list)):\n        # If the current element is not zero, increment the non-zero index\n        if num_list[i]!= 0:\n            non_zero_index += 1\n            # Move the non-zero elements to their correct positions in the list\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index!= -1:\n        while zero_index < len(num_list) - 1:\n            num_list[zero_index], num_list[zero_index + 1] = num_list[zero_index + 1], num_list[zero_index]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # create a new list to store non-zero elements\n    non_zero_list = []\n\n    # iterate over the input list\n    for num in num_list:\n        # if the element is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n        # otherwise, move the zero to the end of the list\n        else:\n            # find the last non-zero element in the non-zero list\n            last_nonzero = non_zero_list.index(0)\n            # swap the last non-zero element with the zero element\n            num_list[last_nonzero], num_list.index(0) = num_list.index(0), num_list[last_nonzero]\n\n    # return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # create an empty list to store non-zero values\n    non_zero_list = []\n\n    # iterate over the given list\n    for num in num_list:\n        # if the number is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # add all the zeroes to the end of the non-zero list\n    num_list = non_zero_list + [0] * sum(num_list.count(0) for num in num_list if num!= 0)\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for i in range(len(new_list)):\n        if new_list[i] == 0:\n            new_list.insert(i+1, 0)\n    return new_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    if n == 1:\n        return sum(arr)\n    elif n == 2:\n        return sum(a ^ b for a in arr for b in arr)\n    else:\n        return pair_xor_Sum(arr, n-1) + pair_xor_Sum(arr, n-2)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers arr and the length of the list n as input.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # xor of first two numbers in the list\n    xor_1 = arr[0] ^ arr[1]\n    # xor of first three numbers in the list\n    xor_2 = arr[0] ^ arr[1] ^ arr[2]\n    # xor of first four numbers in the list\n    xor_3 = arr[0] ^ arr[1] ^ arr[2] ^ arr[3]\n    # xor of first five numbers in the list\n    xor_4 = arr[0] ^ arr[1] ^ arr[2] ^ arr[3] ^ arr[4]\n    # xor of first six numbers in the list\n    xor_5 = arr[0] ^ arr[1] ^ arr[2] ^ arr[3] ^ arr[4] ^ arr[5]\n\n    # sum of xor of all pairs of numbers\n    sum_of_xors = xor_1 + xor_2 + xor_3 + xor_4 + xor_5\n\n    return sum_of_xors\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Converting the list to a heap\n    hq.heapify(iterable)\n    \n    # Sorting the heap in-place\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heapreplace(iterable, iterable[i])\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Create a max-heap from the input list\n    heap = hq.heapify(iterable)\n    \n    # Build a new list by popping elements from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = [0] * (len(iterable) // 2 + 1)\n    n = len(iterable)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(heap, i, n)\n    \n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(heap, 0, i)\n    \n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # convert the list to a heap\n    hq.heapify(iterable)\n    # sort the heap in ascending order\n    hq.heapify(iterable, 0)\n    # remove the smallest element from the heap\n    while hq.heappop(iterable) is not None:\n        pass\n    # convert the sorted heap back to a list\n    return list(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    \n    for i in range(n - 1, 0, -1):\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[i])\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        hq.heapreplace(iterable, iterable[0])\n        # Call max heapify on the reduced heap\n        hq.heapify(iterable, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        hq.heapreplace(iterable, iterable[i])\n\ndef heapify(iterable, n, i):\n    '''\n    Heapify the sub-tree rooted at index i.\n    '''\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and iterable[left] > iterable[largest]:\n        largest = left\n\n    if right < n and iterable[right] > iterable[largest]:\n        largest = right\n\n    if largest!= i:\n        iterable[i], iterable[largest] = iterable[largest], iterable[i]\n        heapify(iterable, n, largest)\n\nif __name__ == \"__main__\":\n    # Example usage:\n    lst = [64, 34, 25, 12, 22, 11, 90]\n    heap_sort(lst)\n    print(lst)  # Output: [11, 12, 22, 25, 34, 64, 90]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts a given iterable in ascending order using the heap sort algorithm.\n    '''\n    # Create a max heap from the iterable\n    heap = hq.nlargest(len(iterable), iterable)\n    # Extract the elements from the max heap and append them to a new list\n    sorted_list = [heapq.heappop(heap) for _ in range(len(iterable))]\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    \n    # Extract elements from the heap one by one\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable = iterable[1:]\n    \n    # Return the sorted list\n    return sorted_list\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check if the profit and loss are both zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    \"\"\"\n    This function will check whether the given amount has no profit and no loss\n\n    Parameters:\n        actual_cost (int): The actual cost of the sales\n        sale_amount (int): The amount of sales\n\n    Returns:\n        bool: True if the given amount has no profit and no loss, otherwise False\n    \"\"\"\n\n    if actual_cost <= 0:\n        return False\n\n    if sale_amount <= 0:\n        return False\n\n    profit = sale_amount - actual_cost\n    if profit <= 0:\n        return False\n\n    loss = actual_cost - sale_amount\n    if loss <= 0:\n        return False\n\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost - sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit < 0 and loss < 0:\n        print(\"The given amount has negative profit and loss\")\n    elif profit < 0 and loss > 0:\n        print(\"The given amount has negative profit but positive loss\")\n    elif profit > 0 and loss < 0:\n        print(\"The given amount has positive profit but negative loss\")\n    elif profit > 0 and loss > 0:\n        print(\"The given amount has positive profit and positive loss\")\n    else:\n        print(\"Invalid input\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    # Check if the sale amount is greater than or equal to the actual cost\n    if sale_amount >= actual_cost:\n        # If the sale amount is greater than or equal to the actual cost, the amount has no profit\n        return True\n    else:\n        # If the sale amount is less than the actual cost, the amount has no loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    \n    if profit == 0:\n        return \"The given amount has no profit\"\n    elif profit > 0:\n        return \"The given amount has a positive profit\"\n    else:\n        return \"The given amount has a negative profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print(\"No profit and no loss.\")\n        return True\n    else:\n        print(\"Profit or loss.\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == 0:\n        return \"The given amount has no profit and no loss\"\n    \n    if sale_amount == 0:\n        return \"The given amount has no profit and no loss\"\n    \n    if sale_amount > actual_cost:\n        return \"The given amount has no profit and no loss\"\n    \n    if actual_cost > sale_amount:\n        return \"The given amount has no profit and no loss\"\n    \n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    \n    if profit == 0 and loss == 0:\n        return \"The given amount has no profit and no loss\"\n    else:\n        return \"The given amount has a profit of ${:.2f} and a loss of ${:.2f}\".format(profit, loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount == 0:\n        return True\n    \n    if sale_amount > actual_cost:\n        return False\n    \n    for i in range(1, sale_amount//actual_cost):\n        if actual_cost * i > sale_amount - i:\n            return True\n    \n    return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_degree = math.radians(v * 111.19)\n    return round(max(32, 13.12 + 0.6215 * t - 11.37 * math.pow(t, 0.16) + 0.3965 * math.pow(wind_speed_degree, 0.16)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.87  # reference temperature in celsius\n    f = math.floor((c * (t - 273.15)) / 1.8 + 32)  # temperature in fahrenheit\n    k = 237.3  # constant from NWS wind chill formula\n    wind_speed_index = int(math.ceil((f - k) / 16.9))  # wind speed index\n    return wind_speed_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the nearest integer.\n\n    Parameters:\n    v (float): wind velocity in km/h\n    t (float): temperature in celsius\n\n    Returns:\n    int: wind chill index rounded to the nearest integer\n    '''\n\n    # calculate the heat index\n    heat_index = 35.74 + (0.6215 * t) - (35.75 * math.log(v)) + (0.4275 * t * math.log(v))\n\n    # calculate the wind chill index\n    wci = (heat_index - 32) * 5/9\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer using the formula:\n\n    WC = max(32, 13.12 + 0.6215*T - 11.37*math.log(P) + 0.3965*v + 0.2441*math.log(v))\n\n    where P is the air pressure in hPa and T is the temperature in degrees Celsius.\n\n    Args:\n        v (float): wind velocity in km/h.\n        t (float): temperature in degrees Celsius.\n\n    Returns:\n        int: wind chill index rounded to the nearest integer.\n    \"\"\"\n\n    # Convert pressure to millibars\n    p = 10**(1/5.255*t)\n\n    # Calculate wind chill index\n    wc = 32 if p < 1000 else 13.12 + 0.6215*t - 11.37*math.log(p) + 0.3965*v + 0.2441*math.log(v)\n\n    # Round wind chill index to the nearest integer\n    return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity and temperature.\n\n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the nearest integer\n    :rtype: int\n    \"\"\"\n\n    # Convert temperature from celsius to fahrenheit\n    t_f = t * 1.8 + 32\n\n    # Convert wind velocity to m/s\n    v_ms = v * 1.60934\n\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * t_f - 35.75 * math.log(v_ms) + 0.4275 * t_f * math.log(v_ms)\n\n    # Round the wind chill index to the nearest integer\n    wci = int(math.ceil(wci))\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 0.6219718  # The Constant for the formula\n    w = 3.6  # The constant for the formula\n    f = (13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(t, 3)) / (22.75 + 0.6215 * t - 5.37 * math.pow(t, 2) + 1.0423 * math.pow(t, 3))\n    return math.ceil((f - 32) * 5 / 9 + 237.3)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters\n    ----------\n    v: float\n        The wind velocity in km/h.\n    t: float\n        The temperature in celsius.\n    \n    Returns\n    -------\n    int\n        The wind chill index rounded to the nearest integer.\n    \"\"\"\n    c = 1.5\n    wind_speed = v * 1.609344\n    wind_chill_c = (t + 16.666666666666666) / 1.8\n    wind_chill_f = (t + 16.666666666666666) * 1.8 + 32\n    if wind_speed <= 12:\n        wind_chill_c = 22.5 + 0.0065 * wind_speed + 0.0175 * t\n        wind_chill_f = 22.5 + 0.0065 * wind_speed + 0.0175 * t\n    elif 12 < wind_speed <= 16:\n        wind_chill_c = 11.1 + 0.0075 * (wind_speed - 12) + 0.0429 * t\n        wind_chill_f = 11.1 + 0.0075 * (wind_speed - 12) + 0.0429 * t\n    elif 16 < wind_speed <= 20:\n        wind_chill_c = 0.8 + 0.0068 * (wind_speed - 16) + 0.2367 * t\n        wind_chill_f = 26.8 + 0.0068 * (wind_speed - 16) + 0.2367 * t\n    elif 20 < wind_speed <= 24:\n        wind_chill_c = 0.6 + 0.0056 * (wind_speed - 20) + 0.2878 * t\n        wind_chill_f = 22.8 + 0.0056 * (wind_speed - 20) + 0.2878 * t\n    elif 24 < wind_speed <= 28:\n        wind_chill_c = 0.45 + 0.0044 * (wind_speed - 24) + 0.3333 * t\n        wind_chill_f = 19.4 + 0.0044 * (wind_speed - 24) + 0.3333 * t\n    elif 28 < wind_speed <= 32:\n        wind_chill_c = 0.35 + 0.0034 * (wind_speed - 28) + 0.375 * t\n        wind_chill_f = 16.5 + 0.0034 * (wind_speed - 28) + 0.375 * t\n    elif 32 < wind_speed <= 36:\n        wind_chill_c = 0.3 + 0.0028 * (wind_speed - 32) + 0.40 * t\n        wind_chill_f = 14 + 0.0028 * (wind_speed - 32) + 0.40 * t\n    elif 36 < wind_speed <= 40:\n        wind_chill_c = 0.25 + 0.0022 * (wind_speed - 36) + 0.425 * t\n        wind_chill_f = 11.6 + 0.0022 * (wind_speed - 36) + 0.425 * t\n    elif 40 < wind_speed <= 44:\n        wind_chill_c = 0.2 + 0.0016 * (wind_speed - 40) + 0.45 * t\n        wind_chill_f = 9.3 + 0.0016 * (wind_speed - 40) + 0.45 * t\n    elif "
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to celsius\n    t_c = t - 273.15\n\n    # calculate the heat index\n    if t_c < -10:\n        h_index = 0\n    elif t_c < 0:\n        h_index = 13.12 + 0.6215 * t_c + (t_c - 0.6215) * (t_c - 0.3168)\n    elif t_c < 10:\n        h_index = 35.74 + 0.3965 * t_c - 1.697 * math.pow(t_c,2) + (t_c - 10) * (t_c - 0.3965)\n\n    # calculate the wind chill index\n    wc_index = round(v / 3.6 * math.exp((17.625 * h_index) / (v + 243.5)) + 32)\n\n    # return the wind chill index rounded to the next integer\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc_t = 0.62197*t - 35.75*math.exp((17.625*t)/(t+243.125)) + v*0.0065\n    wc_i = math.floor(wc_t + 0.5)\n    return wc_i"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215*t - 35.75*math.exp(17.62*t/(t+243.5)) + 0.4275*v\n    # Round the wind chill index to the nearest integer\n    wci_rounded = round(wci)\n    return wci_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name.isupper():\n            names.append(name)\n    total_length = 0\n    for name in names:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_name_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_name_lengths += len(name)\n    return sum_name_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize a variable to store the sum of the lengths of names\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if not name[0].isupper():\n            # Add the length of the remaining names to the total length\n            total_length += len(name)\n    \n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the valid names\n    valid_names = []\n    \n    # loop through the sample names and check if the name starts with a lowercase letter\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            valid_names.append(name)\n    \n    # sum the lengths of the valid names\n    valid_names_length = sum([len(name) for name in valid_names])\n    \n    return valid_names_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of the names\n    sum_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # if it is, skip to the next name\n            continue\n        # if the first character is not a lowercase letter, add the length of the name to the sum\n        sum_length += len(name)\n    \n    # return the sum of the lengths of the names that are not lowercase\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names without lowercase letters\n    names_without_lowercase = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, append it to the names_without_lowercase list\n            names_without_lowercase.append(name)\n        # If the name does not start with a lowercase letter, add its length to the total_length variable\n        else:\n            total_length += len(name)\n    # Return the sum of the lengths of the names without lowercase letters\n    return sum(names_without_lowercase)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)') # matches any parenthesis enclosed string\n    matches = pattern.findall(items) # finds all matches of the pattern in the string\n    return ''.join(matches) # removes all matches and returns the resulting string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_parenthesis(items):\n    \"\"\"\n    Remove parenthesis and what is between them from a string.\n\n    :param items: A string containing parentheses and what is inside them.\n    :return: The string with the parentheses and what is inside them removed.\n    \"\"\"\n    # Remove parenthesis using regular expression\n    pattern = re.compile('\\([^\\)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Define the regular expression pattern to match the parenthesis and its content\n    pattern = r'\\(([a-zA-Z0-9, ]+)\\)'\n\n    # Use the regular expression search method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, items)\n\n    # Loop through all matches and replace the parenthesis with its content\n    for match in matches:\n        items = items.replace(match, match[1:-1])\n\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what's between them from a string.\n\n    Args:\n    - items (str): the string to process\n\n    Returns:\n    - str: the processed string\n    \"\"\"\n\n    # Define the pattern to match the parentheses\n    pattern = r'\\((.*)\\)'\n\n    # Use re.sub to replace the parentheses with an empty string\n    result = re.sub(pattern, '', items)\n\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\(.*?\\)' # regex pattern for finding parenthesis\n    return re.sub(pattern, '', items) # remove the parenthesis from the string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define the regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = r'\\(.*?\\)'\n    # create a list to store the items without the parenthesis\n    result = []\n    # loop through each item in the input list\n    for item in items:\n        # check if the item matches the pattern\n        if re.match(pattern, item):\n            # if it does, split the item using the pattern and add the first element to the result list\n            result.append(item.split('(')[0])\n        else:\n            # if it doesn't, add the item to the result list as is\n            result.append(item)\n    # return the result list with the parenthesis removed\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\w+\\()([^)]+)(\\))'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # find the sum of the first n natural numbers\n    sum_of_natural_numbers = (n * (n + 1)) // 2\n    # subtract the sum of squares of natural numbers from the sum of squares of odd squares\n    sum_of_odd_squares = ((n * (n + 1) // 2) * ((n * (n + 1) // 2) + 1)) // 2\n    # find the difference between the sum of natural numbers and the sum of odd squares\n    return abs(sum_of_natural_numbers - sum_of_odd_squares)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) - 1\n\n\ndef nth_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number using recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return nth_nonagonal(n - 1) + nth_nonagonal(n - 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the variables\n    a = 1\n    b = 1\n    count = 0\n    \n    # Calculate the number of squares\n    squares = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Iterate through the squares to find the nth nonagonal number\n    for i in range(squares):\n        count += 1\n        a, b = b, (a + b)\n    \n    # Return the nth nonagonal number\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the first two nonagonal numbers\n    num1 = 1\n    num2 = 4\n\n    # loop through the remaining nonagonal numbers\n    for i in range(2, n):\n        # calculate the next nonagonal number\n        num = num1 + num2\n        # update the current numbers\n        num1 = num2\n        num2 = num\n\n    # return the nth nonagonal number\n    return num2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    result = 0\n    side = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += side\n            side += 1\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize a variable for the sum of the squares of the first n rows of Pascal's triangle\n    first_n_rows_sum = 0\n    \n    # Iterate through the first n rows of Pascal's triangle\n    for i in range(n):\n        # Calculate the value of the i-th nonagonal number by adding the i-th and i+1-th rows of Pascal's triangle\n        nonagonal = (i * (i + 1)) // 2\n        # Add the value of the i-th nonagonal number to the sum of the squares of the first n rows of Pascal's triangle\n        first_n_rows_sum += nonagonal ** 2\n    \n    # Return the sum of the squares of the first n rows of Pascal's triangle\n    return first_n_rows_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the variable to 1\n    nonagonal = 1\n\n    # loop from 1 to n-1\n    for i in range(1, n):\n        # add the previous value to the next value\n        nonagonal += i\n\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1 or n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(2, n+1):\n        d = a + b\n        a = b\n        b = c\n        c = d\n    return c"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<![A-Za-z])[zZ](?![A-Za-z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*[zZ][a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b' # regex pattern to match word ending with 'z' and at the start of the word\n    result = re.findall(pattern, text)\n    if result:\n        print(\"The word 'z' is present in the middle of a word in the given string.\")\n    else:\n        print(\"The word 'z' is not present in the middle of a word in the given string.\")"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ][^a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return True if matches else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<!\\w)z(?!\\w)\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-zA-Z])z(?=[a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)(?!.*\\b(z\\w*))\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regex pattern to match a word that starts with 'z' and ends with 'z'\n    pattern = r'\\b(z.*z)\\b'\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b' # matches any 'z' in word boundary\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) # get the length of the input array\n    if n <= k: # if the length of the input array is less than or equal to the given position k\n        return input # return the input array as is\n    else:\n        start = 0 # starting index of the input array\n        end = k - 1 # ending index of the input array\n        mid = n // 2 # mid index of the input array\n        reverse_Array_Upto_K(input[:mid], k) # reverse the first half of the input array\n        reverse_Array_Upto_K(input[mid:], k) # reverse the second half of the input array\n        reverse_Array_Upto_K(input[:mid], k) # reverse the first half of the input array again\n        return input[:mid] + input[mid:] # combine the first and second halves of the input array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return None\n    reverse = input[:k]\n    for i in range(k, len(input)):\n        reverse.append(input[i])\n    return reverse"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # If the array is empty or k is greater than the length of the array, return the array.\n    if len(input) == 0 or k > len(input):\n        return input\n\n    # If k is less than or equal to half the length of the array, reverse the array upto k.\n    elif k <= len(input) // 2:\n        return reverse_Array_Upto_K(input[:k], k) + input[k:] + reverse_Array_Upto_K(input[k:], len(input) - k)\n\n    # If k is greater than half the length of the array, reverse the array upto half of the length of the array.\n    else:\n        return reverse_Array_Upto_K(input[:len(input) // 2], len(input) // 2) + input[len(input) // 2:] + reverse_Array_Upto_K(input[len(input) // 2:], len(input) - len(input) // 2)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes in an array of integers and a position k. \n    It reverses the first k elements of the array and returns the reversed array.\n    \"\"\"\n\n    # Create a copy of the input array\n    arr_copy = input.copy()\n\n    # Reverse the first k elements of the array\n    arr_copy[:k] = arr_copy[:k][::-1]\n\n    # Return the reversed array\n    return arr_copy"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Convert the input list to a string\n    input_str = str(input)\n\n    # Reverse the string upto the kth position\n    start = 0\n    end = k - 1\n    while start < end:\n        input_str = input_str[:start] + input_str[start+1] + input_str[end] + input_str[start]\n        start += 1\n        end -= 1\n\n    # Convert the reversed string back to a list\n    reversed_list = eval(input_str)\n\n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the k-th element\n    input[0:k], input[k:] = input[k:], input[0:k]\n    # Reverse the array from k+1 to the end\n    input[k+1:len(input)], input[0:k+1] = input[0:k+1][::-1], input[k+1:len(input)][::-1]\n    # Reverse the array from the start to k\n    input[0:k], input[k:] = input[k:], input[0:k]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the given position\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    \n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    for i in range(0, k): \n        input[i], input[n-1-i] = input[n-1-i], input[i] "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    n = len(input)\n    left = 0\n    right = k - 1\n\n    while left < right: \n        input[left], input[right] = input[right], input[left] \n        left += 1 \n        right -= 1\n\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary that contains the elements of the original dictionary and the tuple\n    updated_dict = {**test_dict, **test_tup}\n    \n    # Return the updated dictionary as a tuple\n    return tuple(updated_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # add the dictionary to the tuple\n    new_tup = (test_tup, dict_list)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    \n    # Append the list of tuples to the tuple\n    result_tup = test_tup + test_list\n    \n    # Return the updated tuple\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n\n    # Initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    # Fill the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            path_avg = 0\n            curr_x = i\n            curr_y = j\n            while curr_x!= N-1 and curr_y!= N-1:\n                path_avg += cost[curr_x][curr_y]\n                curr_x += 1\n                curr_y += 1\n            path_avg /= (curr_x - i + 1)\n            max_avg = max(max_avg, path_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    total_cost = 0\n    total_cells = 0\n\n    def find_max_average(row, col):\n        if row == N - 1 and col == N - 1:\n            return cost[row][col]\n        else:\n            left_cost = find_max_average(row, col - 1)\n            down_cost = find_max_average(row + 1, col)\n            up_cost = find_max_average(row - 1, col)\n            right_cost = find_max_average(row, col + 1)\n            total_cost += cost[row][col] + left_cost + down_cost + up_cost + right_cost\n            total_cells += 5\n            return max(left_cost, down_cost, up_cost, right_cost) + cost[row][col]\n\n    return find_max_average(0, 0) / total_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    N = len(cost)\n    max_avg = 0\n    max_path = []\n    visited = set()\n\n    # helper function to check if a cell is valid\n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N and cost[i][j]!= float('inf')\n\n    # helper function to check if a path is valid\n    def is_valid_path(path):\n        i, j = path[0]\n        return is_valid(i, j) and (i, j) not in visited\n\n    # helper function to calculate the average of a path\n    def average_of_path(path):\n        i, j = path[-1]\n        total_cost = 0\n        visited.add((i, j))\n        for k in range(len(path) - 1):\n            i, j = path[k]\n            total_cost += cost[i][j]\n        return total_cost / (len(path) - 1)\n\n    # recursive function to find the maximum average of paths\n    def find_max_avg(i, j, path=None):\n        # base case: reached bottom right cell\n        if i == N - 1 and j == N - 1:\n            avg = average_of_path(path)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path\n            return\n\n        # recursive case: try all possible directions\n        if path is None:\n            path = [(i, j)]\n        else:\n            path.append((i, j))\n        for d in [0, 1]:  # move right or down\n            k = i + d if is_valid(i + d, j) else j\n            if k in visited:\n                continue\n            visited.add(k)\n            find_max_avg(k, j, path)\n            visited.remove(k)\n\n    # call the recursive function\n    find_max_avg(0, 0)\n\n    # return the maximum average of paths\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = 0\n    max_path = None\n    visited = set()\n    queue = [(0, 0)] # (start_row, start_col)\n    \n    while queue:\n        start_row, start_col = queue.pop(0)\n        visited.add((start_row, start_col))\n        current_cost = cost[start_row][start_col]\n        if start_row == N-1 and start_col == N-1:\n            if current_cost > max_avg:\n                max_avg = current_cost\n                max_path = [(start_row, start_col)]\n            elif current_cost == max_avg:\n                max_path.append((start_row, start_col))\n        else:\n            if start_row < N-1:\n                queue.append((start_row+1, start_col))\n            if start_col < N-1:\n                queue.append((start_row, start_col+1))\n            if start_row < N-1 and start_col < N-1:\n                queue.append((start_row+1, start_col+1))\n                \n    if max_path:\n        return max_avg / len(max_path)\n    else:\n        return 0"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_sum = float('-inf')\n    visited = set()\n    for i in range(N):\n        for j in range(N):\n            visited.add((i,j))\n            curr_sum = 0\n            curr_sum += cost[i][j]\n            curr_sum += dfs(i+1,j,N,cost,visited)\n            curr_sum += dfs(i,j+1,N,cost,visited)\n            max_sum = max(max_sum,curr_sum)\n            visited.remove((i,j))\n    return max_sum/len(visited)\n\ndef dfs(i,j,N,cost,visited):\n    if (i,j) in visited:\n        return 0\n    visited.add((i,j))\n    if i == N-1 and j == N-1:\n        return cost[i][j]\n    curr_sum = 0\n    if i < N-1:\n        curr_sum += dfs(i+1,j,N,cost,visited)\n    if j < N-1:\n        curr_sum += dfs(i,j+1,N,cost,visited)\n    return curr_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        max_avg = max(max_avg, sum(cost[i]) / (i+1))\n        max_avg = max(max_avg, sum(cost[j][i] for j in range(N)) / (i+1))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    paths = []\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths.append([(i, j), (i, j)])\n                continue\n            \n            if j == 0:\n                paths[-1].append((i, j))\n                paths[-1].append((i, j+1))\n                paths.append([(i, j), (i, j+1)])\n            elif i == 0:\n                paths[-1].append((i, j))\n                paths[-1].append((i+1, j))\n                paths.append([(i, j), (i+1, j)])\n            elif cost[i][j] < cost[i-1][j]:\n                paths[-1].append((i, j))\n                paths[-1].append((i+1, j))\n                paths.append([(i, j), (i+1, j)])\n            else:\n                paths[-1].append((i, j))\n                paths[-1].append((i, j+1))\n                paths.append([(i, j), (i, j+1)])\n\n    for path in paths:\n        total_cost = 0\n        num_cells = 1\n        path.append((N-1, N-1))\n        path.append((0, 0))\n        for i in range(1, len(path)-1):\n            total_cost += cost[path[i][0]][path[i][1]]\n            num_cells += 1\n        avg_cost = total_cost/num_cells\n        if avg_cost > max_avg:\n            max_avg = avg_cost\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    total_cost = 0\n    visited_cells = 0\n    max_path_cost = float('-inf')\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                total_cost += cost[i][j]\n                visited_cells += 1\n                continue\n\n            # Check if we can move right\n            if j < N - 1:\n                total_cost += cost[i][j] + cost[i][j + 1]\n                visited_cells += 2\n                if total_cost > max_path_cost:\n                    max_path_cost = total_cost\n            # Check if we can move down\n            if i < N - 1:\n                total_cost += cost[i][j] + cost[i + 1][j]\n                visited_cells += 2\n                if total_cost > max_path_cost:\n                    max_path_cost = total_cost\n\n    return max_path_cost / visited_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        dp = [0]*N\n        dp[i] = cost[i][i]\n        for j in range(i+1, N):\n            dp[j] = max(dp[j], dp[j-1]) + cost[i][j]\n            if dp[j] > max_avg:\n                max_avg = dp[j]\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # Initialize variables to store maximum average and path length\n    max_avg = 0\n    max_path_length = 0\n    # Initialize variables to store current average and path length\n    curr_avg = 0\n    curr_path_length = 0\n    # Loop through all cells in the matrix\n    for i in range(N):\n        for j in range(N):\n            # If the cell is not blocked, increment average and path length\n            if cost[i][j] == 0:\n                curr_avg += cost[i][j]\n                curr_path_length += 1\n            # If the current path length is greater than the maximum, update maximum average and path length\n            elif curr_path_length > max_path_length:\n                max_avg = curr_avg / curr_path_length\n                max_path_length = curr_path_length\n            # If the current path length is equal to the maximum, update the maximum average if the new path has a higher average\n            elif curr_path_length == max_path_length:\n                if curr_avg / curr_path_length > max_avg:\n                    max_avg = curr_avg / curr_path_length\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for student_name, student_info in students.items():\n        student_height, student_weight = student_info\n        if student_height > h and student_weight > w:\n            filtered_students[student_name] = student_info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_info in students.items():\n        if student_info[0] > h and student_info[1] > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student in students.items():\n        if student[0] > h and student[1] > w:\n            filtered_students[name] = student\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pairs = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_pairs += 1\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # compare the lists element by element using the 'eq' operator\n    result = [i for i, x in enumerate(nums1) if eq(x, nums2[i])]\n    \n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # iterate through the lists using a for loop\n    for i in range(len(nums1)):\n        # check if the current elements in the lists are equal using the eq operator\n        if eq(nums1[i], nums2[i]):\n            # if they are, increment the count by 1\n            count += 1\n    \n    # return the count of same pairs\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count_dict = {}\n    for i, j in zip(nums1, nums2):\n        if eq(i, j):\n            if i in count_dict:\n                count_dict[i] += 1\n            else:\n                count_dict[i] = 1\n    return count_dict"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if all(nums1[i] == nums2[j] for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_int = int(power)\n\n    # Calculate the sum of all digits to the specified power\n    digit_sum = 0\n    for digit in base_str:\n        digit_int = int(digit)\n        digit_sum += digit_int ** power_int\n\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string\n    base_str = str(base)\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to integer and add to the sum\n        sum += int(digit)\n    # Multiply the sum by the power and return the result\n    return sum * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = [int(digit) for digit in str(base)]\n    result = 0\n    for digit in digits:\n        result += digit ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base[i])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the base and add it to the sum\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n    \n    # Calculate the result by raising the sum to the power\n    result = sum ** power\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n\n    # Initialize the sum to zero\n    total = 0\n\n    # Iterate over each digit of the base string and add its power to the total\n    for digit in base_str:\n        total += int(digit) ** power\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    result = 0\n    for digit in base_str:\n        result += int(digit) ** power\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.findall(text)\n    return match[0] if match else None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to match the quotation marks and capturing the string between them\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"No quotation found\""
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1])\n    for i in range(2, N+1):\n        result_tup += (test_tup[i] * test_tup[i+1])\n    return result_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    # Get the length of the tuple\n    N = len(test_tup)\n    # Create an empty list to store the result\n    result = []\n    # Iterate over the tuple and multiply each element with the next one\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    # Return the resulting tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result_tup = tuple(t_i * test_tup[i+1] for i, t_i in enumerate(test_tup))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[-2],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the length of the new tuple\n    N = len(test_tup) - 1\n    \n    # Create a new tuple with the same elements as the input tuple but multiplied by the next element\n    new_tup = (test_tup[0] * test_tup[1], test_tup[2] * test_tup[3], test_tup[4] * test_tup[5], test_tup[6] * test_tup[7], test_tup[8] * test_tup[9])\n    \n    # Return the new tuple\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # N is the number of elements in the input tuple\n    multiplied_tup = () # initialize an empty tuple to store the result\n    for i in range(N):\n        multiplied_tup += (test_tup[i] * test_tup[i+1],) # calculate the multiplication and add it to the multiplied_tup tuple\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the size of the resulting tuple\n    N = len(test_tup)-1\n    \n    # Initialize the resulting tuple with zeros\n    result_tup = [0] * N\n    \n    # Loop over the elements of the input tuple\n    for i in range(N):\n        # Compute the product of the i-th and i+1-th elements of the input tuple\n        prod = test_tup[i] * test_tup[i+1]\n        # Store the result in the i-th position of the resulting tuple\n        result_tup[i] = prod\n    \n    # Return the resulting tuple\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = (test_tup[0],) * N\n    for i in range(1, N):\n        result = (test_tup[i],) + result\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # create a new empty list to store the result\n    result = []\n    # loop through the two input lists\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two lists and append the result to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the resulting list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input, lst1 and lst2, and returns a new list that contains the sum of all elements in both lists.\n    '''\n    return lst1 + lst2"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates from a list.\n    \"\"\"\n    return list(set([tuple(g) for k, g in groupby(nums)]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(set(nums)))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(set(nums)))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use itertools.groupby() to group the numbers by their value\n    grouped = groupby(nums)\n\n    # Filter out the groups that have only one item\n    consecutive = (group for key, group in grouped if len(group) > 1)\n\n    # Join the groups into a list\n    result = list(consecutive)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list with consecutive duplicates removed.\n    \"\"\"\n    # Group the numbers by their consecutive duplicates\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1] == x[0])\n    # Extract the numbers from the groups that contain consecutive duplicates\n    consecutive_nums = [num for group in grouped_nums if group[1]]\n    # Convert the list of tuples back to a list\n    consecutive_nums = list(set(consecutive_nums))\n    # Sort the list in ascending order\n    consecutive_nums.sort()\n    # Return the sorted list\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(set(nums))):\n        if len(list(group)) > 1:\n            result.append(list(group)[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) == 1:\n            yield from group\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    prev = None\n    for num in nums:\n        if num == prev:\n            continue\n        else:\n            result.append(num)\n            prev = num\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby function from itertools to group the numbers by their index\n    grouped = groupby(enumerate(nums), lambda x: x[0] == x[1])\n    # Create an empty list to store the non-consecutive duplicates\n    result = []\n    # Loop through each group of consecutive duplicates\n    for group in grouped:\n        # If the group is true, add the first number to the result list\n        if group[1]:\n            result.append(next(group[1]))\n    # Return the result list\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the volume of the cone\n    V = math.pi * r**2 * h\n    \n    # Calculate the lateral surface area\n    A = 2 * math.pi * r * h\n    \n    return A, V"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*(2+math.tan(math.pi/4)) + math.pi*h**2*(2+math.tan(math.pi/4))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = math.pi * r**2 * (h/3)\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * math.sin(math.pi/3)\n    area = math.pi * r**2 + 2 * s\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n\n    :param r: radius of the cone (float)\n    :param h: height of the cone (float)\n    :return: lateral surface area of the cone (float)\n    \"\"\"\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = math.pi * r * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2+h**2)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^A-Za-z0-9\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[.]', '', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    repl = ':'\n    return re.sub(pattern, repl, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regex pattern to replace spaces, commas, and dots with a colon\n    pattern = r'([ \\.,])'\n    # use re.sub() to replace all occurrences of pattern with a colon\n    result = re.sub(pattern, ':', text)\n    # return the result\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for spaces, commas, or dots\n    pattern = re.compile(r'[\\s,\\.]')\n    \n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[^\\w\\s]|[-+,.]|[-+,.]|[\\s]+'\n    return re.sub(special_chars, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match special characters\n    pattern = re.compile(r'[\\s,\\.]+')\n    # replace special characters with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[^\\w\\s]'\n    colon_pattern = r'\\s'\n    text = re.sub(pattern, '', text)\n    text = re.sub(colon_pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to match spaces, commas, or dots\n    pattern = r'\\s|[,\\.]'\n    # use re.sub() method to replace pattern with colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[\\s,.]', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index variable\n    index = -1\n    \n    # loop through the array\n    for i in range(len(A)):\n        # check if the current element is equal to the searched number\n        if A[i] == x:\n            # update the index variable to the current index\n            index = i\n            # break the loop because we have found the first occurrence\n            break\n    \n    # return the index variable\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    \"\"\"\n    # find the leftmost index of x in A\n    left = 0\n    while left < len(A) and A[left] < x:\n        left += 1\n    # if x is not found, return -1\n    if left == len(A) or A[left]!= x:\n        return -1\n    # find the rightmost index of x in A\n    right = len(A) - 1\n    while right >= left and A[right] > x:\n        right -= 1\n    # return the index of x in A\n    return right"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to -1 (to indicate that the number is not in the array)\n    index = -1\n\n    # Initialize the left and right pointers to the beginning and end of the array, respectively\n    left = 0\n    right = len(A) - 1\n\n    # Loop while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = left + (right - left) // 2\n\n        # If the middle element is equal to the target element, check if it is the first occurrence or not\n        if A[mid] == x:\n            # If it is the first occurrence, update the index to the middle index\n            if mid == 0 or A[mid-1]!= x:\n                index = mid\n\n            # Search the left half of the array for the target element\n            left = mid + 1\n\n        # If the middle element is less than the target element, search the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than the target element, search the left half of the array\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence of the target number in the array\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize index of first occurrence to -1\n    i = -1\n    # loop through array and compare each element with x\n    for j in range(len(A)):\n        if A[j] == x:\n            # if x is found, update index of first occurrence\n            if i == -1:\n                i = j\n            # if x is already found, update index of first occurrence to j\n            else:\n                i = j\n    # return index of first occurrence or -1 if not found\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Find the first index where the element is greater than or equal to x\n    first_index = 0\n    while first_index < len(A) and A[first_index] < x:\n        first_index += 1\n\n    # Check if the element is equal to x at the first index\n    if first_index < len(A) and A[first_index] == x:\n        return first_index\n\n    # Find the last index where the element is less than or equal to x\n    last_index = len(A) - 1\n    while last_index >= 0 and A[last_index] > x:\n        last_index -= 1\n\n    # Check if the element is equal to x at the last index\n    if last_index >= 0 and A[last_index] == x:\n        return last_index\n\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A: A sorted array of integers.\n    x: A number to search for in the array.\n\n    Returns:\n    The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n\n    # Find the index of the first occurrence of x in the array\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Create a function to generate all possible sublists of a given list\n    def sublists(lst, start, end):\n        if start == end:\n            yield [lst[start]]\n        else:\n            for i in range(start, end):\n                for sublist in sublists(lst, start + 1, end):\n                    yield [lst[start]] + sublist\n\n    # Calculate the product of each sublist and sum them up\n    total_sum = 0\n    for sublist in sublists(arr, 0, len(arr)):\n        total_sum += reduce(lambda x, y: x * y, sublist)\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # Initialize result as 0\n    result = 0\n    \n    # Initialize two pointers, left and right, to start of array\n    left = 0\n    right = 0\n    \n    # Initialize a boolean variable, has_next, to True\n    has_next = True\n    \n    # Initialize a variable, product, to 1\n    product = 1\n    \n    # Initialize an array, subarray_products, to store products of subarrays\n    subarray_products = [1] * n\n    \n    # Initialize an array, product_sum, to store the sum of products of subarrays\n    product_sum = [0] * n\n    \n    # Initialize an array, subarray_sums, to store the sum of elements in subarrays\n    subarray_sums = [0] * n\n    \n    # Initialize an array, subarray_indices, to store the indices of elements in subarrays\n    subarray_indices = [0] * n\n    \n    # Loop till right pointer is less than n\n    while right < n:\n        # If has_next is True, add the current element to the sum of elements in subarray_sums[left:right+1]\n        if has_next:\n            subarray_sums[left] += arr[right]\n        # If the sum of elements in subarray_sums[left:right+1] is greater than or equal to k, calculate the product of the subarray and update result and subarray_products\n        if subarray_sums[left] >= n-right:\n            product = subarray_products[left] * product_sum[left]\n            result += product\n            subarray_products[left+1] *= product\n            product_sum[left+1] = 0\n            subarray_sums[left] = 0\n            subarray_indices[left] = right\n            has_next = True\n            left += 1\n        # If the sum of elements in subarray_sums[left:right+1] is less than k, increment the right pointer and set has_next to False\n        else:\n            right += 1\n            has_next = False\n        \n        # If right pointer is equal to n, calculate the sum of products of all subarrays and update result\n        if right == n:\n            product = subarray_products[left] * product_sum[left]\n            result += product\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    result = []\n\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                subarray_sum = prefix_sum[j+1] - prefix_sum[i]\n                product = 1\n                for l in range(i, k+1):\n                    product *= arr[l]\n                result.append(product * subarray_sum)\n\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result list\n    result = []\n    # Iterate through all possible sublists of length i\n    for i in range(1, n+1):\n        # Initialize a variable to store the current sublist product\n        curr_product = 1\n        # Iterate through all possible sublists of length i\n        for j in range(n-i+1):\n            # Multiply current sublist by the sublist before it\n            curr_product *= arr[j]\n            # Add the current sublist product to the result list\n            result.append(curr_product)\n    # Calculate the sum of all products in the result list\n    sum_of_products = sum(result)\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    subarray_prod = 1 # initialize the first subarray product to 1\n    subarray_sum = 0 # initialize the sum of products of subarrays to 0\n\n    for i in range(n):\n        subarray_sum += arr[i] * subarray_prod # update the sum of products of subarrays\n        subarray_prod *= arr[i] # update the subarray product\n\n    return subarray_sum # return the sum of products of subarrays"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        sub_list = arr[i:n]\n        sub_prod = 1\n        for j in range(len(sub_list)):\n            sub_prod *= sub_list[j]\n        total_sum += sub_prod\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    \n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n        res += temp\n    \n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = arr[0]\n    prefix_sum[1] = arr[0] * arr[1]\n    \n    for i in range(2, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n        \n    result = 0\n    \n    for i in range(n - 1):\n        result += prefix_sum[i + 2] * (prefix_sum[n] - prefix_sum[i] - prefix_sum[i + 1] + arr[i])\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        # We need to start from the first element of the current subarray\n        # otherwise the product will be 0\n        for j in range(i+1, n):\n            # We need to end at the last element of the current subarray\n            # otherwise the product will be 0\n            subarr = arr[i:j+1]\n            product = 1\n            for x in subarr:\n                product *= x\n            sum += product\n\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist_prod = 1\n            for k in range(i, j):\n                sublist_prod *= arr[k]\n            result += sublist_prod\n            \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & ~(1 << 0)  \n    last_bit = n & ~(1 << (n.bit_length() - 1))  \n    return first_bit | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # We need to get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**n - 1)\n\n    # Then we toggle the middle bits\n    middle_bits = (n ^ first_bit ^ last_bit)\n\n    # Finally, we combine the first and last bits with the middle bits and return the result\n    return (first_bit | middle_bits) ^ last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    num_bits = bin(n).count('1')\n    # toggle the middle bits\n    mid_bits = (num_bits // 2) - 1\n    first_bit = n & (1 << mid_bits)\n    last_bit = n & (1 << (mid_bits + 1))\n    middle_bits = first_bit ^ last_bit\n    toggled_bits = n ^ middle_bits\n    # return the toggled number\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the number of bits in n\n    num_bits = len(bin(n)[2:])\n\n    # Toggle the middle bits\n    for i in range(1, num_bits - 1):\n        if (n & (1 << i))!= 0:\n            n ^= 1 << i\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the number\n    bin_num = bin(n)[2:]\n\n    # Toggle the middle bits\n    middle_bits = bin_num[:2] + bin_num[-2:]\n    toggled_bits = middle_bits.replace('0', '1') + middle_bits.replace('1', '0')\n\n    # Convert the toggled bits back to decimal\n    toggled_num = int(toggled_bits, 2)\n\n    return toggled_num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # function to toggle the bits\n    def toggle_bits(n):\n        # initialize the result variable to 0\n        result = 0\n        # loop through the bits of the number\n        for i in range(31, -1, -1):\n            # get the current bit of the number\n            bit = (n >> i) & 1\n            # toggle the bit and append it to the result\n            result |= bit << i\n        # return the result\n        return result\n\n    # get the last two bits of the number\n    last_two = n & 3\n\n    # toggle the middle two bits\n    n &= ~(3 << 1)\n\n    # toggle the last two bits\n    n |= last_two\n\n    # toggle the first and last bits\n    n = toggle_bits(n)\n\n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & ((n >> 1) | (n << 1)))\n    n = n ^ (n & ((n >> 2) | (n << 2)))\n    n = n ^ (n & ((n >> 4) | (n << 4)))\n    n = n ^ (n & ((n >> 8) | (n << 8)))\n    n = n ^ (n & ((n >> 16) | (n << 16)))\n    n = n ^ (n & ((n >> 32) | (n << 32)))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract the middle two bits\n    middle_bits = (n & 0x0C) >> 2\n    # Toggle each of the middle two bits\n    n ^= middle_bits << 2\n    # Concatenate the first two bits with the middle two bits\n    n = (n & 0x03) | (middle_bits & 0x0C)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the index of the first and last bit\n    first_bit = 0\n    while n & (1 << first_bit) == 0:\n        first_bit += 1\n    last_bit = len(bin(n)) - 2\n    while n & (1 << last_bit) == 0:\n        last_bit -= 1\n\n    # Toggle the middle bits\n    for i in range(first_bit+1, last_bit):\n        n ^= (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        # Get the last bit of the number\n        last_bit = n % 2\n        # Get the second last bit of the number\n        second_to_last_bit = n // 2 % 2\n        # Get the first bit of the number\n        first_bit = n // 4 % 2\n        # Toggle the bits of the number except the first and the last bit\n        new_n = last_bit + (second_to_last_bit + first_bit) % 2\n        return new_n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return left_insertion(a[i+1:], x)\n    else:\n        return left_insertion(a[:i], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index - 1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): A sorted list.\n    x (int): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If there is no such element, index will be equal to len(a) and we need to insert at the end\n    if index == len(a):\n        return index\n    # If there is an element at index-1, we need to insert at index\n    elif a[index-1] < x:\n        return index\n    # If there is an element at index, we need to insert at index+1\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_str(string):\n    print(\"The string starts with a vowel.\")\nelse:\n    print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    def is_prime(n):\n        '''\n        This function returns True if n is a prime number.\n        '''\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def num_digits(n):\n        '''\n        This function returns the number of digits in the integer n.\n        '''\n        count = 0\n        while n > 0:\n            count += 1\n            n //= 10\n        return count\n    \n    def smallest_triangular(n):\n        '''\n        This function returns the smallest triangular number with n digits.\n        '''\n        digits = 0\n        triangular = 1\n        while num_digits(triangular) < n:\n            digits += 1\n            triangular *= 10\n        return triangular\n    \n    def smallest_index(n):\n        '''\n        This function returns the index of the smallest triangular number with n digits.\n        '''\n        index = 0\n        while True:\n            if num_digits(smallest_triangular(n)) >= n:\n                return index\n            index += 1\n    \n    def find_indices(n):\n        '''\n        This function returns a list of indices of all triangular numbers with n digits.\n        '''\n        indices = []\n        for i in range(1, 10**n):\n            if is_prime(i):\n                indices.append(smallest_index(num_digits(i)))\n        return indices\n    \n    return find_indices(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the total number of digits in the number\n    total_digits = n*2\n    \n    # calculate the square root of the total number of digits\n    square_root = math.sqrt(total_digits)\n    \n    # round the square root up to the nearest integer\n    index = int(square_root)\n    \n    # return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Find the first triangular number with n digits\n    triangular_num = 1\n    for i in range(1, n):\n        triangular_num = triangular_num * (i+1)\n    \n    # Find the index of the first triangular number\n    triangular_list = [1]\n    index = 0\n    for i in range(2, triangular_num+1):\n        if i == triangular_num:\n            triangular_list.append(i)\n            break\n        if i <= triangular_num//2:\n            triangular_list.append(i)\n            index += 1\n        else:\n            triangular_list.append(i)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n\n    # Initialize the variables for smallest triangular number and index\n    smallest_triangular_number = 0\n    index = 0\n\n    # Loop until smallest triangular number with n digits is found\n    while True:\n        smallest_triangular_number = (10**(n-1))*(9*smallest_triangular_number+1)\n        index += 1\n        \n        # Check if smallest triangular number with n digits is found\n        if int(str(smallest_triangular_number)[-n:]) >= 10**(n-1):\n            break\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initialize variables\n    i = 1\n    count = 0\n    triangular_num = 0\n\n    # loop through n digits from 2 to n\n    while count < n:\n\n        # calculate the next triangular number\n        triangular_num = i * (i + 1)\n\n        # check if the triangular number is smaller than the current smallest triangular number\n        if triangular_num < smallest_triangular_num:\n            smallest_triangular_num = triangular_num\n            count += 1\n\n        # increment i\n        i += 1\n\n    # return the index of the smallest triangular number\n    return i - count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return int(math.log10(n * (n+1)) + 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    def is_triangular(n):\n        \"\"\"\n        This function takes an integer n and returns True if n is a triangular number with n digits.\n        \"\"\"\n        return int(math.sqrt(5 * n + 1))**2 == 5 * n + 1\n\n    def smallest_triangular(n):\n        \"\"\"\n        This function takes an integer n and returns the smallest triangular number with n digits.\n        \"\"\"\n        i = 1\n        while True:\n            j = (i**2) + (2 * (i - 1))**2\n            if j > n:\n                return i\n            if is_triangular(j):\n                return j\n            i += 1\n\n    index = smallest_triangular(n)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Function to find the index of the smallest triangular number with n digits.\n    '''\n    # Initialize the smallest triangular number with n digits\n    smallest_triangular_number = 10**(n-1) \n\n    # Loop through all numbers from smallest triangular number to 1\n    for i in range(smallest_triangular_number, 1, -1): \n        # If the current number is triangular, update the smallest triangular number with n digits\n        if (math.sqrt(i*i+1))**2 + i*i == 0:\n            smallest_triangular_number = i\n            break\n\n    # Return the index of the smallest triangular number with n digits\n    return int(math.log10(smallest_triangular_number))\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    # Initialize variables \n    sum_of_digits = 0\n    triangular_no = 0\n    i = 1\n    \n    # Check if n is a power of 2 \n    if n == 1 or n == 2: \n        return 0\n    \n    # Loop through all triangular numbers up to n \n    while i <= n: \n        triangular_no = i**2\n        sum_of_digits = 0\n        \n        # Loop through the digits of triangular_no \n        while triangular_no > 0: \n            sum_of_digits += triangular_no % 10\n            triangular_no //= 10\n        \n        # If sum of digits is equal to n, return the index of triangular_no \n        if sum_of_digits == n: \n            return i\n        \n        # Increment i \n        i += 1\n    \n    # If triangular_no is not found with n digits, return -1 \n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        T = math.factorial(n) // (math.factorial(n-1) * math.factorial(1))\n        return int(T)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict[key] = value\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Initialize an empty dictionary\n    result = {}\n\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        result[test_tup[i]] = test_tup[i+1]\n\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    d = {}\n    # Loop through the tuple\n    for i in range(len(test_tup)):\n        # Check if the current element is the first element\n        if i == 0:\n            # If yes, add it as a key-value pair in the dictionary\n            d[test_tup[0]] = test_tup[1]\n        # Check if the current element is the last element\n        elif i == len(test_tup) - 1:\n            # If yes, add it as a key-value pair in the dictionary\n            d[test_tup[i]] = test_tup[i-1]\n        # If the current element is neither the first nor the last element, add it as a key-value pair in the dictionary\n        else:\n            d[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    else:\n        dict_obj = {}\n        for i in range(len(test_tup)):\n            if i % 2 == 0:\n                dict_obj[test_tup[i]] = test_tup[i+1]\n            else:\n                dict_obj[test_tup[i]] = test_tup[i-1]\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dictionary = {}\n    # Loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_tup) - 1):\n        dictionary[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Converts the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Initialize a variable to store the count of characters in the string\n    count = len(s)\n\n    # Check whether all the characters in the string are the same or not\n    if count == 0:\n        return True\n    elif s[0] == s[count-1]:\n        for i in range(1, count-1):\n            if s[i]!= s[0]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, and False otherwise.\n    \"\"\"\n    # Check if the length of the string is equal to 1\n    if len(s) == 1:\n        return True\n    \n    # Otherwise, check if all the characters in the string are equal\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # check if the length of the string is less than 2\n    if len(s) < 2:\n        return True\n\n    # convert the string to lowercase\n    s = s.lower()\n\n    # loop through the string and compare each character with the first character\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(s)\n\n    # Check if the length of the list is 1\n    if len(chars) == 1:\n        # If the length is 1, then all the characters are same\n        return True\n\n    # Otherwise, check if all the characters in the list are same\n    for i in range(1, len(chars)):\n        if chars[i]!= chars[0]:\n            # If any character is different, then all the characters are not same\n            return False\n\n    # If all the characters are same, then all_Characters_Same is True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to a list of characters\n    characters = list(s)\n    # Check if the length of the list is 1\n    if len(characters) == 1:\n        # If the length is 1, then all the characters are same\n        return True\n    # Check if all the characters are same or not\n    for i in range(len(characters)):\n        if characters[i]!= characters[0]:\n            # If any character is not same, then all the characters are different\n            return False\n    # If all the characters are same, then return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side/2)**2\n    area = (1/6)*math.sqrt(s*(1-s/3)*(1-s/3)*(1-s/3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)/2 * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    s = (side * (1 + math.sqrt(5))) / 5\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the area using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2) / 4\n    area = math.sqrt(s * (s-side) * (s-side-side) * (s-side-side-side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = (side * (side + math.sqrt(3)) + side + math.sqrt(3)) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - side) * (s - math.sqrt(3)) * (s - math.sqrt(3) + side)) ** 0.5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = (1/6) * (side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (side + math.sqrt(3) * side) / 2\n    # Calculate the area of the tetrahedron\n    area = (1/6) * semi_perimeter ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n\n    # Calculate the semi-perimeter\n    s = (side + math.sqrt(3)*side**2) / 4\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s*(s-side)*(s-math.sqrt(3)*side)*(s-math.sqrt(3)*side**2))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side**2) * (3 * math.sqrt(5))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2 / 4"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # calculate the number of rotations required\n    n = len(list)\n    rotations = m % n\n    \n    # rotate the list by specified number of rotations\n    for i in range(rotations):\n        list.append(list.pop(0))"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # calculate the number of rotations required\n    rotations = m % n\n    # if rotations is 0, no rotation is required\n    if rotations == 0:\n        return list\n    # calculate the start and end index of the rotation\n    start_index = n - rotations\n    end_index = n - 1\n    # rotate the list\n    for i in range(start_index, end_index):\n        temp = list[i]\n        list[i] = list[start_index + (i - start_index) % n]\n        list[start_index + (i - start_index) % n] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.append(list.pop(0))\n    for i in range(m):\n        temp = list.pop(0)\n        list.append(temp)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and the number of items to be rotated to the right.\n    It rotates the list by performing m%len(list) rotations.\n    '''\n    n = len(list)\n    m = m % n\n    # print(f\"Original list: {list}\")\n    # print(f\"Rotation count: {m}\")\n    # print(f\"Length of list: {n}\")\n\n    # Perform m rotations\n    for i in range(m):\n        # print(f\"Before rotation: {list}\")\n        last_element = list[n-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = last_element\n        # print(f\"After rotation: {list}\")"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m > n:\n        m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n\n    # If m is greater than n, do nothing\n    if m > n:\n        return list\n    \n    # Create a new list to store the items to be rotated\n    new_list = list[n-m:] + list[:n-m]\n    \n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a list to the right direction by n items.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n  # To handle the case where m is greater than or equal to n\n    list = list[-n:] + list[:-n]  # Append the last n items of the list to the front of the list\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for val in test_tup:\n        if val is None:\n            none_count += 1\n    return none_count > 0"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: x % 10 == 0 and all(int(digit) % 10 == 0 for digit in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(digit in str(x) for digit in str(startnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    def is_divisible_by_digits(num):\n        return all(num % int(digit) == 0 for digit in str(num))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return all(num % digit == 0 for digit in digits)\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digit(num)]\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(num % digit == 0 for digit in str(num))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = [int(d) for d in str(num)]\n        return all(num % d == 0 for d in digits)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Create a list of digits for each number in the range\n    digits = [int(digit) for digit in str(startnum) + str(endnum)]\n\n    # Loop through each number in the range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit in digits\n        if all(digit in str(num) for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Create a list of digits from 0 to 9\n    digits = list(range(10))\n    # Create an empty list to store the divisible numbers\n    result = []\n\n    # Loop through each number in the range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit it contains\n        divisible = all(num % digit == 0 for digit in digits)\n        # If the number is divisible, add it to the result list\n        if divisible:\n            result.append(num)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula A = r * sin(\u03b8)\n    A = r * math.sin(math.radians(a))\n    \n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        print(\"Angle should be less than or equal to 360 degrees.\")\n        return None\n\n    return math.pi * r * r * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: angle should be less than 360 degrees\")\n        return None\n    else:\n        area = r**2 * math.pi * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * a / 360\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi*(r**2)*a/360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    # Calculate the area using the formula: A = \u03c0r^2 * sin(\u03b1/2)\n    area = math.pi * r**2 * math.sin(a/2)\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    dp = [[[0 for j in range(p+1)] for i in range(n+1)] for k in range(m+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[n][m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # creating a 2D table to store lengths of longest common subsequences\n    L = [[0] * (p+1) for _ in range(m+1)]\n    # filling the first row and column\n    for i in range(1, m+1):\n        L[i][0] = 0\n    for j in range(1, n+1):\n        L[0][j] = 0\n    for j in range(1, p+1):\n        for i in range(1, m+1):\n            for k in range(1, n+1):\n                if X[i-1] == Y[k-1] and X[i-1] == Z[j-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n    # printing the length of longest common subsequences for the given three strings sequence\n    print(\"The length of the longest common subsequence for the given three strings sequence is: \", L[m][n])\n    # creating a list of characters to represent the common subsequence\n    lcs = [0] * (L[m][n] + 1)\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[k-1] and X[i-1] == Z[j-1]:\n            lcs[L[i][j] - 1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    # printing the common subsequence\n    print(\"The common subsequence is: \", ''.join(map(str, lcs)))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Function to calculate the length of the longest common subsequence of three strings\n    def longest_common_subsequence(X, Y, Z):\n        m, n, p = len(X), len(Y), len(Z)\n        dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, p + 1):\n                    if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                        dp[i][j] = dp[i - 1][j - 1] + 1\n                        if dp[i][j] > dp[i][k]:\n                            dp[i][k] = dp[i][j]\n                    elif X[i - 1] == Y[j - 1]:\n                        dp[i][j] = dp[i - 1][j]\n                    else:\n                        dp[i][j] = dp[i][j - 1]\n\n        return dp[m][n]\n\n    # Finding the length of the longest common subsequence\n    lcs_length = longest_common_subsequence(X, Y, Z)\n\n    # Printing the longest common subsequence\n    print(\"Longest Common Subsequence Length:\", lcs_length)\n    print(\"Longest Common Subsequence:\", lcs_of_three(X, Y, Z)[lcs_length - 1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y, Z): \n        m, n, p = len(X), len(Y), len(Z) \n        L = [[0] * (p + 1) for _ in range(m + 1)] \n  \n        for i in range(1, m + 1): \n            for j in range(1, n + 1): \n                if X[i - 1] == Y[j - 1]: \n                    L[i][j] = L[i - 1][j - 1] + 1 \n                else: \n                    L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n        return L[m][n] \n  \n    return lcs(X, Y, Z) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y): \n        M = len(X) \n        N = len(Y) \n        L = [[0 for j in range(N+1)] for i in range(M+1)] \n        for i in range(M+1): \n            for j in range(N+1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n        return L \n\n    L = lcs(X, Y) \n    m, n = len(X), len(Y) \n    L = lcs(Y, Z) \n    n, m = len(Y), len(Z) \n\n    for i in range(m+1): \n        for j in range(n+1): \n            if L[i][j] > L[i-1][j] and L[i][j] > L[i][j-1]: \n                L[i][j] = L[i-1][j] \n            elif L[i][j] > L[i][j-1]: \n                L[i][j] = L[i][j-1] \n\n    i, j = 0, 0 \n    lcs_string = \"\" \n    while i < m and j < n: \n        if X[i] == Y[j]: \n            lcs_string += X[i] \n            i += 1 \n            j += 1 \n        elif L[i][j-1] > L[i-1][j]: \n            i += 1 \n        else: \n            j += 1 \n\n    return lcs_string "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a dictionary to store the length of the LCS for all prefixes of X\n    # and Y\n    LCS_LENGTHS = {}\n\n    # Compute the length of the LCS for all prefixes of X and Y\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            if i == 0 or j == 0:\n                LCS_LENGTHS[(i, j)] = 0\n            elif X[i-1] == Y[j-1]:\n                LCS_LENGTHS[(i, j)] = LCS_LENGTHS[(i-1, j-1)] + 1\n            else:\n                LCS_LENGTHS[(i, j)] = max(LCS_LENGTHS[(i-1, j)], LCS_LENGTHS[(i, j-1)])\n\n    # Initialize an empty list to store the LCS for the given sequence\n    LCS = []\n\n    # Start from the last character of the sequence and build the LCS\n    i = len(X)\n    j = len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif LCS_LENGTHS[(i-1, j)] > LCS_LENGTHS[(i, j-1)]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS to get the correct order\n    LCS.reverse()\n\n    # Return the LCS as a string\n    return ''.join(LCS)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # create a 3D table to store lengths of longest common subsequence for all prefixes of X, Y, and Z\n    # LCS[i][j][k] will store the length of LCS of X[0:i], Y[0:j], and Z[0:k]\n    LCS = [[[0] * (p + 1) for j in range(p + 1)] for i in range(m + 1)]\n\n    # fill the table in bottom-up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n\n    # backtrack to find the LCS\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] == LCS[i][j][k]:\n            i -= 1\n        elif LCS[i][j - 1][k] == LCS[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[0]*(o+1) for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    return L[m][n][o]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n    \n    # Iterate over the words and replace the first letter with a space if it's capitalized\n    for i in range(len(words)):\n        if words[i][0].isupper() and words[i]!= words[i].upper():\n            words[i] ='' + words[i]\n    \n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate over the words and add spaces between capital letters\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Loop through the words and add spaces before the first letter of each word\n    for i in range(len(words)):\n        if i == 0 or words[i][0]!= words[i-1][0]:\n            words[i] = words[i].capitalize() + words[i][1:]\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    words = pattern.findall(str1)\n    result = []\n    for word in words:\n        capitalized_word = re.sub(r'\\b([A-Z])', r' \\1', word)\n        result.append(capitalized_word)\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b(\\w+?)\\b', r'\\1\\ ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-word characters\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Replace all non-word characters with spaces\n    str2 = re.sub(r'\\W+','', str1)\n    \n    # Split the string into words\n    words = str2.split()\n    \n    # Capitalize the first letter of each word\n    new_words = [word.capitalize() for word in words]\n    \n    # Join the words back into a string\n    result =''.join(new_words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    capitalized_words = []\n\n    for word in words:\n        if word.istitle():\n            capitalized_words.append(word)\n            capitalized_words.append(' ')\n\n    return ''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word\n    for i in range(len(words)):\n        # If the first letter of the word is capital, add a space before it\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match words starting with capital letters\n    pattern = r'(?<![A-Z])[A-Z](?=[a-z])'\n    # replace all matches in the string with a space followed by the corresponding word in lowercase\n    return re.sub(pattern, r' \\1', str1).lower()"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Split the input strings into a list of individual numbers\n    nums = [int(num) for num in nums_str if num.isdigit()]\n    \n    # Sort the list of numbers using the built-in sort() function\n    nums.sort()\n    \n    # Join the sorted numbers back into a string\n    sorted_nums = ''.join(str(num) for num in nums)\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n\n    # Convert the list of strings to a list of floats\n    nums = [float(num) for num in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert each string in the list to a numeric value\n    nums = [float(num) for num in nums_str]\n\n    # Sort the list numerically\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    nums_str = [str(num) for num in nums]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the integers in ascending order\n    nums.sort()\n    # Convert the sorted integers back to strings\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(int(num))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the list of strings into a list of integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list of integers using the built-in sort() function\n    nums.sort()\n    \n    # Convert the sorted list of integers back into a list of strings\n    nums_str = [str(num) for num in nums]\n    \n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list to list of integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the list of integers\n    nums_int.sort()\n\n    # Convert the sorted list of integers back to list of strings\n    nums_str = [str(num) for num in nums_int]\n\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    # split the input list into a list of numeric strings and a list of non-numeric strings\n    nums, non_nums = [], []\n    for s in nums_str:\n        try:\n            float(s)\n            nums.append(s)\n        except ValueError:\n            non_nums.append(s)\n\n    # sort the numeric strings numerically\n    nums.sort(key=float)\n\n    # concatenate the sorted numeric strings and the non-numeric strings into a single list\n    result = nums + non_nums\n\n    return result"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # add the list to the given list\n    test_list.extend(test_list)\n    # convert the list back to a tuple\n    test_tup = tuple(test_list)\n    return test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Loop through each item in the list\n    for item in test_list:\n        # Check if the item is a tuple\n        if isinstance(item, tuple):\n            # Loop through each item in the tuple\n            for subitem in item:\n                # Add the subitem to the running sum\n                test_sum = test_sum + subitem\n        else:\n            # Add the item to the running sum\n            test_sum = test_sum + item\n    # Return the total sum\n    return test_sum"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for num in test_tup:\n        test_list.append(num)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Add the given tuple to the given list.\n    \"\"\"\n    # Check if the input is a list or a tuple\n    if type(test_list) == list and type(test_tup) == tuple:\n        # Add the two tuples\n        result_tup = tuple(test_list) + tuple(test_tup)\n        # Convert the result to a list\n        result_list = list(result_tup)\n        # Return the result\n        return result_list\n    else:\n        # Raise an error if the input is not a list or a tuple\n        raise ValueError(\"Input must be a list and a tuple\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr):\n        if i == 0:\n            return arr[0] <= arr[1]\n        else:\n            return arr[i] <= arr[2*i] and arr[i] <= arr[2*i+1] and check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Check if the array is a heap or not.\n    for i in range(1, n):\n        if arr[i] < arr[i // 2]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr)//2:\n        if arr[2*i+1] > arr[i]:\n            return False\n        if arr[2*i+2] > arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If i is greater than length of the array, then array is already a min heap\n    if i > len(arr):\n        return True\n\n    # If left child of i is greater than right child of i, then array is not a min heap\n    if arr[i] < min(arr[2 * i + 1], arr[2 * i + 2]):\n        return False\n\n    # Recursively call the function for left and right sub-arrays\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n\n    # Check if the given array is already a min heap\n    if check_min_heap_helper(arr, 0):\n        print(\"Array is already a min heap\")\n    else:\n        print(\"Array is not a min heap\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    \n    if arr[i] < min(check_min_heap_helper(arr, 2*i+1), check_min_heap_helper(arr, 2*i+2)):\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i == 0:\n        return True\n    \n    if arr[i] <= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    elif arr[i] < arr[int((i - 1) / 2)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, int((i - 1) / 2))\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(1, n):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False, arr\n    else:\n        return True, arr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (2**(n-1) - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return 3 * jacobsthal_num((n-1)//2)\n\nn = int(input(\"Enter the value of n: \"))\nresult = jacobsthal_num(n)\nprint(\"The\", n, \"th jacobsthal number is:\", result)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_n = jacobsthal_num(n-1)\n        jacobsthal_num_n_1 = jacobsthal_num(n-2)\n        return jacobsthal_num_n + jacobsthal_num_n_1\n\nn = int(input(\"Enter a number to find the nth jacobsthal number: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    j = 0\n    while True:\n        j += 1\n        if j % 2 == 1:\n            continue\n        a = 1\n        b = 0\n        for _ in range(n-1):\n            a, b = b, a+b\n            if b % 2 == 0:\n                return j\n        if b == 0:\n            break"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10925, 21853, 43711, 87425, 174859, 349721, 699443, 1398889, 2797783, 5595569, 11191141, 22382285, 44764573, 89529147, 179058297, 358116601, 716233205, 1432466413, 2864932831, 5729865665, 11459731333, 22919462671, 45838925345, 91677850693, 183355701389, 366711402781, 733422805565, 1466845611135, 2933691222273, 5867382444549, 11734764889099, 23469529778199, 46939059556399, 93878119112801, 187756238225605, 375512476451213, 751024952902429, 1502049905804861, 3004099811609725, 6008199623219453, 12016399246438909, 24032798492877821, 48065596985755645, 96131193971511293, 192262387943022589, 384524775886045181, 769049551772090365, 1538099103544180733, 3076198207088361469, 6152396414176722941, 12304792828353445885, 24609585656706891773, 49219171313413783549, 98438342626827567101, 196876685253655134205, 39375337050731026"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two numbers of the sequence\n    jacobsthal_num = 0\n    jacobsthal_num_prev = 1\n    # Iterate through the sequence up to the nth term\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_num = jacobsthal_num_prev + jacobsthal_num\n        # Update the current number and the previous number\n        jacobsthal_num = next_num\n        jacobsthal_num_prev = jacobsthal_num\n    # Return the nth number in the sequence\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        j1 = 1\n        j2 = 1\n        for i in range(2, n//2+1):\n            j1 = (j1 * i) % 1000000007\n            j2 = (j2 * (i*i-1) % 1000000007) % 1000000007\n        jacobsthal = (j1 * j2) % 1000000007\n        return jacobsthal"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n\n    # Initialize variables to store minimum and count\n    min_val = None\n    count = 0\n\n    # Loop through the list of tuples and update count and minimum if necessary\n    for tup in test_list:\n        if count < K:\n            if min_val is None or tup[0] < min_val:\n                min_val = tup[0]\n                count += 1\n        elif tup[0] < min_val:\n            count -= 1\n\n    # Return the minimum value and count\n    return min_val, count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds the minimum K records from a list of tuples.\n    \"\"\"\n\n    # Sort the list based on the first element in each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables for the minimum and count\n    min_val = float('inf')\n    count = 0\n\n    # Iterate through the sorted list\n    for i in range(K):\n        # If the current minimum value is greater than the current tuple value, update the minimum and count\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n            count = 1\n        # If the current tuple value is greater than the current minimum value, increment the count\n        elif test_list[i][0] > min_val:\n            count += 1\n        # If the current tuple value is equal to the current minimum value, increment the count\n        else:\n            count += 1\n\n    # Return the minimum and count of the minimum K records\n    return min_val, count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds the minimum K records from the given test list.\n\n    :param test_list: The list of tuples containing the records.\n    :type test_list: list\n    :param K: The number of records to find the minimum for.\n    :type K: int\n    :return: A list containing the minimum K records from the given test list.\n    :rtype: list\n    \"\"\"\n\n    # Sort the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Create an empty list to store the minimum K records\n    min_records = []\n\n    # Traverse through the sorted list and add the records to the min_records list\n    for i in range(min(K, len(test_list))):\n        min_records.append(test_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list by the second element in each tuple\n    test_list = sorted(test_list, key=lambda x: x[1])\n    # initialize minimum k as infinity\n    min_k = float('inf')\n    # loop through the first K elements of the sorted list\n    for i in range(K):\n        # if the current element's second element is less than minimum k, update minimum k\n        if test_list[i][1] < min_k:\n            min_k = test_list[i][1]\n    # return the minimum k\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list: list of tuples (k, v) where k is the number of times v appears in the list and v is the value that appears K times\n    K: integer\n\n    Returns:\n    minimum_k_records: tuple list of tuples (k, v) where k is the minimum number of times v appears in the list and v is the value that appears K times\n    '''\n\n    # Sort the test_list based on the number of occurrences in descending order\n    test_list.sort(key=lambda x: x[0], reverse=True)\n\n    # Initialize a set to keep track of the values that appear K times\n    k_set = set()\n\n    # Initialize a list to store the minimum k records\n    minimum_k_records = []\n\n    # Iterate through the sorted test_list\n    for item in test_list:\n\n        # If the current value appears K times in the set, add it to the minimum_k_records list\n        if item[0] in k_set:\n            minimum_k_records.append((item[0], item[1]))\n\n        # If the current value does not appear K times in the set, add it to the k_set\n        if len(k_set) < K:\n            k_set.add(item[1])\n\n        # If the maximum number of values in k_set is reached, remove the smallest value in the set\n        elif len(k_set) == K:\n            smallest_value = min(k_set)\n            k_set.remove(smallest_value)\n\n    return minimum_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    \"\"\"\n    min_list = []\n    min_val = float('inf')\n\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n            if len(min_list) == K:\n                if test_list[i][0] < min_val:\n                    min_val = test_list[i][0]\n\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    min_k_records = []\n    for i in range(len(test_list)):\n        if len(min_k_records) < K:\n            min_k_records.append(test_list[i])\n        else:\n            if test_list[i][0] < min_k_records[0][0]:\n                min_k_records[0] = test_list[i]\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum K as infinity\n    min_k_records = float('inf')\n\n    # Traverse through the list and add the tuple with minimum value to a list\n    for i in range(K):\n        min_k_records = min(min_k_records, test_list[i][1])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_val = float('inf')\n    min_list = []\n    for tup in test_list:\n        if tup[0] < min_val:\n            min_val = tup[0]\n            min_list = [tup]\n        elif tup[0] == min_val and len(min_list) < K:\n            min_list.append(tup)\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_set = set()\n    for tup in test_list:\n        if len(min_set) < K:\n            min_set.add(tup)\n        else:\n            min_set.remove(min_set.pop())\n            min_set.add(tup)\n    return min_set"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common.append(l3[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common = []\n    \n    # iterate over all indices in the lists\n    for i in range(len(l1)):\n        # if the element at the current index is in all three lists, add it to the common list\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    \n    # return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common = []\n    # Iterate over each index in the first list\n    for i in range(len(l1)):\n        # Check if the current index appears in both lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If it does, add the element to the common list\n            common.append(l1[i])\n    # Return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = numbers[0]\n        second_smallest = float('inf')\n        for num in numbers[1:]:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) <= 1:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"The list should contain at least two numbers.\"\n    elif len(numbers) == 2:\n        return sorted(numbers)[1]\n    else:\n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if numbers[i] > numbers[j]:\n                    numbers[i], numbers[j] = numbers[j], numbers[i]\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Return the second smallest element in the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # sort the list in ascending order\n    sorted_list = sorted(numbers)\n    # return the second smallest number\n    return sorted_list[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b)*\"\n    result = re.search(pattern, text)\n    if result:\n        print(f\"Match found at index {result.start()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Define the pattern to match\n    pattern = r'a[b]*'\n    # Use the re.search() function to search for a match in the text\n    match = re.search(pattern, text)\n    # Check if the match was found\n    if match:\n        # Extract the matched string\n        matched_string = match.group(0)\n        # Print the matched string\n        print(matched_string)\n    else:\n        # Print a message if no match was found\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create a set to store unique reversed strings\n    reverse_set = set()\n    # Iterate through the string list\n    for string in test_list:\n        # Reverse the string and add it to the set\n        reverse_set.add(string[::-1])\n    # Initialize the count variable to 0\n    count = 0\n    # Iterate through the set to count the pairs of reverse strings\n    for string in reverse_set:\n        # Check if the current string is a reverse of a previous string in the set\n        if string in reverse_set:\n            # Increment the count variable by 1\n            count += 1\n    # Return the count of reverse pairs\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n                print(\"Reverse pair found: \", test_list[i], \" and \", test_list[j])\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # creating an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # iterating over the original list and converting each list to a tuple\n    for i in list1:\n        if isinstance(i, list):\n            # converting the list to a tuple\n            tuple_i = tuple(i)\n            # checking if the tuple is already present in the dictionary\n            if tuple_i in count_dict:\n                # incrementing the count of the tuple in the dictionary\n                count_dict[tuple_i] += 1\n            else:\n                # adding the tuple to the dictionary and setting its count to 1\n                count_dict[tuple_i] = 1\n    # returning the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of each sublist\n    sublist_counts = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Convert the list to a tuple and add it to the dictionary\n            sublist_counts[tuple(item)] = sublist_counts.get(tuple(item), 0) + 1\n    \n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    # loop through the input list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple already exists in the dictionary\n        if sublist_tuple in sublist_count:\n            # increment the count if it does\n            sublist_count[sublist_tuple] += 1\n        else:\n            # otherwise, add the tuple to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n    # return the dictionary of unique sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    # Iterate through each list in the list1\n    for lst in list1:\n        # Convert the list to a tuple\n        tuple_lst = tuple(lst)\n        # Check if the tuple exists in the dictionary\n        if tuple_lst in count_dict:\n            # If it does, increment the count by 1\n            count_dict[tuple_lst] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            count_dict[tuple_lst] = 1\n    # Return the dictionary with the count of each tuple\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to get unique elements\n    unique_elements = set(list1)\n    # Create a dictionary to store the count of elements in the list\n    count_dict = {}\n    # Iterate through the unique elements of the list\n    for element in unique_elements:\n        # Count the number of times the element appears in the list\n        count = list1.count(element)\n        # Add the count of the element to the dictionary\n        count_dict[element] = count\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary\n    sublist_dict = {}\n\n    # loop through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in sublist_dict:\n            # increment the count of the tuple\n            sublist_dict[tuple(sublist)] += 1\n        else:\n            # add the tuple to the dictionary with count 1\n            sublist_dict[tuple(sublist)] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            tup = tuple(list1[i][j:j+2])\n            if tup not in count:\n                count[tup] = 1\n            else:\n                count[tup] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        # convert the sublist to a tuple and count its occurrences\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Define an empty dictionary to store the count of unique tuples\n    count = {}\n    \n    # Iterate over every list in the list1\n    for lst in list1:\n        # Convert the list to a tuple\n        tup = tuple(lst)\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count:\n            count[tup] = 1\n        # If the tuple is already in the dictionary, increment the count by 1\n        else:\n            count[tup] += 1\n    \n    # Return the dictionary of count of unique tuples\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    set_list1 = set(list1)\n    \n    # Create an empty dictionary to store the counts of unique lists\n    count_dict = {}\n    \n    # Iterate through the unique lists in the set\n    for sublist in set_list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its value\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it with a value of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    \n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef is_decimal(num):\n    # Check if the number only contains digits and a decimal point\n    pattern = r'^-?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    elif num[0] == '-':\n        if len(num) == 1:\n            return False\n        elif not is_decimal(num[1:]):\n            return False\n    else:\n        if num.count('.') > 1:\n            return False\n        for digit in num:\n            if digit.isdigit() and int(digit) > 9:\n                return False\n            elif not digit.isdigit():\n                return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for digit in num:\n        if digit.isdigit() and int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts) == 2 and len(parts[0]) <= 2 and len(parts[1]) <= 2:\n            try:\n                float(parts[0])\n                float(parts[1])\n                return True\n            except ValueError:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    decimal_places = num.split('.')[1]\n    if len(decimal_places) > 2:\n        return False\n    for digit in decimal_places:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' not in num:\n            return False\n        parts = num.split('.')\n        if len(parts) > 2:\n            return False\n        for part in parts:\n            if len(part) > 2:\n                return False\n            if part.startswith('0') and len(part) > 1:\n                return False\n            if '.' in part and len(part) > 1 and part.index('.')!= len(part) - 1:\n                return False\n            if not part.isdigit():\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        # check if the number is an integer\n        int(num)\n        # check if the number has a precision of 2\n        if num.count('.') == 1 and len(num.split('.')[-1]) <= 2:\n            # check if the number is a valid float\n            float(num)\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the length of the array is 1 or greater\n    if len(arr) > 1:\n        # Set a set to store the unique elements of the array\n        unique_set = set()\n        # Loop through each element of the array\n        for element in arr:\n            # Check if the element is already in the set\n            if element not in unique_set:\n                # Add the element to the set\n                unique_set.add(element)\n            else:\n                # If the element is already in the set, the array contains only one distinct element\n                return False\n        # If all elements in the array have been checked and added to the set without being found to be unique, the array contains only one distinct element\n        return True\n    else:\n        # If the length of the array is 1, it contains only one distinct element\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element,\n    False otherwise.\n    '''\n\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_set = set()\n\n    # Iterate over the list of numbers\n    for num in arr:\n        # Add the number to the set\n        unique_set.add(num)\n\n    # Check if there's only one distinct element in the set\n    if len(unique_set) == 1:\n        # If there is only one distinct element, return True\n        return True\n    else:\n        # If there are more than one distinct element, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_numbers = list(set(arr))\n    if len(unique_numbers) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Initialize a set to store the distinct elements in the list\n    distinct_set = set()\n\n    # Iterate over each element in the list\n    for num in arr:\n        # If the element is already in the set, return False\n        if num in distinct_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            distinct_set.add(num)\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n\n    unique_flag = False\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j and arr[i] == arr[j]:\n                unique_flag = True\n                break\n        if unique_flag:\n            break\n\n    return unique_flag"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 3:\n        return True\n    elif 4 <= monthnum3 <= 6:\n        return True\n    elif 7 <= monthnum3 <= 9:\n        return True\n    elif 10 <= monthnum3 <= 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check whether the given month number is valid or not\n    if not (1 <= monthnum3 <= 12):\n        return \"Invalid month number\"\n\n    # Check whether the given month contains 30 days or not\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if dayofmonth > 29:\n                return \"Invalid date\"\n        else:\n            if dayofmonth > 28:\n                return \"Invalid date\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        if dayofmonth > 30:\n            return \"Invalid date\"\n    else:\n        if dayofmonth > 31:\n            return \"Invalid date\"\n\n    return \"Valid date\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number!\")\n        return\n    \n    # check if month contains 30 days\n    if monthnum3 % 2 == 0:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 in [4, 6, 9]:\n            if monthnum3 == 4:\n                if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                    return True\n                else:\n                    return False\n            else:\n                if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                    return True\n                else:\n                    return False\n        elif monthnum3 in [6, 9, 11]:\n            if monthnum3 == 6:\n                if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n                    return True\n                else:\n                    return False\n            elif monthnum3 == 9:\n                if year % 100!= 0 or year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n                    return True\n                else:\n                    return False\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number!\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the month number is within the range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number!\")\n        return\n    \n    # Get the number of days in the given month\n    if monthnum3 == 2:\n        days_in_month = 29\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        days_in_month = 30\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        days_in_month = 31\n    \n    # Check if the month number contains 30 days\n    if days_in_month == 30:\n        print(f\"{monthnum3} is a leap year.\")\n    elif days_in_month == 31:\n        print(f\"{monthnum3} contains 31 days.\")\n    else:\n        print(f\"{monthnum3} does not contain 30 or 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers, left and right, at the beginning of the array\n    left = 0\n    right = n - 1\n\n    # Initialize the minimum difference found so far\n    min_diff = float('inf')\n\n    # Loop through the array\n    while left < right:\n        # Calculate the difference between the current elements and the next element\n        diff = arr[right] - arr[left]\n\n        # Update the minimum difference found so far\n        min_diff = min(min_diff, diff)\n\n        # If the difference is less than the minimum difference found so far, update the pointers\n        if diff < min_diff:\n            left += 1\n        else:\n            right -= 1\n\n    # Return the minimum difference found so far\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n): \n        for j in range(i+1,n): \n            diff = arr[j] - arr[i] \n            if diff < min_diff: \n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its size as input, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference found so far\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[-1] - arr[-2]\n\n    # Iterate through the array from index 1 to n-2\n    for i in range(1, n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the minimum difference found so far\n        if diff < min_diff:\n            min_diff = diff\n\n        # Update the maximum difference if the current difference is greater than the maximum difference found so far\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    arr.sort() # sort the array in ascending order\n    min_diff = abs(arr[1]-arr[0]) # calculate the minimum difference between the first and second elements\n    for i in range(1,n-1): # iterate from the third element to the last element\n        temp_diff = abs(arr[i+1]-arr[i]) # calculate the difference between current element and its adjacent elements\n        if temp_diff < min_diff: # if the calculated difference is smaller than the previous minimum difference\n            min_diff = temp_diff # update the minimum difference\n    return min_diff # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables\n    min_diff = float('inf')\n\n    # Traverse through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array in ascending order\n    arr.sort()\n    \n    # Initializing minimum difference variable\n    min_diff = float('inf')\n    \n    # Looping through the array\n    for i in range(n-1):\n        # Calculating difference between two elements\n        diff = arr[i+1] - arr[i]\n        \n        # Updating minimum difference variable if current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Returning the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: the input array of integers\n    :param n: the length of the array\n    :return: the minimum difference between any two elements in the array\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as positive infinity\n    min_diff = float('inf')\n\n    # Initialize two pointers, one at the start and one at the end of the array\n    i = 0\n    j = n - 1\n\n    # Iterate through the array and calculate the difference between adjacent elements\n    while i < j:\n        diff = arr[j] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n        # Move the pointers towards the middle\n        if diff == 0:\n            return arr[i]\n        elif diff < 0:\n            i += 1\n        else:\n            j -= 1\n\n    # If no minimum difference is found, return None\n    return None"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize the minimum difference to be the difference between any two elements\n    min_diff = abs(arr[0] - arr[1])\n\n    # Iterate through the array and find the difference between adjacent elements\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function determines if the given number is a polite number or not. \n    A polite number is a number that ends in 3 or 5, unless it is divisible by 10, in which case it is a polite number that ends in 10.\n    \"\"\"\n    if n % 10 == 0:\n        return is_polite(n // 10)\n    elif n % 3 == 0 or n % 5 == 0:\n        return n\n    elif n % 2 == 0:\n        return is_polite(n + 1)\n    else:\n        return is_polite(n - 1)\n\n\ndef nth_polite_number(n):\n    \"\"\"\n    This function finds the nth polite number.\n    \"\"\"\n    return is_polite(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize the count of polite numbers as 0\n    count = 0\n\n    # Initialize the number of primes as 0\n    primes = 0\n\n    # Initialize the sum of the primes as 0\n    prime_sum = 0\n\n    # Iterate from 1 to sqrt(n)\n    for i in range(1, int(math.sqrt(n)) + 1):\n\n        # Check if i is a prime\n        if n % i == 0:\n\n            # If i is a prime, increment the count of polite numbers and update the prime sum\n            count += 1\n            prime_sum += i\n\n    # If n is not a prime, it is a polite number\n    if count == 0:\n        return True\n\n    # Check if the sum of the primes exceeds n\n    if prime_sum > n:\n        return False\n\n    # Check if n is a multiple of the count of polite numbers\n    if n % count == 0:\n        return True\n\n    # If n is not a multiple of the count of polite numbers, it is a polite number\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 2: \n        return n\n    else: \n        if n % 2 == 0: \n            return is_polite(n//2) * 3 + 1\n        else: \n            return is_polite((n-1)//2) * 5 + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return math.ceil((math.log(n) / math.log(2)) + 1)\n\ndef nth_polite_number(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    polite_numbers = [1, 4]\n    for i in range(2, n):\n        polite_numbers.append(is_polite(i))\n    return polite_numbers"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if num % 2 == 0:\n            count += 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        if is_prime(n):\n            return n\n        else:\n            i = 1\n            while True:\n                i += 1\n                if is_prime(i):\n                    return i\n\n    return nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Define the base case of the recursion\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_polite(n//2)\n    else:\n        return not is_polite(n//2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1]\n    for i in range(1, n):\n        if (i % 2 == 0 and i % 4 == 0) or (i % 2!= 0 and i % 4!= 0):\n            polite_numbers.append(polite_numbers[-1] * 3 + 1)\n        else:\n            polite_numbers.append(polite_numbers[-1] * 2 + 1)\n    return polite_numbers[-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = 1\n    while n > 0: \n        if n % 2 == 0: \n            polite_number += 1\n            n -= 1\n        else: \n            polite_number *= 3\n            n -= 1\n        n -= 1\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                return False \n        return True\n\n    polite_number = 0\n    prime_number = 2\n    count = 0\n\n    while count < n: \n        if is_prime(prime_number): \n            polite_number += prime_number\n            count += 1\n        prime_number += 1\n\n    return polite_number"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list of items and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    \n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n        \n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        result = []\n        for i in range(len(l1)-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return l1\n\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1).symmetric_difference(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff = []\n    # Loop through each element in the first list\n    for i in li1:\n        # Check if the element is present in the second list\n        if i in li2:\n            # If it is, remove it from the second list\n            li2.remove(i)\n        else:\n            # Otherwise, add it to the difference list\n            diff.append(i)\n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # set the intersection list to empty\n    inter = []\n    # loop through each element in list1\n    for i in li1:\n        # check if the element is present in list2\n        if i in li2:\n            # if it is, add it to the intersection list\n            inter.append(i)\n        # if the element is not present in list2, add it to the difference list\n        else:\n            # remove it from the intersection list\n            inter.remove(i)\n    # return the intersection list\n    return inter"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to zero\n    sum = 0\n    # loop through first n odd natural numbers\n    for i in range(n):\n        # if current number is odd, find the fourth power and add to sum variable\n        if i % 2 == 1:\n            sum += i**4\n    # return the sum of fourth power of first n odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function calculates the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, n+1):\n        if i % 2!= 0:\n            total_sum += i ** 4\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(n):\n        num = 2 * i + 1\n        sum_of_powers += num ** 4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    # initialize sum to 0\n    sum_of_powers = 0\n    \n    # iterate over first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # calculate fourth power of i\n        fourth_power = i**4\n        \n        # add fourth power to sum of powers\n        sum_of_powers += fourth_power\n        \n    # return sum of powers\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # initialize sum variable to 0\n    sum_of_powers = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate fourth power of i using exponentiation\n        fourth_power = i ** 4\n        # add fourth power to sum variable\n        sum_of_powers += fourth_power\n\n    # return sum of fourth powers\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    for i in exp:\n        if i in open_brackets:\n            stack.append(i)\n        elif i in close_brackets and stack and stack[-1] in open_brackets:\n            stack.pop()\n        else:\n            return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        elif exp[i] in [')', '}', ']']:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top - i) % 2!= 0:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', ')', '[', ']']:\n                if char == top:\n                    continue\n                else:\n                    return False\n            else:\n                if char == top:\n                    continue\n                elif char == '}':\n                    top = '{'\n                else:\n                    top = '['\n                if top!= char:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return \"Not Balanced\"\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return \"Not Balanced\"\n    if stack:\n        return \"Not Balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_str = []\n    for word in words:\n        if len(word)!= K:\n            new_str.append(word)\n    return \" \".join(new_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Create an empty list to store the filtered words\n    filtered_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        \n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            \n            # Add the word to the filtered_words list\n            filtered_words.append(word)\n            \n    # Join the filtered words into a single string and return it\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Use regex to search for pattern in text\n    matches = re.findall(pattern, text)\n\n    # If matches is not empty, return the first match\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern,text)\n        if match:\n            return match.group(),match.start(),match.end()\n        else:\n            return None\n    except:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.start(), match.end(), match.group()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re.findall to find all the matches and return a list of tuples with (match, index)\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    # loop through the matches and find the position of the match in the text using index\n    for match, index in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield (match, start, end)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        result = re.search(pattern, text)\n        if result:\n            return result.group(), result.start(), result.end()\n    except Exception as e:\n        print(\"Error: \", e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set([x for x in nums if x % 2 == 1])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if i % 2 == 0:\n            continue\n        if i not in nums:\n            return False\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a boolean variable to store the result\n    result = True\n    \n    # Loop through the list and check if the odd index contains odd numbers\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2!= 0:\n            result = False\n    \n    # Return the result\n    return result"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            print(i, \"contains odd numbers.\")\n        else:\n            print(i, \"does not contain odd numbers.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if len([num for num in nums[i::2] if num % 2!= 0]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(set(nums[i:])) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and i < len(nums):\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            odd_count += 1\n            if odd_count == 2:\n                return True\n    return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # set of vowels\n    count = 0 # variable to store count of vowels\n    \n    # loop through each character in the string\n    for i in range(len(test_str)-1):\n        # check if the character and its neighbor are both vowels\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # calculate the sum of non-repeated elements\n    sum = 0\n    for num, count in freq.items():\n        if count == 1:\n            sum += num\n            \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # loop through the dictionary and calculate the sum of non-repeated elements\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    # Iterate over the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum_of_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Loop through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the dictionary and find the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # iterate over each element in the list and increment its frequency in the dictionary\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # initialize the sum to zero\n    sum = 0\n    \n    # iterate over each element in the list again and add its frequency to the sum if it is not repeated\n    for elem in arr:\n        if freq[elem] == 1:\n            sum += elem\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # Find the sum of the non-repeated elements\n    non_repeated_sum = 0\n    for elem in arr:\n        if freq[elem] == 1:\n            non_repeated_sum += elem\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # Create a set of the non-repeated elements of the array\n    set_arr = set(arr)\n    \n    # Find the sum of the set\n    sum_set = sum(set_arr)\n    \n    return sum_set"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = []\n    for num in arr:\n        if num not in unique_arr:\n            unique_arr.append(num)\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of numbers and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store the unique elements in the list\n    unique_elements = set(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the unique elements in the set and add their values to the sum variable\n    for element in unique_elements:\n        sum += element\n    # Return the sum of non-repeated elements in the list\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # iterate over the list and group by consecutive duplicates using itertools.groupby()\n    grouped = groupby(list1)\n    # initialize an empty list to store the sublists\n    sublists = []\n    # iterate over the grouped iterator and append consecutive duplicates to sublists\n    for key, group in grouped:\n        sublists.append(list(group))\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(sorted(list1)) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(sorted(list1)):\n        if key == list1[len(list1) - 1]:\n            sublist = list(group)\n            sublist.append(list1[len(list1) - 1])\n            result.append(sublist)\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    return [list(group) for group in groups]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped_list = groupby(list1)\n    return [list(group) for key, group in grouped_list if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            continue\n        if key == list1[0]:\n            sublist = [list1[0]]\n        else:\n            sublist = list(group)\n        result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(lst):\n        group = list(g)\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            yield list(group)\n        else:\n            yield group"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublists[tuple(list1[i])] = sublists.get(tuple(list1[i]), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary to store the unique sublists and their occurrences\n    count = {}\n\n    # loop through each list in the main list\n    for sublist in list1:\n        # turn each sublist into a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in count:\n            # if it does, increment its value by 1\n            count[tuple(sublist)] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a value of 1\n            count[tuple(sublist)] = 1\n\n    # return the dictionary of unique sublists and their occurrences\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # use set() to remove duplicates from list1\n    unique_list = list(set(list1))\n    # create empty dictionary to store count of occurrences\n    count_dict = {}\n    # iterate over each unique list in list1\n    for lst in unique_list:\n        # create a new list containing only the lists that are equal to lst\n        sublist_lst = [lst2 for lst2 in list1 if lst2 == lst]\n        # count the length of the sublist and add it to count_dict\n        count_dict[lst] = len(sublist_lst)\n    # return count_dict\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in sublist_dict:\n            sublist_dict[sublist] += 1\n        else:\n            sublist_dict[sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for item in list1:\n        sublists.extend(item)\n    sublists = list(set(sublists))\n    sublist_count = {}\n    for sublist in sublists:\n        sublist_count[sublist] = sublist_count.get(sublist, 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = set()\n    for item in list1:\n        if isinstance(item, list):\n            sublists.add(tuple(item))\n        else:\n            continue\n    count = {}\n    for item in sublists:\n        count[item] = count.get(item, 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1_tuple = tuple(list1)\n    sublist_tuples = set()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_tuples.add(tuple(list1[i:j]))\n    sublist_dict = {}\n    for sublist in sublist_tuples:\n        if sublist in sublist_dict:\n            sublist_dict[sublist] += 1\n        else:\n            sublist_dict[sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if tuple(sublist) in count:\n            count[tuple(sublist)] += 1\n        else:\n            count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        # convert the list to a tuple and add it to the dictionary\n        sublists[tuple(item)] = sublists.get(tuple(item), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if total_sum - test_list[i] - test_list[j] in test_list:\n                print(test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb.extend(combinations(test_list, i+1))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Define the function to calculate the sum of a tuple\n    def tuple_sum(t):\n        return sum(t)\n\n    # Find all possible combinations of sums for each tuple in the test_list\n    combinations_of_sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                combinations_of_sums.append((tuple_sum(test_list[i]), tuple_sum(test_list[j]), tuple_sum(test_list[k])))\n\n    # Filter out combinations that do not have the given target sum\n    target_sum = sum(test_list[0])\n    filtered_combinations = [c for c in combinations_of_sums if sum(c) == target_sum]\n\n    # Return the filtered combinations\n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Iterate over all possible tuples from the given list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of two tuples in the list is equal to 0\n            if test_list[i][0] + test_list[j][0] == 0:\n                # If the sum is 0, then check if the tuples are present in the list\n                if (test_list[i][1], test_list[j][1]) in test_list:\n                    print(f\"({test_list[i][0]}, {test_list[i][1]}) and ({test_list[j][0]}, {test_list[j][1]})\")\n                # If both tuples are present in the list, print the combination\n                else:\n                    print(f\"({test_list[i][0]}, {test_list[i][1]}) and ({test_list[j][0]}, {test_list[j][1]}) (Not present in the list)\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list in ascending order based on sum of elements in the tuples\n    test_list.sort(key=lambda x: sum(x))\n\n    # generate combinations of sums using itertools.combinations function\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combination = tuple(test_list[i:j])\n            yield combination"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def find_combination_helper(arr, n, target, curr_sum):\n        if curr_sum == target:\n            print(curr_sum, end=' ')\n            return True\n        if curr_sum > target:\n            return False\n        for i in range(n):\n            if arr[i] <= target // n and find_combination_helper(arr[i+1:], n-1, target, curr_sum + arr[i]):\n                return True\n        return False\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n            if find_combination_helper(test_list[i], len(test_list[i]), test_list[i][0]+test_list[j][0], 0):\n                break"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Define a function to calculate the sum of a tuple\n    def tuple_sum(t):\n        return sum(t)\n\n    # Calculate the total sum of all tuples in the list\n    total_sum = sum(map(tuple_sum, test_list))\n\n    # Find all possible combinations of sums of length 2 to n\n    n = len(test_list)\n    comb_length = 2\n    combinations_sum = []\n\n    for i in range(n, 0, -1):\n        combinations_sum = combinations(combinations_sum, i)\n        combinations_sum = list(combinations_sum)\n\n        for comb in combinations_sum:\n            # Find all possible sums of length i in the current combination\n            length_sum = 0\n            for tup in comb:\n                length_sum += len(tup)\n            # Check if the sum is equal to the total sum\n            if length_sum == i and length_sum == total_sum:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Using itertools.combinations to find combinations of sums with tuples\n    comb = combinations(test_list, r=2)\n    return list(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # define a function to find the sum of a tuple\n    def sum_of_tuple(t):\n        return sum(t)\n\n    # generate all possible combinations of tuples in the given tuple list\n    combinations_list = list(combinations(test_list, len(test_list)))\n\n    # filter out the combinations where the sum of a tuple is not equal to the sum of the whole tuple\n    filtered_combinations = [x for x in combinations_list if sum_of_tuple(x) == sum(test_list)]\n\n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations_list.append(tuple(sorted((test_list[i], test_list[j]))))\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # get the count of divisors of n\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of divisors is even.\n    '''\n    if n <= 1:\n        return False\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if count == 0:\n        count = 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, False otherwise.\n    '''\n    def count_divisors_helper(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 2\n        if n > 1:\n            count += 1\n        return count\n\n    divisors = count_divisors_helper(n)\n    return divisors % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 2 and n % 2 == 0:\n        count -= 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is an even number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def count_odd_divisors(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    def count_even_divisors(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0 and n % (i+1)!= 0:\n                count += 2\n        return count\n\n    def count_divisors_and_compare(n):\n        odd_count = count_odd_divisors(n)\n        even_count = count_even_divisors(n)\n        if even_count == 0:\n            return odd_count\n        elif odd_count == 0:\n            return even_count\n        else:\n            return -1\n\n    if count_divisors_and_compare(n) % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count%2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum variable\n    sum = 0\n    # Traverse the array\n    for i in range(len(arr)):\n        # If the current element is odd, add its value to the sum variable\n        if i % 2!= 0:\n            sum += arr[i]\n    # Return the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n\n    for i in range(n-1):\n        for j in range(i+2, n+1, 2):\n            sum_odd += arr[j-2]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize sum variable to zero\n    sum_odd = 0\n    # Initialize the index of the current subarray\n    i = 0\n    # Initialize the length of the current subarray\n    length = 0\n    # Traverse through the array\n    while i < len(arr):\n        # If the current element is odd, add it to the sum of odd subarrays\n        if arr[i] % 2!= 0:\n            sum_odd += arr[i]\n        # If the current element is even, increment the length of the subarray\n        else:\n            length += 1\n            # If the length of the subarray becomes odd, add the sum of the previous subarray to the sum of odd subarrays and reset the length to zero\n            if length % 2!= 0:\n                sum_odd += sum(arr[i-length:i])\n                length = 0\n        # Increment the index of the current subarray\n        i += 1\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_of_subarrays = 0\n\n    # Loop through each element in the input array\n    for i in range(len(arr)):\n        # Check if the length of the subarray at index i is odd\n        if i == 0 or i == len(arr) - 1 or i == len(arr) // 2 or len(arr) % 2 == 1:\n            # Initialize a variable to store the sum of the subarray\n            subarray_sum = 0\n\n            # Loop through each element in the subarray\n            for j in range(i, len(arr)):\n                # Add the current element to the subarray sum\n                subarray_sum += arr[j]\n\n            # Add the sum of the subarray to the sum_of_subarrays variable\n            sum_of_subarrays += subarray_sum\n\n    # Return the sum of all odd length subarrays\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        if arr[0] % 2 == 1:\n            return arr[0]\n        else:\n            return 0\n    else:\n        # calculate sum of odd length subarrays\n        sum_odd_subarray = 0\n        for i in range(1, n-1):\n            if arr[i] % 2 == 1:\n                sum_odd_subarray += arr[i]\n        return sum_odd_subarray + odd_length_sum(arr[1:-1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    odd_length_sums = []\n    for i in range(1, n-1):\n        sum_of_subarray = 0\n        for j in range(i, n-1):\n            sum_of_subarray += arr[j]\n        odd_length_sums.append(sum_of_subarray)\n    return sum(odd_length_sums)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    odd_sum = 0\n    for i in range(1, n, 2):\n        if i-1 >= 0:\n            odd_sum += arr[i]\n            count += 1\n        else:\n            odd_sum += arr[i]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i)%2!= 0:\n                sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (k-j)%2 == 1:\n                    odd_sum += arr[k]\n\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # Loop through the input array\n    for i in range(len(arr)):\n        # Loop through the remaining elements in the input array\n        for j in range(i+1, len(arr)+1, 2):\n            # Check if the current subarray is odd length\n            if j-i == 1:\n                # Add the current subarray to the total sum\n                total_sum += arr[i:j]\n\n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / (cmax - cmin))\n    elif cmax == g:\n        h = 60 * ((b - r) / (cmax - cmin)) + 120\n    elif cmax == b:\n        h = 60 * ((r - g) / (cmax - cmin)) + 240\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = (cmax - cmin) / cmax\n\n    v = cmax\n\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the hue\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    # Calculate the saturation\n    if delta == 0:\n        s = 0\n    elif max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Calculate the value\n    v = max_val\n\n    # Convert values to percentages\n    h = h / 360 * 100\n    s = s * 100\n    v = v * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    # Convert RGB to decimal values between 0 and 1\n    r, g, b = r/255, g/255, b/255\n    \n    # Find the minimum and maximum values of RGB\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Find the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # If the maximum value is 0, then it is a gray color.\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate the hue\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # Normalize the hue value to 0 to 360 degrees\n        h = int(h*60) % 360\n        \n        # If the hue value is negative, add 360 degrees to it\n        if h < 0:\n            h += 360\n        \n        # Calculate the saturation and value\n        if max_val == r:\n            s = delta / (max_val + delta)\n        elif max_val == g:\n            s = delta / (max_val + delta)\n        else:\n            s = delta / (max_val + delta)\n            \n        # Convert the decimal values to integers and return as a tuple\n        h, s = int(h), int(s*255)\n        v = int(max_val*255)\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    h = 0\n    s = 0\n    v = max_value\n\n    if max_value!= 0:\n        s = delta / max_value\n\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n        if s == 0:\n            h = 0\n            s = 0\n            v = max_value\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find the maximum and minimum values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the hue and saturation values\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        delta = max_val - min_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h * 60\n        if h < 0:\n            h += 360\n        \n        s = delta / max_val\n    \n    # Calculate the value\n    v = max_val\n    \n    # Convert hue, saturation, and value to integers\n    h_int = int(h)\n    s_int = int(s * 255)\n    v_int = int(v * 255)\n    \n    return (h_int, s_int, v_int)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in RGB values (0-255) and returns HSV values (0-1).\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == 0:\n        h = 0\n        s = 0\n    elif delta == 0:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h /= 6\n        s = delta / max_val\n    v = max_val / 255\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    # Convert RGB to HEX\n    hex_color = '#{:02x}{:02x}{:02x}'.format(r, g, b)\n    # Convert HEX to RGB\n    rgb_tuple = tuple(int(hex_color[i:i+2], 16) for i in (1, 3, 5))\n    # Convert RGB to HSV\n    r, g, b = rgb_tuple\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = s = 0\n    else:\n        s = delta / cmax\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6\n        if h < 0:\n            h += 1\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, and b to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate difference between max and min values\n    delta = max_val - min_val\n    \n    # If max value is 0, then hue is undefined\n    if max_val == 0:\n        hue = 0\n    else:\n        # Calculate hue value\n        if r == max_val:\n            hue = (g - b) / delta\n        elif g == max_val:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n        \n        # If hue value is greater than 1, make it in the range 0-6\n        if hue < 0:\n            hue += 6\n        \n        # Convert hue value to integer\n        hue = int(hue * 60)\n    \n    # If max value is 0, then saturation and value are undefined\n    if max_val == 0:\n        saturation = 0\n        value = 0\n    else:\n        # Calculate saturation value\n        if delta == 0:\n            saturation = 0\n        else:\n            saturation = delta / max_val\n        \n        # Calculate value value\n        value = max_val\n    \n    # Return the converted hsv color as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the maximum and minimum values of r, g, and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the value of the hsv color model for the maximum value\n    if max_val == r:\n        h = (g - b) / diff\n    elif max_val == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n\n    # Calculate the value of the hsv color model for the minimum value\n    if min_val == r:\n        s = diff / (max_val + min_val)\n    elif min_val == g:\n        s = diff / (max_val + min_val)\n    else:\n        s = diff / (max_val + min_val)\n\n    # Convert the h, s, and v values to percentages\n    h = h / 65535 * 100\n    s = s / 255 * 100\n    v = max_val / 255 * 100\n\n    # Return the hsv values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60*(g - b)/delta\n    elif cmax == g:\n        h = 60*(2 + (b - r)/delta)\n    else:\n        h = 60*(4 + (r - g)/delta)\n    if h < 0:\n        h += 360\n    s = delta/cmax\n    v = cmax\n    hsv = (h, s, v)\n    return hsv\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += num\n    return count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # loop through the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # find the product of even and odd numbers\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n    \n    # return the result\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        product *= min(num, 2 * num)\n    \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return \"No even or odd numbers found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    Function to find the product of first even and odd number of a list\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 and odd_count == 0:\n        print(\"No even or odd numbers found\")\n    elif even_count == 0:\n        print(\"The product is\", lst[odd_count])\n    elif odd_count == 0:\n        print(\"The product is\", lst[even_count])\n    else:\n        print(\"The product is\", lst[even_count] * lst[odd_count])"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count = 0\n    product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n            if count == 1:\n                product = list1[i]\n        else:\n            count = 0\n            product *= list1[i]\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    # Return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for elem in str_list:\n        int_list.append(int(elem))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # remove the quotes from the string\n    test_str = test_str.strip(\"'\")\n    # split the string into a list of strings\n    split_str = test_str.split(',')\n    # create an empty integer list\n    int_list = []\n    # iterate through the list of strings and convert each string to an integer\n    for string in split_str:\n        int_list.append(int(string.strip()))\n    # convert the integer list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = list(test_str)\n    int_list = []\n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            int_list.append(int(str_list[i]))\n        else:\n            break\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for word in test_str.split(','):\n        int_tuple += (int(word),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    int_list = []\n    for item in test_str:\n        try:\n            int_list.append(int(item))\n        except ValueError:\n            pass\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by whitespace and convert each element to an integer\n    int_tuple = tuple(int(x) for x in test_str.split())\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip('(').strip(')').strip(',').split(',')\n    return tuple(int(x) for x in test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # convert string to list of strings\n    test_str = test_str.split(',')\n\n    # create empty integer list\n    int_list = []\n\n    # iterate over list of strings and append to integer list\n    for num in test_str:\n        int_list.append(int(num))\n\n    # return integer list as tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple([int(x) for x in test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\")])\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a: List of values in sorted order.\n    x: The value to search for.\n\n    Returns:\n    Index of the right insertion point for the specified value.\n    \"\"\"\n    # Use binary search to find the insertion point for x.\n    i = bisect.bisect_right(a, x)\n\n    # If x is greater than the last element in the list, we have found the right insertion point.\n    if i == len(a):\n        return i\n\n    # If x is less than the first element in the list, we need to insert x before the first element.\n    elif x < a[0]:\n        return 0\n\n    # Otherwise, we have found the right insertion point by comparing each pair of adjacent elements.\n    else:\n        # Compare the current element with x.\n        if a[i] > x:\n            return i\n        # If the current element is less than x, compare the next element with x.\n        else:\n            return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return a[index - 1] + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return idx\n    if a[idx] == x:\n        return idx\n    else:\n        return idx+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect_right to find the index where the value should be inserted\n    index = bisect.bisect_right(a, x)\n    # If the value is greater than or equal to the last element in the list, then it should be inserted at the end of the list\n    if index == len(a):\n        return len(a)\n    # Otherwise, it should be inserted at the index just before that element\n    return index - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif x < a[i]:\n        return i - 1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect module to find the insertion point for x in a.\n    i = bisect.bisect_right(a, x)\n\n    # If x is already present, return the insertion point.\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # If x is greater than all elements in the list, return the length of the list.\n    elif i == len(a):\n        return len(a)\n\n    # If x is smaller than the first element in the list, return 0.\n    elif x < a[0]:\n        return 0\n\n    # If x is greater than the last element in the list, return the length of the list.\n    elif x > a[-1]:\n        return len(a)\n\n    # If x is in between two elements in the list, return the insertion point.\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i += 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using the binary search algorithm to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the right insertion point using bisect_right\n    pos = bisect.bisect_right(a, x)\n    return pos"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?i)(a+b+b+)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a+b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(b{3})')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'\\b(a)\\1{2}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_list, test_str)\n    return new_tup\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the tuple and the string\n    new_tuple = test_tuple + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the string to the tuple\n    new_tuple = (test_str, test_tuple)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + (test_str,))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into one list\n    combined_list = test_list + [test_str]\n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): List of values to be included in the new tuple.\n    test_str (str): String to be included in the new tuple.\n\n    Returns:\n    A new tuple containing the values of `test_list` and `test_str`.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((str(test_list[i])+test_str) for i in range(len(test_list)))\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == len(nums)//2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i]) % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(nums[i]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n\n    Args:\n    nums (list): List of numbers.\n\n    Returns:\n    bool: True if every even index contains even numbers. False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if not all(x % 2 == 0 for x in nums[i:]):\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    # loop through the list and check if the even index contains an even number\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_indices = [i for i, x in enumerate(nums) if i % 2 == 0]\n\n    for index in even_indices:\n        if len(set(nums[index:index+2])) % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = [item for sublist in test_tup for item in sublist]\n    flat_list = [item for sublist in nested_list for item in sublist]\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    non_nested = []\n    \n    # Loop through the tuples in the input tuple\n    for tup in test_tup:\n        # If the tuple is not a tuple, add it to the non-nested list\n        if type(tup)!= tuple:\n            non_nested.append(tup)\n        # If the tuple is a tuple, recursively call the function on the tuple\n        else:\n            non_nested.append(remove_nested(tup))\n    \n    # Return the list of non-nested tuples\n    return non_nested"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result += i\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            new_tup.extend(remove_nested(elem))\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        if type(test_tup) == tuple:\n            test_tup = tuple(x for x in test_tup if type(x)!= tuple)\n            if len(test_tup) == 0:\n                break\n        else:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the given tuple is not a tuple\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    # Check if the tuple contains tuples\n    elif any(isinstance(item, tuple) for item in test_tup):\n        # Recursively remove tuples from the nested tuple\n        return remove_nested(test_tup)\n    # If the tuple does not contain tuples, return the tuple without any nested tuples\n    else:\n        return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    for i, item in enumerate(test_tup):\n        if type(item) == tuple:\n            test_tup[i] = remove_nested(item)\n    return [item for item in test_tup if type(item)!= tuple]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if type(sublist) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters:\n    arr (list): The sorted array in which the element needs to be searched.\n    x (int): The element to be searched in the array.\n\n    This function returns the last position of the element x in the sorted array arr.\n    If the element is not present in the array, it returns -1.\n    \"\"\"\n\n    # Initialize the last position to -1\n    last_pos = -1\n\n    # Iterate over the array and check if the current element is equal to x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # If it is, update the last position to the current index\n            last_pos = i\n\n    # Return the last position of x in the array\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a number x as input and returns the last\n    position of x in the array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments:\n    - arr: the sorted array to search in\n    - x: the element to search for\n\n    This function returns the index of the last occurrence of x in the array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input and returns the index of the last occurrence of x in the array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            while mid + 1 < high and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        \n        if arr[mid] < x:\n            low = mid + 1\n            \n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n\n    while low<=high:\n        mid = (low+high)//2\n\n        if arr[mid] == x:\n            while mid>0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a\\w+b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for key in dict.keys():\n        sum_value += dict[key]\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize a variable to store the sum of odd numbers\n    sum_odd = 0\n\n    # Loop through all the numbers within the given range\n    for i in range(n):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add the current number to the sum of odd numbers\n            sum_odd += i\n\n    # Return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n    # return the sum of odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range (l, r): \").split())\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    print(\"The sum of all odd natural numbers within the range is:\", sum_of_odds)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    while l <= r:\n        if l % 2!= 0:\n            total += l\n        l += 1\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # take input from user for l and r\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # initialize sum to 0\n    sum_of_odds = 0\n\n    # loop through all odd numbers within the given range\n    for num in range(l, r+1, 2):\n        sum_of_odds += num\n\n    # return the sum of all odd numbers within the given range\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", total)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # iterate over each element in the array\n    for i in arr:\n        # add the current element to the sum variable\n        sum += i\n    # return the final sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for i in arr:  \n        total += i  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize a variable to store the sum\n    total = 0\n\n    # iterate over each element in the array\n    for num in arr:\n        # add the element to the total\n        total += num\n\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initializing the sum variable to 0\n    total = 0\n    # looping through each element in the array\n    for num in arr:\n        # adding each element to the total variable\n        total += num\n    # returning the final total\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # If d is greater than the number of bits in n, return n\n    if d > 32:\n        return n\n    # If d is less than or equal to zero, return n\n    elif d <= 0:\n        return n\n    # Calculate the number of bits to rotate\n    num_bits = 32 - d\n    # Calculate the mask to use for shifting the bits\n    mask = (1 << num_bits) - 1\n    # Calculate the shifted value\n    shifted_value = (n & mask) << d\n    # Calculate the original value without the shifted bits\n    original_value = n & ((1 << d) - 1)\n    # Return the shifted value ORed with the original value\n    return shifted_value | original_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff   # mask to get the last bit\n    shifted_n = n << d    # left shift n by d bits\n    shifted_n = shifted_n | (n >> (32 - d))   # OR n with shifted_n\n    return shifted_n & mask   # mask to get the last d bits of shifted_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Parameters:\n    n (int): the number to rotate\n    d (int): the number of bits to rotate left by\n\n    Returns:\n    int: the rotated number\n\n    \"\"\"\n    # Mask to shift all bits to the left by d\n    mask = (1 << d) - 1\n\n    # Shift the bits to the left by d\n    rotated = (n << d) | (n >> (32 - d))\n\n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask # Mask out all bits except the first d bits\n    \n    # Shift all bits to the left by d bits\n    n = n << d\n    \n    # Shift all bits to the left by 32-d bits\n    n = n | (n >> (32-d))\n    \n    # Mask out all bits except the last d bits\n    n = n & mask\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Reverse the binary representation of n and then shift it by d bits to the left\n    # This will give the rotated number\n    rotated_number = (n >> d) | (n << (32 - d))\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes an integer n and an integer d as input and returns the result of rotating the bits of n to the left by d bits. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    d %= num_bits\n    \n    # Rotate left the number\n    if d > 0:\n        # Rotate left by less than 32 bits\n        n = (n << d) | (n >> (num_bits - d))\n    else:\n        # Rotate left by more than 32 bits\n        n = (n << (num_bits + d)) | (n >> d)\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d %= 32  # If d is greater than or equal to 32, it means we need to rotate back to the beginning of the number\n    if d == 0:\n        return n\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xffffffff  # Use bitwise AND to ensure that the result is still a 32 bit number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expressions to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text.strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, z+1):\n        if i == y or i == x or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    \n    if x == y == z:\n        count += 1\n        \n    if y == z == x:\n        count += 1\n        \n    if x == y == z:\n        count += 1\n        \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        if y == x:\n            count += 1\n        elif z == x:\n            count += 1\n        elif y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Initialize count and current position\n    count = 0\n    current_position = min_element\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        # If the current element is greater than the minimum element, increment the count and move to the left\n        if arr[i] > min_element:\n            count += 1\n            current_position = arr[i]\n        # If the current element is smaller than the minimum element, move to the right\n        else:\n            current_position = arr[i]\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Initialize variables to count the number of rotations required\n    count = 0\n    n = len(arr)\n    # Traverse the array from left to right\n    for i in range(n):\n        # Check if the element at the current index is greater than the next element\n        if arr[i] > arr[i+1]:\n            # If it is, increment the count and move to the next element\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            # if the element is smaller than its adjacent element, rotate the array\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    count = 0\n    \n    # find the minimum and maximum elements in the array\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    \n    # rotate the array to get a sorted array\n    if min_val!= max_val:\n        if min_val < max_val:\n            mid = (min_val + max_val) // 2\n            left = [x for x in arr if x < mid]\n            right = [x for x in arr if x >= mid]\n            count += count_rotation(left)\n            count += count_rotation(right)\n        else:\n            mid = (min_val + max_val) // 2\n            left = [x for x in arr if x <= mid]\n            right = [x for x in arr if x > mid]\n            count += count_rotation(left)\n            count += count_rotation(right)\n    \n    # find the number of rotations required to generate a sorted array\n    if n > 1:\n        count += n // 2\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Initialize the count and count of minimum element\n    count = 0\n    count_min = 0\n\n    # Iterate over all elements\n    for i in range(n - 1):\n        # If the current element is smaller than the minimum element\n        if arr[i] < min_element:\n            # Increment the count of minimum element\n            count_min += 1\n            # If the count of minimum element becomes equal to n, increment the count\n            if count_min == n:\n                count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # create a hash table to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n\n    # check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n\n    # check if the array can be rotated\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return i+1\n    return 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if n is less than 1\n    if n < 1:\n        return False\n    # check if n is equal to 1\n    elif n == 1:\n        return True\n    # check if n is already a square number\n    elif n == int(n ** 0.5) ** 2:\n        return True\n    # check for the perfect squares\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n ** 0.5) + 1\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n ** 0.5)\n    if n == root ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    It returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Check if the number is a perfect square\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # If the number is less than 2, then it cannot be a perfect square\n    if n < 2:\n        return False\n\n    # Calculate the square root of the number\n    root = n ** 0.5\n\n    # Check whether the square root is an integer or not\n    if root.is_integer():\n        # If it is an integer, then it is a perfect square\n        return True\n    else:\n        # If it is not an integer, then it is not a perfect square\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    root = int(n ** 0.5)\n    if root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check for even cases\n    if n % 2 == 0:\n        return False\n    \n    # check for odd cases\n    sqr = int(n ** 0.5)\n    for i in range(sqr, 0, -1):\n        if i ** 2 == n:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        if arr[0] % 2 == 0:\n            return True\n        else:\n            return False\n    elif len(arr) % 2 == 0:\n        return (is_product_even(arr[0:len(arr)//2]) and is_product_even(arr[len(arr)//2:]))\n    else:\n        return (is_product_even(arr[0:len(arr)//2]) or is_product_even(arr[len(arr)//2:]))"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    for num in arr: \n        product *= num\n\n    if product % 2 == 0: \n        print(\"Product of even numbers is: \", product)\n    else: \n        print(\"Product of odd numbers is: \", product)\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # calculate the product of all numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # check whether the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            if i > 0:\n                current_sum += lists[i-1][j]\n            if j > 0:\n                current_sum += lists[i][j-1]\n            if i > 0 and j > 0:\n                current_sum += max_list[i-1][j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i][j]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = [lists[i]]\n        elif current_sum == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    \n    for l in lists:\n        total_sum = sum(l)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = l\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum list to be the empty list\n    max_sum_lists = []\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize the sum of the elements in the current list to be 0\n        current_sum = 0\n        # Loop through each element in the current list\n        for num in lst:\n            # Add the current element to the sum\n            current_sum += num\n        # If the current sum is greater than the maximum sum, update the maximum sum list\n        if current_sum > max_sum:\n            max_sum_lists = [lst]\n        elif current_sum == max_sum and lst not in max_sum_lists:\n            max_sum_lists.append(lst)\n    # Return the maximum sum list(s)\n    return max_sum_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                temp = lists[i][j] + lists[i][j+1] + lists[i][j+2]\n            elif j == len(lists[i])-1:\n                temp = lists[i][j-1] + lists[i][j] + lists[i][j-2]\n            else:\n                temp = lists[i][j-1] + lists[i][j] + lists[i][j+1]\n            if temp > max_sum:\n                max_sum = temp\n                max_list = [lists[i][j]]\n            elif temp == max_sum and lists[i][j] not in max_list:\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input, and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        subsum = sum(sublist)\n        # Check if the new sum is greater than the current maximum sum\n        if subsum > max_sum:\n            # Update the maximum sum and corresponding list\n            max_sum = subsum\n            max_list = sublist\n    # Return the maximum sum and list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function finds the maximum sum of lists in a given list of lists.\n    The function takes in a list of lists as an argument.\n    It returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum of lists in the given list of lists\n    max_sum = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, lists[i][j])\n            else:\n                max_sum = max(max_sum, lists[i][j] + lists[i-1][j] + lists[i][j-1] - lists[i-1][j-1])\n    # Find the list in the given list of lists with the maximum sum\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 or j == 0:\n                if lists[i][j] == max_sum:\n                    max_lists.append(lists[i])\n            else:\n                if lists[i][j] == max_sum:\n                    max_lists.append(lists[i-1])\n                    max_lists.append(lists[i])\n                    max_lists.append(lists[i-1])\n                    break\n    return max_lists"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    uppercase_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count > uppercase_run:\n                uppercase_run = uppercase_count\n        else:\n            uppercase_count = 0\n    return uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is uppercase, add to current run and update max_run if necessary\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        # if the character is lowercase, reset current run\n        else:\n            current_run = 0\n    \n    # return max_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    run_start = 0\n    max_run = 0\n    max_uppercase_count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if i == len(test_str) - 1:\n                max_run = uppercase_count\n                max_uppercase_count = uppercase_count\n        else:\n            if uppercase_count > max_uppercase_count:\n                max_run = max_uppercase_count\n            elif uppercase_count > 0:\n                max_run = uppercase_count - 1\n            max_uppercase_count = max(max_uppercase_count, uppercase_count)\n            uppercase_count = 0\n            run_start = i + 1\n\n    if max_run > 0:\n        return max_run\n    else:\n        return None"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    start = 0\n    end = 0\n    max_run = 0\n    max_end = 0\n    \n    # Iterate over the characters of the string\n    for i in range(len(test_str)):\n        \n        # If the character is uppercase and the previous character was not uppercase,\n        # update the start and end indices of the current run\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            start = i\n            end = i\n        \n        # If the character is not uppercase and the previous character was uppercase,\n        # update the end index of the current run\n        elif not test_str[i].isupper() and test_str[i-1].isupper():\n            end = i\n        \n        # If the end index has exceeded the length of the string, reset the end index to 0\n        if end >= len(test_str):\n            end = 0\n        \n        # If the current run is longer than the previous longest run, update the maximum run and its end indices\n        if end - start + 1 > max_run:\n            max_run = end - start + 1\n            max_end = start\n    \n    # Return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables for start and end of the current run\n    current_start = 0\n    current_end = 0\n    current_run_length = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was not uppercase,\n        # update the start and end of the current run and its length\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            current_start = i\n            current_run_length += 1\n            current_end = i + 1\n            \n        # If the current character is not uppercase or if it is the last character of the string,\n        # update the end of the current run and its length\n        elif not test_str[i].isupper() or i == len(test_str)-1:\n            current_run_length += 1\n            \n    # Return the maximum run of uppercase characters in the string\n    return test_str[current_start:current_end], current_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    run_count = 0\n    start_index = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            if run_count > max_run:\n                max_run = run_count\n                start_index = i - run_count + 1\n        else:\n            upper_count = 0\n        run_count = upper_count\n        if upper_count > max_run:\n            max_run = upper_count\n            start_index = i - upper_count + 1\n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    curr_run = 0\n    prev_char = ''\n    \n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n        \n        prev_char = char\n        \n    if curr_run > max_run:\n        max_run = curr_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 1\n    run_length = 0\n    # Iterate over the string\n    for i in range(1, len(test_str)):\n        # If the character is uppercase, add 1 to the run length\n        if test_str[i].isupper():\n            run_length += 1\n        # If the character is not uppercase, reset the run length to 0\n        else:\n            run_length = 0\n        # If the run length is greater than the current maximum, update the maximum\n        if run_length > max_run:\n            max_run = run_length\n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase = False\n\n    for char in test_str:\n        if char.isupper():\n            if uppercase:\n                current_run += 1\n            else:\n                max_run = current_run\n                current_run = 1\n            uppercase = True\n        else:\n            if uppercase:\n                current_run += 1\n            uppercase = False\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n            max_start = i\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is odd, return it and exit the loop\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        print(\"All the elements are present in the tuple.\")\n    else:\n        print(\"Not all the elements are present in the tuple.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"The K value is present in the given tuple {test_tup}\")\n    else:\n        print(f\"The K value is not present in the given tuple {test_tup}\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[K:]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n\n    if len(test_tup) >= K:\n        for i in range(len(test_tup) - K + 1):\n            if all(test_tup[i + j] == test_tup[j] for j in range(K)):\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    '''\n\n    # Check if all the elements in the tuple are greater than k\n    if all(x > K for x in test_tup):\n        print(\"All elements in the tuple are greater than k.\")\n        return True\n    else:\n        print(\"All elements in the tuple are not greater than k.\")\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1) == len(test_tup2):\n        # Loop through the elements of the second tuple\n        for i in range(len(test_tup2)):\n            # Compare the elements of the second tuple with the elements of the first tuple\n            if test_tup2[i] > test_tup1[i]:\n                return False\n        # If all elements of the second tuple are smaller than their corresponding elements in the first tuple, return True\n        return True\n    else:\n        # If the length of the first tuple is not equal to the length of the second tuple, return False\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element of the first tuple is smaller than the element of the second tuple at the same index\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    # If we've made it this far, all elements of the first tuple are smaller than their corresponding elements in the second tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # loop through the elements of the first tuple and compare to the corresponding elements in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The second tuple contains an element that is greater than or equal to the corresponding element in the first tuple.\")\n            return\n    print(\"Both tuples contain the same elements in the same order.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"The element in the second tuple at index\", i, \"is not smaller than the corresponding element in the first tuple.\")\n            return\n    \n    print(\"All elements in both tuples are smaller than their corresponding elements in the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]