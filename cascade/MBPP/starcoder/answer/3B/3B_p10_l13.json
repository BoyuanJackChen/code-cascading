[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the input tuples to lists and sort them\n    list1 = sorted(list(test_tup1))\n    list2 = sorted(list(test_tup2))\n\n    # Initialize a set to store the shared elements\n    shared_elements = set()\n\n    # Iterate over the lists and compare elements\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            shared_elements.add(list1[i])\n\n    # Return the sorted list of shared elements\n    return sorted(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Extract the elements from the tuples\n    tup1_list = test_tup1[0]\n    tup2_list = test_tup2[0]\n\n    # Find the shared elements between the two lists\n    shared_elements = [element for element in tup1_list if element in tup2_list]\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    return sorted(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Convert the tuples to sets to remove duplicates and then back to lists\n    set_tup1 = list(set(test_tup1))\n    set_tup2 = list(set(test_tup2))\n\n    # Iterate through each element of the first list and check if it is in the second list\n    shared_elements = []\n    for elem in set_tup1:\n        if elem in set_tup2:\n            shared_elements.append(elem)\n\n    # Return the shared elements as a tuple\n    return tuple(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples into lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Create an empty set to store the shared elements\n    shared_set = set()\n    # Iterate through the lists and add the shared elements to the set\n    for i in range(min(len(list1), len(list2))):\n        if list1[i] == list2[i]:\n            shared_set.add(list1[i])\n    # Convert the set back into a tuple\n    shared_tup = tuple(shared_set)\n    return shared_tup"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is not prime or not.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is equal to 2 or 3\n    elif n == 2 or n == 3:\n        return False\n    # Check if the number is divisible by any number from 4 to sqrt(n)\n    else:\n        for i in range(4, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a prime number and False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    \n    # Check if the number is divisible by any number in the range of 5 to the square root of n\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n    \n    # If none of the above conditions are satisfied, the number is prime\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap of size n\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif hq.heappushpop(max_heap, num) < num:\n            hq.heappush(max_heap, num)\n\n    # Return the n largest integers from the max heap\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert list to heap of size n (largest elements will be at the front)\n    heap = hq.nlargest(n, nums)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, -num)\n\n    # Extract the n largest numbers from the min heap\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_num = -hq.heappop(min_heap)\n        largest_nums.append(largest_num)\n\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers into a min heap\n    min_heap = nums[::-1]\n    hq.heapify(min_heap)\n\n    # Remove the n smallest numbers from the heap and add them to a new list\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_nums.append(hq.heappop(min_heap))\n\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to heap\n    heap = [float('-inf')] * n\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    # extract the n largest integers from the heap\n    heap = [heapq.heappop(heap) for _ in range(n)]\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    min_heap = [0] * n\n    hq.heapify(min_heap)\n\n    # Iterate through the input list and push the largest integers onto the heap\n    for num in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap, num)\n        elif num > min_heap[0]:\n            hq.heappop(min_heap)\n            hq.heappush(min_heap, num)\n\n    # Return the sorted list of largest integers\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a max heap\n    hq.heapify(nums)\n    # Remove the maximum n elements from the heap and return them in a list\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to keep track of the n largest numbers\n    hq.heapify(nums)\n    # Pop the largest numbers from the heap\n    for _ in range(n):\n        hq.heappop(nums)\n    # Convert the heap into a list and return it\n    return list(nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a max-heap of size n and fill it with the smallest elements of the list\n    hq.heapify(nums[:n])\n\n    # iterate over the list and add each element to the max-heap if it is greater than the largest element in the heap\n    for num in nums[n:]:\n        if num > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n], num)\n\n    # return the largest n elements in descending order\n    return [hq.heappop(nums[:n]) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Initialize the count variable\n    count = 0\n\n    # Convert the integer to binary format\n    binary_str = bin(x)[2:]\n\n    # Loop through each bit in the binary string\n    for bit in binary_str:\n        # If the bit is 1, increment the count variable\n        if bit == '1':\n            count += 1\n        # If the count reaches 1, return True, indicating that the two numbers differ at one bit position only\n        if count == 1:\n            return True\n\n    # If the loop completes without finding any difference in the two numbers, return False, indicating that the two numbers are equal\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1!= (x >> 1) & 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Returns True if the binary representation of x has only one bit set to 1, and False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    count = 0\n    while x > 0:\n        x >>= 1\n        count += 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x & (x-1) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is power of two or not\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return False\n    else:\n        # If x is not power of two, check if it can be power of two by shifting right by one bit\n        while x!= 1:\n            x = x >> 1\n            if x == 0:\n                return True\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Find the power of 2 that is greater than or equal to x\n    while (x & (x-1))!= 0:\n        x = x & (x-1)\n\n    # Check if the result is equal to x\n    return (x == x >> 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Find the number of bits in the binary representation of the number\n    binary_representation = bin(x)[2:]\n    no_of_bits = len(binary_representation)\n\n    # Find the number of bits that differ in the binary representation of the two numbers\n    count = 0\n    for i in range(no_of_bits):\n        if binary_representation[i]!= binary_representation[i+1]:\n            count += 1\n\n    # Check if the number of differing bits is one or not\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a power of 2 or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # convert both numbers to binary string format\n    bin_str_x = bin(x)[2:]  # remove the \"0b\" prefix\n    bin_str_y = bin(y)[2:]\n\n    # get the number of differing bits between the two numbers\n    count = 0\n    for i in range(len(bin_str_x)):\n        if bin_str_x[i]!= bin_str_y[i]:\n            count += 1\n            break\n\n    # check if the count is 1 (meaning the bits differ at only one position)\n    return count == 1"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Define a regular expression pattern to match words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use a regular expression to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n\n    # Print the words which are at least 4 characters long\n    for word in words:\n        print(word)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text.lower())\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    words = re.findall(pattern, text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Use a regular expression to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    # Return the matches\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_nums = []\n    for num in nums:\n        new_nums.append(num ** 2)\n    return new_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    str = str.lower()\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                count += 1\n                break\n        if count > 0:\n            break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string into a list of characters\n    lst = list(str)\n    # Initialize the minimum number of rotations required to get the same string as the length of the list\n    min_rotations = len(lst)\n    \n    # Loop through all possible rotations of the list\n    for i in range(len(lst)):\n        # Take a copy of the list\n        temp_lst = lst.copy()\n        # Rotate the list by 1\n        temp_lst.rotate(-i)\n        # Compare the two lists\n        if temp_lst == lst:\n            # If the lists are equal, the minimum number of rotations required is 1 greater than the current rotation\n            min_rotations = min(min_rotations, i+1)\n        else:\n            # If the lists are not equal, the minimum number of rotations required is the current rotation\n            min_rotations = min(min_rotations, i)\n    \n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    left, right = 0, n-1\n\n    # Count the number of rotations required to get the same string from left to right\n    count = 0\n    while left < right:\n        count += 1\n        left += 1\n        right -= 1\n\n    # Count the number of rotations required to get the same string from right to left\n    count += left\n    left, right = 0, n-1\n\n    while left < right:\n        count += 1\n        left += 1\n        right -= 1\n\n    # Return the minimum number of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Create a table to store the number of rotations required for each substring\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case: if the string has length 1, it doesn't need any rotations\n    if n == 1:\n        return 0\n\n    # Fill the table using the following recurrence relation:\n    # dp[i][j] = dp[i+1][j] + 1 if str[i] == str[j]\n    #               min(dp[i+1][k] + 1 for k in range(j)) if str[i]!= str[j]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 0\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j]\n            else:\n                dp[i][j] = min(dp[i+1][k] + 1 for k in range(j))\n\n    # Initialize the result to be the number of rotations required for the entire string\n    result = dp[0][n-1]\n\n    # Apply rotations to the string until the length of the string becomes 1\n    while n > 1:\n        # Choose the substring with the smallest number of rotations required\n        min_idx = min(range(n), key=lambda i: dp[0][i])\n\n        # Find the next rotation that would bring the length of the string back to 1\n        next_rot = n // 2\n        while next_rot > 0 and dp[next_rot][min_idx] == dp[next_rot-1][min_idx]:\n            next_rot -= 1\n\n        # Apply the rotation to the string and update the result\n        result = min(result, dp[next_rot][min_idx])\n        str = str[:min_idx] + str[min_idx+1:]\n        n = next_rot\n\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string to a set to remove duplicates\n    set_str = set(str)\n\n    # Initialize the minimum number of rotations to be greater than 0\n    min_rotations = 1\n\n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Generate a new string by rotating the current string\n        new_str = str[i:] + str[:i]\n\n        # Check if the new string is equal to the original string\n        if new_str == set_str:\n            # If it is, return the current minimum number of rotations\n            return min_rotations\n\n        # Update the minimum number of rotations if the new string is greater than the current minimum number\n        min_rotations = max(min_rotations, len(new_str) // 2)\n\n    # If the loop completes without finding a rotation, return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Function to get the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n\n    # Function to find the number of rotations required to get the same string\n    def numRotations(s, f):\n        n = len(s)\n        m = len(f)\n        if m > n:\n            return 0\n        if n == m:\n            return 1\n\n        # Initialize the prefix sum array\n        psum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            psum[i] = psum[i - 1] + f[i - 1]\n\n        # Find the prefix sum of the string\n        s_psum = psum[0]\n        for i in range(1, n + 1):\n            s_psum += f[i - 1] - f[i - 1 - m]\n\n        # Compute the number of rotations required\n        count = 0\n        while s_psum >= 0:\n            s_psum -= n\n            count += 1\n\n        return count\n\n    # Initialize the minimum rotations required to get the same string\n    min_rotations = float('inf')\n\n    # Loop through all possible rotations\n    for i in range(1, len(str)):\n        for j in range(i, len(str)):\n            # Find the frequency of the two substrings\n            f1 = freq[str[i:j+1]]\n            f2 = freq[str[j:i+1]]\n\n            # Compute the number of rotations required\n            n_rotations = numRotations(str[i:j+1], f1)\n\n            # Update the minimum rotations required\n            min_rotations = min(min_rotations, n_rotations)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    \n    # Create a dictionary to store the frequency of each character in the string\n    freq = {} \n    for char in str: \n        freq[char] = freq.get(char, 0) + 1 \n        \n    # Sort the dictionary based on the frequency of characters\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0])) \n    \n    # Initialize two pointers, one at the beginning and one at the end of the string\n    left = 0\n    right = n - 1\n    \n    # Calculate the minimum number of rotations required to get the same string\n    count = 0\n    while left < right: \n        if sorted_freq[left][0] == str[left]: \n            count += 1\n            left += 1\n        else: \n            left = 0\n        if sorted_freq[right][0] == str[right]: \n            count += 1\n            right -= 1\n        else: \n            right = n - 1\n    \n    # Return the minimum number of rotations required to get the same string\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    # convert string to dictionary of character counts\n    char_count = {}\n    for c in s:\n        char_count[c] = char_count.get(c, 0) + 1\n    # sort dictionary of character counts by value (decreasing) and key (increasing)\n    sorted_counts = sorted(char_count.items(), key=lambda x: (-x[1], x[0]))\n    # initialize minimum number of rotations\n    min_rotations = 0\n    # iterate through sorted dictionary of character counts\n    for i, (c, count) in enumerate(sorted_counts):\n        # if count is odd, we need to rotate the string\n        if count % 2 == 1:\n            # calculate the minimum number of rotations required to rotate the string\n            min_rotations = max(min_rotations, n // 2)\n            # calculate the index of the character that needs to be swapped\n            # (count - 1) / 2 rotations to the left, (count - 1) / 2 rotations to the right\n            char_to_swap = sorted_counts[i + (count - 1) // 2][0]\n            # swap characters at index i and char_to_swap\n            s = s[:i] + s[i+1:i+1] + s[i:i+1] + s[i+1:i+2] + s[i+2:i+2] + s[:i] + s[i+1:i+2] + s[i+2:]\n            # update dictionary of character counts\n            for j, c2 in enumerate(s):\n                char_count[c2] = char_count.get(c2, 0) - 1\n            # count rotations again\n            for j, c2 in enumerate(s):\n                char_count[c2] = char_count.get(c2, 0) + 1\n    # return minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Base case\n    if str == \"\":\n        return 0\n\n    # Initialize the minimum number of rotations and the current string\n    min_rotations = 1\n    curr_str = str\n\n    # Iterate through the characters in the string\n    for i in range(len(curr_str)):\n        # Remove the current character from the string\n        next_str = curr_str[:i] + curr_str[i+1:]\n\n        # Check if the next string is equal to the original string\n        if next_str == str:\n            return min_rotations\n\n        # Update the minimum number of rotations if the next string is different\n        min_rotations += 1\n\n    # If the loop completes without finding a rotation, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # convert string to list of characters\n    str_list = list(str)\n    n = len(str_list)\n    \n    # initialize dictionary to store count of characters in each rotation\n    rot_dict = {}\n    \n    # count the number of rotations required\n    count = 0\n    while n > 1:\n        # find the length of the longest increasing subsequence\n        max_length = 1\n        for i in range(1, n):\n            if str_list[i] > str_list[i-1]:\n                max_length = max(max_length, rot_dict[str_list[i-1]] + 1)\n            else:\n                break\n        \n        # update the count of characters in each rotation\n        for i in range(n-max_length, n):\n            if str_list[i] not in rot_dict:\n                rot_dict[str_list[i]] = 1\n            else:\n                rot_dict[str_list[i]] += 1\n        \n        # increment count and decrease n\n        count += 1\n        n -= max_length\n        \n    # return the count of rotations required\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find first occurrence of the character\n    i = s.find(ch)\n    # If the character is not found, return the original string\n    if i == -1:\n        return s\n    \n    # Find last occurrence of the character\n    j = s.rfind(ch)\n    # If the character is not found, return the original string\n    if j == -1:\n        return s\n    \n    # Remove first occurrence of the character\n    s = s[:i] + s[i+1:]\n    # Remove last occurrence of the character\n    s = s[:j] + s[j+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list of characters\n    s = list(s)\n\n    # find the index of the first occurrence of the character\n    i = s.index(ch)\n\n    # remove the first occurrence of the character\n    del s[i]\n\n    # find the index of the last occurrence of the character\n    j = s.index(ch)\n\n    # remove the last occurrence of the character\n    del s[j]\n\n    # convert the list of characters back into a string and return it\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) >= 2:\n        s = s.replace(ch, \"\", 1)\n        s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # Check if the given character is the first or last character of the string\n    if s.startswith(ch) or s.endswith(ch):\n        # Remove the character from the string\n        s = s.replace(ch, '')\n        # Return the updated string\n        return s\n    else:\n        # Return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'').replace(ch,'',1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the string contains the character\n    if ch in s:\n        # split the string into list of characters\n        lst = list(s)\n        # remove the first and last occurrence of the character\n        lst.remove(ch)\n        lst.remove(ch)\n        # join the list of characters into a string\n        return ''.join(lst)\n    else:\n        return \"The character does not appear in the string\""
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    if len(s) == 0:\n        return ''\n    elif len(s) == 1:\n        return s\n    else:\n        return remove_Occ(s[1:],ch) + s[0]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize variables\n    first = True\n    last = False\n    # initialize string\n    str = \"\"\n    # loop through each character in the string\n    for i in range(len(s)):\n        # if the character is not equal to the given character, append it to the string\n        if s[i]!= ch:\n            str += s[i]\n            # if the first character is not equal to the given character, set first to False\n            if first and str[0]!= ch:\n                first = False\n            # if the last character is not equal to the given character, set last to False\n            if last and str[-1]!= ch:\n                last = False\n    # return the modified string\n    return str"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        s = s.replace(ch,'') # Remove all occurrences of the given character\n    return s[:1] + s[2:] # Return the first and last character of the string without the specified character"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and sorts it in ascending order based on the sum of its rows.\n    '''\n    # Create a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Iterate over each row of the matrix\n    for row in M:\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n\n        # Iterate over each element in the row\n        for element in row:\n            # Add the element to the row sum\n            row_sum += element\n\n        # Add the row sum to the sorted matrix list\n        sorted_matrix.append(row_sum)\n\n    # Sort the sorted matrix list in ascending order\n    sorted_matrix.sort()\n\n    # Create a new matrix with the sorted rows\n    sorted_M = []\n\n    # Iterate over each row in the sorted matrix list\n    for i in range(len(sorted_matrix)):\n        # Create a new row in the new matrix\n        new_row = []\n\n        # Iterate over each element in the current row\n        for j in range(len(M[i])):\n            # Add the current element to the new row\n            new_row.append(M[i][j])\n\n        # Add the new row to the sorted matrix\n        sorted_M.append(new_row)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Iterate over each row of the matrix\n    for row in M:\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n\n        # Iterate over each element in the row\n        for element in row:\n            # Add the element to the sum\n            row_sum += element\n\n        # Add the sorted row to the sorted_matrix\n        sorted_matrix.append(row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Iterate over the rows of the matrix\n    for row in M:\n        # Initialize a variable to store the sum of the row\n        row_sum = 0\n        \n        # Iterate over the elements of the row\n        for element in row:\n            # Add the element to the row sum\n            row_sum += element\n        \n        # Add the sorted row to the sorted matrix\n        sorted_matrix.append(sorted(row))\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n\n    # Sort the row sums\n    row_sums.sort()\n\n    # Create a new matrix with row sums as the first column\n    sorted_M = []\n    for i in range(len(M)):\n        sorted_M.append([row_sums[i]])\n\n    # Merge the sorted rows into the original matrix\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sorted_M[i][0][0]\n            sorted_M[i].pop(0)\n\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the rows based on the sum of rows\n    sorted_rows = sorted(range(rows), key=lambda x: row_sums[x])\n    \n    # sort the matrix based on the sorted row indices\n    sorted_M = [[M[i][j] for i in sorted_rows] for j in range(cols)]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # find the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # create a copy of the matrix to sort\n    sort_matrix = [[0 for j in range(m)] for i in range(n)]\n    \n    # sort each row in the copy of the matrix\n    for i in range(n):\n        sort_matrix[i] = sorted(M[i])\n    \n    # sort the copy of the matrix in ascending order\n    sort_matrix = sorted(sort_matrix)\n    \n    # create a new matrix that has the sorted rows\n    sorted_matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(sort_matrix[i][j])\n        sorted_matrix.append(row)\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the result matrix\n    result = []\n    # Initialize the row sums\n    row_sums = [0] * len(M[0])\n    # Loop through the rows of the matrix\n    for row in M:\n        # Loop through the columns of the row\n        for i in range(len(row)):\n            # Add the current value to the sum of the row\n            row_sums[i] += row[i]\n    # Loop through the rows of the matrix in reverse order\n    for i in range(len(M)-1, -1, -1):\n        # Create a new row in the result matrix with the same length as the row of the original matrix\n        new_row = [0] * len(M[0])\n        # Loop through the columns of the new row and add the corresponding values from the original matrix\n        for j in range(len(M[0])):\n            new_row[j] = M[i][j]\n        # Calculate the sum of the new row and compare it to the sum of the previous row\n        if sum(row_sums) > sum([new_row[j] for j in range(len(new_row))]):\n            # If the new row has a larger sum, add it to the result matrix\n            result.append(new_row)\n            # Update the row sums with the sum of the new row\n            row_sums = [0] * len(M[0])\n            for j in range(len(new_row)):\n                row_sums[j] += new_row[j]\n    # Return the result matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize the rows with the same sum to their original order\n    rows = {}\n    for i in range(len(M)):\n        rows[sum(M[i])] = i\n    \n    # Sort the rows based on the sum of their elements\n    sorted_rows = sorted(rows.values())\n    \n    # Create a new matrix with the sorted rows\n    sorted_M = [[] for i in range(len(M))]\n    for i in sorted_rows:\n        sorted_M[i] = M[rows[i]]\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n\n    # Find the sum of each row and store it in a list\n    sums = []\n    for i in range(n):\n        row_sum = sum(M[i])\n        sums.append(row_sum)\n\n    # Sort the list of sums in ascending order\n    sums.sort()\n\n    # Create a new matrix with the sorted rows\n    sorted_M = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(M[j][i])\n        sorted_M.append(row)\n\n    # Reverse the sorted rows to get the sorted matrix\n    sorted_M.reverse()\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculating the volume of the triangular prism\n    volume = 0.5 * l * b * h\n\n    # Returning the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the area of the prism\n    area = 0.5 * l * b\n    # calculate the volume of the prism\n    volume = area * h\n    # return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h \n    print(\"The volume of the triangular prism is: \", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 0.5 * l * b * h \n    print(\"The volume of the triangular prism is:\", Volume) "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h / 6\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z_]*[a-z]$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'[a-z](?=.*[a-z])'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]*_[a-z]*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z])_([a-z])'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)_([a-z]+)')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define the pattern to match lowercase letters followed by an underscore\n    pattern = r'[a-z_]+'\n    \n    # check if the input string matches the pattern\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]*_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    list_of_chars = list(string)\n    count = 0\n    for char in string:\n        if char not in list_of_chars:\n            list_of_chars.remove(char)\n            count += 1\n    if count > 0:\n        return list_of_chars\n    else:\n        return None"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string[i] in string:\n            string = string.replace(string[i], \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list containing all the characters of the input string\n    except for those which are present in the second string.\n    '''\n    set_1 = set(string)\n    set_2 = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+{}|:\"<>?,./`~-=[]\\;' + ''''\"''')\n    \n    new_list = []\n    for char in string:\n        if char not in set_2:\n            new_list.append(char)\n            \n    return new_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) == 1:\n            return string.replace(chr(i), \"\")\n    return \"No such character\""
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    result = []\n    for char in string:\n        if char not in string:\n            result.append(char)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    list1 = list(string)\n    list2 = list(string[::-1])\n    new_list = []\n    for char in list1:\n        if char not in list2:\n            new_list.append(char)\n    return ''.join(new_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Get the length of the first string\n    length = len(string)\n\n    # Create an empty list to store the characters in the first string\n    first_string_list = []\n\n    # Loop through each character in the first string\n    for char in string:\n        # If the character is not present in the second string, append it to the list\n        if char not in string:\n            first_string_list.append(char)\n\n    # Convert the list to a string and return it\n    return ''.join(first_string_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the unique characters in the string\n    unique_chars = []\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is not already in the unique_chars list, add it\n        if char not in unique_chars:\n            unique_chars.append(char)\n    # Convert the unique_chars list to a string\n    unique_chars_str = ''.join(unique_chars)\n    # Create a new string with the unique characters removed from the first string\n    result = ''\n    for char in string:\n        if char not in unique_chars_str:\n            result += char\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the indices of the elements in the array\n    indices = {}\n    \n    # loop through the array and for each element, check if its index has already been added to the dictionary\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            # if the index has already been added, the element is a duplicate and we return True\n            return True\n        else:\n            # otherwise, add the index to the dictionary with the element value as the key\n            indices[num] = i\n    \n    # if we make it through the loop without finding a duplicate, the array doesn't contain any duplicates\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()  # create an empty set to store unique elements\n    for num in arraynums:\n        if num in seen:\n            return True  # if a duplicate is found, return True\n        seen.add(num)  # add the current element to the set of seen elements\n    return False  # if no duplicate is found, return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in freq:\n            return True\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n    # If all elements are unique, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 1:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the indices of the elements in the array\n    indices = {}\n    # Loop through the array\n    for index, num in enumerate(arraynums):\n        # Check if the element is already present in the dictionary\n        if num in indices:\n            # If it is, return True since the array contains a duplicate element\n            return True\n        # If the element is not present in the dictionary, add its index to the dictionary\n        indices[num] = index\n    # If the loop completes without returning True, the array does not contain a duplicate element\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if not arraynums:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x > 10000 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0 and x%3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Woodball\"\n    elif x % 2 == 0:\n        return \"Not a woodball\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(x/2)+1):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    This function checks whether a given number is a woodball or not.\n    '''\n\n    # First, check if the number is divisible by 13 \n    if x % 13 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 5:\n        return True\n    elif x % 2 == 0 and x > 2:\n        return is_woodall(x // 2)\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 3, 5, 7, 9]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return True\n    elif x % 10 == 1 or x % 10 == 4 or x % 10 == 7 or x % 10 == 9:\n        return False\n    else:\n        return None"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    if x == 1 or x == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 1 and x % 100!= 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n        \n    return (num - reverse) % 2 == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Find the reverse of the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    # Find the difference between the given number and its reverse\n    diff = abs(num - rev_num)\n    # Check if the difference is one less than twice the reverse\n    return diff < 2*rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to a string\n    num_str = str(num)\n    # initialize two pointers to the beginning and end of the string\n    i = 0\n    j = len(num_str) - 1\n    # while the pointers are not at the same index, calculate the reverse of the current substring\n    while i < j:\n        # swap the characters at the pointers\n        num_str[i], num_str[j] = num_str[j], num_str[i]\n        # increment the pointers for the next iteration\n        i += 1\n        j -= 1\n    # convert the reversed substring back to an integer and compare it to the original number\n    reverse_num = int(num_str)\n    if reverse_num == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Find the reverse of the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Check if the original number is one less than twice its reverse\n    if rev_num < 2 * num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == 1000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to string\n    str_num = str(num)\n\n    # Reverse the string\n    reverse_str = str_num[::-1]\n\n    # Convert the reversed string to integer\n    reverse_num = int(reverse_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num - 1 < reverse_num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == 2 * int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    reverse_sum = int(reversed_num) + int(reversed_num[0])\n    return num - reverse_sum\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    reversed_int = int(reversed_str)\n    # check if the original number is one less than twice its reverse\n    if num - 1 < 2 * reversed_int:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                num = arr[i] * 10 + arr[j]\n                if num > max_num:\n                    max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for digit in arr:\n        max_num += digit\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize a variable to store the largest number formed\n    largest = 0\n\n    # Iterate through the sorted list\n    for num in arr:\n        # Check if the current number can be formed with the remaining digits in the list\n        if num + largest > 9:\n            # If yes, update the largest number formed with the current number\n            largest = num\n        else:\n            # If no, return the current number as it is the largest number formed\n            return num\n    \n    # If all the numbers in the list are less than 10, return 999\n    return 999"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr): \n    #sorting the list in ascending order \n    arr.sort() \n\n    #initializing variables \n    max_num = 0 \n    max_sum = 0 \n\n    #iterating over the list \n    for i in range(len(arr)): \n\n        #calculating the sum of the numbers \n        sum_num = sum(arr[i:]) \n\n        #updating the maximum sum \n        max_sum = max(max_sum, sum_num) \n\n        #updating the maximum number \n        max_num = max(max_num, sum_num - arr[i]) \n\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in arr:\n        max_num = max(max_num, 10**(len(str(i))+1) - i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list in descending order\n    arr.sort(reverse=True)\n    # Initialize the maximum number that can be formed\n    max_num = 0\n    # Initialize the power of 10\n    power_of_10 = 1\n    # Iterate through the sorted list\n    for num in arr:\n        # Update the maximum number\n        max_num = max(max_num, num * power_of_10)\n        # Update the power of 10 by multiplying by 10\n        power_of_10 *= 10\n    # Return the maximum number that can be formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n\n    # Sort the input list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number to be formed\n    max_num = 0\n\n    # Initialize the carry\n    carry = 0\n\n    # Iterate over each digit of the input list\n    for digit in arr:\n\n        # Calculate the product of the current digit and the carry\n        product = digit * carry\n\n        # Calculate the sum of the current product and the current digit\n        sum = product + digit\n\n        # Update the maximum number if the sum is greater than the current maximum number\n        if sum > max_num:\n            max_num = sum\n\n        # Update the carry\n        carry = sum // 10\n\n    # Add the carry to the maximum number if it is not zero\n    if carry > 0:\n        max_num += carry\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    # Initialize variables to keep track of the largest number and its index\n    largest = arr[0]\n    index = 0\n\n    # Iterate through the list of digits\n    for i in range(1, len(arr)) : \n        # If the current number is larger than the largest number found so far, update the variables\n        if arr[i] > largest : \n            largest = arr[i]\n            index = i\n\n    # Return the largest number\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num = max(max_num, arr[i] * (10**(len(arr)-i-1)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # sort the digits in descending order\n    max_num = 0 # initialize max_num to 0\n    for digit in arr:\n        max_num *= 10 # multiply max_num by 10 to get the next digit\n        max_num += digit # add the current digit to max_num\n    return max_num # return max_num as the largest possible number\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<0 and y<0):\n        print(False)\n    else:\n        print(True)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    # check if x and y have opposite signs or not\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<=0 and y<=0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if both numbers are non-zero\n    if x!= 0 and y!= 0:\n        # Check if the signs of the two numbers are opposite\n        return x*y < 0 or x*y == 0\n    else:\n        # If one of the numbers is zero, return True\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    :param x: An integer\n    :param y: An integer\n    :return: A boolean value indicating whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    # Calculate the absolute difference between the two numbers\n    abs_diff = abs(x - y)\n\n    # If the absolute difference is odd, it means that the two numbers have opposite signs\n    if abs_diff % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return \"opposite signs\"\n    else:\n        return \"same signs\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Base case: If n is 0, return 0\n    if n == 0: \n        return 0\n    \n    # Find the square of n\n    square_n = n**2\n    \n    # If the square is divisible by 24, it's an octagonal number\n    if square_n % 24 == 0: \n        return square_n\n    \n    # If not, it's not an octagonal number\n    else: \n        return -1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n-1)*(2*n-1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 2 * (n * n) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i**2 - 2*i + 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Find the sum of squares of odd numbers up to n\n    odd_squares_sum = 0\n    for i in range(1, n+1, 2):\n        odd_squares_sum += i**2\n\n    # Find the sum of cubes of even numbers up to n\n    even_cubes_sum = 0\n    for i in range(2, n+1, 2):\n        even_cubes_sum += i**3\n\n    # Return the sum of the octagonal numbers\n    return odd_squares_sum + even_cubes_sum\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    for i in range(1, n+1):\n        if i**2 + i + 2 < n:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 13\n    elif n == 3:\n        return 29\n    elif n == 4:\n        return 33\n    elif n == 5:\n        return 59\n    elif n == 6:\n        return 81\n    elif n == 7:\n        return 109\n    elif n == 8:\n        return 121\n    elif n == 9:\n        return 177\n    elif n == 10:\n        return 209\n    elif n == 11:\n        return 277\n    elif n == 12:\n        return 301\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 1) - is_octagonal(n - 2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of the nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Helper function to check if a number is octagonal\n    def is_oct(num):\n        return str(num**2 + num) == str(num**3 + num)\n    \n    # Calculate the nth octagonal number using the formula\n    oct_num = (n * (3 * n - 1)) / 2\n    \n    # Check if the nth octagonal number is octagonal\n    if is_oct(oct_num):\n        return oct_num\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Define the nth octagonal number\n    def nth_octagonal(n):\n        return (n * (2 * n - 1)) ** 2\n    \n    # Find the nth octagonal number\n    octagonal = nth_octagonal(n)\n    \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize the dictionary to store the frequency of substrings\n    freq = defaultdict(int)\n    \n    # Iterate over all substrings of the given string s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(d) for d in s[i:j+1]) == len(s[i:j+1]):\n                # If it is, add one to the frequency of the substring\n                freq[s[i:j+1]] += 1\n    \n    # Return the count of all the substrings\n    return sum(freq.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the given sum of digits\n    count = defaultdict(int)\n    # Iterate through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            digit_sum = sum(int(d) for d in s[i:j])\n            # If the digit sum is equal to the length of the substring, increment the count\n            if digit_sum == len(s[i:j]):\n                count[digit_sum] += 1\n    # Return the count of substrings with the given sum of digits\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the count of substrings with the given sum\n    count = defaultdict(int)\n    \n    # iterate through the characters of the string\n    for i in range(len(s)):\n        \n        # iterate through the remaining characters of the string\n        for j in range(i+1, len(s)+1):\n            \n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            \n            # add the count of the substring to the dictionary\n            count[substring_sum] += 1\n            \n    # return the count of substrings with the given sum\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substr = s[i:j+1]\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in substr) == len(substr):\n                count += 1\n                dp[substr] = 1\n    return count, dp"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the substring equals to its length\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                # Increment the count of the substring in the dictionary\n                count_dict[s[i:j]] += 1\n\n    # Return the count of substrings in the dictionary\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[i] += sum(int(x) for x in str(i))\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # initialize a dictionary to store the count of substrings with sum of digits equal to the length of the substring\n    count_dict = defaultdict(int)\n    \n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each character in the string from index i+1 to the end of the string\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits in the substring from i to j is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # if it is, add 1 to the count of substrings with sum of digits equal to the length of the substring\n                count_dict[len(s[i:j])] += 1\n    \n    # return the total count of substrings with sum of digits equal to the length of the substring\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits = sum(int(digit) for digit in substring)\n            if digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n        \n    substrings_count = 0\n    for digit in digit_count:\n        substrings_count += (digit_count[digit] * (digit_count[digit] - 1)) // 2\n    \n    return substrings_count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list `xs` as input and returns the smallest number in the list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = set()\n    for pair in test_list:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n            pairs.clear()\n        if pair not in pairs:\n            pairs.add(pair)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference as negative infinity\n    max_diff = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Initialize the current difference as 0\n        curr_diff = 0\n\n        # Loop through the remaining tuples\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current tuple and the next tuple in the list\n            diff = test_list[j][0] - test_list[i][1]\n\n            # Update the current difference if the difference is greater than the current difference\n            if diff > curr_diff:\n                curr_diff = diff\n\n        # Update the maximum difference if the current difference is greater than the current maximum difference\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n    # Initialize variables for the max difference and the current difference\n    max_diff = 0\n    cur_diff = 0\n    # Iterate through the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Get the difference between the current pair of tuples\n        cur_diff = sorted_list[i + 1][0] - sorted_list[i][0]\n        # Update the max difference if the current difference is greater\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n    # Return the max difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables for the maximum difference and the minimum element\n    max_diff = float('-inf')\n    min_element = float('inf')\n\n    # Loop through the list of tuples\n    for pair in test_list:\n        # If the element in the pair is smaller than the current minimum element, update the minimum element\n        if pair[0] < min_element:\n            min_element = pair[0]\n\n        # If the element in the pair is greater than the current maximum difference, update the maximum difference\n        if pair[1] > max_diff:\n            max_diff = pair[1] - min_element\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return \"The given list has less than 2 elements.\"\n    \n    test_list.sort()\n    \n    max_diff = abs(test_list[1] - test_list[0])\n    \n    for i in range(2, len(test_list)):\n        diff = abs(test_list[i] - test_list[i-1])\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list.sort()\n    # Initialize variables\n    max_diff = 0\n    min_val = test_list[0]\n    # Loop through the list\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current value and the minimum value\n        diff = abs(test_list[i] - min_val)\n        # Update the maximum difference if the new difference is greater\n        if diff > max_diff:\n            max_diff = diff\n        # Update the minimum value\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples with sorted second value\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples, where each tuple contains a subject and its marks\n    # in descending order\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n    # return the sorted list of tuples\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a new list to store the sorted tuples\n    sorted_marks = []\n\n    # Loop through each tuple in the input list\n    for mark in subjectmarks:\n        # Check if the current mark is already in the sorted_marks list\n        if mark not in [x[0] for x in sorted_marks]:\n            # If not, append the current tuple to the sorted_marks list\n            sorted_marks.append(mark)\n\n    # Sort the sorted_marks list based on the second value of each tuple\n    sorted_marks.sort(key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Use a lambda function to sort the list in descending order of second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    # sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    # Printing the sorted list of tuples\n    print(subjectmarks)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten(nested_list):\n        if not nested_list:\n            return []\n        flattened = [i for sublist in nested_list for i in flatten(sublist)]\n        return flattened\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # helper function to sum a list recursively\n    def flatten_and_sum(nested_list):\n        total = 0\n        for item in nested_list:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    \n    # call the helper function to flatten and sum the data list\n    flattened_list = flatten_and_sum(data_list)\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        \"\"\"\n        Recursively flatten a list.\n        \"\"\"\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list\n    flattened_list = flatten(data_list)\n\n    # Sum the flattened list\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list\n    flattened_list = flatten(data_list)\n\n    # Sum all the elements\n    result = sum(flattened_list)\n\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list\n    flat_list = flatten_list(data_list)\n\n    # Sum all the elements of the flattened list\n    total_sum = sum(flat_list)\n\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        if not data_list:\n            return []\n        elif isinstance(data_list[0], list):\n            return flatten(data_list[0]) + flatten(data_list[1:])\n        else:\n            return [data_list[0]] + flatten(data_list[1:])\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    This function calculates the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n (int): The maximum number of Bell numbers to include in the partition.\n\n    Returns:\n        int: The number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize a variable to store the number of ways to partition the set of Bell numbers\n    ways = 1\n\n    # Iterate through the range of values from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the number of ways to partition the Bell numbers up to i\n        ways *= i\n\n        # Calculate the number of ways to partition the Bell numbers up to n-i\n        ways //= (n-i)\n\n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the number of ways to partition to 1\n    ways = 1\n\n    # Loop through all possible partitions of the set of Bell numbers\n    for i in range(2, n+1):\n        ways *= i\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 587869, 2194771, 7697650, 28795066, 109266530, 390164423, 1443930112, 5603687663, 21572134407, 82017878925, 312172795770, 1200436992715, 4284944628352, 17976931348629, 66228890681332, 279903520331705, 1113601625121042, 4294967296000000]\n    partition_count = [0] * (n+1)\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if bell_nums[j-1] > bell_nums[i-1]:\n                partition_count[j] += partition_count[i-1]\n\n    return partition_count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return 2 * partition(n-1)\n    \n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + 2 * bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 0\n    ways = 0\n    # Loop through each number in the set of Bell numbers\n    for i in range(n+1):\n        # Initialize the number of ways to partition the current number to 0\n        ways_to_partition = 0\n        # Loop through each possible partition of the current number\n        for j in range(1, i+1):\n            # Add the number of ways to partition this partition to the total\n            ways_to_partition += j\n        # Add the number of ways to partition the current number to the total\n        ways += ways_to_partition\n    # Return the number of ways to partition all the Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    B = [0]*(n+1)\n    B[0] = 1\n    B[1] = 1\n    \n    # Fill the Bell number array\n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            B[j] += B[j-i]\n            \n    # Return the sum of B[i] for i in the range(n+1)\n    return sum(B[i] for i in range(n+1))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[j] for j in range(i)))\n    return bell[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # Check if the array is empty or not\n    if len(A) < 2:\n        return True\n    \n    # Check if all the elements are in the same direction\n    if A[0] <= A[1]:\n        if len(A) > 2:\n            for i in range(1, len(A)-1):\n                if A[i] > A[i+1] or A[i] < A[i-1]:\n                    return False\n        else:\n            return True\n    else:\n        if len(A) > 2:\n            for i in range(1, len(A)-1):\n                if A[i] < A[i+1] or A[i] > A[i-1]:\n                    return False\n        else:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Check if array is monotonic\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic,\n    or False otherwise.\n\n    A monotonic array is an array where the elements are either all increasing or all decreasing.\n    If the array is not monotonic, then the function returns False.\n\n    The function uses the concept of \"increasing\" and \"decreasing\" to check if the array is monotonic or not.\n    If the array is not empty, then it checks if the first and last elements are equal to each other.\n    If they are, then it assumes that the array is monotonic in the sense that the elements are all increasing or all decreasing.\n    If not, then it checks if the array is monotonic in the sense of the given problem statement.\n    If the array is monotonic in the sense of the problem statement, then the function returns True.\n    If the array is not monotonic in the sense of the problem statement, then the function returns False.\n    '''\n    if len(A) == 0:\n        return False\n\n    if A[0] == A[-1]:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    # Check if all the elements are same or increasing or decreasing. \n    for i in range(1, n): \n        if A[i] > A[i-1]: \n            return False \n        elif A[i] < A[i-1]: \n            if i == n-1: \n                return True\n            elif A[i-1] >= A[i+1]: \n                return False \n    return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1: \n        return True\n    \n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n        return True\n    \n    if A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1: \n        return True\n    if A[1] >= A[0]: \n        return is_Monotonic(A[1:])\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic (increasing or decreasing), \n    and False otherwise. A is defined as a list of integers.\n    '''\n    if len(A) < 2: \n        return True\n    \n    if A[0] < A[1]: # check if the array is increasing\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]: # if the element is less than the previous element, then it's not monotonic\n                return False\n    else: # check if the array is decreasing\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]: # if the element is greater than the previous element, then it's not monotonic\n                return False\n    \n    return True # if the loop completes without returning False, then the array is monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    if n == 1: \n        return True\n    elif A[0] <= A[1] and A[1] <= A[2]: \n        for i in range(2, n): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    elif A[0] >= A[1] and A[1] >= A[2]: \n        for i in range(2, n): \n            if A[i] >= A[i-1]: \n                return False\n        return True\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Convert the given sublist to a set to remove duplicates\n    s = set(s)\n    # Initialize the index of the list\n    i = 0\n    # Loop through the list\n    while i < len(l):\n        # If the element at the current index is in the set, the sublist is found\n        if l[i] in s:\n            return True\n        # Increment the index\n        i += 1\n    # If the sublist is not found in the list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # If the sublist is empty, then the list is a sublist of itself.\n    if not s:\n        return True\n    # If the sublist is longer than the list, then it cannot be a sublist.\n    if len(s) > len(l):\n        return False\n    # Iterate through the list and check if the sublist is present.\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    # If the sublist is not present, then it cannot be a sublist.\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have the same length\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # loop through all the tuples in the input list\n    for i in range(len(Input)):\n        \n        # check if the length of each tuple is equal\n        if len(Input[i])!= len(Input[0]):\n            # if not, return False\n            return False\n    \n    # if all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # check if Input is a list of tuples\n    if type(Input)!= list or not all(isinstance(x, tuple) for x in Input):\n        return \"Input must be a list of tuples.\"\n    # iterate over tuples and check if they have equal length\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return \"All the tuples must have equal length.\"\n    # if we reach this point, all tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to keep track of the length of each tuple\n    lengths = []\n\n    # loop through each tuple in the input list\n    for tup in Input:\n        # add the length of the tuple to the lengths list\n        lengths.append(len(tup))\n\n    # check if all tuples have the same length\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Set the gap size\n    gap = n // 2\n\n    # Keep swapping until the gap is 1\n    while gap > 0:\n        # Iterate over the list and swap elements\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                # Swap the elements\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n        # Decrease the gap size\n        gap //= 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # define a helper function to swap elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define a helper function to compare elements in the list\n    def compare(nums, i, j):\n        if nums[i] > nums[j]:\n            return 1\n        elif nums[i] < nums[j]:\n            return -1\n        else:\n            return 0\n\n    # define a helper function to move the pivot to its final position in the list\n    def move_pivot(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if compare(nums, j, high) == 1:\n                i += 1\n                swap(nums, i, j)\n        swap(nums, i + 1, high)\n        return i + 1\n\n    # define the main function of the comb sort algorithm\n    def sort(nums, low, high):\n        if low < high:\n            pivot_index = move_pivot(nums, low, high)\n            sort(nums, low, pivot_index - 1)\n            sort(nums, pivot_index + 1, high)\n\n    # call the main function to sort the list using the comb sort algorithm\n    sort(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    max_iter = n * 10  # set a limit on the number of iterations\n    i = 0\n    while swapped and i < max_iter:\n        swapped = False\n        for j in range(n-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the comb sort algorithm.\n    \n    Args:\n    nums (list): A list of elements to be sorted.\n    \n    Returns:\n    The sorted list of elements.\n    '''\n    \n    # Initialize the gap and swapped variables\n    gap = len(nums)\n    swapped = True\n    \n    # Loop until no more swaps are made\n    while swapped:\n        # Set swapped to False\n        swapped = False\n        \n        # Loop over the gap size\n        for i in range(gap):\n            # If the element is greater than the adjacent element, swap them\n            if nums[i] > nums[i+gap]:\n                # Swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                # Set swapped to True\n                swapped = True\n        \n        # Set the gap to half the current gap\n        gap = int(gap/1.3)\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    # loop until no swaps are made\n    while swapped:\n        swapped = False\n\n        # loop through each element in the list\n        for i in range(gap, n):\n\n            # if the current element is greater than the next element\n            if nums[i] < nums[i - gap]:\n\n                # swap the elements\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n                # set the swapped flag to True\n                swapped = True\n\n        # decrease the gap by half\n        gap = (gap * 10) // 13\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize swapping to True\n    swapping = True\n    # While swapping is True\n    while swapping:\n        swapping = False\n        # Iterate over the list\n        for i in range(n):\n            # Calculate the index of the minimum element\n            min_idx = i\n            for j in range(i+1, n):\n                if nums[j] < nums[min_idx]:\n                    min_idx = j\n            # Swap the elements if they are not in the correct order\n            if min_idx!= i:\n                nums[i], nums[min_idx] = nums[min_idx], nums[i]\n                swapping = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        n = n - 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define the swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # define the comparison function\n    def comparison(nums, i, j):\n        return nums[i] - nums[j]\n    \n    # define the main loop\n    for i in range(len(nums)):\n        # find the minimum element in the unsorted part of the list\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if comparison(nums, j, min_index) < 0:\n                min_index = j\n        \n        # swap the minimum element with the i-th element\n        swap(nums, i, min_index)\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap = (gap * 10) // 13\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n**0.5)\n    for i in range(1, sqrt_n+1):\n        if (i*i + n) == (i*i + (sqrt_n*sqrt_n)):\n            print(\"The number can be represented as the difference of two squares.\")\n            return\n    print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # The given number can be represented as the difference of two squares if it is a perfect square \n    if n == int(n**0.5)**2: \n        return True\n    \n    # If the given number is not a perfect square, then we can check all the squares between 1 and the square root of the given number \n    for i in range(1, int(n**0.5)+1):\n        if n - i*i == int(n**0.5)**2:\n            return True\n    \n    # If we reach here, then the given number cannot be represented as the difference of two squares \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0:\n        print(n, \"is divisible by 4\")\n        return False\n    if n < 0:\n        n = -n\n    \n    i = 0\n    while i * i <= n:\n        j = int(n // i)\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # check if the square root of n is an integer\n    square_root = int(n ** 0.5)\n    if not isinstance(square_root, int):\n        return False\n    \n    # check if n can be represented as the difference of two squares\n    if n == square_root ** 2 + square_root:\n        return True\n    elif n == square_root ** 2 - square_root:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # if n is less than 2, it cannot be represented as the difference of two squares\n    if n < 2:\n        return False\n\n    # check if n is equal to the square of any integer between 1 and n-1\n    for i in range(2, int(n**0.5)+1):\n        if n == i**2:\n            return True\n        elif n == (n-i)**2:\n            return True\n\n    # if n is not equal to any of the above, it cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(num):\n        '''\n        Function to check whether a number is a square or not.\n        '''\n        if num <= 0:\n            return False\n        sqrt = int(num ** 0.5) + 1\n        return sqrt ** 2 == num\n        \n    def get_square(num):\n        '''\n        Function to get the square of a number.\n        '''\n        return num ** 2\n        \n    # Check if n is a square\n    if is_square(n):\n        # Get the square of n and store it in num\n        num = n\n        # Get the square of (num - n) and store it in num1\n        num1 = get_square(num - n)\n        # Check if num1 is also a square\n        if is_square(num1):\n            return True\n        else:\n            return False\n    else:\n        # n is not a square\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check for the special case where the number is already a square\n    if n == int(n**0.5)**2:\n        return True\n    # check for the case where n can be represented as the difference of two squares\n    elif n < int(n**0.5)**2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check for odd numbers\n    if n % 2!= 0:\n        return False\n\n    # calculate the square root of n\n    sqrt = int(n ** 0.5)\n\n    # check whether n can be represented as the difference of two squares or not\n    if n == 2 * sqrt ** 2:\n        return True\n    elif n == 2 * (sqrt + 1) ** 2:\n        return True\n    elif n == 2 * (sqrt - 1) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Function to check whether a number is a perfect square or not\n    def is_square(num):\n        if num < 0:\n            return False\n        sqrt = int(num**0.5) + 1\n        return sqrt*sqrt == num\n\n    # Function to check whether the difference of two squares is a perfect square or not\n    def is_dif_square(num):\n        diff = n - num\n        return is_square(diff)\n\n    # Check if the given number is a perfect square or not\n    if is_square(n):\n        return True\n    else:\n        # Check if the difference of the square of the given number is a perfect square or not\n        if is_dif_square(n):\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Find the square root of the number\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if the square root is a perfect square\n    if int(sqrt_n ** 2) == sqrt_n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a list of unique colors\n    unique_colors = list(set(colors))\n    # If the length of the colors list is equal to the length of the patterns array, then they are same patterns\n    if len(unique_colors) == len(patterns):\n        # Check if all colors are present in the patterns array\n        for color in unique_colors:\n            if color not in patterns:\n                return False\n        # Check if the sequence of patterns is present in the patterns array\n        for i in range(len(unique_colors)):\n            for j in range(i+1, len(unique_colors)):\n                if patterns[i]!= patterns[j] and (patterns[i] in patterns[j] or patterns[j] in patterns[i]):\n                    return False\n        return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # check if the length of colors is equal to the length of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # loop through the colors and patterns\n    for i in range(len(colors)):\n        # check if the colors are same as in the patterns\n        if colors[i]!= patterns[i]:\n            return False\n        \n    # if all the colors and patterns match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Initialize a boolean variable to keep track of whether the patterns are valid\n    valid = True\n\n    # Iterate through the colors array\n    for i in range(len(colors)):\n        # Check if the current color is in the given pattern\n        if colors[i] in patterns[i]:\n            # If the color is in the pattern, check if the pattern is valid\n            if patterns[i]!= [patterns[i][0], patterns[i][-1]]:\n                # If the pattern is not valid, set the valid variable to False and break out of the loop\n                valid = False\n                break\n        else:\n            # If the color is not in the pattern, set the valid variable to False and break out of the loop\n            valid = False\n            break\n\n    # Return the value of the valid variable\n    return valid"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # iterate through the patterns array\n    for pattern in patterns:\n        # convert the pattern string to a list of colors\n        pattern_colors = [c for c in pattern]\n        \n        # check if all colors in the pattern are present in the colors array\n        for color in pattern_colors:\n            if color not in colors:\n                return False\n        \n        # remove the used colors from the colors array\n        colors = [c for c in colors if c not in pattern_colors]\n        \n        # check if all colors in the pattern have been removed from the colors array\n        if len(pattern_colors) > 0:\n            return False\n    \n    # if all patterns have been checked and no colors have been left, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Args:\n        colors (list): A list of colors.\n        patterns (list): A list of patterns.\n\n    Returns:\n        bool: True if the colors follow the sequence given in the patterns array, False otherwise.\n    \"\"\"\n\n    # Initialize a boolean variable to store the result\n    result = True\n\n    # Initialize a list to store the current pattern in progress\n    current_pattern = []\n\n    # Loop through the colors\n    for color in colors:\n\n        # Check if the current color is a valid pattern for the current pattern\n        if patterns.index(current_pattern) == len(patterns) - 1:\n            current_pattern.append(color)\n        elif color in patterns[patterns.index(current_pattern) + 1]:\n            current_pattern.append(color)\n        else:\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a counter for each color in the colors array\n    count_dict = {color: 0 for color in colors}\n    # Check if the colors in the patterns array follow the sequence in the colors array\n    for pattern in patterns:\n        if pattern == 'W' and count_dict[colors[0]] == 0:\n            count_dict[colors[0]] += 1\n        elif pattern == 'B' and count_dict[colors[1]] == 0:\n            count_dict[colors[1]] += 1\n        elif pattern == 'G' and count_dict[colors[2]] == 0:\n            count_dict[colors[2]] += 1\n        elif pattern == 'R' and count_dict[colors[3]] == 0:\n            count_dict[colors[3]] += 1\n        elif pattern == 'Y' and count_dict[colors[4]] == 0:\n            count_dict[colors[4]] += 1\n        else:\n            # If there is no valid color in the patterns array, return False\n            return False\n        # Check if the counter for each color in the colors array is 0\n        if sum(count_dict.values()) == 0:\n            return True\n    # If the counter for each color in the colors array is not 0, there is no valid pattern\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Find the common pattern in the colors list\n    common_pattern = [pattern for pattern in patterns if pattern in colors]\n    \n    # If no common pattern is found, return False\n    if not common_pattern:\n        return False\n    \n    # Find the number of elements in the common pattern\n    num_elements = len(common_pattern)\n    \n    # Count the number of occurrences of the common pattern in the colors list\n    num_colors = sum(colors.count(p) for p in common_pattern)\n    \n    # If the number of occurrences is not equal to the number of elements, return False\n    if num_colors!= num_elements:\n        return False\n    \n    # Check if the colors list is in the sequence of the common pattern\n    colors_in_pattern = [color for color in colors if color in common_pattern]\n    for i in range(len(colors_in_pattern)):\n        if colors_in_pattern[i]!= colors_in_pattern[i+1]:\n            return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    if len(patterns)!= n:\n        return False\n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n\n    # Check if the number of patterns is equal to the number of colors\n    if len(patterns)!= n:\n        return False\n\n    # Check if the number of patterns is odd\n    if n % 2!= 0:\n        return False\n\n    # Check if the colors are in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # Check if the patterns form a sequence\n    for i in range(n - 1):\n        if patterns[i]!= patterns[i + 1] - 1:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Find the longest pattern in the patterns array\n    longest_pattern = max(patterns, key=len)\n\n    # Initialize a list to store the current pattern\n    current_pattern = []\n\n    # Loop through the colors array\n    for color in colors:\n        # If the current color matches the first color in the longest pattern, add it to the current pattern\n        if color == longest_pattern[0]:\n            current_pattern.append(color)\n\n        # If the current pattern is the same as the longest pattern, the colors match the sequence\n        if current_pattern == longest_pattern:\n            return True\n\n        # If the current pattern is longer than the longest pattern, the colors do not match the sequence\n        if len(current_pattern) > len(longest_pattern):\n            return False\n\n    # If we get to this point, the colors do not match the sequence\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_count = 0\n        for num in tup:\n            if num % K == 0:\n                divisible_count += 1\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the result\n    result = []\n    \n    # iterate over each tuple in the test_list\n    for tup in test_list:\n        # create a set to store the remainders of each element in the tuple\n        remainders = set()\n        \n        # iterate over each element in the tuple\n        for num in tup:\n            # if the element is not divisible by k, add the element to the remainders set\n            if num % K!= 0:\n                remainders.add(num)\n                \n        # if all elements in the tuple are divisible by k, add the tuple to the result list\n        if len(remainders) == 0:\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        test_list: a list of tuples\n        K: an integer\n\n    Returns:\n        a list of tuples where all elements are divisible by K\n\n    \"\"\"\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the valid tuples\n    valid_tuples = []\n    # loop through each tuple in the test_list\n    for i in range(len(test_list)):\n        # loop through each element in the current tuple\n        for j in range(len(test_list[i])):\n            # check if the current element is divisible by k\n            if test_list[i][j] % K!= 0:\n                # if not, break out of the inner loop\n                break\n            # if the current element is divisible by k, check if all elements in the current tuple are divisible by k\n            else:\n                # if all elements in the current tuple are divisible by k, add the tuple to the valid_tuples list\n                if all(test_list[i][k] % K == 0 for k in range(len(test_list[i]))):\n                    valid_tuples.append(tuple(test_list[i]))\n                # if not, break out of the inner loop\n                else:\n                    break\n    # return the valid_tuples list\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        all_divisible = True\n        for elem in t:\n            if elem % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            divisible_tuples.append(i)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a list of tuples containing\n    all elements from the input list that are divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        tuple_elements = [num % K for num in test_list[i]]\n        if all(num == K for num in tuple_elements):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as an input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, otherwise it returns False.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # if the number is less than 10, it's not divisible by 11\n    if n < 10:\n        return False\n    # check if the last digit is 1, 2, 3, 4, or 5\n    if n % 10 in [1, 2, 3, 4, 5]:\n        return True\n    # check if the last digit is 0\n    if n % 10 == 0:\n        return False\n    # check if the sum of the digits is divisible by 11\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even.\")\n        else:\n            print(f\"{word} is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Splitting the string into a list of words\n    words = s.split()\n    # Initializing a variable to keep track of the length of the words\n    length = 0\n    # Looping through each word in the list\n    for word in words:\n        # Calculating the length of each word\n        word_len = len(word)\n        # Checking if the length of the word is odd or even\n        if word_len % 2!= 0:\n            # If the length is odd, the function returns True\n            return True\n        # Updating the length variable\n        length += word_len\n    # If the loop completes without finding an odd word length, the function returns False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd length.\")\n        else:\n            print(word, \"is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # splitting the string into words\n    words = s.split()\n\n    # iterating through each word and checking its length\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd\")\n        else:\n            print(word, \"is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] # split the string by space and take first element\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Convert the string to a list of characters\n    lst = list(s)\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through the list of characters\n    for char in lst: \n        # If the character is a space, reset the counter variable to 0\n        if char =='':\n            count = 0\n        \n        # Increment the counter variable by 1 for every other character\n        elif char.isalpha():\n            count += 1\n            \n    # Check if the count is odd or even and return the result\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def tetrahedral(num):\n        if num == 1:\n            return 1\n        return num * (3*num-1) // 2\n\n    def count_primes_less_than_n(n):\n        count = 0\n        for i in range(2, n+1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    def nth_tetrahedral(n):\n        if n == 1:\n            return 1\n        else:\n            count = count_primes_less_than_n(tetrahedral(n-1))\n            if count == n:\n                return tetrahedral(n-1)\n            else:\n                return nth_tetrahedral(n)\n\n    return nth_tetrahedral(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize a variable to store the nth tetrahedral number\n    nth_tetra = 0\n\n    # Loop through the first n terms of the tetrahedral sequence\n    for i in range(1, n + 1):\n        # Calculate the sum of the first n terms of the tetrahedral sequence\n        term = (i * (i + 1)) // 2\n        # Check if the sum is a tetrahedral number\n        if sum_is_tetra(term):\n            # If it is, add 1 to the nth tetrahedral number\n            nth_tetra += 1\n\n    return nth_tetra\n\n\ndef sum_is_tetra(term):\n    \"\"\"\n    Check if a given term is a tetrahedral number.\n    \"\"\"\n    # Initialize a variable to store the sum of the squares of the first n terms\n    sum_of_squares = 0\n\n    # Loop through the first n terms of the tetrahedral sequence\n    for i in range(1, term // 2 + 1):\n        # Calculate the sum of the squares of the first n terms\n        sum_of_squares += i ** 2\n\n    # Check if the sum of the squares is equal to the term\n    return sum_of_squares == term"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (4 * n * n - 1) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * n * (n + 1) * (n + 2)) // 6 "
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    i = 1\n    while i <= n:\n        t += i\n        i += 1\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = 0\n    i = 1\n    while i <= n:\n        tetrahedral_num += i * (4*i-1) / 2\n        i += 1\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n < 0:\n        return \"Invalid input. n should be a non-negative integer.\"\n\n    if n == 0:\n        return 0\n\n    # Initialize variables\n    num = 1\n    power = 1\n\n    # Loop through n\n    for i in range(1, n + 1):\n        # Calculate the value of num\n        num *= power\n\n        # Increment power by 1\n        power += 1\n\n    return num\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    A = 1\n    B = 4\n    C = 6\n    D = 8\n    count = 0\n    tetrahedral_number = 0\n    \n    # Calculate tetrahedral numbers\n    while count < n:\n        count += 1\n        tetrahedral_number = (A + B + C + D) / 2\n        \n        # Update A, B, C, and D\n        A += 1\n        B += 1\n        C += 1\n        D += 1\n        \n    return tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = 0\n    for i in range(n+1):\n        tetrahedral_num += i * (2*i+1)\n    return tetrahedral_num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the character variable as an empty string\n    char = ''\n    # loop through each character in the string\n    for char_i in strr:\n        # add the ASCII value of the character to the character variable\n        char += chr(ord(char_i)+1)\n        # add a space between each character in the string\n        char +=''\n    # return the final character variable\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character modulo 26 to the result\n        result = (result + ord(char)) % 26\n    \n    # Return the result\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    \n    return chr(sum_ascii % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in range(len(strr)):\n        char_sum += ord(strr[i])\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in strr:\n        char_sum += ord(i)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Function to find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_ascii = ascii_sum % 26\n    return chr(char_ascii + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to list of characters\n    char_list = list(strr)\n\n    # Initialize the sum of ASCII values to zero\n    sum_ascii = 0\n\n    # Iterate through each character in the list\n    for char in char_list:\n        # Convert the character to ASCII value\n        ascii_value = ord(char)\n\n        # Add the ASCII value to the sum\n        sum_ascii += ascii_value\n\n    # Convert the sum to character and return it\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence list with the first two numbers in the sequence\n    sequence_list = [0, 1]\n    # Loop through the sequence and calculate each subsequent number in the sequence\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence using the formula: 3^i - 2^(i+1)\n        next_number = 3**i - 2**(i+1)\n        # Append the next number to the sequence list\n        sequence_list.append(next_number)\n    # Return the nth number in the sequence list\n    return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Define the sequence as a list\n    sequence = [1]\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is in the sequence\n        if i not in sequence:\n            # Add the current number to the sequence\n            sequence.append(i)\n        else:\n            # Find the last occurrence of the current number in the sequence\n            last_index = sequence.index(i)\n            # Remove the last occurrence from the sequence\n            sequence.pop(last_index)\n            # Add the current number to the end of the sequence\n            sequence.append(i)\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return sequence(n-1) * (4 - n) // 3"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        next_number = sum(sequence[-2:])\n        sequence.append(next_number)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(3*sequence[-1] - sequence[-2] + sequence[-3])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]  # start the sequence with 0 and 1\n    for i in range(2, n):\n        next_sequence = [0] * len(sequence)\n        for j in range(len(sequence)):\n            if sequence[j] == 1:\n                if (j == 0 or sequence[j - 1] == 0) and (j == len(sequence) - 1 or sequence[j + 1] == 0):\n                    next_sequence[j] = 0\n                else:\n                    next_sequence[j] = 1\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence \n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 259695496911122455, 420196140727489463, 67989163763861191"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    # The sequence is defined as 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,...\n    # The number of 1s in the sequence is n\n    count = 1\n    while count < n:\n        count += 2\n        print(count)\n\nn = int(input(\"Enter the value of n: \"))\nsequence(n)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sequence(n//2) + sequence(n//2)\n    else:\n        return sequence(3*n + 1) + sequence(3*n + 1)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r ** 3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Args:\n        n (int): the index of the centered hexagonal number to find.\n\n    Returns:\n        int: the nth centered hexagonal number.\n    \"\"\"\n    return (5 * n ** 2 + 3) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(i):\n        if i == 0:\n            return 1\n        else:\n            return centered_hexagonal_helper(i-1) * 6 // 5 + 1\n    \n    return centered_hexagonal_helper(n-1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1:\n        return 1\n    else:\n        return 2 * centered_hexagonal_number(n-1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: n = 0 or n = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    # General case: nth centered hexagonal number = 2n - 1\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the value of the centered hexagonal number\n    hex_val = (2 * n - 1) * (4 * n - 3) // 3\n    \n    # Return the centered hexagonal number\n    return hex_val"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # n is even, so find the centered hexagonal number\n        centered_hexagonal = n // 2 * (2 * n - 1) // 3\n    else:\n        # n is odd, so find the centered hexagonal number\n        centered_hexagonal = (n // 2) * (2 * n - 1) // 3 + 1\n        \n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number using the formula:\n    \n    (1/3) * (2^(n/2) - 1)\n    \n    The centered hexagonal number is the number of ways to arrange n rows of centered hexagons in a 2x2 square grid.\n    \"\"\"\n    return int((1/3) * (2**(n/2) - 1))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1 # starting number\n    b = 2 # center number\n    c = 3 # end number\n    \n    # calculate the nth centered hexagonal number\n    while n > 0:\n        a = (a**2) - (b**2) + c\n        b = (a + b) / 2\n        c = (a - b) / 2\n        n -= 1\n    \n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*n - 1) // 2 + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2 * (n - 1) + centered_hexagonal_number(n - 1)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries and merges them into a single dictionary.\n\n    Args:\n    dict1 (dict): The first dictionary to merge.\n    dict2 (dict): The second dictionary to merge.\n    dict3 (dict): The third dictionary to merge.\n\n    Returns:\n    dict: The merged dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store the merged dictionary.\n    merged_dict = {}\n\n    # Loop through the three dictionaries and merge them into the merged dictionary.\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary.\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary that contains all the key-value pairs from the three dictionaries.\n\n    Parameters:\n    dict1 (dict): First dictionary.\n    dict2 (dict): Second dictionary.\n    dict3 (dict): Third dictionary.\n\n    Returns:\n    dict: A single dictionary that contains all the key-value pairs from the three dictionaries.\n    \"\"\"\n    # Merge the dictionaries into a single dictionary\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to hold the final result\n    merged_dict = {}\n\n    # Iterate through the keys of the first dictionary\n    for key in dict1:\n        # If the key is already in the merged dictionary, merge the values\n        if key in merged_dict:\n            merged_dict[key] = ct.ChainMap(dict1[key], merged_dict[key])\n        # If the key is not in the merged dictionary, add the key and value\n        else:\n            merged_dict[key] = dict1[key]\n\n    # Iterate through the keys of the second dictionary\n    for key in dict2:\n        # If the key is already in the merged dictionary, merge the values\n        if key in merged_dict:\n            merged_dict[key] = ct.ChainMap(dict2[key], merged_dict[key])\n        # If the key is not in the merged dictionary, add the key and value\n        else:\n            merged_dict[key] = dict2[key]\n\n    # Iterate through the keys of the third dictionary\n    for key in dict3:\n        # If the key is already in the merged dictionary, merge the values\n        if key in merged_dict:\n            merged_dict[key] = ct.ChainMap(dict3[key], merged_dict[key])\n        # If the key is not in the merged dictionary, add the key and value\n        else:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to be merged.\n        dict2 (dict): Second dictionary to be merged.\n        dict3 (dict): Third dictionary to be merged.\n\n    Returns:\n        dict: Merged dictionary containing all the keys from all three dictionaries.\n    '''\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n\n    # iterate over the three dictionaries and merge their keys and values\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def freq_count(list1):\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through the list and update the frequency dictionary\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the frequency of all the elements in the list,\n    returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = collections.defaultdict(int)\n\n    # Iterate through the list and update the frequency of each element in the dictionary\n    for item in lst:\n        freq[item] += 1\n\n    # Return the dictionary containing the frequency of each element in the list\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the list and update the frequency of each element in the dictionary\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    # define the upper and lower bounds of the search\n    lower_bound = 1\n    upper_bound = N\n\n    # iterate until the lower bound is greater than the upper bound\n    while lower_bound <= upper_bound:\n        # calculate the middle number of the search\n        mid = (lower_bound + upper_bound) // 2\n\n        # if the middle number is the closest smaller number to N, return it\n        if N - mid < mid - N:\n            return mid\n\n        # if the middle number is closer to N than the previous closest number, update the upper bound\n        elif N - mid == mid - N:\n            upper_bound = mid - 1\n\n        # otherwise, update the lower bound\n        else:\n            lower_bound = mid + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N+1))\n    closest = min(nums)\n    for num in nums:\n        if abs(closest - num) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    closest = float('inf')\n    for num in nums:\n        diff = abs(num - N)\n        if diff < closest:\n            closest = diff\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = abs(N - 1)\n    min_num = N\n    \n    for i in range(N-1, -1, -1):\n        if abs(i - N) < min_diff:\n            min_diff = abs(i - N)\n            min_num = i\n            \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    smallest = N\n    closest = smallest\n\n    # Iterate through the numbers from 1 to n-1\n    for i in range(2, N):\n        # Check if the current number is smaller than the smallest so far\n        if i < smallest:\n            # If it is, update the smallest and closest numbers\n            smallest = i\n            closest = smallest if abs(closest - smallest) <= abs(closest - i) else i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = sorted(list(set(range(N+1))))[1]\n    m = n - 1\n    smaller = min(n, N-n)\n    if smaller < 1:\n        return n\n    if N-n > n:\n        return m\n    else:\n        return n-1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N+1):\n        if abs(i-N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    for num in range(N, -1, -1):\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the closest smaller number than N\n    smaller_num = min(N, 2 * N + 1)\n    # Find the closest larger number than N\n    larger_num = max(N, 2 * N - 1)\n    # Return the closest smaller number\n    return min(smaller_num, larger_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    min_num = float('inf')\n    min_diff = float('inf')\n    for i in range(n):\n        if abs(i-n) < min_diff:\n            min_diff = abs(i-n)\n            min_num = i\n    return min_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_len = 0\n    curr_len = 0\n    \n    # iterate through the list of words\n    for word in list1:\n        # check if the current word is longer than the previous longest word\n        if len(word) > curr_len:\n            # update the longest word length\n            max_len = curr_len\n            # reset the current word length\n            curr_len = len(word)\n        else:\n            # update the current word length\n            curr_len = len(word)\n            \n    # return the longest word length\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, list):\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the string values to a list\n    list1 = str1.split()\n\n    # Loop through the list of string values and check if the substring is present\n    for item in list1:\n        if item == sub_str:\n            return True\n\n    # If the substring is not present in the list, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes two arguments: a list of string values and a substring to look for.\n    It returns True if the substring is found in the list and False otherwise.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_undulating(n//2)\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return \"Even numbers are not undulating.\"\n    else:\n        return \"Odd numbers are undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        return True\n    # Check if the number is divisible by 10\n    elif n % 10 == 0:\n        return True\n    # Check if the number is divisible by 20\n    elif n % 20 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check whether the given number is odd or even\n    if n % 2 == 0:\n        # The given number is even, so it cannot be undulating\n        return False\n    else:\n        # The given number is odd, so it can be undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even number is not undulating'\n    else:\n        return 'Odd number is undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return \"Undulating\"\n    else:\n        return \"Not undulating\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (float): the base number to raise to the power 'b'.\n    b (int): the power to raise 'a' to.\n\n    Returns:\n    float: the value of 'a' raised to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Args:\n        a (float): The base value.\n        b (int): The power value.\n\n    Returns:\n        float: The value of 'a' to the power 'b'.\n\n    Raises:\n        ValueError: If 'b' is not a positive integer.\n    \"\"\"\n    if not isinstance(b, int) or b <= 0:\n        raise ValueError(\"b must be a positive integer.\")\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[minimum_index][1]:\n            minimum_index = i\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in `sorted()` function to sort the list by the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Get the index of the first tuple in the sorted list\n    minimum_index = test_list.index(sorted_list[0])\n    # Return the index of the first tuple in the sorted list\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on the second value (the second element in each tuple)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of the tuples.\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list.\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = len(lst[0])  \n    for i in range(len(lst)):  \n        if len(lst[i]) < min_length:  \n            min_length = len(lst[i])  \n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])  \n    for i in range(1, len(lst)):  \n        if len(lst[i]) < min_len:  \n            min_len = len(lst[i])  \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        length = len(i)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length  "
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    frequency = {}\n    # iterate over all the elements in the input list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count\n        if element in frequency:\n            frequency[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            frequency[element] = 1\n    # return the dictionary of frequencies\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is a list, recursively call the function to find its frequency\n        if isinstance(element, list):\n            freq_dict.update(frequency_lists(element))\n        # If the element is not a list, check if it is already in the dictionary\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    # Return the dictionary with the frequency of each element in the flattened list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the input list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # loop through each element in the flattened list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq:\n            # increment the frequency count for the element\n            freq[element] += 1\n        else:\n            # add the element to the dictionary with a frequency count of 1\n            freq[element] = 1\n\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the input list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Use a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:  \n        result *= num  \n    return result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize the result string and a flag to keep track of whether the number is negative or not\n    result = ''\n    is_negative = False\n\n    # Check if the number is negative and convert it to its binary equivalent\n    if n < 0:\n        n = abs(n)\n        is_negative = True\n\n    # Convert the number to binary recursively\n    while n > 0:\n        remainder = n % 2\n        result = str(remainder) + result\n        n = n // 2\n\n    # Add the negative sign to the front of the binary string if necessary\n    if is_negative:\n        result = '-' + result\n\n    # Remove leading zeros from the binary string\n    while result.startswith('0') and result.startswith('-'):\n        result = result[1:]\n\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = ''\n\n    while n > 0:\n        rem = n % 2\n        binary = str(rem) + binary\n        n = n // 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to store the binary equivalent\n    binary_string = ''\n    # Loop through each digit of the decimal number\n    for digit in str(n):\n        # Multiply the current digit by 2 and add the result to the binary_string\n        binary_string += str(digit*2)\n    # Return the binary string without any leading zeros\n    return binary_string[1:]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        rem = n % 2\n        binary = str(rem) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # initialize the smallest palindrome number\n    smallest = num + 1\n    # loop until we find the next smallest palindrome\n    while smallest * 10 > num:\n        # increase the smallest palindrome number by one\n        smallest += 1\n    # return the next smallest palindrome\n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 10:\n        return num\n\n    def is_palindrome(n):\n        \"\"\"\n        Helper function to check if a number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    def reverse_digits(n):\n        \"\"\"\n        Helper function to reverse the digits of a number.\n        \"\"\"\n        return int(''.join(str(n)[::-1]))\n\n    n = num\n    while True:\n        if is_palindrome(n):\n            return n\n\n        if reverse_digits(n) > 100:\n            break\n\n        n = reverse_digits(n) + 1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    try:\n        num = int(sys.argv[1])\n    except ValueError:\n        print(\"Invalid input\")\n        sys.exit(1)\n\n    result = next_smallest_palindrome(num)\n    print(f\"The next smallest palindrome of {num} is {result}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        next_num = num + 1\n        if is_palindrome(next_num):\n            return next_num\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    # generate all possible palindromes\n    palindromes = []\n    for i in range(10**(num-1), 10**num):\n        for j in range(i, 10**(num-1), -1):\n            palindromes.append(i*j)\n\n    # sort the palindromes in ascending order\n    palindromes.sort()\n\n    # find the first palindrome in the sorted list\n    for i in range(len(palindromes)):\n        if is_palindrome(palindromes[i]):\n            return palindromes[i]\n\n    # if no palindromes found, return 0\n    return 0"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 999999999\n\n    for i in range(1000000000, 10000000000, -1):\n        if str(i) == str(i)[::-1]:\n            if i < num:\n                return i\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python main.py [integer]\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize a flag to indicate if the number is odd or even\n    is_odd = num % 2 == 1\n    \n    # Initialize two variables to store the smallest and largest possible palindromes\n    smallest_palindrome = int(str(num)[::-1])\n    largest_palindrome = int(str(num*1000)[::-1])\n    \n    # Loop through each digit of the number and update the smallest and largest palindromes\n    for i in range(len(str(num))):\n        for j in range(i+1, len(str(num))):\n            # Find the next smallest palindrome of the current one\n            next_num = int(str(num)[i] + str(num)[j])\n            next_smallest = int(str(next_num)[::-1])\n            \n            # Update the smallest palindrome if necessary\n            if next_smallest < smallest_palindrome:\n                smallest_palindrome = next_smallest\n            \n            # Find the next largest palindrome of the current one\n            next_num = int(str(num)[i:j+1]) * 1000\n            next_largest = int(str(next_num)[::-1])\n            \n            # Update the largest palindrome if necessary\n            if next_largest > largest_palindrome:\n                largest_palindrome = next_largest\n                \n    # Return the smallest palindrome that is greater than or equal to the input number\n    if is_odd:\n        return largest_palindrome + 1\n    else:\n        return smallest_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Convert the first digit of the number to a list\n    first_digit = [int(x) for x in num_str]\n    # Find the smallest palindrome that starts with the same first digit as the original number\n    smallest_palindrome = 10**(len(num_str)-1) - 1\n    for i in range(10**(len(num_str)-1), 10**(len(num_str)-2), -1):\n        if all(x == first_digit[0] for x in str(i)):\n            if i > smallest_palindrome:\n                smallest_palindrome = i\n    # Add 1 to the smallest palindrome to get the next smallest palindrome\n    return smallest_palindrome + 1\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    result = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # initialize variables\n    smallest_palindrome = 0\n    next_smallest_palindrome = 0\n    last_odd_palindrome = 0\n    \n    # find the smallest palindrome greater than or equal to num\n    while smallest_palindrome < num:\n        smallest_palindrome = int(str(smallest_palindrome**2).zfill(len(str(num))))\n    \n    # find the next smallest palindrome\n    while next_smallest_palindrome > smallest_palindrome:\n        next_smallest_palindrome = int(str(next_smallest_palindrome**2).zfill(len(str(smallest_palindrome))))\n    \n    # find the last odd palindrome greater than or equal to num\n    for i in range(smallest_palindrome, next_smallest_palindrome+1):\n        if int(str(i)[0]) % 2 == 1:\n            last_odd_palindrome = i\n            break\n    \n    # calculate the next smallest palindrome\n    next_smallest_palindrome = last_odd_palindrome + 1\n    \n    # return the next smallest palindrome\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def smallest_palindrome(n):\n        result = n\n        while True:\n            result += 1\n            if is_palindrome(result) and is_prime(result):\n                return result\n\n    def next_smallest_palindrome_helper(n):\n        next_num = smallest_palindrome(n)\n        if next_num == n:\n            return next_smallest_palindrome_helper(next_num)\n        else:\n            return next_num\n\n    return next_smallest_palindrome_helper(num)\n\n\nif __name__ == '__main__':\n    try:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    except:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer.\n    '''\n    # Find the smallest prime number greater than the specified number\n    smallest_prime = 2\n    while not is_prime(smallest_prime):\n        smallest_prime += 1\n    while is_palindrome(smallest_prime):\n        smallest_prime += 1\n    # Find the next smallest palindrome greater than the specified number\n    while not is_palindrome(smallest_prime + num):\n        smallest_prime += 1\n    return smallest_prime + num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError(\"k is greater than the length of the array.\")\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if k > mid:\n            return kth_element(arr[:mid], k - mid)\n        else:\n            return kth_element(arr[mid:], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Error: k is greater than the number of elements in the array\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left_half = arr[:n // 2]\n        right_half = arr[n // 2:]\n        left_kth = kth_element(left_half, k // 2)\n        right_kth = kth_element(right_half, k // 2)\n        if k % 2 == 0:\n            return (left_kth + right_kth) // 2\n        else:\n            return left_kth"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and the kth element to find as arguments. It returns the kth element of the array.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty\n    if not arr:\n        return None\n    # get the length of the array\n    n = len(arr)\n    # check if the k is valid\n    if k < 1 or k > n:\n        return None\n    # initialize variables for i and j\n    i = 0\n    j = n-1\n    # set the target index\n    target_index = k - 1\n    # keep track of the current index\n    current_index = -1\n    # while i < j\n    while i < j:\n        # check if the current index is equal to the target index\n        if current_index == target_index:\n            return arr[current_index]\n        # increment the current index\n        current_index += 1\n        # check if the current index is greater than the target index\n        if current_index > target_index:\n            # swap the current index with the target index\n            arr[i], arr[j] = arr[j], arr[i]\n            # increment i and decrement j\n            i += 1\n            j -= 1\n        # if the current index is less than or equal to the target index\n        else:\n            # increment i\n            i += 1\n    # if the loop completes without finding the target index, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or not\n    if not arr:\n        print(\"Array is empty\")\n        return\n    \n    # Check if the kth element is less than or equal to 0 or greater than the length of the array\n    if k <= 0 or k > len(arr):\n        print(\"Invalid input. Please provide a valid input.\")\n        return\n    \n    # Find the index of the kth element\n    index = k - 1\n    \n    # Iterate through the array and return the element at the index\n    for i in range(len(arr)):\n        if i == index:\n            return arr[i]\n    \n    # If the index is not found in the array, return None\n    print(\"Invalid input. Please provide a valid input.\")\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid == k:\n                return arr[mid-1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the words together with a capitalized first letter\n    camel_case_word = ''.join(capitalized_words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.capitalize())\n    return \"\".join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Initialize the result string as an empty string\n    result = ''\n\n    # Loop through each character in the word\n    for char in word:\n        # If the current character is a lowercase letter, convert it to uppercase and append it to the result string\n        if char.islower():\n            result += char.upper()\n        # If the current character is a non-lowercase letter, append it to the result string as is\n        else:\n            result += char\n\n    # Return the result string\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a single string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i] == '_':\n            result += word[i+1].upper()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first letter of each word to lowercase\n    words[0] = words[0].lower()\n\n    # Join the list of words with capital letters\n    camel_word = ''.join(words)\n\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first word to camel case\n    camel_word = words[0]\n    camel_word = camel_word.title()\n\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i].title()\n\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            if i * j == n:\n                a[i] += a[j - 1]\n    return a[n]\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n * m\n    b = n * (m + 1)\n    c = (n + 1) * m\n    d = (n + 1) * (m + 1)\n    if a < b and a < c and a < d:\n        return a\n    elif b < a and b < c and b < d:\n        return b\n    elif c < a and c < b and c < d:\n        return c\n    else:\n        return d"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Define the triangular array\n    a = [0] * (n+1)\n    a[0] = 1\n    a[1] = 1\n    for i in range(2, n+1):\n        a[i] = 2*a[i-1] - a[i-2]\n\n    # Calculate the sum of the rows of the triangular array\n    sum_rows = sum(a[i] for i in range(1, n+1))\n\n    # Calculate the sum of the columns of the triangular array\n    sum_cols = sum(a[j] for j in range(1, m+1))\n\n    # Calculate the Eulerian number\n    return (sum_rows - sum_cols) / (2 * n * m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    count = 0\n    total = 0\n    \n    # Check for edge cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3 * m\n    \n    # Calculate values for n >= 3\n    for i in range(1, n+1):\n        total += (2*i - 1) * m\n        count += 1\n    \n    # Check for even or odd count\n    if count % 2 == 0:\n        return total\n    else:\n        return (total + 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Define the boundary conditions\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        # Define the function f(n, m)\n        def f(n, m):\n            if n == 1 or m == 1:\n                return 1\n            else:\n                return f(n-1, m-1) + f(n-1, m) + f(n, m-1)\n        return f(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += i * m**i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    edges = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges[u - 1].append(v - 1)\n\n    color = [0] * n\n    visited = [False] * n\n    result = 0\n\n    def dfs(u, color):\n        visited[u] = True\n        for v in edges[u]:\n            if not visited[v]:\n                dfs(v, color)\n            elif color[v]!= color[u]:\n                result += 1\n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, color)\n\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m).\n    \"\"\"\n\n    # Calculate the combinations of n and m\n    comb = lambda n, m: reduce(lambda x, y: x * y, range(1, n + 1), 1) / reduce(lambda x, y: x * y, range(1, m + 1), 1)\n\n    # Calculate the sum of all the combinations\n    sum_comb = sum(comb(n, m) for _ in range(n * m))\n\n    # Calculate the Eulerian number a(n, m)\n    a = sum_comb / (comb(n, m) * comb(m, n))\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0 and m % 2 == 0: \n        return (1 + n) * (1 + m) // 2\n    elif n % 2 == 0 and m % 2!= 0: \n        return 2 * n * (1 + m) // 2\n    elif n % 2!= 0 and m % 2 == 0: \n        return 2 * m * (1 + n) // 2\n    else: \n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Find the maximum value of n and m\n    max_n = max(n, m)\n    max_m = max(n, m)\n\n    # Create a list to store the values of a(n, m)\n    a_list = []\n\n    # Loop through all possible values of n and m\n    for i in range(1, max_n + 1):\n        for j in range(1, max_m + 1):\n            # If n and m are equal, then a(n, m) = 1\n            if i == n and j == m:\n                a_list.append(1)\n            # If n is less than m, then a(n, m) = 1\n            elif i < m:\n                a_list.append(1)\n            # If n is greater than m, then a(n, m) = 0\n            else:\n                a_list.append(0)\n\n    # Return the final value of a(n, m)\n    return a_list[-1]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sort() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist of strings in the input list\n    for sublist in input_list:\n        # Convert the sublist to a set to remove duplicates\n        sublist_set = set(sublist)\n        # Sort the sublist in place\n        sublist_set.sort()\n        # Convert the sorted sublist back to a list and replace it in the input list\n        input_list[input_list.index(sublist)] = list(sublist_set)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == bool and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if isinstance(num, bool) and num:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the list to the tuple\n    test_tup += test_list\n    # return the tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Use a for loop to iterate over the tuples\n    for tup in test_tup:\n        # Use a concatenation operator to add the list to the tuple\n        tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup[1:])"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # check if the input lists are of the same length\n    if len(test_list)!= len(test_tup):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    # append the list to the tuple\n    test_tup += test_list\n    \n    # print the modified tuple\n    print(\"Modified tuple:\", test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # merge two lists\n    merged_list = sorted(num1 + num2)\n\n    # merge two lists and sort them\n    return sorted(merged_list + num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n            \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to sort the merged list in ascending order\n    min_heap = []\n    heapq.heapify(min_heap)\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Extract the sorted list from the min heap\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # convert the input lists to sets to eliminate duplicates\n    num1_set = set(num1)\n    num2_set = set(num2)\n    num3_set = set(num3)\n\n    # merge the sets into a single sorted list\n    merged_list = sorted(num1_set | num2_set | num3_set)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of lists to store the three input lists\n    lists = [num1, num2, num3]\n    # Initialize an empty list to store the merged lists\n    merged_list = []\n    # Use heapify to convert the lists into heaps\n    for i in range(len(lists)):\n        heapq.heapify(lists[i])\n    # Use heapq.merge to merge the heaps and append to merged_list\n    while len(lists) > 0:\n        merged_list.append(heapq.heappop(lists[0]))\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Convert the lists to heaps\n    min_heap1 = []\n    for n in num1:\n        heapq.heappush(min_heap1, n)\n    min_heap2 = []\n    for n in num2:\n        heapq.heappush(min_heap2, n)\n    min_heap3 = []\n    for n in num3:\n        heapq.heappush(min_heap3, n)\n\n    # Merge the heaps\n    merged_list = []\n    while min_heap1 and min_heap2 and min_heap3:\n        if heapq.heappop(min_heap1) < heapq.heappop(min_heap2):\n            heapq.heappush(merged_list, heapq.heappop(min_heap1))\n        elif heapq.heappop(min_heap2) < heapq.heappop(min_heap3):\n            heapq.heappush(merged_list, heapq.heappop(min_heap2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(min_heap3))\n\n    # Add any remaining elements from the heaps\n    while min_heap1:\n        merged_list.append(heapq.heappop(min_heap1))\n    while min_heap2:\n        merged_list.append(heapq.heappop(min_heap2))\n    while min_heap3:\n        merged_list.append(heapq.heappop(min_heap3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the combined list\n    merged_list.sort()\n\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the three lists using heapq.merge() function\n    merged_list = heapq.merge(num1, num2, num3)\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Convert all lists to sets to ensure uniqueness\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # Merge all sets into a single set\n    merged_set = num1.union(num2, num3)\n\n    # Convert the merged set back to a list and return it\n    return sorted(list(merged_set))"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = list(map(str, bin(int(s))[2:])) #convert the binary string to a list of characters and remove the '0b' prefix\n    \n    for _ in range(n):\n        binary_string = binary_string[-len(binary_string):] + binary_string[:len(binary_string)] #rotate the list by one position and append to the beginning of the list\n    \n    odd_numbers = sum(1 for i in binary_string if int(i) % 2 == 1) #count the number of odd numbers in the rotated binary string\n    \n    return odd_numbers"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize an empty list to store the rotated binary string\n    rotated = []\n\n    # Initialize a variable to count the number of odd values\n    count = 0\n\n    # Loop through the given number of times\n    for i in range(n):\n        # Calculate the current index of the first bit of the string\n        index = i % len(s)\n\n        # If the first bit of the string is odd, add it to the count and add the next bit to the rotated binary string\n        if s[index] == '1':\n            count += 1\n            rotated.append(s[index+1])\n        # If the first bit of the string is even, add it to the rotated binary string\n        else:\n            rotated.append(s[index])\n\n    # Return the count of odd values in the rotated binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n\n    # Find the number of zeros in the binary string\n    zero_count = binary_list.count(0)\n\n    # Find the number of ones in the binary string\n    one_count = binary_list.count(1)\n\n    # Rotate the binary string n times and count the odd numbers\n    odd_count = 0\n    for _ in range(n):\n        odd_count += binary_list.count(1)\n        temp = binary_list[-1]\n        for i in range(zero_count):\n            binary_list.insert(0,0)\n            binary_list.append(temp)\n        for i in range(one_count):\n            binary_list.insert(0,1)\n            binary_list.append(temp)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    # convert binary string to list of digits\n    digits = [int(digit) for digit in s]\n    # initialize count to 0\n    count = 0\n    # rotate the list of digits n times\n    for i in range(n):\n        digits.append(digits.pop(0))\n    # iterate through the rotated list of digits\n    for digit in digits:\n        # if the digit is odd, increment count\n        if digit % 2 == 1:\n            count += 1\n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers that can be obtained after rotating the string the given number of times.\n    \"\"\"\n    # Initialize an empty list to store the rotated strings\n    rotated_strings = []\n    # Loop through each character in the binary string\n    for char in s:\n        # Concatenate each rotated string with the character and store it in the rotated_strings list\n        rotated_strings.append(char + char)\n        rotated_strings.append(char)\n    # Initialize a counter variable to keep track of the number of odd numbers\n    count = 0\n    # Loop through each rotated string in the rotated_strings list\n    for str in rotated_strings:\n        # If the length of the string is odd, increment the counter\n        if len(str) % 2!= 0:\n            count += 1\n    # Return the count of odd numbers after rotating the string the given number of times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] == '1':\n            return 1\n        else:\n            return 0\n    else:\n        return odd_Equivalent(s[1:], n-1) + odd_Equivalent(s[0] + s[1:], n)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s.lstrip('0')  # Remove any leading zeros\n    s = s.rstrip('1')  # Remove any trailing ones\n    rot = n % len(s)  # Determine the number of rotations to perform\n    for _ in range(rot):\n        if s[0] == '0':  # If the first digit is a zero, rotate the string to the left\n            s = s[1:] + s[0]\n        else:  # If the first digit is an odd number, add a new zero to the left\n            s = '0' + s\n    return s.count('1')  # Count the number of odd numbers in the rotated string"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        if s[i] == '1':\n            s = s[-i-1:]+s[:i]\n        else:\n            s = s[:i]+s[i+1:]\n        odd_count = sum(int(x) for x in s if x == '1')\n        result += odd_count\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = bin(int(s))[2:]\n    rotated_binary = binary[n:] + binary[:n]\n    count = 0\n    for i in range(len(rotated_binary)):\n        if rotated_binary[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define an empty set to store the common elements\n    common_set = set()\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist and check if it's already in the common_set\n        for element in sublist:\n            if element in common_set:\n                # If it is, add it to the common_set\n                common_set.add(element)\n            else:\n                # If it's not, remove it from the sublist\n                sublist.remove(element)\n\n    # Return the common_set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    seen = set()\n    for item in nestedlist:\n        for nesteditem in item:\n            seen.add(nesteditem)\n    return list(seen)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        common_set.update(set(sublist))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #initialize empty set to store common elements\n    common = set()\n    #loop through each nested list\n    for sublist in nestedlist:\n        #loop through each element in the sublist\n        for element in sublist:\n            #if the element is already in the set, add it to the common set\n            if element in common:\n                common.add(element)\n            #if the element is not already in the set, add it to the set\n            else:\n                common.add(element)\n    #return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # convert the nested list to a set to remove duplicates\n    nestedlist = set(nestedlist)\n    # initialize an empty set to store the common elements\n    common = set()\n    # loop through each nested list\n    for lst in nestedlist:\n        # loop through each element in the nested list\n        for elem in lst:\n            # if the element is in the set of common elements, add it to the result set\n            if elem in common:\n                common.remove(elem)\n    # return the result set as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    else:\n        common_elements = []\n        for i in range(len(nestedlist)):\n            for j in range(i+1, len(nestedlist)):\n                if nestedlist[i] == nestedlist[j]:\n                    if nestedlist[i] not in common_elements:\n                        common_elements.append(nestedlist[i])\n        return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in a list of lists.\n\n    Args:\n    - nestedlist: a list of lists of elements\n\n    Returns:\n    - a list of common elements in the nested lists\n    \"\"\"\n    common = []\n    for lst in nestedlist:\n        common.extend(set(lst) & set(common))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        common_set.update(set(sublist))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                continue\n            for k in range(len(nestedlist)):\n                if k == i or k == j:\n                    continue\n                if nestedlist[i][j] in nestedlist[k]:\n                    common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num >= 0 and num <= 2147483647:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Iterate through all the dictionaries in the list\n    for dictionary in list1:\n        # If any dictionary is not empty, return False\n        if not dictionary:\n            return False\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for i in list1:\n        if i:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1: # check if list is empty\n        return True\n    else:\n        for i in list1:\n            if i: # check if dictionary is empty\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    # Loop through each dictionary in the list\n    for dic in list1:\n        # Check if the dictionary is empty\n        if len(dic) == 0:\n            # If it is empty, return False\n            return False\n    # If all dictionaries are not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to hold the integer representation of the input tuple\n    int_str = ''\n    \n    # Iterate over each element in the input tuple\n    for num in nums:\n        # Convert the current element to its string representation and append it to the integer representation string\n        int_str += str(num)\n    \n    # Convert the integer representation string to an integer and return it\n    return int(int_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_value = 0\n    for num in nums:\n        int_value += num\n    return int_value"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to store the final integer\n    final_num = ''\n    # loop through the tuple\n    for num in nums:\n        # convert each number in the tuple to string and add it to the final_num string\n        final_num += str(num)\n    # return the final integer\n    return int(final_num)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            if isinstance(item, (int, float)):\n                continue\n            try:\n                item = float(item)\n            except ValueError:\n                return None\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # Check if the element can be converted to a float\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            # If it cannot, remove it from the list\n            test_list.pop(i)\n        # Check if there are any more elements that can be converted to floats\n        if i < len(test_list):\n            # Recursively call the function on the remaining elements\n            list_to_float(test_list[i:])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) in [int, float, complex]:\n                float_list.append(float(item))\n            elif isinstance(item, list):\n                float_list.extend(list_to_float(item))\n            elif isinstance(item, tuple):\n                float_list.extend(list_to_float(list(item)))\n            elif isinstance(item, str):\n                try:\n                    float_list.append(float(item))\n                except ValueError:\n                    pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                element = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if isinstance(test_list, list):\n        for i in range(len(test_list)):\n            if isinstance(test_list[i], (int, float)):\n                test_list[i] = float(test_list[i])\n            elif isinstance(test_list[i], list):\n                list_to_float(test_list[i])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row[row.index(item)] = float(item)\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n\n    :param arr: a sorted array\n    :return: the element that appears only once in the array\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n\n    # Iterate over the array\n    for i in arr:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if i not in freq:\n            freq[i] = 1\n        # If the element is already in the dictionary, increment its frequency\n        else:\n            freq[i] += 1\n\n    # Iterate over the array again to find the element that appears only once\n    for i in arr:\n        # If the frequency of the current element is 1 and it is not the only occurrence of the element, return it\n        if freq[i] == 1 and i!= search(arr):\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        # Check if the element is already in the output array\n        if arr[i] not in output:\n            # If the element is not in the output array, add it and exit the loop\n            output.append(arr[i])\n            break\n    return output"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            # If the element is already in the dictionary, increment its frequency by 1\n            freq[num] += 1\n        else:\n            # If the element is not in the dictionary, add it with frequency 1\n            freq[num] = 1\n    \n    # Find the element that appears only once in the array\n    for num in freq:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in arr:\n        if count[i] == 1:\n            return i\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize count of each element in the array\n    count = [0] * len(arr)\n\n    # Iterate through the array and count the number of occurrences of each element\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Iterate through the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if count[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the element that appears only once in the dictionary\n    only_once = None\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            only_once = num\n            break\n\n    return only_once"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return None\n        if arr[i] < unique_element:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Iterate through the dictionary to find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the elements and their frequencies\n    freq = {}\n    # iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # iterate through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    else:\n        max_product = 0\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n                if product > max_product:\n                    max_product = product\n        return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = -1\n    max_pair = (-1, -1)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            diff = lst[i][1] - lst[j][1]\n            if diff > 0:\n                product = lst[i][0] * lst[j][0]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (lst[i], lst[j])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product between numbers in pairs\n    of tuples within the list.\n\n    Args:\n        list1 (list of tuples): a list of tuples to be searched for pairs of numbers that have the maximum absolute product.\n\n    Returns:\n        float: the maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n\n    # Initialize variables to store the maximum and minimum values found so far\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Extract the first and second elements of each tuple\n        a, b = tup\n\n        # Compute the absolute value of the difference between the two numbers\n        diff = abs(a - b)\n\n        # Update the maximum and minimum products found so far\n        max_product = max(max_product, diff)\n        min_product = min(min_product, diff)\n\n    # Return the maximum absolute product found\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) + abs(list1[i][1]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize max_product and max_pair to None\n    max_product = None\n    max_pair = None\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        # Check if the first number in the tuple is less than 0, if it is, negate it\n        num1 = -tup[0] if tup[0] < 0 else tup[0]\n        \n        # Check if the second number in the tuple is less than 0, if it is, negate it\n        num2 = -tup[1] if tup[1] < 0 else tup[1]\n        \n        # Calculate the product of the absolute values of the first and second numbers\n        product = abs(num1) * abs(num2)\n        \n        # If the current product is greater than the current max_product, update max_product and max_pair\n        if product > max_product or (product == max_product and tup < max_pair):\n            max_product = product\n            max_pair = tup\n    \n    # Return the maximum absolute product and the corresponding pair of tuples\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_product_pair = (list1[i], list1[j])\n\n    return max_product_pair"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i!= 1 and is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable to a specified number.\n    '''\n    # check if n is a prime number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num):\n            sum += num\n    return sum\n\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to sum all divisors of a given number.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable(n):\n        \"\"\"\n        Helper function to find all the amicable numbers of a given number.\n        \"\"\"\n        if n <= 1:\n            return []\n        amicable_numbers = []\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                j = n // i\n                if i!= j and is_amicable(i) and is_amicable(j):\n                    amicable_numbers.append(i + j)\n        return amicable_numbers\n\n    def is_amicable(num):\n        \"\"\"\n        Helper function to check if a given number is amicable or not.\n        \"\"\"\n        if num == 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    amicable_numbers = sum_amicable(limit)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    if num < 12:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0 and num // i!= i:\n            return True\n\n    return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for num in range(1, limit + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i == 0) and (i!= num // i):\n                    sum_of_amicable += num\n    return sum_of_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum_of_proper_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Return the sum of proper divisors of a given number.\n    '''\n    proper_divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            proper_divisors.append(i)\n    return sum(proper_divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        if i!= 1:\n            if is_amicable(i):\n                total += i\n    return total\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_pairs = []\n    for i in range(1, limit+1):\n        for j in range(i, limit+1):\n            if i!= j and is_amicable(i, j):\n                amicable_pairs.append((i, j))\n    \n    amicable_sum = sum([pair[0] + pair[1] for pair in amicable_pairs])\n    return amicable_sum\n\ndef is_amicable(a, b):\n    \"\"\"\n    Determine whether two numbers are amicable.\n    \"\"\"\n    if a < b:\n        for i in range(2, b):\n            if a % i == 0 and b % i == 0:\n                return True\n    elif b < a:\n        for i in range(2, a):\n            if b % i == 0 and a % i == 0:\n                return True\n    else:\n        return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Checks if a given number is amicable.\n    \"\"\"\n    if num < 100:\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                if num / i == i:\n                    return True\n    return False\n\ndef sum_amicable(limit):\n    \"\"\"\n    Sums all amicable numbers up to a given limit.\n    \"\"\"\n    result = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            result += i\n    return result\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a limit as input and returns the sum of all amicable numbers up to that limit.\n    \"\"\"\n    return sum_amicable(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum variable\n    amicable_sum = 0\n    \n    # loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if num is amicable by comparing to all numbers between 1 and limit/2\n        for i in range(1, limit/2+1):\n            if num == i*i:\n                if num!= i:\n                    amicable_sum += num\n    \n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the numbers to complex numbers\n    z = complex(a, b)\n\n    # Calculate the angle using the cmath module\n    angle = cmath.phase(z)\n\n    # Convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n\n    # Return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert input values to complex numbers\n    complex_num = a + b*1j\n\n    # Calculate the angle using the modulus and argument functions\n    angle = cmath.phase(complex_num)\n\n    # Return the angle as a float\n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the complex number using real and imaginary parts\n    z = a + b * 1j\n    \n    # calculate the modulus of the complex number\n    modulus = cmath.sqrt(z.real**2 + z.imag**2)\n    \n    # calculate the angle of the complex number using the arccosine function\n    angle = cmath.phase(z) * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the absolute value of the complex number\n    abs_num = cmath.sqrt(a**2 + b**2)\n    # Calculate the angle of the complex number using the arctan function\n    angle = cmath.phase(a + b/abs_num)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    :param a: first complex number\n    :type a: complex\n    :param b: second complex number\n    :type b: complex\n    :return: angle of a complex number in radians\n    :rtype: float\n    \"\"\"\n    # Calculate the magnitude of the complex number\n    mag = cmath.sqrt(a.real ** 2 + a.imag ** 2)\n\n    # Calculate the angle of the complex number in radians\n    angle = cmath.phase(a / mag)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle of the complex number using the cmath module\n    angle_rad = cmath.phase(a + b*1j)\n\n    # Convert the angle to degrees and return the result\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as inputs and returns their angle.\n    '''\n    return cmath.phase(a*b)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # create a dictionary to store the count of 0s and 1s in each sub-string of the string\n    sub_string_count = {}\n    # iterate over each sub-string of the string\n    for i in range(len(string)):\n        # append the current sub-string to the dictionary\n        sub_string_count[string[i:i+2]] = sub_string_count.get(string[i:i+2], 0) + 1\n    # initialize two variables to store the maximum difference and the length of the longest sub-string\n    max_diff = 0\n    max_length = 0\n    # iterate over each pair of sub-strings in the dictionary\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            # calculate the difference between the count of 0s and 1s in each sub-string\n            diff = abs(sub_string_count[string[i:j+1]] - sub_string_count[string[i:i+2]])\n            # update the maximum difference and the length of the longest sub-string\n            max_diff = max(max_diff, diff)\n            max_length = max(max_length, j - i + 1)\n    # return the maximum difference and the length of the longest sub-string\n    return max_diff, max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kmp_search(pat, txt):\n    M, N = len(pat), len(txt)\n    lps = [0] * M\n    i = 1\n    j = 0\n\n    while i < M:\n        if pat[i] == txt[j]:\n            lps[i] = j\n            i += 1\n            j += 1\n        elif j > 0:\n            j = lps[j-1]\n\n        if j == M:\n            return i-j\n\n    return -1\n\ndef find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        k = kmp_search(\"0\", string[i:])\n        if k!= -1:\n            diff = k // 2\n            max_diff = max(diff, max_diff)\n        else:\n            k = kmp_search(\"1\", string[i:])\n            if k!= -1:\n                diff = n - (k + 1) // 2\n                max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n        else:\n            count_0 = 0\n            count_1 = 0\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    def count_zeros(sub_str):\n        return sub_str.count('0')\n\n    def count_ones(sub_str):\n        return sub_str.count('1')\n\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            num_zeros = count_zeros(sub_str)\n            num_ones = count_ones(sub_str)\n            diff = abs(num_zeros - num_ones)\n            max_diff = max(diff, max_diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i] == '1' and string[j-1] == '0':\n                dp[i][j] = dp[i+1][j-1] + 1\n            elif string[i] == '0' and string[j-1] == '1':\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = 0\n            \n            if dp[i][j] > max_diff:\n                max_diff = dp[i][j]\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    def count_ones(string):\n        count = 0\n        for char in string:\n            if char == '1':\n                count += 1\n        return count\n    \n    def count_zeros(string):\n        count = 0\n        for char in string:\n            if char == '0':\n                count += 1\n        return count\n    \n    def max_diff(ones, zeros):\n        return abs(ones - zeros)\n    \n    def find_substring(string, start, end):\n        sub = string[start:end]\n        ones = count_ones(sub)\n        zeros = count_zeros(sub)\n        return max_diff(ones, zeros)\n    \n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            length = find_substring(string, i, j)\n            max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_0 = string.count('0', i, length)\n        count_1 = string.count('1', i, length)\n        \n        if count_0 == 0 or count_1 == 0:\n            max_diff = max(max_diff, count_0 - count_1)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Convert the string to binary\n    binary_str = bin(int(string, 2))[2:]\n    # Create a list of lists to store the count of 0s and 1s in each sub-string\n    sub_string_count = []\n    # Loop through each sub-string of the binary string\n    for i in range(len(binary_str)):\n        count = 0\n        # Loop through each bit in the sub-string\n        for j in range(len(binary_str[i])):\n            # If the bit is 0, increment the count\n            if binary_str[i][j] == '0':\n                count += 1\n            # If the bit is 1, decrement the count\n            if binary_str[i][j] == '1':\n                count -= 1\n        # Append the count of 0s and 1s in the sub-string to the list\n        sub_string_count.append(count)\n    # Calculate the maximum difference between the count of 0s and 1s in each sub-string\n    max_difference = max(sub_string_count) - min(sub_string_count)\n    # Return the maximum difference\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Find the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            div.append(i)\n    return sum(div)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # function to find common divisors\n    def common_divisors(num):\n        \"\"\"\n        This function finds the common divisors of a given number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # finding the common divisors of a and b\n    a_divisors = common_divisors(a)\n    b_divisors = common_divisors(b)\n\n    # sum of common divisors\n    sum_of_common_divisors = sum(a_divisors) + sum(b_divisors)\n\n    # printing the result\n    print(f\"The sum of common divisors of {a} and {b} is {sum_of_common_divisors}.\")"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = set()\n    # Finding all the divisors of a and b\n    for num in range(1, min(a, b) + 1):\n        if a % num == 0 and b % num == 0:\n            divisors.add(num)\n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(divisors)\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n\n    # Calculate the divisors of both numbers\n    for i in range(1, b+1):\n        if b % i == 0 and a % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # finding common divisors of a and b\n    divisors = set()\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # calculating the sum of common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the largest common divisor using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n\n    # calculate the sum of common divisors using the formula\n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers using Euclid's algorithm.\n    \"\"\"\n    # initialize variables for a and b\n    big = a if a > b else b\n    small = a if a < b else b\n\n    # find the GCD of a and b using Euclid's algorithm\n    while big % small!= 0:\n        big, small = small, big % small\n\n    # return the sum of common divisors of a and b\n    return big"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the smallest common divisor of a and b\n    gcd = 1\n    while gcd < a and gcd < b:\n        if a % gcd == 0 and b % gcd == 0:\n            break\n        gcd += 1\n    # calculate the sum of common divisors\n    return sum(range(1, gcd))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = find_common_divisors(a, b)\n\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors\n\n\ndef find_common_divisors(a, b):\n    \"\"\"\n    Finds the common divisors of two given numbers.\n    \"\"\"\n    # Find the largest common divisor of a and b\n    largest_common_divisor = largest_common_divisor_of(a, b)\n\n    # Find the divisors of the largest common divisor of a and b\n    divisors_of_largest_common_divisor = find_divisors(largest_common_divisor)\n\n    # Find the common divisors of a and b\n    common_divisors = list(set(divisors_of_largest_common_divisor) & set(find_divisors(a)))\n\n    return common_divisors\n\n\ndef largest_common_divisor_of(a, b):\n    \"\"\"\n    Finds the largest common divisor of two given numbers.\n    \"\"\"\n    # Find the divisors of a\n    divisors_of_a = find_divisors(a)\n\n    # Find the divisors of b\n    divisors_of_b = find_divisors(b)\n\n    # Find the intersection of the two sets of divisors\n    divisors_of_a_and_b = set(divisors_of_a) & set(divisors_of_b)\n\n    # Find the largest divisor of the intersection\n    largest_divisor = max(divisors_of_a_and_b)\n\n    return largest_divisor\n\n\ndef find_divisors(n):\n    \"\"\"\n    Finds the divisors of a given number n.\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n\n    return divisors\n\n\ndef sum(lst):\n    \"\"\"\n    Calculates the sum of a list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += num\n\n    return total"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(f\"The result of {x} * {y} is: {result}\")"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        carry = x & y\n        product = product ^ carry\n        x = x ^ y\n        y = carry << 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Finds words in a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()  # split the string into a list of words\n    result = []  # initialize an empty list to store the words that are longer than n characters\n    for word in words:\n        if len(word) > n:  # check if the length of the word is greater than n\n            result.append(word)  # add the word to the result list\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split() # split the string into a list of words\n    long_words = [word for word in words if len(word) > n] # filter out words longer than n characters\n    return long_words # return the filtered list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n\n    # Check if the matrix contains only unique values\n    if len(set(sum(my_matrix, [])))!= rows ** 2:\n        return False\n\n    # Check if the sum of each row is the same as the sum of the first column\n    for i in range(rows):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(rows)])\n\n        if row_sum!= col_sum:\n            return False\n\n    # Check if the sum of each column is the same as the sum of the first row\n    for j in range(cols):\n        col_sum = sum([my_matrix[i][j] for i in range(rows)])\n        row_sum = sum(my_matrix[i])\n\n        if col_sum!= row_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the input matrix is a list of lists\n    if not all(isinstance(row, list) for row in my_matrix):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Check if the matrix has the same number of rows and columns\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        raise ValueError(\"Input matrix must have the same number of rows and columns\")\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum or row_sum!= n*(n**2) - n + 1 or col_sum!= n*(n**2) - n + 1:\n            return False\n\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check for magic squares of different sizes\n    for i in range(1, n+1):\n        if magic_square(my_matrix, i) == True:\n            return True\n    for i in range(1, n+1):\n        if magic_square(my_matrix, n-i) == True:\n            return True\n\n    # Check if all the values are the same in a row or column\n    for i in range(n):\n        row = [my_matrix[j][i] for j in range(n)]\n        col = [my_matrix[i][j] for j in range(n)]\n        if row!= col:\n            return False\n\n    return True\n\ndef magic_square(matrix, n):\n    '''\n    Check whether a magic square exists of size n in the matrix.\n    '''\n    # Create a list of n-1 zeros\n    zeros = [0] * (n-1)\n\n    # Check if the first row has all zeros\n    if matrix[0] == zeros:\n        return True\n\n    # Check if the last row has all zeros\n    if matrix[n-1] == zeros:\n        return True\n\n    # Check if the first column has all zeros\n    col = [matrix[i][0] for i in range(n)]\n    if col == zeros:\n        return True\n\n    # Check if the last column has all zeros\n    col = [matrix[i][n-1] for i in range(n)]\n    if col == zeros:\n        return True\n\n    # Check if there is a sub-diagonal with all zeros\n    for i in range(n-2):\n        if matrix[i][i] == zeros:\n            return True\n\n    # Check if there is a diagonal with all zeros\n    diag = [matrix[i][i] for i in range(n)]\n    if diag == zeros:\n        return True\n\n    # Check if there is a super-diagonal with all zeros\n    for i in range(n-2):\n        if matrix[i][n-1-i] == zeros:\n            return True\n\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is anti-symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[n-1-i][n-1-j]:\n                return False\n    \n    # Check if the matrix is a magic square\n    if n == 4:\n        sum = 0\n        for i in range(n):\n            for j in range(n):\n                sum += my_matrix[i][j]\n        if sum!= 10:\n            return False\n    elif n == 9:\n        sum = 0\n        for i in range(3):\n            for j in range(3):\n                sum += my_matrix[i][j]\n        if sum!= 25:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    \n    # Check if all columns have the same length\n    for i in range(len(my_matrix)):\n        if len(set(row[i] for row in my_matrix))!= len(row):\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == my_matrix[i][j+1] == my_matrix[i][j+2] == my_matrix[i][j+3] == my_matrix[i][j+4] == my_matrix[i][j+5] == my_matrix[i][j+6] == my_matrix[i][j+7] == my_matrix[i][j+8] == my_matrix[i][j+9]:\n                return True\n            elif my_matrix[j][i] == my_matrix[j+1][i] == my_matrix[j+2][i] == my_matrix[j+3][i] == my_matrix[j+4][i] == my_matrix[j+5][i] == my_matrix[j+6][i] == my_matrix[j+7][i] == my_matrix[j+8][i] == my_matrix[j+9][i]:\n                return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Create a list to hold the sums of the rows, columns, and diagonals\n    row_sum = []\n    col_sum = []\n    diag_sum = []\n\n    # Loop through each row, column, and diagonal\n    for i in range(len(my_matrix)):\n        # Add up the elements in the row\n        row_sum.append(sum(my_matrix[i]))\n\n        # Add up the elements in the column\n        col_sum.append(sum(my_matrix[j][i] for j in range(len(my_matrix))))\n\n        # Add up the elements in the diagonal\n        if i == j:\n            diag_sum.append(sum(my_matrix[i][i]))\n        elif i + j == len(my_matrix) - 1:\n            diag_sum.append(sum(my_matrix[i][j] for j in range(len(my_matrix))))\n        else:\n            diag_sum.append(0)\n\n    # Check if the sums of the rows, columns, and diagonals are equal\n    if row_sum == col_sum == diag_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if all rows have the same sum\n    row_sum = sum(my_matrix[i])\n    if all(row_sum == row_sum for i in range(n)):\n        return True\n    # check if all columns have the same sum\n    col_sum = sum(my_matrix[i][j] for j in range(n))\n    if all(col_sum == col_sum for i in range(n)):\n        return True\n    # check if all diagonals have the same sum\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    if all(diag_sum == diag_sum for i in range(n)):\n        return True\n    diag_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if all(diag_sum == diag_sum for i in range(n)):\n        return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is of the correct size\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a counter to keep track of the number of elements in the matrix\n    count = 0\n    \n    # Initialize a dictionary to store the sum of each row and column\n    row_sum = {}\n    col_sum = {}\n    \n    # Loop through the rows and columns of the matrix\n    for row in my_matrix:\n        for col in row:\n            # Check if the element is already in the dictionary\n            if col in row_sum and row_sum[col] == count:\n                return False\n            if row in col_sum and col_sum[row] == count:\n                return False\n            \n            # Add the element to the dictionaries\n            row_sum[col] = count if col in row_sum else count + 1\n            col_sum[row] = count if row in col_sum else count + 1\n            \n            # Increment the count for the next element\n            count += 1\n    \n    # If we make it through the entire matrix without finding a pair of elements that sum to the same value,\n    # then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    total = n**2\n    sum_of_rows = 0\n    sum_of_cols = 0\n    sum_of_main_diag = 0\n    sum_of_anti_diag = 0\n\n    # Calculate the sum of the rows\n    for i in range(n):\n        sum_of_rows += sum(my_matrix[i])\n\n    # Calculate the sum of the columns\n    for j in range(n):\n        sum_of_cols += sum(my_matrix[:, j])\n\n    # Calculate the sum of the main diagonal\n    for i in range(n):\n        sum_of_main_diag += my_matrix[i][i]\n\n    # Calculate the sum of the anti-diagonal\n    for i in range(n):\n        sum_of_anti_diag += my_matrix[i][n-1-i]\n\n    # Check if the sum of rows, columns, main diagonal, and anti-diagonal is equal to the total\n    if sum_of_rows == total and sum_of_cols == total and sum_of_main_diag == total and sum_of_anti_diag == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"Matrix must have 3 rows and 3 columns\"\n\n    # Calculate the sum of the diagonals\n    diagonal1 = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diagonal2 = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n\n    # Check if the sum of the diagonals is equal to the product of the matrix\n    if diagonal1 == diagonal2 == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n        return \"The matrix is a magic square\"\n    else:\n        return \"The matrix is not a magic square\""
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    If there are multiple items with maximum frequency, it returns the first one it encounters.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    for num, freq in count.items():\n        if freq == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a defaultdict to store the frequency of each number\n    freq = defaultdict(int)\n\n    # Iterate through the list and increment the frequency of each number\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_num = max(freq, key=lambda x: freq[x])\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_num = None\n    max_freq = 0\n    for num in freq:\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n    \n    max_item = None\n    max_count = 0\n    \n    for item, count in freq.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_item = max(freq_dict, key=freq_dict.get)\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_num = None\n\n    for num in nums:\n        count[num] += 1\n\n        if count[num] > max_count:\n            max_count = count[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the count of each item\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = max(count, key=count.get)\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(string):\n        if char in vowels and i % 2!= 0:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    reversed_string = \"\"\n    for index in vowel_indices:\n        reversed_string += string[index]\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    new_str = new_str[::-1]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = \"\"\n\n    for char in string:\n        if char in vowels:\n            if vowel_count % 2 == 0:\n                result = char + result\n                vowel_count += 1\n            else:\n                result = result + char\n                vowel_count += 1\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    result = ''\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n            if vowel_count == 2:\n                result = char + result\n        else:\n            result = char + result\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_list = []\n    for i in range(len(tup1)):\n        string_list.append(str(tup1[i]))\n    return \",\".join(string_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for item in tup1:\n        string += str(item) + ', '\n    string = string[:-2]\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_list = []\n    for i in tup1:\n        string_list.append(str(i))\n    return ', '.join(string_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Use join() method to concatenate all the elements of the tuple\n    return ''.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the number to the neg_sum\n            neg_sum += num\n    # Return the neg_sum\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize a variable to store the sum of negative numbers\n    sum_neg = 0\n\n    # iterate through the list of numbers\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the negative number to the sum\n            sum_neg += num\n\n    # return the sum of negative numbers\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Create a new list to store the positive numbers\n    positive_nums = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # If the number is positive, add it to the positive_nums list\n        if num >= 0:\n            positive_nums.append(num)\n    \n    # Calculate the sum of the negative numbers in the positive_nums list\n    neg_sum = sum(positive_nums)\n    \n    # Return the sum of the negative numbers\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * ((3 * n) ** 0.5) + n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Convert decimal to binary\n    binary = bin(n)\n    # Convert binary to hex\n    hex_num = hex(int(binary, 2))\n    # Convert hex to decimal\n    hex_dec = int(hex_num, 16)\n    # Multiply by 6 to get the nth hexagonal number\n    hex_n = 6 * hex_dec\n    # Convert the hexagonal number back to a decimal\n    return hex_n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # base case: n = 1\n    if n == 1:\n        return 1\n    # base case: n = 2\n    elif n == 2:\n        return 6\n    # base case: n = 3\n    elif n == 3:\n        return 24\n    # general case: n >= 4\n    else:\n        # calculate the n-1th hexagonal number\n        prev_num = hexagonal_num(n-1)\n        # add the previous number and 6 to get the n-2th hexagonal number\n        n_2 = prev_num + 6\n        # divide the n-2th hexagonal number by 3 to get the n-1th hexagonal number\n        n_1 = n_2 // 3\n        # return the n-1th hexagonal number\n        return n_1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) * 6 // 5"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: n=0 or n=1\n    if n == 0 or n == 1:\n        return n\n    # Recursive case: n > 1\n    return n * 6 + hexagonal_num(n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # define the hexagonal sequence using a list\n    hex_seq = [1]\n    # loop through the sequence until the nth hexagonal number is found\n    while len(hex_seq) < n:\n        # loop through the sequence until the nth hexagonal number is found\n        for i in range(len(hex_seq)):\n            # add the current hexagonal number to the next hexagonal number\n            hex_seq.append(hex_seq[i] + hex_seq[i-1])\n    # return the nth hexagonal number\n    return hex_seq[n-1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Finding nth hexagonal number using the formula:\n    # (n*(n+1))//2\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = array('i', [0 for i in range(len(nums))])\n    non_zero_count = array('i', [0 for i in range(len(nums))])\n\n    for num in nums:\n        if num == 0:\n            zero_count[non_zero_count.index(0)] += 1\n        else:\n            non_zero_count[non_zero_count.index(0)] += 1\n\n    if all(i == 0 for i in non_zero_count):\n        return 1\n    else:\n        return non_zero_count[non_zero_count.index(0)] / zero_count[non_zero_count.index(0)]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize a new array to store the non-zeroes and zeros\n    non_zero_array = array('i')\n    zero_array = array('i')\n\n    # Iterate through the array and append non-zeroes to the non_zero_array and zeros to the zero_array\n    for num in nums:\n        if num!= 0:\n            non_zero_array.append(num)\n        else:\n            zero_array.append(num)\n\n    # Calculate the lengths of the non-zero and zero arrays\n    non_zero_length = len(non_zero_array)\n    zero_length = len(zero_array)\n\n    # If there are no zeros, return 0\n    if zero_length == 0:\n        return 0\n\n    # Calculate the ratio of zeros to non-zeros and return it\n    return non_zero_length / zero_length"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zero_count[num] += 1\n\n    non_zero_count = sum(zero_count)\n\n    ratio = non_zero_count / len(nums)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    zero_ratio = 0\n    if non_zero_count!= 0:\n        zero_ratio = zero_count / non_zero_count\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0 for i in range(len(nums))])\n    non_zero_count = array('i', [0 for i in range(len(nums))])\n    \n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n        else:\n            non_zero_count[nums.index(num)] += 1\n    \n    ratio = [0 for i in range(len(nums))]\n    for i in range(len(nums)):\n        if zero_count[i]!= 0:\n            ratio[i] = non_zero_count[i] / zero_count[i]\n    \n    return tuple(ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*100)\n    for num in nums:\n        count[num] += 1\n    zeros = sum(count[:0])\n    non_zeros = sum(count[1:])\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros/non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize the zero and non-zero counts\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate over each element in the array\n    for num in nums:\n        # Increment the count of zeroes if the element is zero\n        if num == 0:\n            zero_count += 1\n        # Increment the count of non-zeroes if the element is not zero\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes and return it\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[count.index(num)] = 0\n    \n    return sum(count) / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    \n    # Initialize variables\n    power = 0\n    current_number = n\n    sum_of_powers = 0\n    \n    # Iterate until the sum of powers is equal to n/2\n    while sum_of_powers!= n // 2:\n        \n        # Check if current_number is a power of 2\n        if current_number % 2 == 0:\n            return False\n        power += 1\n        \n        # Calculate the sum of powers of 2 from 0 to power\n        sum_of_powers = 0\n        for i in range(power):\n            sum_of_powers += 2 ** i\n            \n        # Update current_number\n        current_number = sum_of_powers\n    \n    # If the loop ends, the number is a sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the number is even or not\n    if n % 2 == 0: \n        return False\n    \n    # Initialize variables to store the remaining digits and the sum of powers of 2\n    remaining_digits = n\n    power_of_2 = 1\n    \n    # Loop until remaining digits is 0\n    while remaining_digits > 0: \n        # Check if the remaining digits can be expressed as power of 2\n        if remaining_digits % 2 == 0: \n            return False\n        # Update the remaining digits and power of 2\n        remaining_digits = remaining_digits // 2\n        power_of_2 = 2 * power_of_2\n        \n    # Return True if the number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function checks whether a given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    if n == 0:\n        return True\n\n    # Using bitwise operators to check whether n can be represented as sum of non-zero powers of 2\n    # If n is divisible by 2, then its binary representation contains only 1 and 0, so it can be represented as sum of powers of 2\n    if n & 1 == 0:\n        return True\n\n    # Check if any two consecutive bits are set to 1 in the binary representation of n\n    # If such a pair is found, then it cannot be represented as sum of powers of 2\n    for i in range(1, 32):\n        if n & (1 << i) == 0:\n            continue\n        if (n & (1 << i)) == (1 << i):\n            return False\n\n    # If the above two conditions are not met, then n can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Create a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Loop from 2 to n/2 and add powers of 2 to the sum\n    for i in range(2, n//2+1):\n        power_sum += i**2\n        \n    # Check if the sum is equal to the given number\n    if power_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count <= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        for i in range(1, n):\n            if (2**i) in str(n):\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    # It uses binary search to find the smallest power of 2 that is greater than or equal to the square root of the given number.\n    # Then, it checks if the difference between the given number and the sum of non-zero powers of 2 is a multiple of the power of 2.\n    # If it is, then the given number can be represented as sum of non-zero powers of 2.\n    def binary_search(a, b):\n        while a < b:\n            mid = (a + b) // 2\n            if (mid * mid) <= n:\n                a = mid + 1\n            else:\n                b = mid\n        return a\n    \n    sqrt_n = int(n ** 0.5)\n    power_of_two = binary_search(2, sqrt_n)\n    if power_of_two <= sqrt_n:\n        return True\n    \n    remainder = n - (power_of_two * power_of_two)\n    if remainder % power_of_two == 0:\n        return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        power_of_two = 2\n        while power_of_two <= n:\n            if n - power_of_two < 0:\n                return False\n            if is_Sum_Of_Powers_Of_Two(n - power_of_two):\n                return True\n            power_of_two <<= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Check if the binary string has only one '1'\n    if len(binary_str) == 1:\n        return True\n\n    # Check if the binary string can be represented as sum of non-zero powers of 2\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1' and i + 1 < len(binary_str) and binary_str[i + 1] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # check if n can be represented as a sum of powers of 2\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n\n    # if count is greater than 0, then n can be represented as sum of powers of 2\n    return count > 0"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r = circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Using the formula for the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference of the circle\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = set(flattened_list)\n    return list(unique_numbers)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    def flatten(lst):\n        \"\"\"\n        Helper function to flatten a list of lists.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened = flatten(test_list)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Define a set to store the flattened list of numbers\n    singly_set = set()\n    \n    # Loop through each item in the list of lists\n    for item in test_list:\n        # Loop through each item in the current item\n        for sub_item in item:\n            # If the sub_item is an integer, add it to the set of singly_set\n            if isinstance(sub_item, int):\n                singly_set.add(sub_item)\n    \n    # Return the set of singly_set\n    return singly_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int:\n                result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for i in test_list:\n        for j in i:\n            flatten_list.append(j)\n    return flatten_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def pancake_sort_helper(nums, k):\n        if k == 1:\n            return nums\n        else:\n            sorted_part = pancake_sort_helper(nums, k - 1)\n            sorted_part.append(nums[k - 1])\n            sorted_part.reverse()\n            return sorted_part\n\n    sorted_nums = pancake_sort_helper(nums, len(nums))\n\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    # One by one move boundary of smaller element to end\n    for i in range(n):\n        # Find the position of next element (smaller than current element)\n        pos = i\n        for j in range(i, n):\n            if nums[j] < nums[pos]:\n                pos = j\n\n        # Swap the found element with the current element\n        nums[i], nums[pos] = nums[pos], nums[i]\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to reverse an array in place\n    def reverse(nums):\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    # Helper function to sort the array using the pancake sort algorithm\n    def sort(nums):\n        # Calculate the number of pancakes to sort each sublist with\n        n = len(nums)\n        k = 1\n        while k < n:\n            k = 3 * k + 1\n\n        # Sort each sublist using the pancake sort algorithm\n        while k >= 1:\n            # Step 1: Reverse the current sublist\n            reverse(nums)\n\n            # Step 2: Reverse the current sublist and merge it with the previous sublist\n            for i in range(0, k - 1, 2):\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n            # Step 3: Merge the current sublist with the previous sublist\n            for i in range(1, k, 2):\n                if nums[i] > nums[i - 1]:\n                    nums[i - 1], nums[i] = nums[i], nums[i - 1]\n\n            # Update the size of the pancakes\n            k //= 2\n\n    # Call the pancake sort algorithm to sort the list\n    sort(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Step 1: Reverse the entire list\n    for i in range(n):\n        j = n - 1 - i\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Step 2: Reverse each pancake starting from the first element\n    for i in range(1, n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the element at index i\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop through each element in the list and swap it with the last element\n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the smallest element after the current element\n        j = i - 1\n        while j >= 0 and nums[j] > nums[j+1]:\n            j -= 1\n        # Swap the current element with the smallest element after it\n        nums[i], nums[j+1] = nums[j+1], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # create a list of indices to represent pancakes\n    pancakes = [n-i-1 for i in range(n)]\n\n    # sort the list of indices in decreasing order\n    pancakes.sort(reverse=True)\n\n    # iterate over the sorted indices and sort the original list accordingly\n    for i in range(n):\n        index = pancakes[i]\n        nums[i], nums[index] = nums[index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # create a copy of the original list to avoid modifying the original list\n    nums_copy = nums.copy()\n\n    # sort the copy of the list using the pancake sort algorithm\n    for i in range(n-1):\n        # find the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums_copy[j] > nums_copy[max_idx]:\n                max_idx = j\n\n        # swap the largest element with the first element of the unsorted part of the list\n        nums_copy[i], nums_copy[max_idx] = nums_copy[max_idx], nums_copy[i]\n\n    # copy the sorted copy of the list back to the original list\n    nums[:] = nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # loop to generate all possible pancake permutations\n    for i in range(n, 0, -1):\n        # loop to sort the list of size i\n        for j in range(n-1):\n            if nums[j] > nums[j+1]:\n                # swap elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                # reverse the pancake from nums[j] to nums[n-1]\n                k = j\n                while k < n-1:\n                    nums[k], nums[n-1-k] = nums[n-1-k], nums[k]\n                    k += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def helper(nums):\n        for i in range(len(nums)):\n            # Find the maximum element in the remaining elements\n            max_index = i\n            for j in range(i+1, len(nums)):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n            \n            # Swap the maximum element with the first element\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            \n            # Reverse the remaining part of the list\n            for j in range(i, len(nums)-1, -1):\n                nums[j], nums[i] = nums[i], nums[j]\n                \n    # Call the helper function\n    helper(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the last element in the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the pancake (putting the largest element at the end)\n        k = i\n        while k < max_idx:\n            nums[k], nums[max_idx] = nums[max_idx], nums[k]\n            k += 1\n            max_idx -= 1\n    \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    # initialize a counter variable to keep track of the number of same pairs\n    count = 0\n    # iterate through each item in the first list\n    for i in range(len(list1)):\n        # check if the same item is present in the second and third lists\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            # if it is, increment the counter variable\n            count += 1\n    # return the count of same pairs\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, tuple):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for element in Input: \n        if isinstance(element, list): \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        curr_diff = abs(arr[i] - arr[i-1])\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize variables to store the minimum and maximum values in the array\n    max_value = arr[0]\n    min_value = arr[0]\n    \n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        elif arr[i] < min_value:\n            min_value = arr[i]\n    \n    # Calculate the maximum absolute difference between any two elements in the array\n    return max(abs(max_value - min_value))"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize maximum difference as zero\n    max_diff = 0\n\n    # Loop through the array and compare each element with all the previous elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Find the maximum value in the array\n    max_val = max(arr)\n    # Initialize the maximum difference to zero\n    max_diff = 0\n    # Loop through the array to find the maximum difference\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the maximum difference between any two elements in the list.\n    \"\"\"\n    # Initialize variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through the array and find the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the maximum difference between any two elements in the array\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = float('-inf') # initialize maximum difference to negative infinity\n    for i in range(len(arr)): # iterate over the array\n        for j in range(i+1, len(arr)): # iterate over the remaining elements in the array\n            diff = abs(arr[i]-arr[j]) # calculate the absolute difference between the i-th and j-th elements\n            if diff > max_diff: # if the absolute difference is greater than the maximum difference, update the maximum difference\n                max_diff = diff\n    return max_diff # return the maximum difference"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n\n    # Check if n is divisible by a and b\n    if n % a == 0 and n % b == 0:\n        # Calculate x and y\n        x = n // a\n        y = n // b\n\n        # Check if x and y satisfy ax + by = n\n        if a * x + b * y == n:\n            return (x, y)\n\n    # If no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        return None\n\n    # find the quadratic equation: ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*n\n\n    if discriminant < 0:\n        return None\n\n    # find the two solutions to the equation\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n\n    # check if the solutions satisfy the given condition\n    if x1*a + x2*b == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or negative\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-n, n+1):\n        for y in range(-n, n+1):\n            if x*a + y*b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the quadratic equation has real roots\n    discriminant = (b**2) - (4 * a * n)\n    if discriminant > 0:\n        # Quadratic equation has two real roots\n        root1 = (-b + (discriminant**0.5)) / (2 * a)\n        root2 = (-b - (discriminant**0.5)) / (2 * a)\n        return (int(root1), int(root2))\n    elif discriminant == 0:\n        # Quadratic equation has one real root\n        root = (-b) / (2 * a)\n        return (int(root),)\n    else:\n        # Quadratic equation has no real roots\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(max(-n, 0), min(n, a)):\n        if a * x + b * (a * x + b) >= 0:\n            for y in range(max(-n, b * x - a), min(n, b * x + a)):\n                if a * x + b * y == n:\n                    return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x0 = (-b - n // a) // a\n        y0 = (-a - x0 * a) // b\n        return (x0, y0)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    for i in range(b, n - b, -1):\n        if a * i + b * n == n:\n            return (i, n // i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * n\n\n    # Check if there is a solution\n    if discriminant > 0:\n        # Calculate the two solutions\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n\n        # Check if both solutions are integers\n        if all(isinstance(x, int) for x in (x1, x2)):\n            return (x1, x2)\n\n    # No solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize x and y\n    x = 0\n    y = 0\n    \n    # loop until x and y satisfy ax + by = n\n    while (a*x + b*y) < n:\n        x += 1\n        \n    # check if x satisfies ax + by = n\n    if (a*x + b*y) == n:\n        # return the solution as a tuple\n        return (x, y)\n    else:\n        # return None if no solution exists\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the result\n    result = []\n\n    # loop through each element in the first list\n    for element in list1:\n        # if the element is not in the second list, add it to the result list\n        if element not in list2:\n            result.append(element)\n\n    # return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set from the second list to remove duplicates\n    set2 = set(list2)\n    # Create a new list to store the elements from list1 that are not present in set2\n    result = [x for x in list1 if x not in set2]\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        total = 0\n        i = 0\n        while i <= n // 2:\n            total += n - 2 * i\n            i += 1\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(1, n//2+1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (n + sum_series(n // 2)) // 2\n    else:\n        return (n + sum_series(n // 2)) // 2 + n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of the polygon using Heron's formula\n    area = (s * l) / 2\n    print(\"Area of the polygon is: \", area)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        angle = 2*pi/l*i\n        area += s*tan(angle/2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * tan(i*2*pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-2*l) * tan(pi/l)) / (2*(s-2*l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (1 - tan(2*pi/l)**2)**0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    perimeter = s * l\n    # calculate the area using Heron's formula\n    area = (perimeter / 2) * (tan(pi / l) ** 2)\n    # return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculate the circumference of the polygon\n    circumference = s * 2 * pi\n    # calculate the area of each half of the polygon (assuming the polygon is divided into equal parts)\n    half_area = circumference / (2 * l)\n    # add up all the half areas to get the overall area of the polygon\n    for i in range(1, l+1):\n        area += half_area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area using the formula for a regular polygon\n    area = 0.5 * s * l * tan(pi / l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\ndef main():\n    s = float(input(\"Enter the side of the polygon: \"))\n    l = int(input(\"Enter the number of sides of the polygon: \"))\n    area = area_polygon(s, l)\n    print(\"The area of the polygon is:\", area)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "- The script should have a docstring that describes what the function does and what it takes as arguments."
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n and returns True if the sum of the divisors of the two integers \n    is the same, and False otherwise.\n    '''\n    # Calculate the sum of divisors of n\n    sum_n = sum([i for i in range(1, n+1) if n % i == 0])\n    \n    # Calculate the sum of divisors of n+1\n    sum_n1 = sum([j for j in range(1, n+1) if n+1 % j == 0])\n    \n    # Compare the two sums\n    if sum_n == sum_n1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n,\n    False otherwise.\n    '''\n    divs = [1, n]\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            divs.append(i)\n            n //= i\n            i = 2\n    divs.append(n)\n    sum_divs = sum(divs)\n    return sum_divs == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum = sum(range(1, int(n**0.5)+1))\n    # Calculate the sum of the divisors of the input integer\n    input_div_sum = sum([int(d) for d in str(n)])\n    # Compare the two sums and return True if they are equal, False otherwise\n    if div_sum == input_div_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    \n    # Check if the sum of the divisors of n and n+1 are the same\n    if div_sum == n * (n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def sum_divisors(num): \n        div = [] \n        for i in range(1, num+1): \n            if num % i == 0: \n                div.append(i) \n        return div\n    \n    a = int(input(\"Enter the first integer: \")) \n    b = int(input(\"Enter the second integer: \")) \n    \n    div_a = sum_divisors(a) \n    div_b = sum_divisors(b) \n    \n    # print the two lists \n    print(\"Divisors of\", a, \"are:\", div_a) \n    print(\"Divisors of\", b, \"are:\", div_b) \n    \n    # check if the two lists are equal \n    if div_a == div_b: \n        print(\"The sum of the divisors of\", a, \"and\", b, \"are the same.\") \n    else: \n        print(\"The sum of the divisors of\", a, \"and\", b, \"are not the same.\") "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    if len(divisors) == 1:\n        return True\n    elif len(divisors) == 2:\n        if sum(divisors) == n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get the list of divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Check if the sum of the divisors is the same as n\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n / i == int(n/i):\n                return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # get the divisor list of n\n    div_list = [i for i in range(1, n+1) if n % i == 0]\n\n    # get the sum of the divisors\n    div_sum = sum(div_list)\n\n    # get the square root of the sum\n    sqrt_sum = math.sqrt(div_sum)\n\n    # check if the square root is an integer\n    if sqrt_sum.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    div_sum = sum(divisors)\n    return div_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the English alphabet (A-Z), add 1 to its count in the dictionary\n        if char.isalpha():\n            char = char.upper()  # Convert to uppercase for case insensitivity\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Loop through the English alphabet (A-Z) and add up the count of each character\n    for i in range(ord('A'), ord('Z')+1):\n        # If the character is in the dictionary, add it to the total count\n        if chr(i).upper() in char_count:\n            char_count[' '] += char_count.pop(chr(i).upper())\n    \n    # Print the final count of each character\n    for char, count in char_count.items():\n        print(char, count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define a dictionary to store the frequency of characters in the English alphabet\n    char_freq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    # Initialize the count to zero\n    count = 0\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter in the English alphabet, update its frequency in the dictionary\n        if char.isalpha():\n            char_freq[char] += 1\n        # If the character is not a letter in the English alphabet, ignore it\n        else:\n            continue\n    # Iterate through the dictionary to count the frequency of characters at the same position in the string as in the English alphabet\n    for i in range(26):\n        if char_freq[chr(ord('a') + i)] > 0:\n            count += char_freq[chr(ord('a') + i)]\n    # Return the count of characters at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the counts\n    char_counts = {}\n\n    # Loop through the characters in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it is, check if it's uppercase\n            if char.isupper():\n                # If it is, check if it's already in the dictionary\n                if char in char_counts:\n                    # If it is, increment its count\n                    char_counts[char] += 1\n                else:\n                    # If it's not, add it to the dictionary with a count of 1\n                    char_counts[char] = 1\n\n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a dictionary to store the position of each character\n    char_positions = {}\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is a letter, add its position to the dictionary\n        if char.isalpha():\n            char_positions[char] = i\n    # Initialize a counter for the number of occurrences\n    count = 0\n    # Loop through each character in the English alphabet (a-z)\n    for i, char in enumerate('abcdefghijklmnopqrstuvwxyz'):\n        # If the character occurs at the same position in the string as in the English alphabet, increment the counter\n        if char in char_positions:\n            if i == char_positions[char]:\n                count += 1\n    # Return the number of occurrences\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # create an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # get the ASCII value of the character\n        ascii_value = ord(char)\n\n        # if the character is within the range of the alphabet, increment its count in the dictionary\n        if 97 <= ascii_value <= 122:\n            position = ascii_value - 97\n            if position in char_count:\n                char_count[position] += 1\n            else:\n                char_count[position] = 1\n\n    # return the dictionary with the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the character counts\n    char_counts = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n            # If the character is in the English alphabet, check if it's already in the dictionary\n            if char in char_counts:\n                # If the character is already in the dictionary, increment its count\n                char_counts[char] += 1\n            else:\n                # If the character is not in the dictionary, add it to the dictionary with a count of 1\n                char_counts[char] = 1\n\n    # Create a list to store the results\n    results = []\n\n    # Loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # Check if the current character is in the dictionary\n        if chr(i) in char_counts:\n            # If it is, append the count to the results list\n            results.append((chr(i), char_counts[chr(i)]))\n\n    # Sort the results list by count in descending order\n    results.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the results list\n    return results"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Converting the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # Initializing a dictionary to store the count of characters at each position\n    char_position_count = {}\n\n    # Looping through each character in the string\n    for i in range(len(str1)):\n        # Extracting the current character and its position in the string\n        current_char = str1[i]\n        current_position = i\n\n        # Checking if the current character is a vowel or consonant (case insensitive)\n        if current_char in 'aeiouAEIOU':\n            # If it is a vowel, checking if it already has a count at its position in the dictionary\n            if current_position in char_position_count:\n                # Incrementing the count of the current character at its position in the dictionary\n                char_position_count[current_position] += 1\n            else:\n                # Adding the current character and its position to the dictionary with a count of 1\n                char_position_count[current_position] = 1\n\n    # Calculating the total count of characters in the string that occur at the same position in the string as in the English alphabet\n    total_char_count = sum(char_position_count.values())\n\n    return total_char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a list of all the English letters in lowercase\n    english_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # Initialize a dictionary to store the count of each character at each position in the string\n    char_count = {}\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Convert the character to lowercase to make case insensitive comparison\n        char = char.lower()\n        # If the character is a letter in the English alphabet, add it to the list of letters at the same position in the English alphabet list\n        if char in english_letters:\n            # If the letter is already in the dictionary, increment its count\n            if char in char_count:\n                char_count[char] += 1\n            # If the letter is not in the dictionary, add it with a count of 1\n            else:\n                char_count[char] = 1\n\n    # Return the count of each character at each position in the string\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # create a dictionary to store the count of characters at each position in the alphabet\n    char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # loop through each character in the input string\n    for char in str1: \n        # convert the character to lowercase and check if it is in the dictionary (case insensitive)\n        if char.lower() in char_count: \n            # increment the count in the dictionary if the character occurs at the same position in the alphabet\n            char_count[char.lower()] += 1\n    \n    # return the dictionary as a dictionary of counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            char_count[char] = 1 if char not in char_count else char_count[char] + 1\n    # Loop through each character in the English alphabet\n    for i in range(97, 123):\n        # If the character is already in the dictionary, increment the count by 1\n        if chr(i) in char_count:\n            char_count[chr(i)] = 1 if chr(i) not in char_count else char_count[chr(i)] + 1\n    # Print the dictionary of character counts\n    print(char_count)"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0 and A[j] % 2 == 0 and A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0!= A[j] % 2 == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2!= A[j] % 2:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Use binary search to find the next power of 2 greater than or equal to n\n    low = 0\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid < n:\n            low = mid + 1\n        elif mid == n:\n            return mid\n        else:\n            high = mid\n\n    # Return the last power of 2 smaller than or equal to n\n    return 1 << low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while True:\n        if 2**i > n:\n            return 2**i\n        i += 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Calculate the base 2 logarithm of n\n    log_base_2 = 0\n    while n!= 1:\n        n = n // 2\n        log_base_2 += 1\n\n    # Calculate the smallest power of 2 greater than or equal to n\n    return 2 ** log_base_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return n as is\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than or equal to 1\n    i = 1\n    while i < n:\n        i <<= 1\n    \n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Get the integer part of n\n    n_int = int(n)\n    # Initialize the power of 2\n    power = 1\n    # Loop until we find a power of 2 greater than or equal to n\n    while power < n_int:\n        power <<= 1\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2\n    greater than or equal to n.\n    '''\n\n    # Initialize the power variable to 1.\n    power = 1\n\n    # While the power is less than or equal to the square root of n.\n    while power <= n ** 0.5:\n\n        # If the power is greater than or equal to n, the function returns the power.\n        if power >= n:\n            return power\n\n        # If the power is less than n, multiply it by 2.\n        power *= 2\n\n    # If the loop completes without finding a power greater than or equal to n,\n    # the function returns the power of the last iteration of the loop.\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the integer power of 2 that is greater than or equal to n.\n    i = 0\n    while 2**i < n:\n        i += 1\n    \n    # If n is already a power of 2, return n.\n    if 2**i == n:\n        return n\n    \n    # Otherwise, return the smallest power of 2 greater than or equal to n.\n    return 2**i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the next smallest power of 2 greater than or equal to n.\n    If n is already a power of 2, the function will return n itself.\n    '''\n    \n    # If n is already a power of 2, return n itself.\n    if n > 0 and (n & (n - 1)) == 0:\n        return n\n    \n    # Find the next power of 2 that is greater than or equal to n.\n    next_pow_2 = 1\n    while next_pow_2 < n:\n        next_pow_2 <<= 1\n    \n    return next_pow_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the next smallest power of 2 greater than or equal to n.\n    '''\n    n = n - 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Loop through the list and add the elements in the specified range to the total\n    for i in range(m, n+1):\n        total += list1[i]\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # find the sum of the elements in the range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the circumference of the pentagon\n    circumference = 2 * a * math.sqrt(3)\n    # Calculate the number of sides of the pentagon\n    num_sides = 5\n    # Calculate the sum of the perimeter of the pentagon\n    perimeter = circumference * num_sides\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the sine of the angle between adjacent sides\n    angle = math.asin(a/5)\n    # return the perimeter of the pentagon\n    return 5*math.sin(angle)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Formula for perimeter of a pentagon: 5(s^2 + s + a)\n    s = 1/math.sqrt(5)\n    perimeter = 5*s**2 + 5*s + a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to find the perimeter of a regular pentagon\n    perimeter = 5 * a\n    \n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to find the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    \n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n            if i == 'd' and s[i+1] == 't':\n                count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the first element of the tuple\n    element = test_tuple[0]\n\n    # loop through the rest of the tuple\n    for i in range(1, len(test_tuple)):\n        # if the current element is not of the same data type as the first element, return False\n        if type(test_tuple[i])!= type(element):\n            return False\n\n    # if we get to this point, all elements in the tuple have the same data type, so return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Finding the first element in the tuple\n    first_element = test_tuple[0]\n\n    # Checking all the elements in the tuple\n    for element in test_tuple:\n        # If any element is not of the same data type, return False\n        if type(element)!= type(first_element):\n            return False\n\n    # If all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    else:\n        first_element = type(test_tuple[0])\n        for element in test_tuple:\n            if type(element)!= first_element:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Iterate through the remaining elements in the tuple\n    for element in test_tuple[1:]:\n        # Check if the current element has the same data type as the first element\n        if type(element)!= first_element:\n            # If not, return False\n            return False\n\n    # If all elements have the same data type as the first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the first element of the tuple\n    element = test_tuple[0]\n\n    # iterate over the rest of the tuple\n    for item in test_tuple[1:]:\n        # if the item is not of the same data type, return False\n        if not isinstance(item, type(element)):\n            return False\n\n    # if all items are of the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # check if the first element of the tuple is a tuple\n    if isinstance(test_tuple[0], tuple):\n        return check_type(test_tuple[0])\n    # check if all the elements in the tuple have same data type\n    for element in test_tuple:\n        if not isinstance(element, type(test_tuple[0])):\n            return False\n    # if all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize an empty list to store the data types of all elements in the tuple\n    data_types = []\n    # loop through each element in the tuple\n    for item in test_tuple:\n        # check if the data type of the current element is already present in the data_types list\n        if item not in data_types:\n            # if not, add it to the list\n            data_types.append(type(item))\n        # if the data type of the current element is already present in the data_types list, \n        # check if the element has the same data type\n        elif type(item)!= data_types[data_types.index(item)]:\n            # if not, return False\n            return False\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # initialize a count to 0\n    count = 0\n    \n    # loop through the array and count the occurrences of the element x\n    for i in arr:\n        if i == x:\n            count += 1\n            \n    # if the count is greater than n/2, return True\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a number as input and returns the number of set bits in it.\n    A set bit is a binary digit with a value of 1. \n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is 1, increment the count variable\n        if bit == '1':\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # convert string to list\n    str_list = list(str)\n    # iterate through the list and remove odd index characters\n    for i in range(len(str_list)):\n        if i % 2 == 1:\n            str_list.pop(i)\n    # convert the list back to string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index.append(i)\n    return ''.join([str[i] for i in odd_index])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns the string with all the odd index values removed.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    return ''.join(filter(lambda x: x % 2 == 1, str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n\n    # loop through each character in the input string\n    for char in str:\n        # check if the index of the character is odd\n        if len(str) % 2 == 1:\n            # if it is odd, add it to the result\n            result += char\n        # if the index of the character is even, do nothing\n        else:\n            pass\n\n    # return the result\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # converting the binary representation of n to a list of digits\n    binary_list = list(bin(n)[2:])\n\n    # checking if all the bits are unset in the given range or not\n    for i in range(l, r+1):\n        if binary_list[i-1] == '0':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the integer values to binary format\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    # Determine the number of bits in the given range\n    bits_in_range = r.index('1') - l.index('1') + 1\n    # If the number of bits in the given range is equal to the number of bits in the input number, all the bits are unset in the range\n    if bits_in_range == len(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0:\n        return n <= r\n    else:\n        return all_Bits_Set_In_The_Given_Range(n, l - 1, r) and (n & (1 << l - 1)) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three integers n, l, and r as input parameters and returns True if all the bits are unset in the given range or False otherwise.\n    '''\n    if n == 0:\n        return True\n    \n    i = l\n    while i <= r:\n        if (n & (1 << i)) == 0:\n            return False\n        i += 1\n    \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the variable to keep track of the count of unset bits\n    count = 0\n\n    # Loop through all the bits in the given range\n    for i in range(l, r+1):\n        # If the current bit is set, increment the count\n        if n & (1 << i):\n            count += 1\n\n        # If the count reaches the number of unset bits, return True\n        if count == r - l + 1:\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    :param n: An integer denoting the number of bits.\n    :param l: An integer denoting the lower bound of the range.\n    :param r: An integer denoting the upper bound of the range.\n\n    :return: True if all the bits are set in the given range, else False.\n    \"\"\"\n\n    # Initialize all the bits in the range as 1\n    bit_set = n * (r - l + 1) + l\n\n    # Check if all bits are set in the given range\n    if bit_set == (1 << n) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to a binary string\n    binary_str = bin(r - l + 1)[2:].zfill(n)\n\n    # Count the number of unset bits\n    unset_bits = 0\n    for i in range(n):\n        if binary_str[i] == '0':\n            unset_bits += 1\n\n    # Check if all bits are unset or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if bin(n & i).count('1')!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # If l is greater than r, return True since all bits are set in the given range\n    if l > r:\n        return True\n\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n\n    # Iterate through the range of bits starting from l to r\n    for i in range(l, r + 1):\n        # Get the binary representation of the current bit\n        bit = bin(i)[2:].zfill(8)\n        # Check if the bit is all zeros, which means all bits are unset in the current bit\n        if bit == \"00000000\":\n            count += 1\n            # If count becomes greater than or equal to n, return False, since there are set bits in the given range\n            if count >= n:\n                return False\n\n    # If all the bits in the given range are unset, return True\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array \n    so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of the current position of negative and positive elements\n    neg_pos_index = 0\n    neg_index = 0\n    pos_index = n - 1\n\n    # Iterate through the array\n    for i in range(n):\n        # If the element is negative, swap it with the element at the current negative position\n        if arr[i] < 0:\n            arr[neg_pos_index], arr[neg_index] = arr[neg_index], arr[neg_pos_index]\n            neg_pos_index += 1\n            neg_index += 1\n        # If the element is positive, swap it with the element at the current positive position\n        else:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    for i in range(len(neg)):\n        arr[i] = neg[i]\n        for j in range(len(pos)):\n            if arr[i] == pos[j]:\n                pos.pop(j)\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Traverse through the array\n    for i in range(n):\n        # If the current element is negative\n        if arr[i] < 0:\n            # Find the index of the first negative element\n            j = i\n            while j < n and arr[j] >= 0:\n                j += 1\n            # Move the first negative element to the beginning of the array\n            for k in range(i, j):\n                arr[k], arr[k + 1] = arr[k + 1], arr[k]\n\n    # Traverse through the array again\n    for i in range(n):\n        # If the current element is positive\n        if arr[i] > 0:\n            # Find the index of the first positive element\n            j = i\n            while j < n and arr[j] <= 0:\n                j += 1\n            # Move the first positive element to the beginning of the array\n            for k in range(i, j):\n                arr[k], arr[k + 1] = arr[k + 1], arr[k]\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Create a dictionary to store the count of negative and positive elements\n    neg_count = {}\n    pos_count = {}\n\n    # Iterate through the array and count the number of negative and positive elements\n    for num in arr:\n        if num < 0:\n            if num in neg_count:\n                neg_count[num] += 1\n            else:\n                neg_count[num] = 1\n        else:\n            if num in pos_count:\n                pos_count[num] += 1\n            else:\n                pos_count[num] = 1\n\n    # Create a list of negative and positive elements in ascending order\n    neg_list = sorted(list(neg_count.keys()))\n    pos_list = sorted(list(pos_count.keys()))\n\n    # Create a new list to store the re-arranged elements\n    new_list = []\n\n    # Iterate through the array and add the negative and positive elements to the new list in their new positions\n    for num in arr:\n        if num in neg_list:\n            new_list.extend([num] * neg_count[num])\n        elif num in pos_list:\n            new_list.extend([num] * pos_count[num])\n\n    return new_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = n-1\n    \n    # Iterate over the array from both ends\n    while left < right:\n        # If the left element is negative, increment the left pointer\n        if arr[left] < 0:\n            left += 1\n        # If the right element is negative, decrement the right pointer\n        elif arr[right] < 0:\n            right -= 1\n        # If both elements are positive or negative, swap them\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two empty lists to store the negative and positive elements\n    negatives = []\n    positives = []\n    \n    # Iterate through the array and add positive and negative elements to the respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Add any remaining elements to the end of the lists\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Combine the negative and positive lists into a single list\n    combined = negatives + positives\n    \n    # Return the combined list\n    return combined"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    neg_count = 0\n    pos_count = 0\n    temp = []\n\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        elif num > 0:\n            pos_count += 1\n            if neg_count > 0:\n                temp.append(num)\n                neg_count -= 1\n            else:\n                temp.append(num)\n\n    if neg_count > 0:\n        for i in range(neg_count):\n            temp.append(0)\n\n    if pos_count < n:\n        for i in range(pos_count, n):\n            temp.append(0)\n\n    return temp"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # loop through the array\n    for i in range(n):\n\n        # if current element is negative, find the index of the first positive element and swap them\n        if arr[i] < 0:\n            j = i\n            while j < n and arr[j] >= 0:\n                j += 1\n            if j < n:\n                arr[i], arr[j] = arr[j], arr[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers, one for positive and one for negative elements\n    pos = 0\n    neg = n - 1\n\n    # swap negative elements with their corresponding positive elements\n    while neg >= 0:\n        if arr[neg] >= 0:\n            neg -= 1\n        else:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg -= 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize variables\n    pos_count = 0\n    neg_count = 0\n\n    # loop through array\n    for i in range(n):\n        # if current element is positive, increment positive count\n        if arr[i] > 0:\n            pos_count += 1\n        # if current element is negative, increment negative count\n        else:\n            neg_count += 1\n\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # loop through array again and add elements to appropriate lists\n    for i in range(n):\n        if arr[i] > 0:\n            pos_list.append(arr[i])\n        else:\n            neg_list.append(arr[i])\n\n    # create a list to store the combined elements\n    combined_list = []\n\n    # loop through negative and positive lists and add them to combined list\n    for i in range(len(neg_list)):\n        if neg_count > 0:\n            combined_list.append(neg_list[i])\n            neg_count -= 1\n        if pos_count > 0:\n            combined_list.append(pos_list[i])\n            pos_count -= 1\n\n    # create a new array to store the re-arranged elements\n    re_arr = [0] * (n + neg_count + pos_count)\n\n    # loop through combined list and copy elements to re-arranged array\n    for i in range(len(combined_list)):\n        re_arr[i] = combined_list[i]\n\n    # return re-arranged array\n    return re_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Loop through the list and replace blank spaces with the character\n    for i in range(len(char_list)):\n        if char_list[i] =='':\n            char_list[i] = char\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a min heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n    \n    # extract the n largest items from the heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        return []\n    return [heapq.nlargest(n, list1)[i] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    min_heap = []\n    for num in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        elif num > heapq.heappop(min_heap):\n            heapq.heappush(min_heap, num)\n    \n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to store the n largest elements from the list\n    min_heap = []\n    \n    # Use a max heap to store the remaining elements from the list\n    max_heap = []\n    \n    # Iterate through the list and add each element to the appropriate heap\n    for item in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, -item)\n        else:\n            if -item < max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, -item)\n    \n    # Convert the max heap to a list and return it\n    return [x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        max_heapq.heappush(max_heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > max_heap[0]:\n            max_heapq.heappop(max_heap)\n            max_heapq.heappush(max_heap, list1[i])\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        if list1:\n            heapq.heappush(max_heap, list1.pop(0)) # push smallest element of list to max heap\n    \n    # add remaining elements to max heap\n    for i in range(len(list1)):\n        heapq.heappush(max_heap, list1[i])\n    \n    # return the elements in max heap\n    return list(heapq.nsmallest(n, max_heap))"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    surface_area = 2 * math.pi * r * h\n\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * r * h\n    print(\"Lateral surface area of a cylinder is:\", lateral_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Formula for lateral surface area of a cylinder\n    lateral_area = (2*3.14159*(r**2)+(2*3.14159*r*h)+(2*3.14159*h**2))/3\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2)+(2*3.14159*r*h)+(2*3.14159*h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159*(r**2)+(2*3.14159*r*h)+(h**2))*360.0"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2*r*h)+(2*r*r*h/3)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3  # cube of side length\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the new number\n    new_number = 0\n    \n    # Loop through each bit in the given number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the current bit to 1 in the new number\n            new_number |= 1 << i\n    \n    # Return the new number with even bits set to 1\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n\n    # Loop through each bit of n and set the corresponding bit in even_bits to 1\n    for i in range(32):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n\n    # Return the result\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n:\n        n &= n-1\n        n |= n-2\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary and split it into individual digits\n    binary_str = bin(n)[2:]\n    digits = list(binary_str)\n\n    # Loop through each digit and set the corresponding even bit to 1\n    for i in range(len(digits)):\n        if int(digits[i]) % 2 == 0:\n            digits[i] = '1'\n        else:\n            digits[i] = '0'\n\n    # Convert the list of digits back to a binary number and return it as an integer\n    return int(''.join(digits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n\n    # initialize an empty list to store the even bits\n    even_bits = []\n\n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # if the bit is even, append it to the even_bits list\n        if bin(n)[2:].count('0') % 2 == 0 and i % 2 == 0:\n            even_bits.append(bin(n)[2:].count('0'))\n\n    # join the even bits into a string\n    even_bits_string = ''.join(str(bit) for bit in even_bits)\n\n    # convert the string of even bits into an integer and return it\n    return int(even_bits_string, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            even_bits |= 1 << int(bit)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize the variable to store the new number\n    result = 0\n    \n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # If the bit is even, set it to 1\n            result |= (1 << i)\n            \n    # Return the new number with even bits set to 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the set bits\n    set_bits = []\n    \n    # Loop through each bit of the given number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Add the set bit to the list\n            set_bits.append(i)\n            \n    # Convert the list of set bits to an integer\n    result = 0\n    for bit in set_bits:\n        # Shift the result to the right by the set bit\n        result = result << 1\n        \n        # Set the rightmost bit of the result to 1\n        result |= 1\n        \n    # Return the resulting integer\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits\n    even_bits = 0\n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, add it to the even_bits variable\n        if bit == '0':\n            even_bits = even_bits << 1\n        else:\n            even_bits = even_bits | 1\n    # Return the number with all even bits set\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over the bits of the given number\n    for i in range(32):\n        # If the i-th bit of the given number is even, set the corresponding bit in the result variable to 1\n        if (n >> i) & 1 == 0:\n            result |= (1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list) # create a set of unique tuples\n    count_dict = Counter(unique_tuples) # count the number of occurrences of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Counter() function is used to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    # Dictionary is returned with the unique tuples as keys and their occurrences as values\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n\n    # loop through the list of tuples\n    for item in test_list:\n        # convert the tuple to a string so that we can use it as a key in the dictionary\n        string_item = str(item)\n\n        # check if the string item is already in the dictionary\n        if string_item in count_dict:\n            # increment the count by 1\n            count_dict[string_item] += 1\n        else:\n            # if not, add the item to the dictionary with a count of 1\n            count_dict[string_item] = 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    counter = Counter(unique_tuples)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Use a dictionary to count the occurrences of each unique tuple\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n        \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    \n    # Return the dictionary of count of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_set = set(test_list)\n    \n    # Count the occurrences of each tuple in the set using Counter\n    counter = Counter(unique_set)\n    \n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the count of non-empty substrings.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i > 1:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n            \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    current_sequence = [2]  # start with the first element as 2\n\n    for i in range(1, n):\n        # check if the current element is within the range and greater than twice the previous element\n        if current_sequence[-1] < m and 2 * current_sequence[-1] <= m:\n            current_sequence.append(current_sequence[-1] + 1)  # if yes, add 1 to the current sequence\n        else:\n            # if not, check if the current element is within the range and greater than twice the previous element plus 1\n            if current_sequence[-1] < m and 2 * current_sequence[-1] + 1 <= m:\n                current_sequence.append(current_sequence[-1] + 2)  # if yes, add 2 to the current sequence\n            else:\n                # if not, add the current sequence to the total number of sequences\n                total_sequences += 1\n                current_sequence = [2]  # reset the current sequence\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def is_valid_sequence(sequence):\n        prev_num = float('-inf')\n        for num in sequence:\n            if num < 0 or num > m or num < 2 * prev_num:\n                return False\n            prev_num = num\n        return True\n    \n    def backtrack(start, sequence, result):\n        if len(sequence) == n:\n            if is_valid_sequence(sequence):\n                result += 1\n        else:\n            for i in range(start, m + 1):\n                sequence.append(i)\n                backtrack(i + 1, sequence, result)\n                sequence.pop()\n    \n    result = 0\n    sequence = []\n    backtrack(0, sequence, result)\n    return result"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += m // i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    sequence = [2]\n    for i in range(2, n+1):\n        if len(sequence) >= m:\n            break\n        for j in range(len(sequence)):\n            if sequence[j] + 2 <= m:\n                sequence.append(sequence[j] + 2)\n                count += 1\n                break\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of possible sequences to 0\n    num_sequences = 0\n    \n    # Check if m is greater than or equal to 2*n\n    if m < 2*n:\n        return 0\n    \n    # Initialize the list of possible sequences to empty\n    sequences = []\n    \n    # Loop through all elements from m to n\n    for i in range(m, n+1):\n        # Check if the current element is greater than or equal to 2*n\n        if i >= 2*n:\n            # Check if the current element is between 2 and m\n            if i <= m:\n                # Check if the current element is the same as the previous element or less than the previous element\n                if i <= sequences[-1][-1]:\n                    # If the current element is not the same as the previous element or less than the previous element, add the sequence to the list of possible sequences\n                    sequences.append([i])\n                else:\n                    # If the current element is the same as the previous element or less than the previous element, update the previous sequence\n                    sequences[-1].append(i)\n            else:\n                # If the current element is greater than m, add the sequence to the list of possible sequences with the current element as the only element\n                sequences.append([i])\n    \n    # Initialize the variable to count the number of possible sequences\n    num_sequences = 0\n    \n    # Loop through the list of possible sequences\n    for sequence in sequences:\n        # Check if the length of the sequence is equal to n\n        if len(sequence) == n:\n            # If the length of the sequence is equal to n, increment the number of possible sequences\n            num_sequences += 1\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize variables\n    prev_element = 0\n    count = 0\n    \n    # Iterate through the range of possible elements\n    for element in range(m,m+n):\n        \n        # Check if the element is within the specified range\n        if element >= 2*prev_element <= m:\n            \n            # Increment the count\n            count += 1\n            \n        # Update the previous element\n        prev_element = element\n    \n    # Return the count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    count = 0\n    sequence = [0]\n\n    # Iterate through possible sequences\n    for i in range(n):\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if sequence[-1] >= 2*sequence[-2] and sequence[-1] <= m:\n            # Append the current element to the sequence\n            sequence.append(sequence[-1])\n            # Increment the count\n            count += 1\n        else:\n            # Reset the sequence\n            sequence = [0]\n            # Decrement the count\n            count -= 1\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the total number of sequences to 0\n    total_sequences = 0\n    \n    # Initialize the first element of the sequence to 2\n    sequence = [2]\n    \n    # Loop through the rest of the sequence\n    for i in range(n-1):\n        # Check if the current element is less than or equal to m\n        while sequence[i] <= m:\n            # If it is, add it to the sequence and increment the total number of sequences\n            sequence.append(sequence[i] + 2)\n            total_sequences += 1\n    \n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    # initialize the number of possible sequences to zero\n    count = 0\n    \n    # loop through all possible sequence lengths\n    for i in range(1,n+1):\n        # loop through all possible starting elements\n        for j in range(1,m+1,i):\n            # check if the starting element is valid\n            if j >= i*2:\n                count += 1\n    \n    # return the total number of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and returns the number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = set()\n    for i in range(m, m+n):\n        for j in range(i, m+n):\n            if (i-j) % 2 == 0 and j % 2 == 0:\n                sequences.add(i)\n    return len(sequences)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) >= 1:\n        if len(list2) >= 1:\n            list1.pop()\n            list1.extend(list2)\n            return list1\n        else:\n            return list1\n    else:\n        return list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of list1 is less than or equal to one\n    if len(list1) <= 1:\n        return list1\n\n    # Remove the last element of list1\n    list1.pop()\n\n    # Append the elements of list2 to the end of list1\n    list1 += list2\n\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    n = len(list1)\n    # Loop through the first list\n    for i in range(n-1, -1, -1):\n        # Replace the last element of the first list with the elements of the second list\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < 1:\n        raise ValueError(\"The first list is empty\")\n    elif len(list2) < 1:\n        raise ValueError(\"The second list is empty\")\n    else:\n        list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_characters(str1):\n    '''\n    This function takes in a string and counts the total number of characters in it.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Convert N to a float to make the calculations easier\n    N = float(N)\n\n    # Use a while loop to find the next perfect square\n    i = N + 1\n    while (i ** 2 <= N):\n        i += 1\n\n    # Check if the next perfect square is less than or equal to the given number\n    if (i <= N):\n        i += 1\n\n    # Convert the next perfect square back to an integer and return it\n    return int(i)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n  \n    # Function to check if a number is a perfect square or not  \n    def is_perfect_square(num): \n        root = math.sqrt(num)  \n        return root*root == num \n  \n    # Finding the square root of N  \n    root = math.sqrt(N)  \n  \n    # Adding 1 to the square root until it becomes a perfect square  \n    while not is_perfect_square(root*root):  \n        root += 1  \n  \n    # Returning the next perfect square greater than N  \n    return int(root+1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num): \n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2: \n        return False \n    for i in range(2, int(math.sqrt(num))+1): \n        if num % i == 0: \n            return False \n    return True \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    current = N\n    square = int(math.sqrt(current))\n    while square*square < current: \n        square += 1\n    if square > square*square: \n        square -= 1\n    while not is_prime(square): \n        square += 1\n    return square "
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # round the square root to the nearest integer\n    sqrt_N = int(round(sqrt_N))\n\n    # calculate the next perfect square\n    next_sqrt_N = 2 * sqrt_N * sqrt_N\n\n    # if the next perfect square is less than the given number, add 1 to it\n    if next_sqrt_N < N:\n        next_sqrt_N += 1\n\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_next_prime(num):\n    while True:\n        num += 1\n        if is_prime(num):\n            return num\n\ndef next_Perfect_Square(N):\n    while True:\n        num = find_next_prime(N)\n        if is_prime(num):\n            return num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 2\n    else:\n        for i in range(N-2, -1, -1):\n            if math.isqrt(i*i) ** 2 == i:\n                return math.isqrt(i*i) + 1\n        else:\n            return 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while not is_prime(num + 1):\n            num += 1\n        return num\n\n    def next_square(num):\n        return num * num\n\n    def check_square(num):\n        if num > N:\n            return True\n        return is_prime(next_prime(num))\n\n    while not check_square(N):\n        N += 1\n\n    return next_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N % 4 == 0:\n        N += 1\n\n    N = math.sqrt(N)\n    N -= 0.000001\n    N += 1\n    N = int(N)\n\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square.\n        \"\"\"\n        return int(math.sqrt(num))**2 == num\n    \n    def next_square(num):\n        \"\"\"\n        Helper function to find the next perfect square after a given number.\n        \"\"\"\n        return int(math.sqrt(num + 1))**2\n    \n    # Check if the given number is a perfect square\n    if is_perfect_square(N):\n        # If it is, find the next perfect square\n        next_num = next_square(N)\n    else:\n        # If it's not, find the next perfect square after N\n        next_num = next_square(N + 1)\n    \n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Check if the square root is an integer\n    if sqrt_N.is_integer():\n        # Check if the square root is less than the next integer\n        if math.isclose(sqrt_N, int(sqrt_N)):\n            # If it is, calculate the next integer greater than the square root\n            next_integer = int(sqrt_N) + 1\n\n            # Calculate the square of the next integer\n            square_of_next_integer = next_integer ** 2\n\n            # Check if the square of the next integer is greater than N\n            if square_of_next_integer > N:\n                # If it is, return the square of the next integer\n                return square_of_next_integer\n            else:\n                # If not, calculate the square of the next integer greater than N\n                next_square = next_integer + 1\n                while next_square ** 2 <= N:\n                    next_square += 1\n                return next_square ** 2\n        else:\n            # If it's not, calculate the square root of the next integer greater than the square root\n            next_integer = math.ceil(sqrt_N)\n\n            # Calculate the square of the next integer\n            square_of_next_integer = next_integer ** 2\n\n            # Check if the square of the next integer is greater than N\n            if square_of_next_integer > N:\n                # If it is, return the square of the next integer\n                return square_of_next_integer\n            else:\n                # If not, calculate the square of the next integer greater than N\n                next_square = next_integer + 1\n                while next_square ** 2 <= N:\n                    next_square += 1\n                return next_square ** 2\n    else:\n        # If the square root is not an integer, calculate the square root of the next integer greater than the square root\n        next_integer = math.ceil(sqrt_N)\n\n        # Calculate the square of the next integer\n        square_of_next_integer = next_integer ** 2\n\n        # Check if the square of the next integer is greater than N\n        if square_of_next_integer > N:\n            # If it is, return the square of the next integer\n            return square_of_next_integer\n        else:\n            # If not, calculate the square of the next integer greater than N\n            next_square = next_integer + 1\n            while next_square ** 2 <= N:\n                next_square += 1\n            return next_square ** 2"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n\n    # Convert the given array to a list of integers\n    arr = [int(x) for x in arr]\n\n    # Initialize two pointers 'left' and 'right'\n    left, right = 0, n-1\n\n    # Initialize variables'max_sum' and 'bitonic_sum'\n    max_sum = arr[0]\n    bitonic_sum = arr[0]\n\n    # Check if the array is bitonic\n    if arr[0] >= arr[1]:\n        if arr[n-1] <= arr[n-2]:\n            return bitonic_sum\n        else:\n            return max_sum\n\n    # If the array is not bitonic, find the maximum subsequence in the array\n    while left <= right:\n\n        # Calculate the sum of the current subsequence\n        curr_sum = arr[left] + arr[right]\n\n        # If the current subsequence is bitonic, update'max_sum' and 'bitonic_sum'\n        if curr_sum > max_sum and (left == 0 or arr[left-1] < arr[left]):\n            max_sum = curr_sum\n            bitonic_sum = curr_sum\n\n        # Move the right pointer to the next element\n        right -= 1\n\n        # If the current subsequence is bitonic, update'max_sum' and 'bitonic_sum'\n        if curr_sum > max_sum and (right == n-1 or arr[right+1] < arr[right]):\n            max_sum = curr_sum\n            bitonic_sum = curr_sum\n\n        # Move the left pointer to the next element\n        left += 1\n\n    return bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum_so_far = float('-inf')\n    max_sum_ending_here = 0\n\n    for i in range(n):\n        max_sum_ending_here += arr[i]\n\n        if i > 0 and arr[i] < arr[i - 1]:\n            max_sum_ending_here = max_sum_ending_here - arr[i - 1]\n\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    def is_bitonic(arr):\n        '''\n        Helper function to check if a given array is bitonic.\n        '''\n        if len(arr) < 3:\n            return True\n\n        if arr[1] <= arr[0] or arr[-2] >= arr[-1]:\n            return False\n\n        for i in range(1, len(arr) - 1):\n            if arr[i] < arr[i - 1] or arr[i] > arr[i + 1]:\n                return False\n\n        return True\n\n    def is_increasing(arr):\n        '''\n        Helper function to check if a given array is increasing.\n        '''\n        return all(arr[i] < arr[i + 1] for i in range(len(arr) - 1))\n\n    def max_sum_bitonic(arr):\n        '''\n        Helper function to find the maximum sum of a bitonic subsequence.\n        '''\n        if not is_bitonic(arr):\n            return -1\n\n        if is_increasing(arr):\n            return max(arr)\n\n        if is_increasing(arr[::-1]):\n            return max(arr[::-1])\n\n        return -1\n\n    return max_sum_bitonic(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Finding the length of the array\n    n = len(arr)\n\n    # Initializing the variables for the maximum sum and the sum of subsequences\n    max_sum_of_subsequences = float('-inf')\n    current_sum_of_subsequences = 0\n\n    # Looping through the array\n    for i in range(n-1):\n\n        # If the current element is greater than the next element, adding it to the current sum of subsequences and finding the maximum sum of subsequences\n        if arr[i] > arr[i+1]:\n            current_sum_of_subsequences += arr[i]\n        else:\n            max_sum_of_subsequences = max(max_sum_of_subsequences, current_sum_of_subsequences)\n            current_sum_of_subsequences = 0\n\n        # If the current element is less than or equal to the next element, adding it to the current sum of subsequences\n        else:\n            current_sum_of_subsequences += arr[i]\n\n    # Finding the maximum sum of subsequences\n    max_sum_of_subsequences = max(max_sum_of_subsequences, current_sum_of_subsequences)\n\n    return max_sum_of_subsequences"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    prev = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n        prev[i][i] = -1\n\n    for gap in range(2, n):\n        for i in range(n-gap):\n            j = i+gap\n            dp[i][j] = max(dp[i][j], dp[i+1][j-1] + arr[j])\n            prev[i][j] = i+1\n\n    max_sum = max(dp[0][n-1], dp[1][n-2])\n    start = 0\n    end = n-1\n\n    while start <= end:\n        if dp[start][end] == max_sum:\n            break\n        if dp[start][end] > max_sum:\n            max_sum = dp[start][end]\n            start = prev[start][end]\n        else:\n            end = prev[start][end]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    # Check if the first element of the array is increasing\n    if arr[0] < arr[1]:\n        # If it is, check if the second element is decreasing\n        if arr[0] > arr[2]:\n            # If it is, return the sum of the first and second elements\n            return arr[0] + arr[1]\n        else:\n            # If it isn't, return the sum of the first and third elements\n            return arr[0] + arr[2]\n    else:\n        # If the first element is decreasing\n        if arr[0] < arr[2]:\n            # If it is, return the sum of the first and third elements\n            return arr[0] + arr[2]\n        else:\n            # If it isn't, check if the second element is increasing\n            if arr[1] < arr[3]:\n                # If it is, return the sum of the second and third elements\n                return arr[1] + arr[2]\n            else:\n                # If it isn't, return the maximum of the first and second elements\n                return max(arr[0], arr[1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Find the minimum element in the first half\n    min_element = arr[0]\n    for i in range(1, n//2):\n        min_element = min(min_element, arr[i])\n    \n    # Find the maximum element in the first half\n    max_element = arr[0]\n    for i in range(1, n//2):\n        max_element = max(max_element, arr[i])\n    \n    # Find the minimum element in the second half\n    min_second_half = arr[n//2]\n    for i in range(n//2+1, n):\n        min_second_half = min(min_second_half, arr[i])\n    \n    # Find the maximum element in the second half\n    max_second_half = arr[n//2]\n    for i in range(n//2+1, n):\n        max_second_half = max(max_second_half, arr[i])\n    \n    # Calculate the maximum sum of a bitonic subsequence\n    if min_element <= max_second_half:\n        max_sum = max(max_element + min_second_half, max_second_half + min_second_half) - min_element\n    else:\n        max_sum = max(max_element + min_second_half, max_second_half + min_second_half) - max_second_half\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # find the maximum subarray of increasing and decreasing elements\n    max_increasing = float('-inf')\n    max_decreasing = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                max_increasing = max(max_increasing, arr[j]-arr[i])\n            else:\n                max_decreasing = max(max_decreasing, arr[i]-arr[j])\n\n    # find the maximum subarray of increasing and decreasing elements with max sum\n    max_sum = max(max_increasing, max_decreasing)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    prev_sum = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < prev_sum:\n            prev_sum = arr[i]\n        else:\n            curr_sum = prev_sum + arr[i]\n            max_sum = max(max_sum, curr_sum)\n            prev_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        increasing = False\n        decreasing = False\n        current_sum = arr[0]\n        max_sum = current_sum\n        \n        for i in range(1, len(arr)):\n            if arr[i] > current_sum:\n                decreasing = True\n                current_sum += arr[i]\n            elif arr[i] < current_sum:\n                increasing = True\n                current_sum -= arr[i]\n            else:\n                current_sum = arr[i]\n            \n            if increasing and decreasing:\n                max_sum = max(max_sum, current_sum)\n                increasing = False\n                decreasing = False\n                current_sum = 0\n        \n        if increasing:\n            max_sum = max(max_sum, current_sum)\n        elif decreasing:\n            max_sum = max(max_sum, -current_sum)\n        \n        return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    previous_guess = 0\n    i = 0\n    while abs(guess**2 - number) > 0.0001 and i < 1000:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n        i += 1\n    if abs(guess**2 - number) > 0.0001:\n        print(\"Convergence failed. Maximum number of iterations reached.\")\n    else:\n        print(\"Square root of\", number, \"is\", round(guess, 6))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the input is a positive integer\n    if type(number)!= int or number <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Set the initial approximation and increment\n    x = number\n    y = (x + number // x) // 2\n\n    # Iterate until the difference between the approximations is less than a tolerance\n    while abs(x - y) > 1e-12:\n        x = y\n        y = (x + number // x) // 2\n\n    # Return the approximate square root\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Number must be non-negative')\n    elif number == 0:\n        return 0\n\n    # initialize variables\n    x0 = number / 2\n    x1 = number / 2\n    x2 = number / 2\n    x3 = number / 2\n    x4 = number / 2\n    x5 = number / 2\n    x6 = number / 2\n    x7 = number / 2\n    x8 = number / 2\n    x9 = number / 2\n    x10 = number / 2\n\n    # calculate square roots\n    for i in range(1, 11):\n        x0 = 2 * x0 / (x0 + x1)\n        x1 = 2 * x1 / (x0 + x1)\n        x2 = 2 * x2 / (x0 + x1)\n        x3 = 2 * x3 / (x0 + x1)\n        x4 = 2 * x4 / (x0 + x1)\n        x5 = 2 * x5 / (x0 + x1)\n        x6 = 2 * x6 / (x0 + x1)\n        x7 = 2 * x7 / (x0 + x1)\n        x8 = 2 * x8 / (x0 + x1)\n        x9 = 2 * x9 / (x0 + x1)\n        x10 = 2 * x10 / (x0 + x1)\n\n    # return the square root\n    return x10"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.00001:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number / 2.0\n    x1 = x0 - (x0 * x0) / number\n    count = 0\n    while abs(x1 - x0) > 1e-6:\n        x0 = x1\n        x1 = x0 - (x0 * x0) / number\n        count += 1\n    print(\"Number of iterations:\", count)\n    print(\"Square root:\", x1)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # calculate the first guess for the square root\n    guess = number / 2\n    # keep track of the number of iterations\n    count = 0\n    # keep track of the maximum absolute error\n    max_error = abs(number - guess * guess)\n    # perform the Babylonian method until the maximum absolute error is below a certain threshold\n    while max_error > 1e-6:\n        # calculate the next guess\n        next_guess = guess - (guess * guess - number) / (2 * guess)\n        # update the count and maximum absolute error\n        count += 1\n        max_error = abs(number - next_guess * next_guess)\n        # update the guess\n        guess = next_guess\n    # return the approximate square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    previous_guess = guess\n    iterations = 0\n    while abs(guess**2 - number) > 0.0001:\n        guess = (number / guess + guess) / 2\n        iterations += 1\n        if iterations > 100:\n            raise ValueError(\"Maximum number of iterations exceeded\")\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n        if abs(guess - previous_guess) < 0.0001:\n            return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = number / 2\n    prev_guess = guess\n    \n    # Iterate until the difference between the current and previous guesses is less than or equal to 0.00001\n    while abs(prev_guess - guess) > 0.00001:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n        \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    count = 0\n    while abs(guess**2 - number) > 0.000001:\n        count += 1\n        guess = (guess + number / guess) / 2\n    print(f\"The square root of {number} is {guess} in {count} iterations.\")"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # Initialize variables for longest palindromic subsequence and maximum length of palindrome \n    max_len = 1 \n    start = 0\n    # Loop through the string and check for palindromic subsequences of odd and even length \n    for i in range(1, n-1): \n        # Check if the current character is a palindrome \n        if str[i] == str[i-1]: \n            # Check if the length of the palindrome is greater than the current longest palindromic subsequence \n            if i-start+1 > max_len: \n                max_len = i-start+1 \n                start = i-max_len+1\n    # Return the length of the longest palindromic subsequence \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Initialize variables to store length of longest palindrome found so far and length of current subsequence\n    max_len = 1\n    current_len = 1\n    \n    # Iterate through the string\n    for i in range(len(str)): \n        # Check if the current character is part of a palindrome\n        if i == 0 or str[i] == str[i-1]: \n            current_len += 1\n        else: \n            # Update the current length and compare with previous longest palindrome found\n            max_len = max(max_len, current_len)\n            current_len = 1\n            \n    # Update the final longest palindrome length\n    max_len = max(max_len, current_len)\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    if len(string) < 2:\n        return len(string)\n    dp = [[0] * len(string) for _ in range(len(string))]\n    max_length = 1\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    lps_length = 1\n    max_length = 1\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_length += 1\n            if lps_length > max_length:\n                max_length = lps_length\n        else:\n            lps_length = 1\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n  \n    # Create a 2D table to store lengths of longest palindromic subsequences for all prefixes of string \n    table = [[0 for j in range(n)] for i in range(n)] \n  \n    # LPS for odd length strings \n    max_len = 1\n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            table[i][i] = 2\n            max_len = 2\n        else: \n            table[i][i] = 1 \n  \n    # LPS for even length strings \n    for length in range(3, n+1, 2): \n        for i in range(n-length+1): \n            j = i+length-1\n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n                max_len = max(max_len, table[i][j])\n            else: \n                table[i][j] = max(table[i+1][j], table[i][j-1])\n  \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    \"\"\"\n    This function returns the length of the longest palindromic subsequence in the given string.\n\n    :param s: string of characters\n    :return: length of the longest palindromic subsequence\n    \"\"\"\n\n    # Initialize a 2D table to store the length of the longest palindromic subsequence ending at each position in the string\n    lps_table = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n\n    # Initialize the first row and column to 0 and 1, respectively\n    for i in range(len(s) + 1):\n        lps_table[i][0] = 0\n        lps_table[0][i] = 1\n\n    # Fill in the table using dynamic programming\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                lps_table[i][j] = lps_table[i - 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i - 1][j], lps_table[i][j - 1])\n\n    return lps_table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Creating a 2D array of size len(s)+1 x len(s)+1\n    dp = [[0 for _ in range(len(s)+1)] for _ in range(len(s)+1)]\n\n    # Base case: if the length of the string is 1, then it is a palindrome\n    dp[0][0] = 1\n\n    # Fill the dp table using dynamic programming\n    for i in range(1, len(s)+1):\n        for j in range(1, len(s)+1):\n            if s[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Returning the length of the longest palindrome subsequence\n    return dp[len(s)][len(s)]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store the lengths of longest palindromic subsequences of \n    # substrings of str\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                table[i][j] = 1 + table[j+1][i-1]\n            else:\n                table[i][j] = max(table[i][j+1], table[j][i])\n\n    # Return the length of the longest palindromic subsequence\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    if len(s) == 1:\n        return 1\n\n    n = len(s)\n    dp = [1] * n\n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = max(dp[i-1], dp[i-dp[i-1]])\n\n    return dp[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store lengths of longest palindromic subsequences ending at each position in the string\n    dp = [[0] * n for _ in range(n)]\n    # initialize all values in the first row and column\n    for i in range(n):\n        dp[i][i] = 1\n    # fill in the table using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # return the length of the longest palindromic subsequence\n    return dp[n-1][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n + 1) / harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1)) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)*(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    # Iterate over the first array and add each element to the set\n    for num in array_nums1:\n        common_set.add(num)\n    # Iterate over the second array and check if each element is in the set\n    for num in array_nums2:\n        if num in common_set:\n            # If it is, add it to the result list\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the unique elements of the first array\n    unique_elements = set()\n    # Iterate through the first array\n    for num in array_nums1:\n        # If the number is not in the unique_elements set, add it\n        if num not in unique_elements:\n            unique_elements.add(num)\n    # Initialize an empty set to store the unique elements of the second array\n    intersection = set()\n    # Iterate through the second array\n    for num in array_nums2:\n        # If the number is in the unique_elements set, add it to the intersection set\n        if num in unique_elements:\n            intersection.add(num)\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two dictionaries to store the occurrence count of each element in array_nums1 and array_nums2\n    num_occurrence1 = {}\n    num_occurrence2 = {}\n    # loop through array_nums1 and update num_occurrence1 dictionary with occurrence count\n    for num in array_nums1:\n        if num in num_occurrence1:\n            num_occurrence1[num] += 1\n        else:\n            num_occurrence1[num] = 1\n    # loop through array_nums2 and update num_occurrence2 dictionary with occurrence count\n    for num in array_nums2:\n        if num in num_occurrence2:\n            num_occurrence2[num] += 1\n        else:\n            num_occurrence2[num] = 1\n    # loop through num_occurrence1 and check if the key exists in num_occurrence2\n    intersection = []\n    for key in num_occurrence1:\n        if key in num_occurrence2 and num_occurrence1[key] > 0 and num_occurrence2[key] > 0:\n            intersection.append(key)\n    # return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums2 to remove duplicates\n    unique_nums2 = set(array_nums2)\n\n    # Create an empty list to store the intersection of arrays\n    intersection = []\n\n    # Iterate through array_nums1 and check if each element is in the set of unique elements from array_nums2\n    for num in array_nums1:\n        if num in unique_nums2:\n            # If the element is in the intersection, append it to the list\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of those arrays.\n    \"\"\"\n\n    # convert both arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Loop through both arrays\n    for num in array_nums1:\n        # Check if the element is present in the other array\n        if num in array_nums2:\n            # If it is, add it to the set\n            common_set.add(num)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_nums:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    # copy the list to avoid modifying original list\n    result = list.copy()\n    # insert the element before each element in the list\n    for i in range(len(result)):\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[:i])\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    # Return the modified list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # converting complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # appending polar coordinates to result list\n        result.append([r, theta])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        num = cmath.rect(num)\n        num = (num.real, num.imag)\n        print(num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        x, y = cmath.polar(num)\n        result.append((x.real, y.imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        \n        # print the polar coordinates\n        print(f\"{num} -> ({magnitude}, {angle})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Args:\n        numbers: a list of complex numbers\n\n    Returns:\n        a list of polar coordinates for the given complex numbers\n\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        # convert complex number to polar coordinates\n        magnitude = abs(num)\n        if magnitude == 0:\n            # if the magnitude of the complex number is zero, it is a point\n            angle = 0\n        else:\n            angle = cmath.phase(num)\n        # add the polar coordinates to the list\n        polar_coords.append((magnitude, angle))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Split the complex number into real and imaginary parts\n        real, imag = number.real, number.imag\n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        # Calculate the angle of the complex number in radians\n        angle = cmath.phase(number)\n        # Convert the angle to degrees and append to the result list\n        result.append(angle * 180 / cmath.pi)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # print the polar coordinates\n        print(\"{:.2f} + {:.2fi}\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        r = cmath.sqrt(abs(number))\n        theta = cmath.phase(number)\n        polar = (r, theta)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(f'({r}, {theta})')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:  \n        real, imag = num  \n        magnitude = cmath.sqrt(real**2 + imag**2)  \n        angle = cmath.phase(num)  \n        print(f\"{num} in polar form: {magnitude} in the x-axis and {angle} degrees in the y-axis\")  "
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as an input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n\n    count = 0\n\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n with replacement for each element of l\n    combinations = combinations_with_replacement(l, n)\n    # convert each combination to a tuple and return as a list\n    return list(combinations)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)-n+1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l) + 1):\n            color_combinations.append((l[i], l[j]))\n    return color_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(lst)-n+1):\n        color_combinations.append(tuple(lst[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations with repetition\n    for i in range(1, n+1):\n        for comb in combinations_with_replacement(l, i):\n            yield tuple(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    prime_count = 0\n    i = 2\n    \n    while i <= n:\n        if i > 1:\n            j = 2\n            while i % j!= 0 and j <= int(i ** 0.5):\n                j += 1\n            if j > int(i ** 0.5):\n                prime_count += 1\n        i += 1\n    \n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than n\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a list to store the prime numbers\n    primes = []\n    \n    # Initialize a boolean variable to check if a number is prime or not\n    is_prime = True\n    \n    # Loop through the numbers from 2 to n-1\n    for num in range(2, n):\n        \n        # Check if the current number is prime or not\n        if num > 1:\n            is_prime = True\n            \n            # Loop through the numbers from 2 to the square root of the current number\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            \n            # If the current number is prime, add it to the list of primes\n            if is_prime:\n                primes.append(num)\n    \n    # Return the number of primes found\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Check which tuple has the larger element\n    if max1 > max2:\n        return max1\n    else:\n        return max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # find the maximum value in each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    \n    # compare the maximum values and return the tuple with the maximum value\n    if max_val1 >= max_val2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    max_tup = ()\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare first tuple elements\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(test_tup1[0], test_tup2[0])\n    if max_value == test_tup1[0]:\n        return (max(test_tup1[1], test_tup2[1]), test_tup1)\n    else:\n        return (max(test_tup1[2], test_tup2[2]), test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = 0\n    max2 = 0\n    max_val = 0\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n            max2 = test_tup2[i]\n            max_val = test_tup1[i]\n        elif test_tup1[i] < max1 and test_tup1[i] > max2:\n            max1 = test_tup1[i]\n            max2 = test_tup2[i]\n            max_val = test_tup1[i]\n        elif test_tup2[i] > max1:\n            max1 = test_tup2[i]\n            max2 = test_tup1[i]\n            max_val = test_tup2[i]\n        elif test_tup2[i] < max1 and test_tup2[i] > max2:\n            max1 = test_tup2[i]\n            max2 = test_tup1[i]\n            max_val = test_tup2[i]\n    \n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value1 = max(test_tup1)\n    max_value2 = max(test_tup2)\n    return max(max_value1, max_value2)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * (n+1)\n    sieve[0], sieve[1] = False, False\n    p = 2\n    while p*p <= n:\n        if sieve[p]:\n            for i in range(p*p, n+1, p):\n                sieve[i] = False\n        p += 1\n    return [i for i in range(2, n+1) if sieve[i]]\n\nn = 10\nprint(newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    is_prime = True\n    num = 2\n    count = 0\n    \n    while count < n:\n        # Check if number is prime\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Check if number is newman-shanks-williams prime\n            if num < 100:\n                if (num % 2 == 0 and num % 5!= 0) or (num % 3 == 0 and num % 5 == 0):\n                    is_prime = False\n            elif num < 1000:\n                if (num % 2 == 0 and num % 7!= 0) or (num % 3 == 0 and num % 7 == 0):\n                    is_prime = False\n            else:\n                if (num % 2 == 0 and num % 11!= 0) or (num % 3 == 0 and num % 11 == 0):\n                    is_prime = False\n        if is_prime:\n            count += 1\n        # Increment number\n        num += 1\n    \n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_candidates(n):\n        \"\"\"\n        Helper function to find prime candidates for the nth newman\u2013shanks\u2013williams prime.\n        \"\"\"\n        candidates = [2, 3]\n        while len(candidates) < n:\n            for candidate in candidates:\n                if is_prime(candidate):\n                    yield candidate\n            candidates.extend([candidate + i for i in range(1, n - len(candidates) + 1) for candidate in candidates])\n\n    def prime_prime_candidates(n):\n        \"\"\"\n        Helper function to find prime prime candidates for the nth newman\u2013shanks\u2013williams prime.\n        \"\"\"\n        candidates = [2, 3]\n        while len(candidates) < n:\n            for candidate in candidates:\n                if is_prime(candidate) and is_prime(candidate + 2):\n                    yield candidate\n            candidates.extend([candidate + i for i in range(3, n - len(candidates) + 1) for candidate in candidates])\n\n    prime_candidates_count = 0\n    prime_prime_candidates_count = 0\n\n    for prime in prime_candidates(n):\n        prime_candidates_count += 1\n        if prime_candidates_count == n:\n            break\n\n    for prime in prime_prime_candidates(n):\n        prime_prime_candidates_count += 1\n        if prime_prime_candidates_count == n:\n            break\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_newman_prime(n):\n        \"\"\"\n        Helper function to find the nth newman prime number.\n        \"\"\"\n        if n == 1:\n            return 2\n        if is_prime(n):\n            return n + 1\n        return next_newman_prime(n + 2)\n\n    return next_newman_prime(2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize the sequence of primes to the first seven primes\n    primes = [2, 3, 5, 7, 11, 13, 17]\n\n    # iterate over the next n-1 newman\u2013shanks\u2013williams primes\n    for i in range(n-2):\n        # find the next newman\u2013shanks\u2013williams prime\n        p = primes[-1] + 2 * (primes[-1] - 1)\n        # check if it's prime and greater than the previous prime in the sequence\n        while not is_prime(p):\n            p += 2 * (p - 1)\n        # add the new prime to the sequence\n        primes.append(p)\n\n    # return the last prime in the sequence\n    return primes[-1]\n\ndef is_prime(n):\n    \"\"\"\n    Check if a given number is prime.\n    \"\"\"\n    # check if n is less than 2\n    if n < 2:\n        return False\n    # check if n is divisible by 2\n    elif n % 2 == 0:\n        return False\n    # check if n is divisible by any number in the sequence of primes\n    else:\n        for i in range(len(primes)):\n            if n % primes[i] == 0:\n                return False\n        return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    prime_count = 2\n\n    # iterate through numbers\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    # iterate through numbers again to find prime numbers\n    for i in range(2, n+1):\n        if is_prime[i]:\n            prime_count += 1\n\n    return prime_count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_newman_prime(current_prime):\n        \"\"\"\n        Helper function to find the next newman-shanks-williams prime number.\n        \"\"\"\n        next_prime = current_prime\n        while not is_prime(next_prime):\n            next_prime += 1\n        return next_prime\n    \n    # Start from the first newman-shanks-williams prime number\n    current_prime = 2\n    nth_prime = 1\n    \n    while nth_prime <= n:\n        # Find the next newman-shanks-williams prime number\n        next_prime = next_newman_prime(current_prime)\n        \n        # Check if the next newman-shanks-williams prime number is greater than the current prime\n        if next_prime > current_prime:\n            current_prime = next_prime\n            nth_prime += 1\n    \n    return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the primes\n    primes = [2]\n\n    # Loop through the numbers from 3 to n\n    for i in range(3, n+1):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the prime numbers\n    prime_list = []\n\n    # Start with the first newman prime number\n    next_prime = 2\n\n    # While there are still n newman primes left to find\n    while len(prime_list) < n:\n\n        # Check if the next number is a prime number\n        is_prime = True\n        for i in range(2, int(next_prime**0.5)+1):\n            if next_prime % i == 0:\n                is_prime = False\n                break\n\n        # If the number is a prime number, add it to the list\n        if is_prime:\n            prime_list.append(next_prime)\n\n        # Increment the next prime number by 2\n        next_prime += 2\n\n    # Return the nth newman prime number\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize variables\n    count = 0\n    current_num = 2\n\n    # check if n is a positive integer\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # loop n times\n    while count < n:\n        # check if current_num is a newman\u2013shanks\u2013williams prime number\n        if is_newman_prime(current_num):\n            count += 1\n        current_num += 1\n\n    # return the nth newman\u2013shanks\u2013williams prime number\n    return current_num - 1\n\n\ndef is_newman_prime(num):\n    \"\"\"\n    Check if a given number is a newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # check if num is 1 or less\n    if num <= 1:\n        return False\n\n    # check if num is divisible by any odd number between 3 and sqrt(num)\n    for odd_num in range(3, int(num**0.5) + 1, 2):\n        if num % odd_num == 0:\n            return False\n\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # check if the length of the tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # iterate over the tuples and perform the element-wise division\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup\n    else:\n        # raise an error if the length of the tuples is not equal\n        raise ValueError('The two tuples must have the same length.')"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division operation on the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: Division by zero!\")\n            break\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_tup = ()\n    for i in range(len(test_tup1)):\n        division_tup += (test_tup1[i] / test_tup2[i],)\n    return division_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have equal lengths.\")\n        return\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], (int, float)) and isinstance(test_tup2[i], (int, float)):\n                try:\n                    result.append(test_tup1[i] / test_tup2[i])\n                except ZeroDivisionError:\n                    print(\"Error: Division by zero.\")\n                    return\n            else:\n                print(\"Error: Tuples must contain only numerical values.\")\n                return\n        return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        return lst, []\n    else:\n        return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if n < L:\n        raise ValueError(\"List length should be greater than or equal to L\")\n    mid = n // 2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the given list is an empty list\n    if not list1:\n        return []\n    \n    # Check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return (list1, [])\n    \n    # Split the list into two parts and return the resulting lists in a tuple\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the length of the first part of the list is less than L\n    if len(list1) < L:\n        print(\"The length of the first part of the list should be greater than or equal to L\")\n        return None\n    \n    # create a list of the first L elements of the input list\n    first_part = list1[:L]\n    \n    # create a list of the remaining elements of the input list\n    second_part = list1[L:]\n    \n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the input list is less than the length of the output list\")\n    elif L <= 0:\n        raise ValueError(\"The length of the output list should be greater than 0\")\n    else:\n        mid = len(list1) // 2\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts of length L, and return a tuple containing these two lists.\n    \"\"\"\n    # Calculate the length of the first part of the list\n    first_part_len = len(lst) // 2\n\n    # Calculate the second part of the list\n    second_part_lst = lst[first_part_len:]\n\n    # Split the first part of the list into two parts of length L\n    first_part_lst = [lst[:first_part_len]]\n\n    # Combine the two parts and return a tuple\n    return tuple([first_part_lst, second_part_lst])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is valid\n    if L <= 0:\n        return None\n    # Check if L is less than length of list1\n    elif L > len(list1):\n        return None\n    # Split the list into two parts with length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is a valid input\n    if L <= 0:\n        raise ValueError('L should be a positive integer')\n    \n    # split the list into two parts\n    list1 = list1[:L]\n    list2 = list1[L:]\n    \n    # return the resulting lists in a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_len = len(list1)\n    if list_len % 2 == 0:\n        mid = L\n        if mid > list_len//2:\n            mid = list_len//2\n        first_part = list1[:mid]\n        second_part = list1[mid:]\n        return first_part, second_part\n    else:\n        mid = (list_len + L) // 2\n        if mid > list_len//2:\n            mid = list_len//2\n        first_part = list1[:mid]\n        second_part = list1[mid:]\n        return first_part, second_part"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * int(h_age)\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 11\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    days_in_year = 365\n    dog_age = days_in_year - h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_per_dog = 7\n    years = years_per_dog * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_per_year = 7\n    years = h_age / dogs_per_year\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(n):\n        if i % step == 0:\n            sublist = S[i:i+step]\n            result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if isinstance(S, list):\n        S = S.copy()\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result\n    else:\n        raise TypeError('Input must be a list')"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l + 2 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * (l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    area = (1/3) * l * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2) + (12 * l**3)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize a variable to hold the sum of the squares\n    sum = 0\n    \n    # Initialize a variable to hold the current odd number\n    current = 1\n    \n    # Iterate n times\n    for i in range(n):\n        \n        # Calculate the square of the current odd number\n        square = current ** 2\n        \n        # Add the square to the sum variable\n        sum += square\n        \n        # Increment the current variable to the next odd number\n        current += 2\n        \n    # Return the sum of the squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum_of_squares variable\n        sum_of_squares += i**2\n    \n    # return the sum_of_squares variable\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum to zero\n    sum_of_squares = 0\n    # iterate from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum of squares\n        sum_of_squares += i**2\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i*i\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1, 2):\n        sum += i**2\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  \n  \nprint(square_Sum(10))   # Output: 600"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n    \n    # iterate over the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the total\n        total += i**2\n    \n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    # initialize sum to zero\n    sum = 0\n\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the current number\n        square = i ** 2\n        # add the square to the sum\n        sum += square\n\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2!= 0:\n            total += num**2\n            count += 1\n        num += 2\n    return total"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the nth star number.\n    \"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return \"*\"\n    if n == 2:\n        return \"**\"\n    if n == 3:\n        return \"***\"\n    if n == 4:\n        return \"****\"\n    elif n > 4:\n        return find_star_num(n - 1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    # Create a string of '*' characters with a length of n\n    star_num = '*' * n\n    # Return the string of '*' characters\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count variable to 1\n    count = 1\n    \n    # Loop through each digit from 1 to n\n    for i in range(1, n + 1): \n        # If the digit is even, multiply it by 2\n        if i % 2 == 0: \n            count *= 2\n        \n        # If the digit is odd, add 1 to the count\n        else: \n            count += 1\n            \n    # Return the final count\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Initialize variables\n    row = 1\n    column = n\n    star = \"*\"\n\n    # Initialize an empty list to store the star numbers\n    star_numbers = []\n\n    # Loop until we have printed all n star numbers\n    while len(star_numbers) < n:\n        # Check if the current row and column combination has already been printed\n        if (row, column) in star_numbers:\n            row -= 1\n            column -= 1\n        else:\n            # Add the current star number to the list\n            star_numbers.append((row, column))\n            print(star, end=\"\")\n            # Move to the next row and column\n            row += 1\n            column -= 1\n        # Increment the star\n        star = \"*\" if star == \"*\" else \"*\" + \"*\"\n\n    # Print the last star number\n    print(star_numbers[-1])"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    star_num = 1\n    current_num = 1\n    \n    # iterate n times to find then'th star number\n    for i in range(1, n+1):\n        # update variables\n        current_num = 2 * current_num - 1\n        star_num = current_num + 1\n    \n    # return the result\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a variable to hold the current number of stars\n    current_stars = 1\n\n    # Loop through each row of then'th star number\n    for i in range(1, n+1):\n        # Add the current number of stars to the running total\n        total_stars = current_stars + total_stars\n        \n        # Update the current number of stars for the next iteration\n        current_stars = total_stars - i\n    \n    # Return the final value of total_stars\n    return total_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    first_star = '*'\n    second_star = '**'\n    third_star = '***'\n    fourth_star = '****'\n\n    # Calculate the value of n\n    nth_star = first_star * (2 * n - 1)\n\n    # Return the nth star number\n    return nth_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth star number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the counter\n    counter = 1\n    # initialize the result string\n    result = ''\n    # loop n times\n    for i in range(n):\n        # add the current counter value to the result string\n        result += str(counter)\n        # add a star to the result string\n        result += '*'\n        # increment the counter value\n        counter += 1\n    # return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the number of stars\n    num_stars = 0\n    \n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # add the current number of stars to the total number of stars\n        num_stars += i * i\n    \n    # return the total number of stars\n    return num_stars"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    if k in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return ord(k) - ord('A')\n    elif k in 'abcdefghijklmnopqrstuvwxyz':\n        return ord(k) - ord('a')\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_at_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if i % 2 == 0:\n                sum_even_at_even_index += arr[i]\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n\n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n            if even_count == 2:\n                break\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)] # create a list of even natural numbers from 2 to n\n    even_powers = [i**5 for i in even_numbers] # create a list of the first n even numbers raised to the fifth power\n    return sum(even_powers) # return the sum of the first n even numbers raised to the fifth power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Find the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    return sum(x**5 for x in range(2, n+1, 2))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    # Initialize a variable to hold the sum of even numbers raised to the fifth power\n    power_sum = 0\n    \n    # Use a for loop to iterate through the first n even natural numbers\n    for i in range(n):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Add the current number raised to the fifth power to the power_sum\n            power_sum += i ** 5\n    \n    # Return the power_sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(2, n+1, 2):\n        power_sum += i ** 5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [2**i for i in range(0, n+1, 2)]\n    return sum(even_numbers)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initializing variables\n    sum = 0\n    i = 0\n\n    # loop through the first n even natural numbers\n    while i < n:\n        sum += i ** 5\n        i += 1\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    i = 0\n\n    while i < n:\n        if i ** 5 % 2 == 0:\n            sum += i ** 5\n            i += 1\n\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i >= len(test_tup2):\n            print(\"Error: The second tuple contains more elements than the first tuple.\")\n            return\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    # Loop through each element in the first tuple and subtract the corresponding element in the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction = []\n    for i in range(len(test_tup1)):\n        subtraction.append(test_tup1[i] - test_tup2[i])\n    return subtraction"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n        \n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the tuples and subtract the elements at the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initializing variables\n    sum_even_binomial_coeffs = 0\n    count = 0\n    \n    # iterating through the range of n\n    for i in range(1, n+1):\n        # checking if the current index is even\n        if i % 2 == 0:\n            # calculating the current binomial coefficient\n            binomial_coeff = math.comb(n, i)\n            \n            # adding the even index binomial coefficient to the sum\n            sum_even_binomial_coeffs += binomial_coeff\n            \n            # incrementing the count of even index binomial coefficients found\n            count += 1\n    \n    # returning the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs, count"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(1, n+1):\n        numerator = math.factorial(i)\n        denominator = math.factorial(n-i+1)\n        if i % 2 == 0:\n            sum_even_binomial += numerator // denominator\n\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (-1)**(i-1)*math.comb(n, 2*i-2)/math.factorial(2*i-1)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeff = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i % 2 == 0 and j % 2 == 0:\n                sum_even_coeff += math.comb(n, i) * math.comb(n, j)\n    return sum_even_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(i, n+1, i):\n            if j%2 == 0:\n                sum += math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even-indexed binomial coefficients.\n    '''\n    # initialize the sum variable to 0\n    sum_even_coeffs = 0\n\n    # loop through the integers from 0 to n-1\n    for i in range(n):\n        # calculate the even-indexed binomial coefficient\n        even_coeff = math.comb(n, i, exact=True)\n\n        # add the even-indexed binomial coefficient to the sum\n        sum_even_coeffs += even_coeff\n\n    # return the sum of even-indexed binomial coefficients\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients using the formula:\n\n    sum(binomial(n, i) for i in range(0, 2*n+1, 2))\n\n    where binomial(n, i) is the i-th binomial coefficient.\n    \"\"\"\n    sum_ = 0\n    for i in range(0, 2*n+1, 2):\n        sum_ += math.comb(n, i)\n    return sum_"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(n):\n        coeff_sum += math.comb(n, 2*i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_even = 0\n    for i in range(1, n+1):\n        term = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += term\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Initialize the index\n    index = 0\n    \n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient for the current index and n\n        coeff = math.comb(n, i)\n        \n        # Check if the index is even\n        if index % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_sum += coeff\n            \n        # Increment the index\n        index += 1\n        \n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n\n    # Calculate the volume of the cylinder\n    V = (1/3) * (r**2) * h\n\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14159 * r ** 2 * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = ((1/3) * 3.14159 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14 * r * r   # calculate the area of the cylinder\n    volume = area * h   # calculate the volume of the cylinder\n    return volume   # return the volume of the cylinder"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h # formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3)*pi*(r**3)+(1/3)*pi*(r**2*h)+pi*(r*h**2)\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i]!= test_tup[i + 1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i] < test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function checks whether a number is a decagonal number or not.\n\n    Returns:\n    True if the number is a decagonal number, False otherwise.\n    '''\n\n    # The first decagonal number is 1\n    if n == 1:\n        return True\n\n    # The nth decagonal number is the sum of the (n-1)th and (n-2)th decagonal numbers\n    else:\n        decagonal_1 = 1\n        decagonal_2 = 1\n\n        for i in range(2, n):\n            decagonal_2 += decagonal_1\n            decagonal_1 = decagonal_2\n\n        return decagonal_2 == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number and False otherwise.\n    A decagonal number is defined as the sum of its squares. For example, 15 is a decagonal number because 1^2 + 5^2 = 22 + 25 = 52.\n    '''\n    if n <= 0:\n        return False\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n    if sum_of_squares == 2*n*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (2 * i - 1)\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Calculate the sum of the squares of the first n odd numbers\n    sum_of_squares = (n**2 + 2*n + 1)**2\n\n    # Calculate the sum of the squares of the first n even numbers\n    sum_of_squares_even = (n**2 + 2*n + 2)**2\n\n    # Return the difference between the two sums\n    return abs(sum_of_squares - sum_of_squares_even)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Find the sum of the first n terms of the sequence.\n    sum_of_terms = sum([i*i for i in range(1,n+1)])\n    # Return the sum of the first n terms of the sequence.\n    return sum_of_terms"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the sum of the first and last row to 1\n    first_row_sum = 1\n    last_row_sum = n\n    \n    # Check if the sum of the first and last row is equal to n\n    if first_row_sum + last_row_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += 2*i\n    return decagonal_num\n\nn = int(input(\"Enter a number: \"))\ndecagonal_num = is_num_decagonal(n)\nprint(\"The\", n, \"th decagonal number is:\", decagonal_num)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer argument n and returns True if n is a decagonal number, and False otherwise.\n\n    A decagonal number is a number that is equal to the sum of the cubes of its first n positive integers.\n    For example, the decagonal number 10 is equal to 1^3 + 2^3 + 3^3 + 4^3 + 5^3 + 6^3 + 7^3 + 8^3 + 9^3 + 10^3, \n    which is 8337. Therefore, 10 is a decagonal number.\n\n    Note that only positive integers are allowed.\n    '''\n\n    if n < 1:\n        return False\n\n    decagonal_number = 0\n    for i in range(1, n+1):\n        decagonal_number += i**3\n\n    return decagonal_number == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += i * (i+1) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [1]\n    for i in range(2, n+1):\n        decagonal_numbers.append(sum(decagonal_numbers[-1:]))\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_set = set(test_list)\n    return len(test_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # initialize an empty set to store the unique elements\n    unique_set = set()\n    \n    # loop through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n        \n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to get only unique elements\n    unique_elements = len(set(test_list)) == len(test_list)\n    return unique_elements"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # check if the length of nums1 and nums2 is the same\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    # loop through each element of nums1 and nums2\n    for i in range(len(nums1)):\n        # subtract the two elements and append the result to result list\n        result.append(nums1[i] - nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n        nums1 (list): List of numbers to be subtracted from.\n        nums2 (list): List of numbers to be subtracted.\n\n    Returns:\n        list: List of differences between the two input lists.\n\n    \"\"\"\n\n    result = []\n\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths!\")\n        return\n    \n    # Subtract each element of the lists element-wise\n    result = [x - y for x, y in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a dictionary to store the frequency of digits\n    freq_dict = {}\n    # Loop through the number and count the frequency of digits\n    for digit in str(n):\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n    # Check if the frequency of each digit in the number is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    # If the above condition is not met, then all digits in the number have a frequency less than or equal to themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each digit in the number\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n\n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    freq = [digits.count(d) for d in range(10)]\n    for i in range(10):\n        if freq[i] > digits[i]:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # convert the integer to a string\n    n_str = str(n)\n    # initialize the frequency of each digit to zero\n    freq = [0] * 10\n    # loop through each character in the string\n    for char in n_str:\n        # update the frequency of the current digit\n        freq[int(char)] += 1\n        # check if the frequency of the current digit is greater than or equal to the digit itself\n        if freq[int(char)] > int(char):\n            return False\n    # if we made it through the loop without finding a violation, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # array to store frequency of digits\n    \n    # calculate frequency of digits in n\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # check if frequency of digits is less than or equal to their values\n    for digit in range(10):\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    # If all digits have frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize an empty dictionary to store digit frequencies\n    freq = {}\n\n    # iterate through each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the frequency of the digit by 1\n            freq[digit] += 1\n        else:\n            # if the digit is not in the dictionary, add it with a frequency of 1\n            freq[digit] = 1\n\n    # iterate through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n\n    # if no errors were detected, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    for item in list:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(lst, ele):\n    return all(x == ele for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=\\w)[ab]{2,3}(?:[ab]{2,3})(?=\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=b{2,3})')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b[0-9]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*?b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a([bB]){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"(?<=a)b{2,3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    max_repeat = 0\n    repeated_sum = 0\n    count = 0\n    # Loop through the array\n    for i in range(n):\n        # Check if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_repeat = count\n        # Update the current sum and count\n        current_sum += a[i]\n        count += 1\n        # Update the repeated sum\n        if count == k:\n            repeated_sum = current_sum\n            current_sum = 0\n            count = 0\n    # Check if the last count is greater than the previous maximum sum\n    if count > max_repeat:\n        max_sum = current_sum\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # repeat the given array k times and calculate the sum of the modified array\n    for _ in range(k):\n        current_sum += a[0]\n        max_sum = max(max_sum, current_sum)\n        \n        # remove the first element of the array to form the next modified array\n        a = a[1:]\n        current_sum -= a[0]\n    \n    # return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and sum of current array\n    max_sum = 0\n    current_sum = 0\n\n    # Iterate over the array a k times\n    for i in range(k):\n        # Add the i-th element of the array to the current_sum\n        current_sum += a[i]\n\n        # Find the maximum sum starting from the i-th element\n        if i == 0:\n            max_sum = current_sum\n        else:\n            max_sum = max(max_sum, current_sum)\n\n        # Subtract the i-th element from the current_sum\n        current_sum -= a[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first k elements of the array\n    total_sum = sum(a[:k])\n\n    # Initialize the maximum sum\n    max_sum = total_sum\n\n    # Loop through the array\n    for i in range(k, n):\n\n        # Calculate the sum of the current k elements of the array\n        current_sum = a[i] + total_sum\n\n        # Update the maximum sum\n        max_sum = max(max_sum, current_sum)\n\n        # Update the total sum\n        total_sum = total_sum + a[i] - a[i-k]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n\n    # Iterate over all possible combinations of repetitions and array\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # Calculate the modified array\n            modified_array = [a[0]] * (j * i) + a * (k - j * i)\n            # Calculate the sum of the modified array\n            sub_array_sum = sum(modified_array)\n            # Update the maximum sum if the current sum is greater\n            max_sum = max(max_sum, sub_array_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Check if the array is valid\n    if n <= 0 or k <= 0:\n        return 0\n\n    # Initialize the max sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Repeating the array k times\n    for _ in range(k):\n        # Calculate the maximum subarray sum up to the current index\n        curr_sum = max(curr_sum + a[0], a[0])\n\n        # Update the maximum subarray sum\n        max_sum = max(max_sum, curr_sum)\n\n    # Repeating the array k times again\n    for _ in range(k):\n        # Calculate the maximum subarray sum up to the current index\n        curr_sum = max(curr_sum + a[-1], a[-1])\n\n        # Update the maximum subarray sum\n        max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the original array\n    original_sum = sum(a)\n\n    # initialize the maximum sum and the sum of the modified array\n    max_sum = original_sum\n    modified_sum = original_sum\n\n    # loop through the array k times\n    for _ in range(k):\n        # calculate the sum of the modified array\n        modified_sum = original_sum + (n * a[0])\n\n        # check if the modified array is greater than the current maximum sum\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n\n    # return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Check if the input is valid\n    if n < k:\n        return None\n\n    # Initialize the sum of the first k elements as 0\n    sum_k = sum(a[:k])\n\n    # Initialize the maximum sum as the sum of the first k elements\n    max_sum = sum_k\n\n    # Initialize the index of the maximum sum\n    max_index = k-1\n\n    # Loop through the remaining elements of the array\n    for i in range(k, n):\n        # Calculate the sum of the current element and k previous elements\n        current_sum = sum_k + a[i]\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and its index\n            max_sum = current_sum\n            max_index = i\n\n        # Update the sum of the k previous elements\n        sum_k = current_sum\n\n    # Check if there is a repeated sub-array with the maximum sum\n    repeated_sum = max_sum // k\n    repeated_index = max_index // k\n\n    # Loop through the repeated sub-arrays and return the one with the maximum sum\n    for i in range(repeated_index, n, k):\n        if sum(a[i:i+k]) == repeated_sum:\n            return sum(a[i:i+k])\n\n    return None"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Define an empty list to store the sums of the modified array\n    modified_sum = []\n    # Define a variable to store the sum of the current subarray\n    curr_sum = 0\n    # Loop through the array and repeat the array k times\n    for i in range(k):\n        modified_sum.append(a)\n    # Loop through the modified array and calculate the sum of each subarray\n    for i in range(k, n):\n        curr_sum = max(modified_sum[i-k], a) + a\n        modified_sum.append(curr_sum)\n    # Find the maximum sum of a contiguous array\n    max_sum = max(modified_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    max_sum = float('-inf')\n\n    # Iterate through the array to form a modified array\n    modified_array = []\n    for i in range(k):\n        modified_array += a * n\n\n    # Iterate through the modified array to find the maximum sum\n    for i in range(len(modified_array)):\n        current_sum = 0\n        for j in range(i, len(modified_array), n):\n            current_sum += modified_array[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    sum_of_squares = 0\n    for num in even_numbers:\n        sum_of_squares += num**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(n):\n        sum += i**2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    count = 0\n    \n    while count < n:\n        num = count*2\n        sum_squares += num*num\n        count += 1\n    \n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    i = 2  \n    while i <= n:  \n        sum += i**2  \n        i += 2  \n    return sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    i = 0\n    while count < n:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n            count += 1\n        i += 1\n    return sum_of_squares\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize a variable to store the maximum length found so far\n    max_len = 0\n    \n    # Iterate through each list in the list of lists\n    for lst in list1:\n        # Check if the length of the current list is greater than the maximum length\n        if len(lst) > max_len:\n            # Update the maximum length with the length of the current list\n            max_len = len(lst)\n    \n    # Return the list of maximum length\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n        else:\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_list = []\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Check if the length of the current sublist is greater than the length of the maximum sublist\n        if len(sublist) > len(max_list):\n            # If the length of the current sublist is greater, replace the current maximum sublist with the current sublist\n            max_list = sublist\n    # Return the maximum length sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Create an empty list to store the maximum lengths\n    max_lengths = []\n\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n\n        # Loop through each item in the sublist and find the length of the item\n        lengths = []\n        for item in sublist:\n            lengths.append(len(str(item)))\n\n        # Find the maximum length in the sublist\n        max_length = max(lengths)\n\n        # Append the maximum length to the max_lengths list\n        max_lengths.append(max_length)\n\n    # Find the maximum length across all sublists and return the list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # Iterate through the list of lists\n    for sublist in list1:\n        # Calculate the length of the current sublist\n        length = len(sublist)\n        \n        # If the length is greater than any current length in the list, update the list\n        if length > max(max_lengths):\n            max_lengths = [length]\n        elif length == max(max_lengths):\n            # If the length is equal to any current length in the list, append it to the list\n            max_lengths.append(length)\n    \n    # Return the maximum length(s) found\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = len(lst)\n        if max_length not in max_lengths:\n            max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    # Find the maximum length in the first list\n    max_length_in_list1 = len(list1[0])\n    \n    # Loop through the rest of the lists to find the maximum length\n    for i in range(1, len(list1)):\n        if len(list1[i]) > max_length_in_list1:\n            max_length_in_list1 = len(list1[i])\n    \n    # Return the list of maximum length\n    return [list1[i] for i in range(len(list1)) if len(list1[i]) == max_length_in_list1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the count of ways for each combination of colors\n    ways = {}\n    \n    # Loop through all possible combinations of colors\n    for i in range(2**k):\n        # Convert the integer to a list of colors\n        colors = [1 if i & (1 << j) else 0 for j in range(k)]\n        \n        # Check if the list of colors is in the dictionary\n        key = tuple(colors)\n        if key in ways:\n            ways[key] += 1\n        else:\n            ways[key] = 1\n    \n    # Return the count of ways\n    return ways[tuple(2**k - 1)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(i, j, color, dp):\n        if i >= n:\n            return 1\n\n        if (i, j, color) in dp:\n            return dp[(i, j, color)]\n\n        if color == k-1:\n            dp[(i, j, color)] = count_ways(i+1, j, color, dp)\n        else:\n            dp[(i, j, color)] = (count_ways(i+1, j, color, dp) + count_ways(i+1, j+1, color, dp)) % (10**9+7)\n\n        return dp[(i, j, color)]\n\n    dp = {}\n    return count_ways(0, 0, k-1, dp)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an empty dictionary to store the count of ways\n    ways = {}\n\n    # Initialize the count of ways for the first n posts\n    ways[0] = 1\n\n    # Initialize the count of ways for the second n-1 posts\n    ways[1] = 1\n\n    # Loop through the remaining n-1 posts\n    for i in range(2, n):\n        # Initialize the count of ways for the i-th post\n        ways[i] = 0\n\n        # Loop through the previous i-1 posts and calculate the count of ways for the i-th post\n        for j in range(i-1):\n            # Check if the j-th post and i-th post have the same color\n            if ways[j] > 0 and ways[i-1-j] > 0 and (i-1-j) % k == 0:\n                # Add the count of ways for the two adjacent posts to the count of ways for the i-th post\n                ways[i] += ways[j] * ways[i-1-j]\n\n    # Return the count of ways for the last post\n    return ways[n-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    ways = 0\n    fence = [False] * k\n    for i in range(1, n+1):\n        if fence[0]!= fence[i % k]:\n            ways += 1\n        fence[i % k] = not fence[i % k]\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize two lists to store the number of ways of painting each possible arrangement\n    ways_1 = [0] * (k+1)\n    ways_2 = [0] * (k+1)\n    \n    # Initialize a list to store the colors in the fence\n    colors = []\n    \n    # Check if the number of posts is less than or equal to zero\n    if n <= 0:\n        return 0\n    \n    # Initialize the base case for k=1\n    ways_1[1] = 1\n    \n    # Initialize the base case for k=2\n    ways_2[2] = 1\n    \n    # Loop through the remaining possibilities of k\n    for i in range(3, k+1):\n        # Loop through the remaining possibilities of n\n        for j in range(1, n+1):\n            # Check if the current color is already present in the list\n            if i == 2 and j <= 1:\n                continue\n            elif i == 3:\n                if j == 2 or j == 1:\n                    ways_2[i] += ways_1[i-1]\n                elif j == 3:\n                    ways_2[i] += ways_1[i-1] + ways_1[i-2]\n            else:\n                if j <= 1:\n                    ways_2[i] += ways_1[i-1]\n                else:\n                    ways_2[i] += ways_1[i-1] + ways_1[i-2]\n            \n            # Check if the current color is already present in the list\n            if i == 2 and j <= 1:\n                continue\n            elif i == 3:\n                if j == 2 or j == 1:\n                    ways_1[i] += ways_2[i-1]\n                elif j == 3:\n                    ways_1[i] += ways_2[i-1] + ways_2[i-2]\n            else:\n                if j <= 1:\n                    ways_1[i] += ways_2[i-1]\n                else:\n                    ways_1[i] += ways_2[i-1] + ways_2[i-2]\n            \n            # Add the color to the list\n            colors.append(i)\n    \n    # Find the number of ways of painting the fence with at most 2 adjacent posts having the same color\n    count = ways_1[k]\n    for i in range(2, k+1):\n        if ways_1[i] > count:\n            count = ways_1[i]\n    \n    # Return the count of ways of painting the fence with at most 2 adjacent posts having the same color\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count of ways to 1\n    count = 1\n\n    # Check if k is less than or equal to n\n    if k <= n:\n        # Set the count of ways to n!\n        count = factorial(n)\n\n    # Check if there are any odd colors left\n    if k % 2!= 0:\n        # Initialize the count of ways to 0\n        count = 0\n\n    # Check if the fence has more than 2 adjacent posts with the same color\n    for i in range(1, n // 2 + 1):\n        # Check if there are at least i colors left\n        if k - i * 2 >= 0:\n            # Calculate the count of ways to paint the fence\n            ways = count_no_of_ways(n - i * 2, k - i * 2)\n\n            # Update the count of ways\n            count *= ways\n\n    # Return the final count of ways\n    return count\n\n\ndef factorial(n):\n    # Initialize the factorial to 1\n    fact = 1\n\n    # Check if n is less than 0\n    if n < 0:\n        # Return 0\n        return 0\n\n    # Iterate from 1 to n and multiply the factorial by each number\n    for i in range(1, n + 1):\n        fact *= i\n\n    # Return the final factorial\n    return fact\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list of all possible colors\n    colors = [1] + [i for i in range(2, k+1)]\n    # Create a list of all possible positions of the first post\n    positions = [(0, 0)] + [(i, 0) for i in range(1, n)]\n    # Initialize the number of ways of painting the fence to zero\n    ways = 0\n    # Iterate over all possible positions of the first post\n    for (x, y) in positions:\n        # Iterate over all possible colors of the first post\n        for color in colors:\n            # If the first post has the same color as the second post, update the number of ways\n            if color == color_at_position((x-1, y), positions):\n                ways += 1\n    # Return the number of ways of painting the fence\n    return ways\n\ndef color_at_position(position, positions):\n    \"\"\"\n    Return the color of the post at the given position.\n    \"\"\"\n    x, y = position\n    for (xx, yy) in positions:\n        if x == xx and y == yy:\n            return colors[positions.index((xx, yy))+1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize a dictionary to store the count of ways for each number of colors\n    ways = {0: 1}\n    # iterate over the range of numbers of colors\n    for i in range(1, k+1):\n        # iterate over the range of numbers of colors\n        for j in range(n):\n            # check if the current color can be added to the fence\n            if i > 1 and ways[i-1] > 0:\n                # if it can be added, update the count of ways for the remaining colors and add the current color to the fence\n                ways[i] += ways[i-1]\n                n -= 1\n                if n == 0:\n                    break\n            # if there is no remaining post to add to the fence, update the count of ways for the remaining colors\n            if n > 0:\n                ways[i] += ways[i-1]\n                n -= 1\n                if n == 0:\n                    break\n    # return the count of ways\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if n is less than or equal to 2, there is only one way to paint the fence\n    if n <= 2:\n        return 1\n    # base case: if k is less than or equal to 1, there is only one way to paint the fence\n    if k <= 1:\n        return 1\n    # initialize variables to keep track of the number of ways to paint the fence\n    ways = 0\n    # loop through all possible pairs of adjacent posts\n    for i in range(1, n):\n        for j in range(1, k):\n            # if the color of the jth post is the same as the color of the (i-j)th post, increment the number of ways to paint the fence\n            if (j == 1 or j == k-1) and (i-j) > 0:\n                ways += count_no_of_ways(i-j, k)\n    # return the number of ways to paint the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize an empty dictionary to store the count of painting ways for each possible configuration\n    painting_ways = {}\n\n    # Base case: if the number of colors is 1, there is only 1 way to paint the fence\n    if k == 1:\n        painting_ways[(0, 0, 0)] = 1\n\n    # Recursive case: iterate through all possible configurations of colors for adjacent posts\n    for i in range(n):\n        for j in range(i + 1, n):\n            for color in range(k):\n                # If this configuration is already in the dictionary, add one to the count\n                if (i, j, color) in painting_ways:\n                    painting_ways[(i, j, color)] += painting_ways[(i - 1, j, color)]\n                # Otherwise, add the count for the base case (number of colors is 1)\n                else:\n                    painting_ways[(i, j, color)] = painting_ways[(i - 1, j, color)]\n\n    # Return the maximum count of painting ways found\n    return max(painting_ways.values())"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Find the quotient\n    quotient = n // m\n    \n    # Round down to the nearest integer\n    quotient = int(quotient)\n    \n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # get the absolute value of n and m\n    n = abs(n)\n    m = abs(m)\n    \n    # check if m is 0\n    if m == 0:\n        return \"Cannot divide by zero\"\n    \n    # check if m is negative and n is even\n    if m < 0 and n % 2 == 0:\n        return \"Cannot divide negative even numbers\"\n    \n    # check if m is positive and n is even\n    if m > 0 and n % 2 == 0:\n        return \"Cannot divide even numbers\"\n    \n    # get the quotient as n//m\n    quotient = n // m\n    \n    # check if the result is greater than 0 and a multiple of m\n    if quotient > 0 and quotient * m == n:\n        return quotient\n    \n    # return the rounded quotient\n    return round(quotient)\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n-m, m)\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n//m\n    \n    # Round the quotient down to the nearest integer\n    quotient = int(quotient)\n    \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    n (int): The first number to be divided.\n    m (int): The second number to be divided.\n\n    Returns:\n    int: The quotient of n and m rounded down to the nearest integer.\n    \"\"\"\n\n    # Calculate the quotient of n and m\n    quotient = n // m\n\n    # If the quotient is not an integer, round it down to the nearest integer\n    if quotient * m!= n:\n        quotient -= 1\n\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2) # calculate the length of the diagonal\n    c = math.sqrt(a**2 + w**2) # calculate the length of the hypotenuse\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n\n    Parameters:\n        w (float): The length of the triangle's base.\n        h (float): The length of the triangle's height.\n\n    Returns:\n        float: The length of the third side of the triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - (w+h)**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \n    Parameters:\n    w (float): the length of the triangle's width\n    h (float): the length of the triangle's height\n    \n    Returns:\n    float: the length of the triangle's other side\n    \"\"\"\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n    # calculate the other side of the triangle\n    return area / math.sin(math.pi / 3)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the third side of the triangle\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w\n    b = h\n    c = math.sqrt((a**2)+(b**2))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the other side\n    s = math.sqrt(w**2 + h**2)\n\n    # Return the third side\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # finding the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # finding the cotangent of the angle formed by the sides\n    cot = math.tan(math.radians(60))\n\n    # finding the length of the other side of the triangle\n    length = s * cot\n\n    return length"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the hypotenuse of the right triangle\n    r = math.sqrt(s**2 - w**2 - h**2)\n    # Calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the length of the third side\n    third_side = r / A\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max value to the first element in the list\n    max_val = listval[0]\n    # Loop through each element in the list and compare it to max_val\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return max_val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value as first element of the list\n    max_val = listval[0]\n    # loop through rest of the list\n    for i in range(1, len(listval)):\n        # if current element is greater than max value, update max value\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # return max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == int and listval[i] > max_num:\n            max_num = listval[i]\n        elif type(listval[i]) == float and listval[i] > max_num:\n            max_num = listval[i]\n        elif type(listval[i]) == str and len(listval[i]) > len(max_num):\n            max_num = listval[i]\n        else:\n            pass\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = None\n    for value in listval:\n        if max_value is None or value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        maxval = listval[0]\n        for val in listval:\n            if val > maxval:\n                maxval = val\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int) or isinstance(listval[0], float):\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val\n    elif isinstance(listval[0], str):\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val\n    else:\n        raise ValueError(\"The given list contains elements of different types.\")"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # initialize the sum of divisors to 0\n    sum_div = 0\n    # loop through all integers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # check if the number is divisible by the current integer\n        if number % i == 0:\n            # add the current integer to the sum of divisors\n            sum_div += i\n    # return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # if the number is divisible by i, add it to the sum\n        if number % i == 0:\n            sum += i\n    # return the sum of all the divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Using a loop to iterate through all numbers from 1 to the number itself\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    \n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j-i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Convert array to a list to avoid modification issues\n    arr_list = list(arr)\n\n    # Sort the array in non-descending order\n    arr_list.sort()\n\n    # Count the number of inversions\n    inv_count = 0\n    i = 0\n    j = len(arr_list) - 1\n\n    # Iterate through the array and count the inversions\n    while i < j:\n        if arr_list[i] > arr_list[j]:\n            inv_count += j - i\n            i += 1\n            j -= 1\n        elif arr_list[i] < arr_list[j]:\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        # find the largest element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # swap the maximum element with the i-th element\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        # count the inversions in the sorted part of the array\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                inversions += (n-j)\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(0, i):\n            if arr[j] > arr[i]:\n                inv_count += i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)  # get the length of the array\n    \n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]  # swap the elements\n    \n    # Count inversions using three-pointer approach\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] > arr[k] and arr[j] > arr[k]:\n                    inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sort(arr):\n    \"\"\"\n    Implementation of merge sort algorithm for counting inversions in an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    \"\"\"\n    Merge two sorted arrays.\n    \"\"\"\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    Count inversions in an array using the merge sort algorithm.\n    \"\"\"\n    inv_count = 0\n    n = len(arr)\n\n    arr = merge_sort(arr)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Counting inversions using sorting\n    inv_count = 0\n    for i in range(n):\n        # Find the maximum element in the remaining part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element\n        arr[i], arr[max_index] = arr[max_index], arr[i]\n        # Counting inversions by traversing the sorted part of the array\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                inv_count += n-j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # initialize variables\n    inv_count = 0\n    n = len(arr)\n\n    # for each element in the array, calculate the count of inversions\n    for i in range(n):\n        # initialize variables\n        left = 0\n        right = i\n\n        # sort the array in ascending order\n        while left < right:\n            # calculate the midpoint index\n            mid = (left + right) // 2\n\n            # swap elements in the left and right subarrays\n            if arr[i] < arr[mid]:\n                arr[left], arr[mid] = arr[mid], arr[left]\n                left += 1\n                inv_count += right - left\n            else:\n                right = mid\n\n        # calculate the count of inversions in the left subarray\n        inv_count += n - left\n\n    # return the total count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # sort the array in ascending order\n    arr.sort()\n    # initialize count to 0\n    count = 0\n    # iterate through the array and count the inversions\n    for i in range(1, n):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            # swap arr[j] and arr[j-1] if they are inversed\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            # increment count by 1 and move the index of j to j-1\n            count += j - i + 1\n            j -= 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += n - i - 1\n\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and returns a flattened list.\n    '''\n    res = []\n    for item in lst:\n        if isinstance(item, list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list structure as input and returns a flattened list.\n    '''\n\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Iterate through each item in the input list\n    for item in list1:\n\n        # If the item is a list, recursively call the function to flatten it\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            # Otherwise, append the item to the flattened list\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for item in stdata:\n        aggregate_dict[item[0]] += item[1]\n    max_aggregate = max(aggregate_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int) # create a defaultdict to store the maximum aggregate for each customer\n    max_aggregate_list = [] # create an empty list to store the maximum aggregate for each customer\n\n    for item in stdata:\n        if item[1] not in max_dict: # if the customer is not in the max_dict, add them with the initial value of 0\n            max_dict[item[1]] = 0\n        \n        if item[2] > max_dict[item[1]]: # if the current sale is greater than the current maximum aggregate for the customer\n            max_dict[item[1]] = item[2] # update the maximum aggregate for the customer\n\n        max_aggregate_list.append(max_dict[item[1]]) # append the maximum aggregate for the customer to the max_aggregate_list\n\n    max_aggregate_list.sort(reverse=True) # sort the max_aggregate_list in descending order\n    return max_aggregate_list[0] # return the maximum aggregate for the first customer in the list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n\n    # Loop through each item in the list\n    for item, count in stdata:\n        # Increment the count of the current item in the defaultdict\n        item_count[item] += count\n\n    # Initialize the maximum aggregate to the first element in the list\n    max_agg = stdata[0][1]\n\n    # Loop through the items in the item_count defaultdict and compare each to the maximum aggregate\n    for count, item in item_count.items():\n        if max_agg < count * item:\n            max_agg = count * item\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each unique item\n    count_dict = defaultdict(int)\n\n    # Loop through the list of tuples and update the count_dict\n    for item, price in stdata:\n        count_dict[item] += 1\n\n    # Loop through the count_dict and find the item with the maximum count\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    # Calculate the maximum aggregate\n    max_aggregate = 0\n    for item, count in count_dict.items():\n        if item == max_item:\n            max_aggregate += price * count\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the sum and count of each customer\n    customer_sum = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item in stdata:\n        # add the item to the dictionary\n        customer_sum[item[0]] += item[1]\n\n    # find the maximum value of the sum\n    max_sum = max(customer_sum.values())\n\n    # create a dictionary to store the total number of items purchased by each customer\n    customer_count = defaultdict(int)\n\n    # iterate through the list of tuples again\n    for item in stdata:\n        # update the count for the current customer\n        customer_count[item[0]] += 1\n\n    # find the maximum value of the count\n    max_count = max(customer_count.values())\n\n    # calculate the maximum aggregate\n    max_agg = max_sum * max_count\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Initialize a defaultdict to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n\n    # Loop through the list of tuples and calculate the maximum aggregate for each customer\n    for customer, amount in stdata:\n        max_agg[customer] = max(max_agg[customer], amount)\n\n    # Find the maximum aggregate across all customers and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_aggr = defaultdict(int)\n\n    # Loop through each transaction in the list\n    for t in stdata:\n        # Get the list of items in the transaction\n        items = t[1]\n        # Loop through each item in the list\n        for i in items:\n            # Update the maximum aggregate for the current item\n            max_aggr[i] = max(max_aggr[i], t[0])\n\n    # Find the maximum aggregate from the defaultdict\n    max_aggr_val = max(max_aggr.values())\n\n    # Create a list of tuples for each item and its maximum aggregate\n    max_aggr_items = [(i, max_aggr[i]) for i in max_aggr if max_aggr[i] == max_aggr_val]\n\n    # Sort the list of tuples in descending order of the maximum aggregate\n    max_aggr_items.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the maximum aggregate item and its maximum aggregate value\n    return max_aggr_items[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)-1):\n            max_aggr[i] = max(max_aggr[i], item[i+1])\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for tup in stdata:\n        if tup[0] == 'C':\n            max_dict[tup[1]] += tup[2]\n        elif tup[0] == 'D':\n            max_dict[tup[1]] -= tup[2]\n        else:\n            continue\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each month\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for month, amount in stdata:\n        # Update the maximum aggregate for the current month\n        max_aggr[month] = max(max_aggr[month], amount)\n\n    # Iterate through the dictionary and find the maximum aggregate\n    max_agg = 0\n    for amount in max_aggr.values():\n        max_agg = max(max_agg, amount)\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        first = sum(int(digit) for digit in bin(i)[2:].zfill(n))\n        last = sum(int(digit) for digit in bin(i - (2 ** (n-1)) + 1)[2:].zfill(n))\n        if first == last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize count variable\n    count = 0\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # extract first n bits of the binary sequence\n        first_n_bits = bin(i)[2:].zfill(n)\n\n        # extract last n bits of the binary sequence\n        last_n_bits = bin(i)[-n:].zfill(n)\n\n        # check if the sum of first n bits is same as the sum of last n bits\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n\n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 1 << (2*n)):\n        if i & 1 == 0: # check if the first n bits are 0\n            if (i>>n) & 1 == (i & 1): # check if the sum of first n bits is same as the sum of last n bits\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        seq = bin(i)[2:].zfill(2*n)\n        if seq.startswith(seq[::-1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count and sum variables\n    count = 0\n    first_sum = 0\n    last_sum = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert binary sequence to integer and add 1 to it to make it a valid sequence\n        binary_seq = int(bin(i+1)[2:], 2)\n\n        # Calculate sum of first n bits and store it in first_sum\n        first_sum = sum(binary_seq[:n])\n\n        # Calculate sum of last n bits and store it in last_sum\n        last_sum = sum(binary_seq[-n:])\n\n        # If the sum of first n bits is same as the sum of last n bits, increment the count\n        if first_sum == last_sum:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables\n    count = 0\n    last_sum = 0\n    current_sum = 0\n    current_seq = ''\n\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert i to binary string and pad with leading zeros\n        binary_str = format(i, '0' + str(2*n) + 'b')\n        # Extract first n bits\n        first_n_bits = binary_str[:n]\n        # Extract last n bits\n        last_n_bits = binary_str[-n:]\n        # Check if the sum of first n bits and last n bits is the same\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            # Update count\n            count += 1\n            # Update current sum and sequence\n            current_sum += int(first_n_bits, 2)\n            current_seq = current_seq + first_n_bits\n\n    # Print result\n    print('The count of all binary sequences of length 2n with the same sum of the first and last n bits is:', count)\n    print('The binary sequences with the same sum of the first and last n bits are:', current_seq)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        sum_first_n = int(binary_seq[:n], 2)\n        sum_last_n = int(binary_seq[-n:], 2)\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if (i//2**(n-1) == i%2**(n-1)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        temp = str(i)\n        sum1 = sum([int(digit) for digit in temp[0:n]])\n        sum2 = sum([int(digit) for digit in temp[n:]])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n+1, 2**n):\n        seq = bin(i)[2:].zfill(n)\n        sum1 = sum([int(digit) for digit in seq[:n]])\n        sum2 = sum([int(digit) for digit in seq[n:]])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # create a list to keep track of the depth of each key in the dictionary\n    depths = []\n    # iterate through each key in the dictionary\n    for key in d:\n        # if the key is a dictionary, recursively call the function on that dictionary\n        if isinstance(d[key], dict):\n            depths.append(dict_depth(d[key]) + 1)\n        # otherwise, add 1 to the current depth\n        else:\n            depths.append(1)\n    # find the maximum depth in the list\n    max_depth = max(depths)\n    # return the maximum depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        else:\n            current_depth = 0\n        depth = max(depth, current_depth)\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = 1 + dict_depth(value)\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            count += 1 + dict_depth(value)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = 1 + dict_depth(item)\n                    max_depth = max(max_depth, depth)\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    index_diff = index - (index + rotations) % len(arr)\n    rotation_factor = (index_diff + rotations) % len(arr)\n    rotated_index = (index + rotation_factor) % len(arr)\n    final_element = arr[rotated_index]\n    return final_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments:\n    arr: A list containing the elements to be rotated\n    ranges: A list containing the range of each element in the list arr\n    rotations: The number of rotations to be applied\n    index: The index of the element to be found\n\n    This function returns the element at the given index after number of rotations.\n\n    \"\"\"\n    n = len(arr)\n    # Find the element index of the element to be rotated\n    rotated_index = -1\n    for i in range(n):\n        if arr[i] in ranges:\n            rotated_index = i\n            break\n    # Find the new index after rotating the element\n    new_index = (index - rotated_index + n) % n\n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of elements to be shifted\n    shift = rotations % len(ranges)\n\n    # Calculate the new index after rotations\n    new_index = (index + shift) % len(arr)\n\n    # Calculate the element to be found\n    elem = arr[new_index]\n\n    return elem"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if (i + rotations) % n == index:\n            return arr[i]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize variables\n    current_index = index\n    element = arr[current_index]\n    temp_index = current_index\n\n    # Perform rotations\n    for _ in range(rotations):\n        # Move the index to the next element in the array\n        current_index += 1\n        if current_index == len(arr):\n            current_index = 0\n\n        # Find the next element that is not a part of the range\n        while element in ranges[current_index]:\n            temp_index = current_index\n            current_index += 1\n            if current_index == len(arr):\n                current_index = 0\n            element = arr[current_index]\n\n        # Swap the current element with the next element that is not a part of the range\n        arr[current_index], arr[temp_index] = arr[temp_index], arr[current_index]\n        current_index = temp_index\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \n    Parameters:\n    arr: list of integers\n    ranges: list of integers\n    rotations: number of rotations\n    index: integer\n    \n    Returns:\n    The element at the given index after rotations.\n    \"\"\"\n    \n    # Initialize variables\n    temp = []\n    \n    # Calculate the range after each rotation\n    for i in range(rotations):\n        temp.append(ranges[i])\n        \n    # Calculate the final range\n    final_range = sum(temp)\n    \n    # Calculate the final index\n    final_index = (index - 1) % final_range + 1\n    \n    # Return the element at the final index\n    return arr[final_index - 1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr[index:] + arr[:index]\n    # rotate the array\n    for i in range(rotations):\n        arr.rotate(1)\n    # find the element at the given index\n    for i in range(len(arr)):\n        if arr[i] in ranges:\n            return arr[i]\n    # if the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): list of integers\n    ranges (list): list of pairs of integers specifying the ranges of elements that can be used for rotations\n    rotations (int): number of rotations to perform\n    index (int): index of element to find after rotations\n\n    Returns:\n    int: element at index after rotations\n    '''\n\n    # Initialize variables\n    max_range = max(ranges, key=lambda x: x[1])\n\n    # Perform rotations\n    for _ in range(rotations):\n        # Get a random element from the range of the maximum element\n        random_index = np.random.randint(max_range[0], max_range[1])\n        arr[index], arr[random_index] = arr[random_index], arr[index]\n        # Update the maximum range\n        max_range = max(ranges, key=lambda x: x[1])\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at the given index after rotating the given list of elements.\n\n    :param arr: list of elements\n    :param ranges: range of indices to consider\n    :param rotations: number of rotations to perform\n    :param index: index at which we need to find the element\n    :return: the element at the given index after rotating the given list of elements\n    \"\"\"\n    # Initialize variables\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    temp = arr[0]\n    rotations = rotations % len(arr)\n\n    # Perform rotations\n    while rotations > 0:\n        j = i\n        for m in range(len(arr)):\n            l = (j + k) % len(arr)\n            temp = arr[j]\n            arr[j] = arr[l]\n            arr[l] = temp\n            j = (j + 1) % len(arr)\n        i = (i + 1) % len(arr)\n        rotations -= 1\n\n    # Find the element at the given index\n    for m in range(len(arr)):\n        if arr[m] == temp:\n            return arr[m]\n\n    # Return None if element not found\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the index after rotations\n    new_index = index + rotations\n\n    # If the new index is out of range, wrap around to the beginning of the array\n    if new_index >= len(arr):\n        new_index = 0\n    elif new_index < 0:\n        new_index = len(arr) - 1\n\n    # Calculate the element at the new index\n    element = arr[new_index]\n\n    # Check if the element is in the range of the current element\n    if ranges[new_index] == \"in\":\n        return element\n\n    # Check if the element is in the range of the previous element\n    prev_index = new_index - 1\n    if prev_index < 0:\n        prev_index = len(arr) - 1\n    elif ranges[prev_index] == \"in\":\n        return element\n\n    # If the element is not in the range of the current element or previous element,\n    # return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = pattern.findall(words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match('^[Pp]', word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    if len(result) == 2:\n        return result\n    else:\n        return 'No two words starting with \"p\" found.'\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    result = [word for word in words if pattern.match(word)]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n\n    if len(p_words) < 2:\n        return None\n\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^[Pp].*')\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p'.\"\n    else:\n        return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p\\w+')\n    matches = pattern.findall(words)\n    return matches"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (n+1)\n    dp[0] = a[0]\n    for i in range(1, n+1):\n        if i <= index:\n            dp[i] = max(a[i], dp[i-1])\n        elif i == k:\n            dp[i] = max(dp[i-1], dp[k-1])\n        else:\n            dp[i] = max(dp[i-1], dp[i-k])\n    return dp[n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_subseq = []\n    # Loop through all possible subsequences till the kth index\n    for i in range(index, k):\n        # Check if current element is greater than the kth element\n        if a[i] > a[k]:\n            # If yes, check if current subsequence is better than the previous maximum subsequence\n            if max_sum < sum(a[i:k+1]):\n                max_sum = sum(a[i:k+1])\n                max_subseq = a[i:k+1]\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = dp[index]\n    # Calculate the sum of increasing subsequence from prefix until ith index\n    for i in range(index + 1, n):\n        if i == k:\n            continue\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    \n    # Initialize variables to store the maximum sum and the sum of increasing subsequence\n    max_sum = float('-inf')\n    subseq_sum = 0\n    \n    # Traverse through the array from 0 to k-1 to find the sum of increasing subsequence including kth element\n    for i in range(k):\n        subseq_sum += a[i]\n    \n    # Update the maximum sum if the sum of increasing subsequence including kth element is greater than the current maximum sum\n    if subseq_sum > max_sum:\n        max_sum = subseq_sum\n    \n    # Traverse through the array from 0 to i-1 to find the maximum sum of increasing subsequence from prefix until ith index\n    for i in range(index):\n        # Update the sum of increasing subsequence from prefix until i-1\n        subseq_sum = subseq_sum - a[i] + a[i+1]\n        # Update the maximum sum if the sum of increasing subsequence from prefix until i-1 is greater than the current maximum sum\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    if k == index:\n        return a[index]\n\n    dp = [0] * (k + 1)\n    for i in range(1, k + 1):\n        dp[i] = max(a[index - i] + dp[i - 1], a[index - i] + dp[i])\n\n    return dp[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize the maximum sum to be negative infinity and the current subsequence sum to be negative infinity\n    max_sum = float('-inf')\n    curr_sum = float('-inf')\n    \n    # Initialize the current index to be the given index\n    curr_index = index\n    \n    # Initialize a list to store the subsequence\n    subseq = []\n    \n    # Traverse through the array\n    while curr_index < n:\n        \n        # If the element is greater than the kth element and the current subsequence sum is greater than the current element, update the subsequence sum and add the current element to the subsequence list\n        if a[curr_index] > a[k] and curr_sum > a[curr_index]:\n            curr_sum = a[curr_index]\n            subseq.append(a[curr_index])\n        \n        # If the current subsequence sum is greater than the maximum sum, update the maximum sum and add the current subsequence to the subsequence list\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            subseq = [a[curr_index]]\n        \n        # Increment the current index\n        curr_index += 1\n    \n    # If there are less than k elements in the subsequence, return -1\n    if len(subseq) < k:\n        return -1\n    \n    # Return the maximum sum of the increasing subsequence including the kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    # Calculate the maximum sum of increasing subsequence till i-1\n    dp = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # If the current element is greater than or equal to k\n    if a[index] >= k:\n        # If the current element is not the kth element, then its value will not contribute to the maximum sum of increasing subsequence\n        if index!= k:\n            dp = max(dp, a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n        # If the current element is the kth element, then its value will contribute to the maximum sum of increasing subsequence\n        else:\n            dp = max(dp, a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n\n    return dp"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (n + 1)\n    max_sum = 0\n    \n    for i in range(1, n + 1):\n        if a[i-1] <= a[index-1]:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = max(dp[i-1], dp[i-2]) + a[i-1]\n        \n        if i >= k and a[i-1] > a[k-1]:\n            max_sum = max(max_sum, dp[i])\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0\n    \n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1)) + a[index]\n    \n    if k == index:\n        return max_sum_increasing_subseq(a, n, index+1, k) + a[index]\n    \n    if k < index:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1))\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate over all prefixes\n    for i in range(index, n):\n        # Update current_sum if the current element is greater than or equal to k\n        if a[i] >= k:\n            current_sum += a[i]\n        # Update max_sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If max_sum exceeds k, update current_sum to 0\n        if max_sum >= k:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the tuple\n    colon_tup = deepcopy(tuplex)\n    # Get the number of columns and rows in the tuple\n    rows = len(tuplex)\n    cols = len(tuplex[0])\n    # If m and n are not within the range of [0, rows-1] and [0, cols-1] respectively, return None\n    if m < 0 or m >= rows or n < 0 or n >= cols:\n        return None\n    # If m = n, return a tuple with all elements at that index\n    elif m == n:\n        return tuple(tuplex[m])\n    # If m < n, return a tuple with all elements after the m-th element and before the n-th element\n    else:\n        colon_tup = tuple(tuplex[m][i] for i in range(n))\n        return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the input tuple\n    colontuple = deepcopy(tuplex)\n\n    # iterate over the range of m columns\n    for i in range(m):\n        # iterate over the range of n rows\n        for j in range(n):\n            # extract the ith column and jth row from the input tuple\n            col = colontuple[j][i]\n            # add a colon to the column and append it to the output tuple\n            colontuple[j][i] = (col + ':')\n\n    return colontuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuplex and returns a colon of the tuplex with\n    a given number of elements.\n    '''\n    return tuple([tuplex[i:i+m] for i in range(0, len(tuplex), n)])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # iterate over the rows\n    for i in range(m):\n        # iterate over the columns\n        for j in range(n):\n            # set the element of the colon to the element of the original tuple\n            new_tuplex[i*n+j] = tuplex[i][j]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # get a deepcopy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # iterate over the rows of the colon\n    for i in range(m):\n        # iterate over the columns of the colon\n        for j in range(n):\n            # get the index of the current element in the original tuple\n            current_index = i*n+j\n            # set the value of the current element to the value of the element at the same index in the new tuple\n            tuplex_copy[current_index] = tuplex[current_index]\n\n    # return the new tuple\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the size of the tuple is greater than m*n\n    if len(tuplex) > m*n:\n        raise ValueError(\"The tuple is too large to be a colon.\")\n\n    # Check if the size of the tuple is a multiple of m\n    if len(tuplex) % m!= 0:\n        raise ValueError(\"The tuple size is not a multiple of m.\")\n\n    # Check if the size of the colon is less than or equal to m\n    if n > m:\n        raise ValueError(\"The size of the colon cannot be greater than m.\")\n\n    # Get the number of rows and columns in the tuple\n    rows = len(tuplex) // m\n    cols = m\n\n    # Get the indices of the elements in the colon\n    indices = [i*m + j for i in range(rows) for j in range(cols)]\n\n    # Get the elements in the colon\n    colon = [tuplex[i] for i in indices]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex_copy)\n\n    # get the number of rows and columns\n    rows = length // m\n    cols = length % m\n\n    # get the indices of the elements in the colon\n    col_indices = list(range(0, cols))\n    row_indices = list(range(0, rows))\n    for i in range(cols):\n        col_indices.append(i + rows * cols)\n\n    # get the elements in the colon\n    colon_elements = [tuplex_copy[i] for i in col_indices]\n\n    # return the colon\n    return tuple(colon_elements)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # making a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # traversing the tuple\n    for i in range(len(tuplex_copy)):\n        if i == m - 1:\n            break\n        else:\n            tuplex_copy.insert(i + 1, tuplex_copy[i])\n            tuplex_copy.pop(i)\n    # getting the colon\n    colon = tuplex_copy[:m]\n    # returning the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Get a deepcopy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Create an empty list to store the new colon\n    new_colon = []\n\n    # Loop through the first n elements of the tuple\n    for i in range(min(m, n)):\n        # Append the i-th element of the input tuple to the new colon\n        new_colon.append(tuplex_copy[i])\n\n    # Return the new colon\n    return new_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i][j])\n        col.append(tuple(row))\n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i+j >= N:\n                break\n            product = nums1[i]*nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Initialize a variable to store the result\n    result = []\n\n    # Loop through each combination of two numbers from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two numbers and add it to the result list\n            product = nums1[i] * nums2[j]\n            result.append(product)\n\n            # If the length of the result list reaches the desired number of products, return the list\n            if len(result) == N:\n                return result\n\n    # If the loop completes without finding the desired number of products, return an empty list\n    return []"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in the first list\n    max1 = max(nums1)\n\n    # Find the maximum value in the second list\n    max2 = max(nums2)\n\n    # Initialize the products list\n    products = []\n\n    # Loop through all possible pairs of factors\n    for i in range(N+1):\n        for j in range(N+1):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is larger than the current maximum product\n            if product > max1 * max2:\n                # If it is, add it to the products list\n                products.append(product)\n\n    # Sort the products list in descending order\n    products.sort(reverse=True)\n\n    # Return the products list\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    result = []\n    \n    for i in range(N):\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        product = factor1 * factor2\n        if product > max_product:\n            max_product = product\n            result = [factor1, factor2]\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in either list\n    max_num = max(nums1[-1], nums2[-1])\n\n    # Initialize the result list\n    result = []\n\n    # Iterate N times\n    for i in range(N):\n\n        # Find the maximum product of any pair of numbers from the two lists\n        max_product = 0\n        for j in range(len(nums1) - 1):\n            for k in range(len(nums2) - 1):\n                product = max(nums1[j] * nums2[k], nums1[j + 1] * nums2[k + 1])\n                max_product = max(max_product, product)\n\n        # Add the maximum product to the result list\n        result.append(max_product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product of the selected numbers\n    max_product1 = max_product2 = float('-inf')\n\n    # Iterate through each combination of two numbers\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the selected numbers\n            product = nums1[i] * nums2[j]\n\n            # Update the maximum product if the current product is greater\n            if product > max_product1:\n                max_product2 = max_product1\n                max_product1 = product\n\n            # Update the maximum product if the current product is greater and the other number is smaller\n            elif product > max_product2 and nums2[j] < max_product1:\n                max_product2 = product\n\n    # Return the maximum product of the selected numbers\n    return max_product1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the first list in descending order\n    nums1.sort(reverse=True)\n    \n    # Find the largest N elements from the first list\n    largest_nums1 = nums1[:N]\n    \n    # Find the largest N elements from the second list\n    largest_nums2 = nums2[:N]\n    \n    # Calculate the product of the largest N elements from both lists\n    product = 1\n    for i in range(N):\n        product *= largest_nums1[i] * largest_nums2[i]\n    \n    return product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two input lists must have the same length.')\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError('The number of largest products must be less than or equal to the length of the input lists.')\n    max_products = []\n    for i in range(N):\n        max_products.append(max(nums1[i], nums2[i]))\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    max_product3 = float('-inf')\n    for i in range(N):\n        product1 = 1\n        product2 = 1\n        product3 = 1\n        for j in range(i):\n            product1 *= nums1[j]\n            product2 *= nums2[j]\n        for j in range(i, len(nums1)):\n            product3 *= nums1[j]\n        if product1 > max_product1:\n            max_product1 = product1\n            max_product2 = product2\n            max_product3 = product3\n        product1 = 1\n        product2 = 1\n        product3 = 1\n        for j in range(i+1, len(nums1)):\n            product1 *= nums1[j]\n            product2 *= nums2[j]\n        for j in range(i+1, len(nums1)):\n            product3 *= nums1[j]\n        if product1 > max_product1:\n            max_product1 = product1\n            max_product2 = product2\n            max_product3 = product3\n    return max_product1, max_product2, max_product3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        raise ValueError(\"Both lists must have at least N elements\")\n    if N == 1:\n        return max(nums1[0] * nums2[0], nums1[0] * nums2[-1], nums1[-1] * nums2[0], nums1[-1] * nums2[-1])\n    elif N == len(nums1) and N == len(nums2):\n        return max(nums1[0] * nums2[0], nums1[-1] * nums2[-1])\n    elif N % 2 == 1:\n        start, end = N // 2, N // 2\n        return max(large_product(nums1[:start], nums2[:start], N - 1) * nums1[start] * nums2[start],\n                   large_product(nums1[start:], nums2[start:], N - 1) * nums1[start] * nums2[-1])\n    else:\n        start, end = N // 2, N // 2\n        return max(large_product(nums1[:start], nums2[:start], N // 2) * nums1[start] * nums2[start],\n                   large_product(nums1[start:], nums2[start:], N // 2) * nums1[start] * nums2[-1])"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum value.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    \n    # Convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost unset bit\n    i = 32\n    while i > 0 and (n & (1 << i)):\n        i -= 1\n    n |= (1 << i)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through each bit of the integer\n    for i in range(32):\n        # Check if the current bit is unset\n        if (n >> i) & 1 == 0:\n            # If it is, set the count variable to 1\n            count = 1\n            # Break out of the loop since we have found the left most unset bit\n            break\n    \n    # Return the left shift of the integer by the count variable\n    return n << count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: \n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer.\n    \"\"\"\n    # loop through the binary representation of n\n    for i in range(31, -1, -1):\n        # check if the i-th bit is 1\n        if (n >> i) & 1:\n            # set the left most unset bit to 1 and return the result\n            n |= (1 << i)\n            return n\n    # if there is no leftmost unset bit, return n unchanged\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert integer to binary string\n    bin_str = bin(n)[2:]\n    # Initialize counter for unset bits\n    unset_count = 0\n    # Loop through the binary string from right to left\n    for bit in bin_str:\n        if bit == '0':\n            unset_count += 1\n        else:\n            break\n    # Set the left most unset bit\n    n |= (1 << (unset_count-1))\n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: \n        n = n >> 1  # Shift the bits to the right until the rightmost bit is set.\n    return n << 1  # Set the leftmost unset bit."
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    # initialize the result to zero\n    result = 0\n    # loop through the bits of the input number\n    for i in range(31, -1, -1):\n        # if the current bit is 1, we don't need to set it\n        if (n & (1 << i)):\n            break\n        # otherwise, we set the current bit to 1 in the result\n        else:\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Create a mask of all set bits in n\n    mask = n.bit_length() - 1\n    # Shift the mask to the left by one bit to remove the leftmost set bit\n    mask <<= 1\n    # Clear the leftmost set bit in n\n    n &= mask\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize leftmost unset bit to -1\n    leftmost_unset_bit = -1\n    # Traverse each bit of n from left to right\n    for i in range(31, -1, -1):\n        # Check if the i-th bit of n is set\n        if (n >> i) & 1:\n            # If it is, set leftmost_unset_bit to i and break out of the loop\n            leftmost_unset_bit = i\n            break\n    # Set the leftmost unset bit of n to 0\n    n &= ~(1 << leftmost_unset_bit)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer as input and returns an integer with the leftmost unset bit set to 1.\n    '''\n    count = 0\n    while n > 0: \n        n = n & (n-1) # clear the least significant bit set to 1\n        count += 1\n    return (1 << count)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2 # formula for calculating the area of a cone\n    volume = area * h / 3 # formula for calculating the volume of a cone\n    \n    return volume # returns the volume of the cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with a base radius r and a height h.\n    \n    Args:\n    r (float): The base radius of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    \n    # Calculate the volume of the cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * (r**2) * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    '''\n    \n    # Calculate the volume using the formula V = 1/3 * pi * r^2 * h\n    V = 1/3 * math.pi * r**2 * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its radius and height.\n    '''\n\n    # Calculate the volume of the cone using the formula A = \u03c0r^2 h\n    A = math.pi * r ** 2 * h\n\n    # Return the volume of the cone\n    return A"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the base of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    pi = math.pi\n    vol = (1/3) * pi * r * r * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius of the cone and the height of the base as input\n    and returns the volume of the cone.\n    '''\n    area = math.pi * (r ** 2)\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 found so far to 0\n    highest_power_of_2 = 0\n\n    # Loop through all possible powers of 2 from 1 to n\n    for i in range(1, n+1):\n\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n\n            # If it is, update the highest power of 2 found so far\n            highest_power_of_2 = i\n\n    # Return the highest power of 2 found so far\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n >>= 1 \n    return n "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return 2**highest_Power_of_2(n//2)\n        else:\n            return 2**(highest_Power_of_2(n-1)+1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    \n    highest_power = 0\n    while n > 1:\n        n = n >> 1\n        highest_power += 1\n        \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        p = 1\n        while p <= n:\n            p *= 2\n        return p - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize maximum power of 2\n    max_power = 1\n    \n    # Check if n is greater than 1\n    if n > 1:\n        # Loop through all integers between 2 and n-1\n        for i in range(2, n):\n            # Check if i is a power of 2\n            if (i & (i-1)) == 0:\n                # If i is a power of 2, update the maximum power of 2\n                if i > max_power:\n                    max_power = i\n    \n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1 << i - 1:\n            return i\n        i += 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    highest = 1\n    power = 1\n    \n    # Loop until power is greater than or equal to n\n    while power >= n:\n        # If power is greater than highest, update highest\n        if power > highest:\n            highest = power\n        \n        # Increment power\n        power <<= 1\n    \n    # Return highest power of 2\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n and returns the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        curr = 0\n\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n\n        return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers of the sequence\n    a, b = 2, 1\n    \n    # Loop through the sequence up to n\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        c = a + b\n        \n        # Update the values of a and b\n        a = b\n        b = c\n    \n    # Return the nth number in the sequence\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n\n    Returns:\n    Then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string % item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(lst, fmt_str):\n    '''\n    Apply a format string to all elements in a list.\n\n    :param lst: the list to modify\n    :param fmt_str: the format string to use\n    :return: the modified list\n    '''\n    return [fmt_str.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element and store the result in the list\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1: List of strings\n    l2: List of integers\n    l3: List of lists of strings\n\n    Returns:\n    A nested dictionary with keys as the first list elements and values as the second and third lists.\n    '''\n\n    # Create an empty dictionary to store the nested dictionary\n    d = {}\n\n    # Loop through each element of the first list\n    for i in range(len(l1)):\n        # Create a dictionary for the current element of the first list\n        d[l1[i]] = {}\n        # Loop through each element of the second list\n        for j in range(len(l2)):\n            # Create a dictionary for the current element of the second list\n            d[l1[i]][l2[j]] = []\n            # Loop through each element of the third list\n            for k in range(len(l3[i])):\n                # Add the current element of the third list to the dictionary\n                d[l1[i]][l2[j]].append(l3[i][k])\n\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create an empty dictionary to hold the final result\n    result = {}\n\n    # iterate over the input lists\n    for i in range(len(l1)):\n        # create a sub-dictionary with the current list as the key\n        sub_dict = {l1[i]: l2[i], l3[i]: l3[i]}\n        # add the sub-dictionary to the result dictionary\n        result.update(sub_dict)\n\n    # return the final result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # convert the list of tuples to dictionary\n    d1 = dict(zip(l1[0], l1[1]))\n    d2 = dict(zip(l2[0], l2[1]))\n    d3 = dict(zip(l3[0], l3[1]))\n    # concatenate the three dictionaries into a single dictionary\n    d = {**d1, **d2, **d3}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary\n    nested_dict = {}\n    \n    # loop through the lists and add each element as a key to the dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for item in lst:\n            nested_dict[item] = lst.index(item)\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    data = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            if isinstance(item, dict):\n                for key, value in item.items():\n                    if key in data:\n                        if isinstance(data[key], list):\n                            data[key].append(value)\n                        else:\n                            data[key] = [data[key], value]\n                    else:\n                        data[key] = value\n            else:\n                if i == 0:\n                    data.append(item)\n                elif isinstance(data[i-1], list):\n                    data[i-1].append(item)\n                else:\n                    data[i-1] = [data[i-1], item]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # combine the three lists into one dictionary\n    data = {**l1, **l2, **l3}\n    # create nested dictionary using list comprehension\n    nested_data = {key: [value] for key, value in data.items()}\n    # return the nested dictionary\n    return nested_data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): A list of integers.\n    l2 (list): A list of strings.\n    l3 (list): A list of floats.\n\n    Returns:\n    A nested dictionary where the outer keys are the elements from l1, l2, and l3, and the inner values are lists of the corresponding elements from each list.\n\n    Example:\n    l1 = [1, 2, 3]\n    l2 = ['a', 'b', 'c']\n    l3 = [1.1, 2.2, 3.3]\n    print(convert_list_dictionary(l1, l2, l3))\n    # Output:\n    # {1: [1, 2, 3], 'a': ['a', 'b', 'c'], 1.1: [1.1, 2.2, 3.3]}\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = [l2[i], l3[i]]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n        l1 (list): List of strings.\n        l2 (list): List of integers.\n        l3 (list): List of dictionaries.\n\n    Returns:\n        dict: Nested dictionary where the key is the first list element, and the value is the second list element.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for d in l3:\n        for k, v in d.items():\n            result[k] = v\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {\n            l2[j]: l3[j]\n            for j in range(len(l2))\n        }\n        result[key] = value\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        half_sum = get_max_sum(n//2)\n        third_sum = get_max_sum(n//3)\n        fourth_sum = get_max_sum(n//4)\n        fifth_sum = get_max_sum(n//5)\n        return max((half_sum + third_sum + fourth_sum + fifth_sum), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n):\n        if n == 1:\n            return n\n        else:\n            return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    \n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        max_sum = 0\n        for i in range(1, n+1):\n            max_sum = max(max_sum, i*(i+1)//2)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is 1, the maximum sum is n\n    if n == 1:\n        return n\n    \n    # Recursive case: compute the maximum sum up to n/2, then take the maximum of that with n,\n    # and then compute the maximum sum up to n/4, then take the maximum of that with the maximum of the\n    # previous two.\n    \n    # Compute the maximum sum up to n/2\n    max_sum_up_to_half = get_max_sum(n//2)\n    \n    # Compute the maximum sum up to n/4\n    max_sum_up_to_fourth = get_max_sum(n//4)\n    \n    # Compute the maximum sum up to the maximum of n/2 and n/4\n    max_sum_up_to_n = max(max_sum_up_to_half, max_sum_up_to_fourth)\n    \n    # Return the maximum of the maximum sum up to n/2 and n/4, and n\n    return max(max_sum_up_to_n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return n\n\n    # recursive case\n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    \n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum length and its corresponding list\n    max_length = 0\n    max_list = []\n    \n    # Loop through each element in the input list\n    for element in input_list:\n        # If the length of the current element is greater than the maximum length, update the variables\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        # If the length of the current element is equal to the maximum length, add the element to the list\n        elif len(element) == max_length:\n            max_list.append(element)\n    \n    # Return the maximum length list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[max_index]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to eliminate duplicates\n    test_set = set(test_tup)\n    # Check if set is empty (i.e., all elements in tuple are distinct)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set\n    unique_elements = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the characters and their count\n    char_count = {}\n\n    # Iterate over the string and increment the count of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character with count 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # If no character is found with count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to keep track of characters and their frequency\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeated character in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = True\n        else:\n            del char_dict[char]\n    if char_dict:\n        return min(char_dict, key=char_dict.get)\n    else:\n        return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(s: str) -> str:\n    \"\"\"\n    Returns the first non-repeated character in a given string.\n\n    :param s: the string to search in\n    :return: the first non-repeated character, or an empty string if no non-repeated character is found\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Iterate over the characters in the string again, and look for the first one that appears more than once\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return an empty string\n    return \"\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the characters and their frequency\n    char_freq = {}\n\n    # iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # iterate through the string again and find the first non-repeating character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # if all characters have frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # Convert the string to a set to remove duplicates\n    str1 = set(str1)\n\n    # Loop through the string and check if the current character is the first occurrence\n    for char in str1:\n        if str1.index(char) == 0:\n            return char\n\n    # If no non-repeated character was found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re  \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string) \n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    length = len(numbers)\n    midpoint = length // 2\n\n    if length % 2 == 0:\n        return (numbers[midpoint - 1] + numbers[midpoint]) / 2\n    else:\n        return numbers[midpoint]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Check if the number of numbers is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If the number of numbers is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If the number of numbers is odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a, b, c = sorted([a, b, c])\n    n = len(a)\n    if n % 2 == 0:\n        median = (a[n//2-1] + a[n//2]) / 2\n    else:\n        median = a[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the numbers\n    a = sorted([a, b, c])\n    \n    # getting the length of the array\n    n = len(a)\n    \n    # finding the median\n    if n % 2 == 0:\n        median = (a[n//2] + a[n//2-1])/2\n    else:\n        median = a[n//2]\n    \n    # returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_list = [a, b, c]\n    a_list.sort()\n    if len(a_list) % 2 == 0:\n        median = (a_list[len(a_list)//2] + a_list[len(a_list)//2 - 1]) / 2\n    else:\n        median = a_list[len(a_list)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    sorted_list = sorted(num_list)\n    length = len(sorted_list)\n    median = 0\n    if length % 2 == 0:\n        median = (sorted_list[length//2 - 1] + sorted_list[length//2]) / 2\n    else:\n        median = sorted_list[length//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2])/2\n    else:\n        median = numbers[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = (sorted_numbers[2] + sorted_numbers[1]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the length of the array\n    length = len(numbers)\n\n    # If the length of the array is odd, the median is the middle number\n    if length % 2 == 1:\n        return numbers[length//2]\n    # If the length of the array is even, the median is the average of the two middle numbers\n    else:\n        return (numbers[length//2 - 1] + numbers[length//2]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num_str = str(num)\n        num_list = [int(digit) for digit in num_str]\n        total += sum(num_list)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits of each number\n    sum_list = []\n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual characters\n        char_list = [str(digit) for digit in str(num)]\n        # Initialize a variable to store the sum of digits of the number\n        sum_num = 0\n        # Iterate over each digit and add it to the sum variable\n        for digit in char_list:\n            sum_num += int(digit)\n        # Append the sum of digits to the sum_list\n        sum_list.append(sum_num)\n    # Return the sum_list containing the sum of digits of each number\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(map(int, str(num)) for num in nums)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        digit_sum += int(num_str[-1])\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Perform bitwise xor operation across the given tuples\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the given tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be the same\")\n\n    # Initialize the result tuple with all zeros\n    result_tup = tuple(0 for i in range(len(test_tup1)))\n\n    # Perform the bitwise xor operation across the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    # Initialize the output tuple with all zeros\n    output_tup = (0,)*len(test_tup1)\n    \n    # Perform the bitwise xor operation on each element in the tuples\n    for i in range(len(test_tup1)):\n        output_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # concatenate the tuples\n    concatenated_tup = test_tup1 + test_tup2\n    # convert the concatenated tuple into a string\n    concatenated_str = ''.join(map(str, concatenated_tup))\n    # convert the string into a list of integers\n    concatenated_list = list(map(int, concatenated_str))\n    # perform the bitwise xor operation\n    xor_result = [x ^ y for x, y in zip(test_tup1, test_tup2)]\n    # convert the result back into a string\n    xor_str = ''.join(map(str, xor_result))\n    # convert the string back into a list of integers\n    xor_list = list(map(int, xor_str))\n    # return the result as a tuple\n    return tuple(xor_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length.'\n    else:\n        # Perform the bitwise xor operation\n        xor_result = []\n        for i in range(len(test_tup1)):\n            xor_result.append(test_tup1[i] ^ test_tup2[i])\n        return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n    \n    # Iterate through each element of the first tuple and perform the bitwise xor operation with each element of the second tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create an empty dictionary to store the unique tuples and their frequencies\n    freq_dict = {}\n\n    # Loop through each item in the list and add its frequency to the dictionary\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Print the number of unique tuples in the dictionary\n    print(len(freq_dict))"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of each tuple in the list\n    freq_dict = {}\n\n    # loop through the list of tuples and increment the frequency of each tuple in the dictionary\n    for t in test_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n\n    # return the total frequency of each tuple in the dictionary\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and convert back to a list\n    unique_tuples = list(set(tuple(x) for x in test_list))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of each tuple in the list\n    freq_dict = {}\n    \n    # iterate over the list and add the tuple to the dictionary\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    \n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in both tuples must be equal.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two input tuples must have same length.\"\n    \n    result_list = []\n    for i in range(len(test_tup1)):\n        # adding each tuple element by index\n        result_list.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # check if the length of the two input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the two input tuples should be equal.')\n\n    # loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # check if the element in the first tuple is a tuple or not\n        if isinstance(test_tup1[i], tuple):\n            # if it's a tuple, add it to the result with the index of the tuple element\n            result.append(test_tup1[i][i] + test_tup2[i][i])\n        else:\n            # if it's not a tuple, just add it to the result with the index of the tuple element\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create an empty tuple to store the result of each addition\n    result_tup = ()\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # loop through the elements of the second tuple and add the corresponding elements\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new list to store the result\n    result = []\n    # Iterate over each index of the first tuple\n    for i in range(len(test_tup1)):\n        # Append the sum of the corresponding elements of the two tuples\n        result.append(test_tup1[i] + test_tup2[i])\n    # Return the result as a new tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup2[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(inner_result)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as arguments and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    for i in tuple1: \n        if i in tuplex: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two arguments:\n    1. tuplex - a tuple of elements to be checked\n    2. tuple1 - a tuple of elements to be searched for in tuplex\n    \n    This function checks whether each element in tuplex exists within tuple1.\n    If an element exists in tuplex and does not exist in tuple1, the function returns False.\n    If an element exists in both tuplex and tuple1, the function returns True.\n    \"\"\"\n    for element in tuplex:\n        if element not in tuple1:\n            return False\n    return True"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if it is odd, False otherwise. \n    The parity of a number is the number of odd numbers that divide it evenly. For example, 17 has an odd parity, because 3 (the only even divisor) and 7 (the only odd divisor) divide 17 evenly.\n    '''\n\n    count = 0\n    for i in range(2, x+1, 2):\n        if x % i == 0:\n            count += 1\n    \n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of {} is even.\".format(x)\n    else:\n        return \"The parity of {} is odd.\".format(x)\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    if x % 2 == 0:\n        parity = 0\n    else:\n        parity = 1\n    if parity % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = True if x%2!=0 else False\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = False\n    \n    # Check if x is even or odd\n    if x % 2 == 0:\n        parity = True\n    \n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: #if x is even\n        print(x,\"is even\")\n        return False #return False as the parity of even numbers is odd\n    else:\n        print(x,\"is odd\")\n        return True #return True as the parity of odd numbers is even"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # If the number is even, its parity is even.\n    if x % 2 == 0:\n        return \"Even\"\n    # If the number is odd, its parity is odd.\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Finding the parity of the given number\n    parity = x % 2\n\n    # If the parity is odd, return \"The number is odd\"\n    if parity == 1:\n        return \"The number is odd\"\n\n    # If the parity is even, return \"The number is even\"\n    else:\n        return \"The number is even\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the result string and a dictionary to keep track of the original digits\n    result = ''\n    original_digits = {}\n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit is not already in the dictionary, add it with a count of 1\n        if digit not in original_digits:\n            original_digits[digit] = 1\n        # otherwise, increment the count by 1\n        else:\n            original_digits[digit] += 1\n    # loop through each digit in the original digits dictionary\n    for digit in original_digits:\n        # if the count is 1, add the digit to the result string\n        if original_digits[digit] == 1:\n            result += digit\n        # if the count is greater than 1, add a prefix to the result string that indicates the count\n        else:\n            result += digit + str(original_digits[digit])\n    # if the original number was already a bigger number, return the original number\n    if int(result) >= n:\n        return str(n)\n    # otherwise, return the result string as an integer\n    else:\n        return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    \n    # initialize variables to store the digits of the current number and the digits of the next number\n    current_digits = []\n    next_digits = []\n    \n    # iterate through the digits of the current number and add them to the corresponding array\n    for digit in num_str:\n        if digit.isdigit():\n            current_digits.append(int(digit))\n    \n    # check if there is a next number with the same number of digits\n    if len(current_digits) < 10:\n        # create the next number by rearranging the digits of the current number\n        next_num = int(''.join(sorted(str(num))))\n        \n        # convert the next number to a string and add it to the next_digits array\n        next_digits.append(int(str(next_num)[-1]))\n    \n    # create the final number by rearranging the digits of the current and next numbers\n    final_num = int(''.join(sorted(str(current_num) + str(next_num))))\n    \n    # return the final number\n    return final_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    def reverse_digits(num):\n        \"\"\"\n        Convert the given number to a string of its digits in reverse order.\n        \"\"\"\n        return str(num)[::-1]\n    \n    def find_next_bigger(num):\n        \"\"\"\n        Find the next bigger number by rearranging the digits of the given number.\n        \"\"\"\n        num_str = str(num)\n        num_str = \"\".join(sorted(num_str))\n        return int(num_str)\n    \n    return find_next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num = str(n)\n    # Initialize the result variable to 0\n    result = 0\n    # Traverse through the digits of the number\n    for i in range(len(num)):\n        # Calculate the digit index from the length of the number\n        index = len(num) - i - 1\n        # Calculate the position of the current digit in the result string\n        pos = (index // 2) + ((index % 2) * (index // 2))\n        # Assign the current digit to the appropriate position in the result string\n        result = int(result + str(num[index])) * (int(num[index]) ** pos)\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    n = 0\n    for digit in digits:\n        if digit < 9:\n            n += 10 ** (len(digits) - n - 1) * digit\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert the given number to a string\n    num_str = str(n)\n\n    # initialize the maximum value and the count of digits in the number\n    max_val = 0\n    digit_count = 0\n\n    # iterate through the digits of the number\n    for digit in num_str:\n        # check if the current digit is greater than the maximum value\n        if int(digit) > max_val:\n            # update the maximum value\n            max_val = int(digit)\n            # reset the count of digits\n            digit_count = 1\n        # increment the count of digits\n        else:\n            digit_count += 1\n\n    # check if the maximum value is a power of 10\n    if max_val ** digit_count == int(num_str):\n        # create the next bigger number by rearranging the digits\n        next_bigger = int(num_str) + 1\n        # convert the next bigger number to a string\n        next_bigger_str = str(next_bigger)\n        # iterate through the digits of the next bigger number\n        for i in range(len(next_bigger_str)):\n            # check if the current digit is a power of 10\n            if int(next_bigger_str[i]) ** digit_count == int(next_bigger_str):\n                # create the next smaller number by rearranging the digits\n                next_smaller = int(next_bigger_str) - 1\n                # check if the next smaller number is within the range of the previous digits\n                if int(next_smaller) < int(num_str):\n                    # return the next smaller number\n                    return int(next_smaller)\n\n    # if the maximum value is not a power of 10, return the same number\n    else:\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n < 10:\n        return n + 1\n    \n    digits = [int(d) for d in str(n)]\n    digits.sort()\n    digits.reverse()\n    \n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # initialize variables for the new number\n    new_n = \"\"\n\n    # loop over the digits of n and append each digit to the new number in reverse order\n    for digit in str(n):\n        new_n = digit + new_n\n\n    # check if the new number is greater than n\n    if int(new_n) > n:\n        return int(new_n)\n    else:\n        raise ValueError(\"There is no next bigger number\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a list of digits of the given number\n    digits = list(map(int, str(n)))\n\n    # Find the index of the smallest digit\n    min_index = digits.index(min(digits))\n\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n\n    # Swap the digits at the min and max indices\n    digits[min_index], digits[max_index] = digits[max_index], digits[min_index]\n\n    # Rearrange the digits in descending order\n    digits = sorted(digits, reverse=True)\n\n    # Create the next bigger number by joining the digits\n    next_bigger = int(''.join(map(str, digits)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    # Find the index of the last digit\n    last_index = len(num_list) - 1\n    # Loop through the list of digits, starting from the last digit and going backwards\n    while last_index >= 0:\n        # If the digit is not 9 or 0, swap it with the next digit\n        if int(num_list[last_index])!= 9 and int(num_list[last_index])!= 0:\n            # Swap the digits\n            temp = num_list[last_index]\n            num_list[last_index] = num_list[last_index - 1]\n            num_list[last_index - 1] = temp\n            # Find the next digit to the right\n            next_index = last_index - 1\n            while next_index >= 0 and num_list[next_index] == temp:\n                next_index -= 1\n            # If the next digit is 9, increment it to 0 and loop again\n            if next_index >= 0 and int(num_list[next_index]) == 9:\n                num_list[next_index] = '0'\n            # If there is no next digit to the right, break out of the loop\n            else:\n                break\n        # Decrement the last index\n        last_index -= 1\n    # Convert the list of digits back to a string and return it\n    return int(''.join(num_list))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the min heap for finding k smallest pairs\n    min_heap = []\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the first array\n    for i in range(len(nums1)):\n        # Initialize the left pointer to the left of the current element\n        left = i + 1\n\n        # Initialize the right pointer to the right of the current element\n        right = k\n\n        # While the left pointer is less than the right pointer\n        while left < right:\n            # Calculate the sum of the current element and the element at the left pointer\n            candidate_sum = nums1[i] + nums2[left]\n\n            # If the candidate sum is greater than or equal to the sum at the right pointer, we need to move the left pointer to the right\n            if candidate_sum >= nums2[right]:\n                right -= 1\n            else:\n                # If the candidate sum is less than or equal to the sum at the right pointer, we add the pair to the result list and move both pointers to the right\n                result.append((nums1[i], nums2[left]))\n                left += 1\n\n                # If the number of pairs found is equal to k, we can break out of the loop\n                if len(result) == k:\n                    break\n\n        # If the number of pairs found is equal to k, we can break out of the loop\n        if len(result) == k:\n            break\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # create a min heap of size k and initialize it with the first element of each array\n    heapq.heapify(nums1)\n    heapq.heappush(nums1, float('-inf'))\n    heapq.heappush(nums1, float('-inf'))\n\n    # create a min heap of size k and initialize it with the first element of each array\n    heapq.heapify(nums2)\n    heapq.heappush(nums2, float('-inf'))\n    heapq.heappush(nums2, float('-inf'))\n\n    # find the k smallest pairs\n    result = []\n    while len(result) < k:\n        # get the first element of each heap and compare them\n        if nums1[0] <= nums2[0]:\n            result.append((nums1[0], nums2[0]))\n            # remove the smallest element from the first heap and add the next smallest element to the first heap\n            heapq.heappop(nums1)\n            heapq.heappush(nums1, float('-inf'))\n            heapq.heappush(nums1, float('-inf'))\n        else:\n            result.append((nums1[0], nums2[0]))\n            # remove the smallest element from the second heap and add the next smallest element to the second heap\n            heapq.heappop(nums2)\n            heapq.heappush(nums2, float('-inf'))\n            heapq.heappush(nums2, float('-inf'))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # convert lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # create a set of tuples of unique pairs\n    pairs = set()\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            pairs.add(pair)\n\n    # create a heap of tuples of (sum, pair)\n    heap = []\n    for pair in pairs:\n        sum_ = pair[0] + pair[1]\n        heapq.heappush(heap, (sum_, pair))\n\n    # find the k smallest pairs\n    k_smallest_pairs = []\n    for i in range(k):\n        (sum_, pair) = heapq.heappop(heap)\n        k_smallest_pairs.append(pair)\n\n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the k smallest pairs\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Create a list to store the number of pairs with num1 as the first element\n        pairs_with_num1 = []\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # Check if the sum of the two numbers is smaller than the current smallest number in the heap\n            if num1 + num2 < heapq.heappop(min_heap) if min_heap else float('inf'):\n                # If it's not, add the sum as a new smallest number in the heap\n                heapq.heappush(min_heap, num1 + num2)\n\n            # If the heap size is equal to k, add the pair to the list\n            if len(min_heap) == k:\n                pairs_with_num1.append((heapq.heappop(min_heap), (num1, num2)))\n\n        # Sort the pairs in ascending order of the second element of each pair\n        pairs_with_num1.sort(key=lambda x: x[1])\n\n        # Add the k smallest pairs to the result list\n        for pair in pairs_with_num1[:k]:\n            result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        pair, num = heapq.heappop(heap)\n        result.append(num)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of elements\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Create a tuple of (num1, num2) and add it to the heap\n            heapq.heappush(pairs, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            # If the heap has k elements, remove the smallest element from the heap\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    # Extract and return the k elements from the heap\n    return [pair for pair, _ in heapq.nsmallest(k, pairs)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        heapq.heappush(heap1, -num)\n    for num in nums2:\n        heapq.heappush(heap2, -num)\n    while k > 0 and len(heap1) > 0 and len(heap2) > 0:\n        if k == 1:\n            pairs.append((heapq.heappop(heap1), heapq.heappop(heap2)))\n        else:\n            pair = (-heapq.heappop(heap1), -heapq.heappop(heap2))\n            if len(pairs) < k:\n                heapq.heappush(heap1, -pair[0])\n                heapq.heappush(heap2, -pair[1])\n            else:\n                heapq.heappush(heap1, -pair[0])\n                heapq.heappush(heap2, -pair[1])\n        k -= 1\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert nums1 and nums2 into minheap\n    min_heap1 = []\n    min_heap2 = []\n    for num in nums1:\n        heapq.heappush(min_heap1, -num)\n    for num in nums2:\n        heapq.heappush(min_heap2, -num)\n\n    # initialize min_heap3 with the smallest element of nums1 and the smallest element of nums2\n    min_heap3 = [heapq.heappop(min_heap1), heapq.heappop(min_heap2)]\n\n    # create a min_heap4 to store k smallest pairs\n    min_heap4 = []\n\n    # loop until min_heap4 has k elements\n    while len(min_heap4) < k:\n        # if min_heap3 is empty, the smallest pair is the difference between the smallest element of nums1 and the smallest element of nums2\n        if not min_heap3:\n            min_heap4.append(-heapq.heappop(min_heap1) - heapq.heappop(min_heap2))\n        # if min_heap3 is not empty, the smallest pair is the difference between the smallest element of nums1 and the smallest element of min_heap3 and the smallest element of nums2 minus the smallest element of min_heap3\n        else:\n            min_heap4.append(-heapq.heappop(min_heap1) - min(heapq.heappop(min_heap3), -heapq.heappop(min_heap2)))\n\n    # convert min_heap4 back to a list\n    result = []\n    for num in min_heap4:\n        result.append(-num)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest pairs\n    min_heap = []\n    \n    # iterate through the first array\n    for num1 in nums1:\n        # initialize the current smallest pair to be the next element in the array\n        current_smallest = (num1, nums2[0])\n        \n        # insert the current smallest pair into the min heap\n        heapq.heappush(min_heap, current_smallest)\n        \n        # if the size of the min heap is greater than k, remove the maximum element and update the current smallest pair\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # iterate through the second array starting from the second element\n        for i in range(1, len(nums2)):\n            # calculate the sum of the current smallest pair with the current element in the second array\n            sum_pair = num1 + nums2[i]\n            \n            # if the sum is less than or equal to the target sum, update the current smallest pair to be the sum and the next element in the second array\n            if sum_pair <= k:\n                current_smallest = (sum_pair, nums2[i])\n                \n                # insert the current smallest pair into the min heap\n                heapq.heappush(min_heap, current_smallest)\n                \n                # if the size of the min heap is greater than k, remove the maximum element and update the current smallest pair\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    \n    # return the smallest k pairs from the min heap\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes three arguments - nums1, nums2, and k.\n    \n    nums1 and nums2 are the two arrays containing the elements to be paired.\n    k is the number of pairs required to be found.\n    \n    The function returns the k smallest pairs which consist of one element from the first array and one element from the second array.\n    \n    The function first sorts the elements in both arrays. Then, it uses a min heap to keep track of the smallest k pairs.\n    It initializes the heap with the first element from each array. Then, it iterates through the remaining elements in both arrays,\n    adding the next smaller element to the min heap if it is smaller than the smallest element in the heap.\n    \n    If the size of the heap is equal to k, the function returns the smallest elements from the heap. Otherwise, it repeats the process\n    until the heap size is equal to k.\n    '''\n    \n    # Sort the elements in both arrays\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize the min heap with the first element from each array\n    min_heap = [(nums1[0], nums2[0])]\n    \n    # Iterate through the remaining elements in both arrays\n    for i in range(1, len(nums1)):\n        for j in range(i):\n            if nums1[i] + nums2[j] < min_heap[0][0]:\n                # If the next smaller element is smaller than the smallest element in the heap, update the heap\n                heapq.heapreplace(min_heap, (nums1[i], nums2[j]))\n                if len(min_heap) == k:\n                    # If the size of the heap is equal to k, return the smallest elements from the heap\n                    return [min_heap[0][1], min_heap[0][0]]\n    \n    # If the loop completes without finding the required k pairs, return None\n    return None"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product and set it to the first element of the list\n    min_product = list1[0]\n\n    # Iterate through the list starting from the second element\n    for i in range(1, len(list1)):\n        # Calculate the product of the current element and the rest of the list\n        product = list1[i] * sum(list1[:i])\n        # If the product is less than the current minimum product, update the minimum product\n        if product < min_product:\n            min_product = product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    min_product = list1[0][0] * list1[-1][1]\n    for i in range(1, len(list1)-1):\n        min_product = min(min_product, list1[i][0] * list1[i+1][1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Calculate the total product of the list\n    total_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            total_product *= list1[i][j]\n\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the pair of tuples\n            product = list1[i][j]\n\n            # Check if the product is smaller than the current minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = float('inf')\n    current_product = 1\n    \n    # loop through the list and update the minimum product and current product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product *= list1[i] * list1[j]\n            if current_product < min_product:\n                min_product = current_product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and store the result\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                # If it is, update the minimum product\n                min_product = product\n\n    # Return the minimum product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n < 2:\n        return 0\n    min_product = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                prod = list1[i][0] * list1[j][1]\n                if prod < min_product:\n                    min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n    # Iterate over all pairs of tuples in the list\n    for pair in list1:\n        # Find the product of the first element of the pair and the second element of the pair\n        product = pair[0] * pair[1]\n        # If this product is less than the current minimum product, update the minimum product\n        if product < min_product:\n            min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # initialize minimum product as 1\n    min_prod = 1\n    # loop through list of tuples\n    for i in range(len(list1)):\n        # loop through list of tuples\n        for j in range(i+1, len(list1)):\n            # calculate product of tuples and compare to current minimum product\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    # return minimum product\n    return min_prod"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError('List is empty.')\n    min_val = float('inf')\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"The list is empty\")\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value variable\n    min_val = listval[0]\n    # Loop through the list and compare each element with the current minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            # Update minimum value if current element is smaller\n            min_val = val\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Find the minimum value in the list\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first value in the list\n    min_value = listval[0]\n    \n    # Loop through the rest of the values in the list\n    for i in range(1, len(listval)):\n        # Check if the current value is smaller than the minimum value\n        if listval[i] < min_value:\n            # If it is, update the minimum value\n            min_value = listval[i]\n    \n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to be first element of list\n    min_val = listval[0]\n    # iterate through the rest of the list\n    for i in range(1, len(listval)):\n        # check if current value is smaller than minimum value\n        if listval[i] < min_val:\n            # update minimum value\n            min_val = listval[i]\n    # return minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # check if list is empty\n    if len(listval) == 0:\n        return None\n    else:\n        # initialize minimum value to first element\n        min_val = listval[0]\n        # loop through the rest of the list\n        for i in range(1, len(listval)):\n            # check if current element is less than minimum value\n            if listval[i] < min_val:\n                min_val = listval[i]\n        # return the minimum value\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    # convert snake case to camel case\n    camel_case = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n    return camel_case.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(_[a-z0-9])', lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into words separated by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word\n    camel_case = ''.join([word.capitalize() for word in words])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for word_part in word.split('_'):\n        if word_part.isupper():\n            camel_case += word_part.lower()\n        else:\n            camel_case += word_part\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all uppercase letters to lowercase\n    word = word.lower()\n    # Split the word by underscores\n    words = word.split('_')\n    # Convert the first letter to uppercase and the rest to lowercase\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i]\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.?)')\n    components = pattern.split(word)\n    return components[0] + ''.join(x.upper() for x in components[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    # split the word into words using a regular expression\n    words = re.findall(r'\\w+', word)\n    # capitalize the first word and join the remaining words with underscores\n    return words[0].capitalize() + ''.join('_' + w.capitalize() for w in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case by splitting the word into words and capitalizing the first letter of each word\n    camel_case = re.sub(r'_(.)', lambda m: m.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return \"Index out of range\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Args:\n    list1 (list): List of tuples.\n    n (int): The nth element to be extracted.\n\n    Returns:\n    The nth element from the list of tuples.\n    \"\"\"\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        return \"The input is not a list.\"\n    if n > len(list1) or n < 1:\n        return \"The index is out of range.\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks whether any value in the first list exists in the second list.\n\n    Parameters\n    ----------\n    list1 : list\n        A sequence of values.\n    list2 : list\n        Another sequence of values.\n\n    Returns\n    -------\n    bool\n        True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    # loop through list1 and check if each element exists in list2\n    for element in list1:\n        if element in list2:\n            return True\n    # if we get here, none of the elements in list1 exist in list2\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # create a set from the first sequence\n    set1 = set(list1)\n\n    # iterate through the second sequence and check if the value exists in the set\n    for value in list2:\n        if value in set1:\n            return True\n\n    # if no value in the second sequence exists in the set, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            print(i, \"exists in both lists\")\n        else:\n            print(i, \"does not exist in the second list\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Creating a set of unique values in both lists.\n    set1 = set(list1)\n    set2 = set(list2)\n    # Checking if the union of set1 and set2 is equal to set1.\n    if set1.union(set2) == set1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create a set from list1 to check for overlapping values\n    set1 = set(list1)\n    \n    # loop through list2 and check if any value exists in set1\n    for item in list2:\n        if item in set1:\n            return True\n    # if no overlap is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether there are any overlapping values in them.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2: # base case\n        return None\n    \n    max_product = float('-inf') # initialize max product as negative infinity\n    max_pair = (0, 0) # initialize max pair as (0, 0)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j] # calculate product of elements from i and j\n            if product > max_product: # update max product if current product is greater than max\n                max_product = product\n                max_pair = (arr[i], arr[j]) # update max pair with current i and j\n    \n    return max_pair # return max pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Finds the pair with the highest product from a given array of integers.\n    :param arr: a list of integers\n    :return: a tuple of integers representing the pair with the highest product\n    \"\"\"\n    # Initialize the max_product variables to zero\n    max_1 = max_2 = 0\n\n    # Iterate through the array and find the maximum product up to that point\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n\n    # Calculate the maximum product between the two maximums\n    max_product = max_1 * max_2\n\n    # Initialize the min_product variables to the same values as max_product\n    min_1 = max_1\n    min_2 = max_2\n\n    # Iterate through the array again and find the minimum product up to that point\n    for i in range(len(arr)):\n        # Calculate the product of the maximum and minimum products\n        current_product = max_1 * max_2 * arr[i]\n\n        # Update the min_product variables if the current product is smaller\n        if current_product < min_1 * min_2:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif current_product < min_1 * max_2:\n            min_2 = arr[i]\n\n    # Calculate the minimum product between the two minimums\n    min_product = min_1 * min_2\n\n    # Return the pair with the highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (arr[0], arr[1])\n    max_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max_pair[0] * max_pair[1]:\n            max_pair = (max_pair[0], max_pair[1])\n            max_product = max_pair[0] * max_pair[1]\n        elif arr[i] > max_pair[0]:\n            max_pair = (arr[i], max_pair[1])\n            max_product = arr[i] * max_pair[1]\n        elif arr[i] > max_pair[1]:\n            max_pair = (max_pair[0], arr[i])\n            max_product = max_pair[0] * arr[i]\n    \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2: \n        return None\n    \n    max_pair = [0, 0]\n    min_pair = [0, 0]\n    \n    for i in range(len(arr)): \n        if arr[i] > max_pair[0]: \n            max_pair[1] = max_pair[0] \n            max_pair[0] = arr[i] \n        elif arr[i] > max_pair[1]: \n            max_pair[1] = arr[i] \n        \n        if arr[i] < min_pair[0]: \n            min_pair[1] = min_pair[0] \n            min_pair[0] = arr[i] \n        elif arr[i] < min_pair[1]: \n            min_pair[1] = arr[i] \n        \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize maximum product and maximum product pair\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n\n    # Loop through the array and calculate the product of each pair\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (arr[i], arr[j])\n\n    # Return the maximum product pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple with the index of the two elements in the array that have the highest product.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair of integers\n    with the highest product. If there are multiple pairs with the same highest product, it will return the\n    pair with the smallest index.\n    '''\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two variables to store the indices of the highest and second highest elements in the array\n    max_index = 0\n    second_max_index = 1\n\n    # Initialize variables to store the product of the highest and second highest elements and the minimum element\n    max_product = arr[0] * arr[1]\n    second_max_product = arr[0] * arr[1]\n    min_product = arr[1] * arr[2]\n\n    # Iterate through the array starting from the second element\n    for i in range(2, len(arr)):\n        # Calculate the product of the current element and the current element to the left\n        current_product = arr[i] * arr[i-1]\n\n        # If the current product is greater than the maximum product found so far, update both maximum and second maximum\n        if current_product > max_product:\n            second_max_product = max_product\n            max_product = current_product\n            max_index = i - 1\n            second_max_index = i\n\n        # If the current product is greater than the second maximum product found so far, update only the second maximum\n        elif current_product > second_max_product:\n            second_max_product = current_product\n            second_max_index = i\n\n    # If the second maximum product is equal to the maximum product, update it to the minimum element\n    if second_max_product == max_product:\n        second_max_product = min_product\n\n    # Return the pair of indices with the highest product\n    return (max_index, second_max_index)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple of two integers, which are the indices of the two elements with the highest product in the array.\n\n    The function first checks if there are only two elements in the array. If so, it returns a tuple of the indices of those two elements.\n\n    If there are more than two elements in the array, the function iterates through the array and finds the pair of elements with the highest product. It returns a tuple of the indices of those two elements.\n    '''\n    if len(arr) == 2:\n        return (arr.index(max(arr)), arr.index(min(arr)))\n\n    max_product = float('-inf')\n    max_product_pair = ()\n    min_product = float('inf')\n    min_product_pair = ()\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (i, j)\n            elif product == max_product and i!= j:\n                max_product_pair = (i, j)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product < min_product:\n                min_product = product\n                min_product_pair = (i, j)\n            elif product == min_product and i!= j:\n                min_product_pair = (i, j)\n\n    return max_product_pair, min_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # find the maximum value in the array\n    max_val = max(arr)\n\n    # initialize variables to store the maximum product and its indices\n    max_prod = 0\n    i = 0\n    j = 0\n\n    # loop through the array, comparing adjacent values\n    for k in range(len(arr)):\n        if k == 0 or arr[k] > arr[k-1]:\n            if arr[k] * arr[k+1] > max_prod:\n                max_prod = arr[k] * arr[k+1]\n                i = k\n                j = k+1\n\n    # print the result\n    print(\"The maximum product pair is:\", arr[i], \"x\", arr[j], \"=\", max_prod)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    max1 = arr[n-1] * arr[n-2]\n    max2 = arr[0] * arr[1]\n    if max1 > max2:\n        print(\"Pair with highest product:\", max1)\n    else:\n        print(\"Pair with highest product:\", max2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tuple_list in Input:\n        for element in tuple_list:\n            if element!= tuple_list[0]:\n                if common_first_element is None:\n                    common_first_element = element\n                elif element == common_first_element:\n                    return tuple_list[0]\n                else:\n                    common_first_element = None\n                    break\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        first_element = tup[0]\n        if first_element in common_elements:\n            common_elements.remove(first_element)\n        common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the common first element in the tuples.\n    '''\n    common_element = None\n    for tuple in Input:\n        if tuple[0] == common_element:\n            break\n        elif common_element is None:\n            common_element = tuple[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append((Input[i][0], Input[i][1]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for i in Input:\n        if len(first_element) == 0 or i[0]!= first_element[-1]:\n            first_element.append(i[0])\n    return first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary\n    result = {}\n\n    # loop through each tuple in the list\n    for tup in Input:\n        # check if the first element of the tuple is already in the dictionary\n        if tup[0] in result:\n            # if it is, append the second element of the tuple to the corresponding list\n            result[tup[0]].append(tup[1])\n        else:\n            # if it isn't, create a new list for this first element\n            result[tup[0]] = [tup[1]]\n\n    # create a list of tuples with common elements as the first element\n    common_tuples = []\n\n    # loop through each key in the result dictionary\n    for key in result:\n        # loop through each element in the result list for this key\n        for elem in result[key]:\n            # add a tuple (key, elem) to the common_tuples list\n            common_tuples.append((key, elem))\n\n    # return the list of common tuples\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the count of elements in each tuple\n    count_dict = {}\n    \n    # Iterate over each tuple in the list\n    for tuple in Input:\n        # Get the first element of the tuple\n        first_element = tuple[0]\n        \n        # If the first element is not already in the dictionary, add it with a count of 1\n        if first_element not in count_dict:\n            count_dict[first_element] = 1\n        # If the first element is already in the dictionary, increment the count by 1\n        else:\n            count_dict[first_element] += 1\n    \n    # Initialize an empty list to store the common first elements\n    common_elements = []\n    \n    # Iterate over each key in the dictionary and add it to the list if its count is greater than 1\n    for key, value in count_dict.items():\n        if value > 1:\n            common_elements.append(key)\n    \n    # Return the list of common first elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for item in Input:\n        if len(item) > 1:\n            common_first.append(item[0])\n\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Initialize an empty dictionary to store the unique elements of the list\n    unique_elements = {}\n    # Loop through each tuple in the list\n    for tuple_item in Input:\n        # Extract the first element of the tuple\n        first_element = tuple_item[0]\n        # If the first element is already in the dictionary, increment its count\n        if first_element in unique_elements:\n            unique_elements[first_element] += 1\n        # If the first element is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            unique_elements[first_element] = 1\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Loop through the unique elements dictionary and extract the elements with count of 1\n    for key, value in unique_elements.items():\n        if value == 1:\n            common_elements.append(key)\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element \n    having the maximum length from the list.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    return [x for x in lst if len(x) == max_len]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element having the maximum length.\n    '''\n    max_len = 0\n    max_element = ''\n    \n    # Iterate through the list and update the max_len and max_element variables\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    \n    # Return the max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    # initialize maximum length and index of the maximum element to negative infinity\n    max_length = -float('inf')\n    max_index = -1\n\n    # iterate over the list and check if the length of the current element is greater than the maximum length\n    for i, element in enumerate(lst):\n        if len(element) > max_length:\n            max_length = len(element)\n            max_index = i\n\n    # return the element at the maximum index\n    return lst[max_index]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round all the numbers in the list\n    list1 = [round(x) for x in list1]\n\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(list1)\n\n    # Multiply the total sum by the length of the list and print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num, end=' ')\n    print('\\n')\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the total sum of the numbers in the list\n    total_sum = sum(list1)\n    # Round each number in the list\n    list1 = [round(x) for x in list1]\n    # Calculate the total sum of the rounded numbers\n    rounded_sum = sum(list1)\n    # Multiply the total sum by the length of the list to get the final result\n    final_result = rounded_sum * len(list1)\n    # Print the final result\n    print(final_result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n        count += 1\n    return sum ** 3, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    \n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n    \n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(item) for item in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(i) +'' + delimiter for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n    If the delimiter is not specified, it defaults to a space.\n    '''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join([str(i) for i in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=\",\"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate each element of tuple by the delimiter\n    return_str = ''\n    for elem in test_tup:\n        return_str += str(elem)\n    return return_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]  # remove the last delimiter character from the concatenated string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of a tuple by the given delimiter.\n\n    Args:\n        test_tup (tuple): the tuple to concatenate.\n        delimiter (str, optional): the delimiter to use between elements. Defaults to''.\n\n    Returns:\n        str: the concatenated string.\n    \"\"\"\n    # Convert the tuple to a list to be able to use the join method\n    lst = list(test_tup)\n    # Join the list with the delimiter\n    concatenated_string = delimiter.join(lst)\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(1,n+1)]  # generate cubes of first n natural numbers\n    return sum(cubes)/len(cubes)  # find the average of cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initializing sum to 0 and count to 0\n    sum = 0\n    count = 0\n    \n    # iterating till n\n    for i in range(1, n+1):\n        # finding cube of the current number and adding it to sum\n        sum += i*i*i\n        # incrementing count\n        count += 1\n        \n    # finding average of cubes\n    avg = sum/count\n    \n    # returning the average\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize sum and count variables\n    sum_cubes = 0\n    count = 0\n\n    #loop through the first n numbers and calculate their cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n\n    #calculate the average of the cubes\n    avg_cubes = sum_cubes/count\n\n    #return the average\n    return avg_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count to zero\n    sum_of_cubes = 0\n    count = 0\n    \n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Find the cube of i\n        cube = i ** 3\n        \n        # Add cube to sum of cubes and increment count\n        sum_of_cubes += cube\n        count += 1\n        \n    # Calculate average of cubes\n    average_of_cubes = sum_of_cubes / count\n    \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n\n    average_of_cubes = sum_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #initialize sum and count variables\n    sum = 0\n    count = 0\n\n    #iterate through the first n natural numbers\n    for i in range(1, n+1):\n        #calculate the cube of the current number\n        cube = i ** 3\n\n        #add the cube to the sum\n        sum += cube\n\n        #increment the count\n        count += 1\n\n    #calculate the average of the cubes\n    average = sum / count\n\n    #return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for element in test_tuple:\n        rear_element = element[len(element) - 1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple) - 1\n    result = []\n    for string in test_tuple:\n        result.append(string[rear_index])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize an empty list to store the rear index elements\n    rear_elements = []\n    \n    # Loop through the tuple of strings and append the rear index element to the list\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    \n    # Return the list of rear index elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_list.append(item[-1])\n        else:\n            rear_list.append(item)\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple) - 1:\n            rear_list.append(test_tuple[i])\n        else:\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes in a list and an element x and returns the number of sublists \n    in the list that contain the element x.\n    '''\n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with all the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Find all occurrences of the pattern in the date string\n    matches = re.findall(pattern, dt)\n\n    # Convert each occurrence to dd-mm-yyyy format\n    for match in matches:\n        dt = dt.replace(match, match[6:4] + '-' + match[4:2] + '-' + match[:4])\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the date pattern in the input string\n    match = re.search(pattern, dt)\n\n    # check if the date pattern was found\n    if match:\n        # extract the year, month, and day from the match object\n        year, month, day = match.groups()\n\n        # format the date as dd-mm-yyyy\n        new_date = '-'.join([day, month, year])\n\n        # return the new date as a string\n        return new_date\n    else:\n        # if the date pattern was not found, return the original input string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_format = r'^\\d{4}-\\d{2}-\\d{2}$'\n    mm_dd_format = r'^\\d{2}-\\d{2}-\\d{4}$'\n    dd_mm_format = r'^\\d{2}-\\d{2}-\\d{2}$'\n\n    # Check if the input date is in yyyy-mm-dd format\n    if re.match(yyyy_format, dt):\n        return dt\n    # Check if the input date is in mm-dd-yyyy format\n    elif re.match(mm_dd_format, dt):\n        return dt.replace('-', '/')\n    # Check if the input date is in dd-mm-yyyy format\n    elif re.match(dd_mm_format, dt):\n        return dt.replace('-', '/')\n    else:\n        print(\"Invalid date format!\")\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # create a regular expression pattern to match the desired format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # search the date string for matches of the pattern\n    match = re.search(pattern, dt)\n    \n    # if a match is found, return the modified date string\n    if match:\n        year, month, day = match.groups()\n        new_date_str = day + '-' + month + '-' + year\n        return new_date_str\n    \n    # if no match is found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    matches = re.match(pattern, dt)\n    if matches:\n        year, month, day = matches.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.search() function to search for the date in the given string\n    match = re.search(pattern, dt)\n\n    # If the date is found, use the group() function to extract the required components\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Convert the date components to dd-mm-yyyy format\n        new_date = f'{day}-{month}-{year}'\n\n        return new_date\n\n    # If the date is not found, return None\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date format to yyyy-mm-dd\n    date = dt.strftime('%Y-%m-%d')\n    # Split the date into year, month, and day components\n    year, month, day = date.split('-')\n    # Reverse the order of the components\n    day, month, year = year, month, day\n    # Combine the components back into a new date string\n    new_date = f'{day}-{month}-{year}'\n    # Return the new date string\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define regular expression pattern for matching date formats\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.search() to search for a match in the input string\n    match = re.search(pattern, dt)\n    \n    # If a match is found, extract the groups and use them to construct a new date string\n    if match:\n        year, month, day = match.groups()\n        new_date = '-'.join([day, month, year])\n    else:\n        new_date = dt\n    \n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Define a function to calculate the gap between two adjacent elements\n    def gap(n):\n        return n // 2\n    \n    # Iterate over the array with a gap of 1\n    for gap_size in range(1, len(my_list)):\n        # Iterate over the array with a gap of the current gap size\n        for i in range(gap_size, len(my_list)):\n            # Swap the current element with the next gap element if the current element is greater than it\n            while i > 0 and my_list[i] < my_list[i - gap_size]:\n                my_list[i], my_list[i - gap_size] = my_list[i - gap_size], my_list[i]\n                i -= gap_size\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # initialize gap\n    gap = n // 2\n    while gap > 0:\n        # move gap position to the right\n        for i in range(gap, n):\n            # save the current element in variable temp\n            temp = my_list[i]\n            # shift elements smaller than temp to the right\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # reduce the gap to half of the previous one\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Get the length of the list\n    length = len(my_list)\n    \n    # Calculate the maximum gap\n    gap = length // 2\n    \n    while gap > 0:\n        # Move the gap closer to the middle of the list\n        for i in range(gap, length):\n            # Keep shifting the elements towards the beginning of the list until they are in correct order\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                # Swap the elements\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        # Decrease the gap by half\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-gap]\n                my_list[j-gap] = temp\n                j -= gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the maximum value in the array\n    max_value = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n\n    # Calculate the increment value to be used in the shell sort\n    increment = max_value // 2\n\n    # Perform shell sort\n    while increment > 0:\n        for i in range(increment, len(my_list)):\n            # Move the current element to its correct position in the sorted portion of the array\n            j = i\n            while j >= increment and my_list[j-increment] > my_list[j]:\n                # Swap the current element with the one that is being moved to its correct position\n                my_list[j-increment], my_list[j] = my_list[j], my_list[j-increment]\n                j -= increment\n        # Reduce the increment value\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    h = 1\n    \n    while h < n//3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            j = i\n            temp = my_list[i]\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            test_tup1[i] = test_tup1[i] & test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i],))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Initialize the variables to store the elementwise and tuples\n    elementwise_and = 0\n    tuple_and = (0, 0)\n\n    # Loop through the elements of the first tuple and check if each element is also present in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            elementwise_and += 1\n            tuple_and = tuple((test_tup1[i] and test_tup2[i], test_tup1[i] and test_tup2[i]))\n\n    # Return the elementwise and tuple\n    return elementwise_and, tuple_and"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup.append((test_tup1[i], test_tup2[i]))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x1 and x2 for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] & test_tup2[i]),)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_list = []\n    \n    # loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # check if both elements are True\n        if test_tup1[i] and test_tup2[i]:\n            # if both are True, append the tuple to the and_list\n            and_list.append((test_tup1[i], test_tup2[i]))\n            \n    return and_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters, a, b, and c, which are the coefficients of the parabola equation. \n    It uses the quadratic formula to find the directrix of the parabola. The quadratic formula states that \n    the directrix of the parabola is the point where the tangent line to the parabola crosses the line \n    through the origin. To find the point, we can use the following steps:\n\n    1. Find the quadratic equation: ax^2 + bx + c = 0\n    2. Solve the quadratic equation to get the discriminant: delta = b^2 - 4ac\n    3. Check if the discriminant is greater than zero. If it is, then there are two distinct solutions to the quadratic equation, and the directrix lies on the line between the points where the tangent lines cross.\n    4. If the discriminant is zero, then there is only one solution to the quadratic equation, and the directrix lies on the line where the tangent lines cross. In this case, we can use the quadratic formula to find the point on the line: x = (-b +/- sqrt(delta)) / (2a)\n    5. If the discriminant is negative, then there are two solutions to the quadratic equation, and the directrix lies on the line where the tangent lines cross. In this case, we can use the quadratic formula to find the two points on the line: x1 = (-b + sqrt(delta)) / (2a), and x2 = (-b - sqrt(delta)) / (2a).\n    6. Return the directrix as the point where the tangent line to the parabola crosses the line through the origin.\n\n    The function returns the directrix as a tuple (x, y) where x is the x-coordinate of the directrix and y is the y-coordinate of the directrix.\n    '''\n\n    # Use the quadratic formula to find the directrix\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x = (-b + delta**(1/2)) / (2*a)\n        y = (-b - delta**(1/2)) / (2*a)\n    elif delta == 0:\n        x = (-b) / (2*a)\n        y = (-b) / (2*a)\n    else:\n        x1 = (-b + delta**(1/2)) / (2*a)\n        x2 = (-b - delta**(1/2)) / (2*a)\n        x = x1\n        y = (-b) / (2*a)\n\n    return (x, y)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is negative, there is no real root\n    if disc < 0:\n        return \"No real root\"\n    \n    # If the discriminant is zero, there is one real root\n    elif disc == 0:\n        return -b / (2*a)\n    \n    # If the discriminant is positive, there are two real roots\n    else:\n        # Calculate the two real roots\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n        \n        # Return the two roots as a list\n        return [root1, root2]"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the determinant of the matrix A\n    detA = b ** 2 - 4 * a * c\n\n    # Check if the determinant is negative\n    if detA < 0:\n        # The directrix is undefined\n        return \"Undefined\"\n\n    # Calculate the two real solutions to the quadratic equation\n    x1 = (-b + detA ** 0.5) / (2 * a)\n    x2 = (-b - detA ** 0.5) / (2 * a)\n\n    # Sort the solutions in ascending order\n    if x1 > x2:\n        x1, x2 = x2, x1\n\n    # Return the directrix as the average of the two solutions\n    return (x1 + x2) / 2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function takes three parameters - a, b and c - which are the coefficients of the parabola.\n    The function then calculates the discriminant of the quadratic equation and returns the directrix.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return (-b - discriminant**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the coefficients of the equation\n    D = b**2 - 4*a*c\n    \n    # Check if the equation has real roots\n    if D < 0: \n        print(\"No real roots\")\n        return None\n    elif D == 0: \n        x = -b/2*a\n        print(\"One real root:\", x)\n        return x\n    else: \n        x1 = (-b + sqrt(D))/(2*a)\n        x2 = (-b - sqrt(D))/(2*a)\n        print(\"Two real roots:\", x1, x2)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the coefficients of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the two roots of the quadratic equation\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n\n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n\n        # Return the directrix of the parabola\n        return roots[0]\n    elif discriminant == 0:\n        # If the discriminant is zero, the directrix is a line\n        return (-b)/(2*a)\n    else:\n        # If the discriminant is negative, the directrix is outside the range of a parabola\n        return \"The directrix is outside the range of a parabola\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Compute the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if disc > 0:\n        root1 = (-b + (disc**0.5))/(2*a)\n        root2 = (-b - (disc**0.5))/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    else:\n        print(\"The discriminant is zero or negative. Therefore, the parabola has no unique directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    x1 = -b / (2 * a)  # root of the quadratic equation\n    x2 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)  # root of the quadratic equation\n\n    # calculate the directrix\n    dx1 = x1 - c\n    dx2 = x2 - c\n    d = dx1 * dx1 + dx2 * dx2\n\n    # sort the roots\n    roots = sorted([x1, x2])\n\n    return roots[0], roots[1], d"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set of all the elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there's at least one common element in the set\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Check if there is at least one common element in both lists\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for item in list1:\n        if item in list2:\n            common_elements.append(item)\n    return len(common_elements) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists have at least one element\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    # Check if any element in list1 is also in list2\n    for element in list1:\n        if element in list2:\n            return True\n\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # create a set from list1 and a set from list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there are any common elements in the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if they have at least one common element,\n    False otherwise.\n    \"\"\"\n    # We create a set from each list, and then we check if there is any intersection between them\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Loop through each element in list1 and list2\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    return len(common) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height <= 0:\n        print(\"Invalid height.\")\n        return\n    else:\n        area1 = 0.5 * base1 * height\n        area2 = 0.5 * base2 * height\n        total_area = area1 + area2\n\n        if total_area % 2 == 0:\n            median_length = 0.5 * (base1 + base2) * height\n        else:\n            median_length = 0.5 * (base1 + base2 + 0.5 * (base1 - base2)) * height\n\n        return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the area of the half-trapeziums\n    area_base1 = 0.5 * base1 * height\n    area_base2 = 0.5 * base2 * height\n\n    # calculate the lengths of the half-trapeziums\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n\n    # calculate the total length of the trapezium\n    total_length = half_base1 + half_base2\n\n    # calculate the area of the trapezium after accounting for the added length\n    area_with_added_length = area + area_base1 + area_base2\n\n    # calculate the difference between the total area and the area of the trapezium\n    area_difference = area_with_added_length - area\n\n    # calculate the median length of the trapezium\n    median_length = total_length - area_difference\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the first half of the trapezium\n    first_half = (area * base1) / 2.0\n\n    # Calculate the second half of the trapezium\n    second_half = (area * base2) / 2.0\n\n    # Calculate the maximum of the first half and second half\n    maximum = max(first_half, second_half)\n\n    # Calculate the minimum of the first half and second half\n    minimum = min(first_half, second_half)\n\n    # Calculate the difference between the maximum and minimum\n    difference = maximum - minimum\n\n    # Calculate the median of the trapezium\n    median = difference / 2.0\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium using the formula\n    # (base1 + base2) / 2 * height\n    trapezium_length = (base1 + base2) / 2 * height\n\n    # Calculate the lengths of the parallelograms\n    parallelogram1_length = base1\n    parallelogram2_length = base2\n\n    # Sort the lengths of the parallelograms in ascending order\n    parallelogram1_length, parallelogram2_length = sorted([parallelogram1_length, parallelogram2_length])\n\n    # Calculate the sum of the lengths of the parallelograms\n    sum_of_parallelograms = parallelogram1_length + parallelogram2_length\n\n    # Calculate the median of the sum of the parallelograms\n    median_of_parallelograms = sum_of_parallelograms / 2\n\n    # Calculate the distance between the two bases\n    distance_between_bases = base1 - base2\n\n    # Calculate the median of the trapezium length and the distances between the two bases\n    median_trapezium = max(trapezium_length, median_of_parallelograms) + distance_between_bases\n\n    # Return the median of the trapezium length\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n    median = area / height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    half_height = 0.5 * height\n    return (area - half_height) * 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1 + base2 + height)/2\n    if height % 2 == 0:\n        return 2 * s\n    else:\n        return s"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n        base1 (float): Length of the first base.\n        base2 (float): Length of the second base.\n        height (float): Height of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n    \"\"\"\n\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    mid_area = area / 2\n\n    if height % 2 == 0:\n        median_length = 0.5 * (base1 + base2)\n    else:\n        median_length = base1\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n\n    # Calculate the length of the longest side of the trapezium\n    longest_side = max(side1, side2)\n\n    # Calculate the length of the shortest side of the trapezium\n    shortest_side = min(side1, side2)\n\n    # Calculate the ratio of the longest side to the shortest side\n    ratio = longest_side / shortest_side\n\n    # Calculate the length of the trapezium's base\n    base = longest_side * ratio\n\n    # Calculate the length of the trapezium's height\n    height = longest_side\n\n    # Return the median length of the trapezium\n    return median(area, height)\n\n\ndef median(a, b):\n    \"\"\"\n    Calculate the median of two numbers.\n    \"\"\"\n    return (a + b) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three parameters: base1, base2, and height.\n    It calculates and returns the median length of a trapezium with \n    given base1, base2, and height.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the height of the trapezium\n    height_trapezium = area / (base1 + base2)\n\n    # Calculate the area of the base\n    base_area = 0.5 * height * height\n\n    # Calculate the number of trapeziums\n    num_trapeziums = 2\n\n    # Calculate the area of the base\n    base_area = 0.5 * height * height\n\n    # Calculate the area of the upper and lower trapeziums\n    area_upper = 0.5 * height * height\n    area_lower = 0.5 * height_trapezium * height_trapezium\n\n    # Calculate the area of the central trapezium\n    area_central = area_upper - area_lower\n\n    # Calculate the length of the central trapezium\n    length_central = 0.5 * (area_central / (num_trapeziums - 1))\n\n    # Calculate the median length of the trapezium\n    median_length = length_central * num_trapeziums\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the elements in the array.\")\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}\")\n            return True\n        elif element == number:\n            print(f\"{number} is equal to {element}\")\n            return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function will match a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b+)'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_match_one(text):\n    pattern = re.compile(r'a(b\\w*)+')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a+b+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:(?!b).)*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # getting the last digit of the number using modulus operator\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    # converting the input number to string to extract the last digit\n    last_digit = str(n)[-1]\n    # returning the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store the negative numbers\n    neg_list = []\n    # Iterate through the list of numbers\n    for num in list1:\n        # If the number is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # Return the neg_list with the negative numbers\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert the string to a list of characters\n    lst1 = list(str1)\n    # initialize an empty string\n    str2 = ''\n    # loop through each character in the list\n    for char in lst1:\n        # check if the character is odd (i.e., greater than 0)\n        if char % 2 == 1:\n            # if it is, add it to the new string\n            str2 += char\n    # return the new string\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return \"\".join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a given string.\n    \"\"\"\n    return ''.join([char for char in string if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isdigit():\n            result += char\n        elif char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with odd characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isalnum() and char % 2!= 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] < test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] in test_list[j]) and (test_list[j] in test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Iterate through each tuple in the test_list\n    for i, tup in enumerate(test_list):\n\n        # Get the second element of the tuple\n        second_element = tup[1]\n\n        # Check if the second element is already in the dictionary\n        if second_element in count_dict:\n\n            # Increment the count of the first tuple\n            count_dict[second_element] += 1\n\n        # If the second element is not in the dictionary, add it and set its count to 1\n        else:\n            count_dict[second_element] = 1\n\n    # Initialize a variable to store the count of bidirectional tuple pairs\n    bidirectional_count = 0\n\n    # Iterate through each tuple in the test_list\n    for i, tup in enumerate(test_list):\n\n        # Get the second element of the tuple\n        second_element = tup[1]\n\n        # Check if the second element is already in the dictionary\n        if second_element in count_dict:\n\n            # Check if the count of the second element is greater than 1\n            if count_dict[second_element] > 1:\n\n                # Increment the bidirectional_count\n                bidirectional_count += 1\n\n    # Return the bidirectional_count\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Loop through the list from the next index to the end\n        for j in range(i+1, len(test_list)):\n            # Check if the tuples are bidirectional\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n    \n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                    bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if num > 1:\n            total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer += num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the list\n    total = 0\n    \n    # Iterate through the list of integers\n    for num in L:\n        # Add the integer to the total\n        total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        L[0] = L[0] * 10 + L[1]\n        L.pop(1)\n        return multiple_to_single(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the single integer\n    result = 0\n    \n    # Iterate over the list and add each multiple integer to the result\n    for num in L:\n        result += num\n    \n    # Return the single integer\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all the integers in the list\n    total = 0\n\n    # Iterate through the list of integers\n    for i in L:\n        # Check if the integer is a multiple of 3 or 4\n        if i % 3 == 0 or i % 4 == 0:\n            # If it is, add it to the total\n            total += i\n\n    # Return the single integer that is the sum of all multiples of 3 and 4 in the list\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"\\b(also|also known as|although|altho|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|although|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*\\'s\\b', text, re.IGNORECASE)\n    # Check if there are any adverbs\n    if not adverbs:\n        return \"No adverbs found in the sentence.\"\n\n    # Find the position of the first adverb\n    for i, adverb in enumerate(adverbs):\n        if i == 0:\n            adverb_position = i + 1\n        else:\n            adverb_position = i + 1\n\n    # Return the first adverb and its position\n    return f\"The first adverb is '{adverb}' and its position in the sentence is {adverb_position}.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match an adverb\n    pattern = r'\\b\\w*ing\\b|\\b\\w*ed\\b'\n\n    # Find all the matches of the regular expression pattern in the given sentence\n    matches = re.findall(pattern, text)\n\n    # Iterate over all the matches and find the positions of the adverbs\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return a list of tuples containing the adverbs and their positions\n    return [(match, position) for match, position in zip(matches, positions)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to match adverbs\n    pattern = r'\\b([a-z]+)([aeiou])\\b'\n    \n    # Find all matches in the sentence\n    matches = re.findall(pattern, text)\n    \n    # Sort the matches by their positions\n    matches.sort(key=lambda x: x[0])\n    \n    # Return the sorted matches\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(?:[a-z]+)(?:\\'s)?\\b'\n    # Find all the matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n    # Iterate over the matches and store the adverbs and their positions in the list\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        adverbs.append((adverb, position))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a pattern for matching adverbs\n    pattern = r\"\\b(\\w+)(\\w*)\\b\"\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and find the first adverb and its positions\n    for match in matches:\n        # Check if the first word is an adverb\n        if match[0] in [\"not\", \"so\", \"very\", \"just\", \"rather\", \"only\", \"justly\"]:\n            # Store the adverb and its position in a dictionary\n            adverbs = {}\n            adverbs[match[0]] = (match.start(), match.start() + len(match[0]))\n            \n            # Loop through the remaining words in the match and find their positions\n            for i in range(1, len(match)):\n                # Check if the i-th word is an adverb\n                if match[i] in [\"not\", \"so\", \"very\", \"just\", \"rather\", \"only\", \"justly\"]:\n                    # Store the adverb and its position in the dictionary\n                    adverbs[match[i]] = (match.start() + i, match.start() + i + len(match[i]))\n            \n            # Return the dictionary of adverbs and their positions\n            return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b', text, re.IGNORECASE)\n    \n    # Find their positions in the sentence\n    adverb_positions = []\n    for i, word in enumerate(text.split()):\n        if word in adverbs:\n            adverb_positions.append(i)\n    \n    # If no adverbs are found, return None\n    if len(adverb_positions) == 0:\n        return None\n    \n    # Find the first adverb\n    first_adverb = adverbs[0]\n    \n    # Find the positions of all the adverbs\n    all_adverb_positions = adverb_positions\n    \n    # Remove the first adverb from all_adverb_positions\n    all_adverb_positions.remove(adverb_positions[0])\n    \n    # Find the positions of all the adverbs after the first adverb\n    after_first_adverb_positions = adverb_positions[:adverb_positions.index(adverb_positions[0])]\n    \n    # Find the positions of all the adverbs before the first adverb\n    before_first_adverb_positions = adverb_positions[adverb_positions.index(adverb_positions[0])+1:]\n    \n    # Return the first adverb, its position and the positions of all the adverbs after and before the first adverb\n    return first_adverb, adverb_positions[0], all_adverb_positions, after_first_adverb_positions, before_first_adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b|\\b\\w+ful\\b|\\b\\w+fully\\b', text)\n    \n    # find the position of the first adverb\n    if adverbs:\n        first_adverb = adverbs[0]\n        position = text.lower().index(first_adverb.lower()) + 1\n    else:\n        first_adverb = 'None'\n        position = 0\n    \n    # return the result\n    return first_adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the pattern to match adverbs\n    pattern = r'\\b\\w*[a-z]+\\w*[a-z]\\w*ed\\w*\\b'\n\n    # find all occurrences of adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # check if there are any matches\n    if matches:\n        # loop through each match and extract the position of the adverb\n        for match in matches:\n            # extract the position of the adverb\n            position = text.find(match)\n            # print the position of the adverb\n            print(position)\n    else:\n        # print a message if there are no matches\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*ing\\b', text.lower())\n    \n    # Check if there are any adverbs\n    if not adverbs:\n        return None\n    \n    # Find the position of the first adverb\n    first_adverb_position = len(text) - len(adverbs[0]) - 1\n    \n    return adverbs[0], first_adverb_position"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l) + (l * l * l) + (l * l * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    surface_area = (4/3) * math.pi * l * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Given an array of integers, count the number of positive numbers in the array.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    float: The ration of positive numbers in the array.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            positive_count += 1\n    return positive_count / len(arr)\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\nclass List:\n    def __init__(self):\n        self.arr = array('i') # use an integer array\n\n    def append(self, item):\n        self.arr.append(item)\n\n    def __len__(self):\n        return len(self.arr)\n\n    def __getitem__(self, index):\n        return self.arr[index]\n\n    def __setitem__(self, index, value):\n        self.arr[index] = value"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = array('i') # create an array to store positive numbers\n    negative_num = array('i') # create an array to store negative numbers\n    zero_num = array('i') # create an array to store zero numbers\n\n    for num in nums:\n        if num > 0:\n            positive_num.append(num) # append positive numbers to the positive array\n        elif num < 0:\n            negative_num.append(num) # append negative numbers to the negative array\n        else:\n            zero_num.append(num) # append zero numbers to the zero array\n\n    if len(positive_num) > 0:\n        positive_ratio = len(positive_num) / (len(positive_num) + len(negative_num) + len(zero_num))\n    else:\n        positive_ratio = 0\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list so that we can use list operations\n    nums_list = list(nums)\n\n    # Count the number of positive numbers\n    positive_count = 0\n    for num in nums_list:\n        if num > 0:\n            positive_count += 1\n\n    # Calculate the ration of positive numbers\n    positive_ratio = positive_count / len(nums_list)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = array('i', [0]) # initialize an array to store the count of positive numbers\n    for num in nums:\n        if num > 0:\n            positive_count.itemset(0, positive_count[0] + 1) # increment the count by 1 if the number is positive\n    return positive_count[0] / len(nums) # calculate and return the ration of positive numbers"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Count the number of positive numbers in the list\n    count = 0\n    for num in nums_list:\n        if num > 0:\n            count += 1\n    \n    # Calculate the ratio of positive numbers\n    ratio = count / len(nums_list)\n\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < 0 and lst[i] > largest:\n            largest = lst[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1: \n        if num < 0 and (largest is None or num > largest): \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initialize the largest negative number to negative infinity\n    for num in list1: \n        if num < 0: # if the number is negative\n            if num > largest: # if the number is greater than the current largest negative number\n                largest = num # update the largest negative number\n    return largest # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # Initialize the largest negative number to be the smallest possible integer\n    largest = float('-inf')\n\n    # Iterate through the list and check if the current number is negative\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n\n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_max = -1000  # initial value for largest negative number\n    for num in list1:\n        if num < 0 and num > neg_max:\n            neg_max = num\n    return neg_max"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf') # initialize largest_num to negative infinity\n    for num in list1: \n        if num < 0 and num > largest_num: \n            largest_num = num # update largest_num if the current number is greater than it\n    return largest_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K] + test_list[i][K:]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[K:])\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(K):\n            if j < len(test_list[i]):\n                temp.append(test_list[i][j])\n        test_list[i] = tuple(temp)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize a list to store trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Initialize a list to store elements in the tuple\n        elements = []\n        # Loop through each element in the tuple\n        for elem in tup:\n            # If the length of the tuple is less than k, append the whole tuple to the list\n            if len(tup) < K:\n                elements.append(tup)\n            # If the length of the tuple is greater than or equal to k, trim the tuple to k elements\n            else:\n                elements.append(elem)\n        # Create a new tuple from the trimmed elements and append it to the list of trimmed tuples\n        trimmed_list.append(tuple(elements))\n    # Return the list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(test_list[i][:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K] + (test_list[i][K:],)\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: The two tuples must have the same length.'\n    # initialize a new tuple with the same length as the original tuples\n    result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i] * test_tup2[i])\n    return multiplication_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple to a set so that duplicates are automatically removed\n    unique_set = set(tup)\n\n    # Convert the list to a set so that duplicates are automatically removed\n    unique_lst = set(lst)\n\n    # Count the frequency of each unique element in the tuple\n    freq = Counter(unique_set)\n\n    # Filter the elements in the list that appear in the tuple\n    filtered_list = [x for x in unique_lst if x in unique_set]\n\n    # Count the frequency of each unique element in the filtered list\n    freq_filtered = Counter(filtered_list)\n\n    # Merge the two dictionaries using the `update` method to get the final count\n    count_dict = dict(freq)\n    count_dict.update(dict(freq_filtered))\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for i in lst: \n        if i in counter: \n            counter[i] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n    \n    # loop through the tuple and update the count_dict with the count of each element\n    for element in tup:\n        count_dict[element] = count_dict.get(element, 0) + 1\n    \n    # loop through the list and update the count_dict with the count of each element\n    for element in lst:\n        count_dict[element] = count_dict.get(element, 0) + 1\n    \n    # create a list to store the final count of each element in the tuple\n    final_count = []\n    \n    # loop through the count_dict and update the final_count with the count of each element\n    for element, count in count_dict.items():\n        final_count.append(count)\n    \n    # return the final_count list\n    return final_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in lst: \n        count[i] += 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n\n    # Using Counter class to count the occurrences of each element in the list in the tuple\n    count = Counter(tup) \n\n    # Iterating over the keys in the dictionary to find the elements that are present in the tuple and not in the list\n    missing_elements = set(tup).difference(set(lst)) \n\n    # Calculating the sum of the occurrences of each missing element in the list\n    missing_occurrences = 0\n    for element in missing_elements: \n        missing_occurrences += count[element] \n\n    # Returning the sum of the missing occurrences and the sum of the occurrences in the tuple\n    return missing_occurrences + sum(count.values()) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in tup:\n        count_dict[element] = count_dict.get(element, 0) + 1\n    \n    for element in lst:\n        count_dict[element] = count_dict.get(element, 0) - 1\n        \n    return Counter(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for i in tup:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n\n    # Loop through the tuple and count the occurrence of each element in the list\n    for element in tup: \n        if element in lst: \n            count_dict[element] = count_dict.get(element, 0) + 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a set to remove duplicates and sort the elements in the set\n    set_tup = set(tup)\n    set_lst = set(lst)\n    # count the occurrence of each element in the set_lst\n    count_dict = Counter(set_lst)\n    # add the occurrence count of each element in the set_tup to the count_dict\n    for elem in set_tup:\n        count_dict[elem] += tup.count(elem)\n    # convert the count_dict to a list of tuples\n    count_lst = [(k, v) for k, v in count_dict.items()]\n    # sort the list of tuples in ascending order based on the second element of each tuple\n    count_lst.sort(key=lambda x: x[1])\n    # return the sorted list of tuples\n    return count_lst\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store the cubes of individual elements\n    cubes = []\n    # Loop through each element in the list\n    for num in nums:\n        # Calculate the cube of the current element and append it to the cubes list\n        cubes.append(num ** 3)\n    # Return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i*i)**4\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(n):\n        perrin_sum += i*i*i\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824]\n    total = 0\n    for num in perrin_numbers:\n        total += num\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i * 2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * (i + 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n perrin numbers.\n    \"\"\"\n    sum_of_perrin = 0\n    for i in range(1, n+1):\n        sum_of_perrin += i**3\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        p += i\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n        else:\n            result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a list of string values.\n\n    Parameters:\n    str_list (list): list of string values\n    size (int): the size of the extracted strings\n\n    Returns:\n    list: list of extracted strings\n    '''\n    result = []\n    for string in str_list:\n        result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            result.append(l[i])\n        else:\n            result.append(str[:l[i]])\n            str = str[l[i]:]\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and an integer as input and returns a new list containing the extracted strings.\n    '''\n    str_list = [x for x in str_list if len(x) > l]\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in l:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), l):\n        result.extend(str_list[i:i+l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for item in l:\n        if len(item) == l:\n            result.append(item)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)+len(str)])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    # return the cleaned string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    # Remove multiple consecutive whitespaces\n    text4 = re.sub(r'\\s+','', text3)\n    # Return the modified string\n    return text4"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 10 # This is the loss percentage on the sale. Change this as per your requirement.\n    loss_amount = actual_cost * (loss_percent/100) - sale_amount\n    if loss_amount <= 0:\n        return 0\n    else:\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss = sale_amount - actual_cost \n    else: \n        loss = 0 \n    return loss "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # loop through all numbers from 2 to sqrt(n)\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if i is evenly divisible by n\n        if n % i == 0:\n            # if it is, add it to the total\n            if i % 2 == 0:\n                total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            even_sum += i\n    if n > 2:\n        even_sum += n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_even_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and n % i == 2:\n            sum_of_even_factors += i\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (i+2) == 0:\n                sum += i+2\n            else:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0 \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            total += i \n    return total "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # create a regular expression pattern to match words containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    \n    # search for all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return a list of all matching words\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]\\w*[zZ]\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function will match a word containing 'z'.\n    '''\n    # Use regular expressions to find all occurrences of the word 'z' in the text\n    match_list = re.findall(r'\\b\\w+z\\b', text.lower())\n    \n    # Return the list of matches if it exists, otherwise return None\n    return match_list if match_list else None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_match_wordz(text):\n    pattern = re.compile(r'\\b(z)\\w+\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define regular expression pattern to match word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    # find all occurrences of pattern in text using re.findall()\n    matches = re.findall(pattern, text)\n    # return list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a boolean value True if the string contains a word that contains 'z', False otherwise.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns True if there is a word that contains 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b' # Regular expression pattern to match words containing 'z'\n    result = re.search(pattern, text) # Search for the pattern in the input string\n    if result: # If the pattern is found\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern for matching 'z' in a word\n    pattern = r'\\b[zZ]\\w+\\b'\n    # Search the given text for the pattern using the re.search() function\n    match = re.search(pattern, text)\n    # If a match is found, return the matched text\n    if match:\n        return match.group()\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 in [4, 6, 9, 11]:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                days[1] = 29\n        elif monthnum2 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                days[1] = 29\n            elif year % 4 == 0:\n                days[1] = 28\n        return days[monthnum2-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    elif monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return \"February has 29 days\"\n    else:\n        return \"February has 28 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in ['1', '3', '5', '7', '8', '10', '12']:\n        return False\n    elif monthnum in ['4', '6', '9', '11']:\n        return True\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in ['1', '3', '5', '7', '8', '10', '12']:\n        return False\n    elif monthnum in ['4', '6', '9', '11']:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Find the length of the shortest sublist\n    min_len = len(lst)\n    shortest_sublist = None\n    \n    # Loop through the list\n    for sublist in lst:\n        \n        # Calculate the length of the current sublist\n        sublist_len = len(sublist)\n        \n        # If the length is less than the current minimum length, update the variables\n        if sublist_len < min_len:\n            min_len = sublist_len\n            shortest_sublist = sublist\n    \n    # Return the shortest sublist\n    return shortest_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    This function takes a list of sublists and returns the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum length as infinity\n    min_len = float('inf')\n    \n    # Initialize minimum sublist as empty list\n    min_sublist = []\n    \n    # Iterate over all sublists in lst\n    for i in range(len(lst)):\n        # Find the length of the sublist starting from index i\n        sublist_len = len(lst[i])\n        \n        # If the length of the sublist is less than minimum length, update the minimum length and the minimum sublist\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_sublist = lst[i]\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # initialize min_length to infinity\n    min_length = float('inf')\n    \n    # initialize min_lst to an empty list\n    min_lst = []\n    \n    # iterate through the list\n    for sublist in lst:\n        \n        # check if the length of the sublist is less than min_length\n        if len(sublist) < min_length:\n            \n            # update min_length and min_lst if the length of the sublist is less than min_length\n            min_length = len(sublist)\n            min_lst = sublist\n    \n    # return the minimum length sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    min_sublist = []  # initialize empty list to store minimum sublist\n    for sublist in lst: \n        if len(sublist) < min_length:  # check if sublist has smaller length\n            min_length = len(sublist)  # update minimum length if necessary\n            min_sublist = sublist  # update minimum sublist if necessary\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define the pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # replace all uppercase substrings with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile(r'(?<!\\w)(?i)[A-Z]{2,}(?!\\w)')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings using regex\n    pattern = r'[A-Z]+'\n    str1 = re.sub(pattern, '', str1)\n    \n    # Remove leading and trailing spaces\n    str1 = str1.strip()\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to remove uppercase substrings\n    str1 = re.sub(r'\\b[A-Z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\w+\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile(r'(?i)\\b[A-Z]\\w*\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n\n    # Loop through each uppercase substring and remove it from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern for uppercase substrings\n    uppercase_pattern = r'[A-Z]+'\n    # use the re.sub() method to replace all occurrences of uppercase substrings with an empty string\n    return re.sub(uppercase_pattern, '', string)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for sublist in lst for x in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a list of the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + [sublist[0] for sublist in lst[1:]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        print(sublist[0]) \n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize count variable to zero\n    count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # if the character is uppercase, increment count\n        if char.isupper():\n            count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of all possible combinations of length k from list1\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            print(list1[j:j+i])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        first_element = list1[0]\n        remaining_elements = list1[1:]\n        result = []\n        for elem in combinations_list(remaining_elements):\n            result.append([first_element] + elem)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            temp_list = list1[:i] + list1[i+1:]\n            comb = combinations_list(temp_list)\n            for item in comb:\n                result.append([list1[i]] + item)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case\n    if len(list1) == 0:\n        return []\n    # Recursive case\n    else:\n        first_element = list1[0]\n        rest_of_list = list1[1:]\n        first_combinations = combinations_list(rest_of_list)\n        second_combinations = []\n        for combination in first_combinations:\n            second_combinations.append([first_element] + combination)\n        return second_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        print(\"List must have at least 2 elements\")\n        return\n\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the length of the list\n    n = len(list1)\n\n    # Initialize the number of elements in each combination\n    k = 2\n\n    # Generate all combinations of length k using recursion\n    def helper(start, end):\n        # Base case: If start is greater than or equal to end, we have found all combinations\n        if start >= end:\n            # Convert the indices of the list to a tuple\n            indices = tuple(list1[i] for i in range(start, end+1))\n            # Append the tuple to the result list\n            result.append(indices)\n            # Print the tuple if it's the first one\n            if start == 0:\n                print(indices)\n        # Recursive case: Generate combinations of length k from start to end\n        else:\n            # Generate combinations of length k-1 from start+1 to end\n            helper(start+1, end)\n            # Generate combinations of length k-1 from start to end-1\n            helper(start, end-1)\n\n    # Call the helper function to generate all combinations\n    helper(0, n-1)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n            max_ending_here = 1\n        else:\n            current_product *= arr[i]\n            max_ending_here = max(max_ending_here * arr[i], current_product)\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        curr_product = max(num, curr_product * num)\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product < 0:\n            current_product = 1\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n\n        if max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n            \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if not arr or len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n        if current_product < 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')  # initialize max_product as negative infinity\n    max_ending_here = 1  # initialize max_ending_here as 1\n    min_ending_here = 1  # initialize min_ending_here as 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:  # if the current element is positive\n            max_ending_here *= arr[i]  # update max_ending_here\n        else:  # if the current element is negative\n            min_ending_here *= arr[i]  # update min_ending_here\n            max_ending_here = max(max_ending_here, min_ending_here)  # update max_ending_here\n\n        max_product = max(max_product, max_ending_here)  # update max_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for value in dict.values():\n        if value!= dict[value]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < n:\n        return False\n    else:\n        for val in dict.values():\n            if val!= dict[next(iter(dict))]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(dict) == 1:\n        for k, v in dict.items():\n            if v!= dict[k]:\n                return False\n        return True\n    for k, v in dict.items():\n        if v!= dict[k]:\n            return False\n    return check_value(dict, n-1)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input and returns True if all the values in the dictionary are same, otherwise it returns False.\n    '''\n    values = []\n    for i in range(len(dict)):\n        values.append(dict[i])\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary as input and checks if all the values are same or not.\n    '''\n    # get all the values in the dictionary\n    values = list(dict.values())\n    # check if all the values are same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        if n == dict[n]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if all values are same in the dictionary\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in range(n):\n        if i in dict:\n            values.append(dict[i])\n        else:\n            return False\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(x == n for x in dict.values())"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None and value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '' and value!='':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the maximum subarray ending at index i\n    def max_ending_here(i):\n        if i == 0:\n            return arr[0]\n        else:\n            return max(arr[i], arr[i] * max_ending_here(i - 1))\n\n    # Find the maximum product formed by multiplying numbers of an increasing subsequence\n    def max_product_increasing_subsequence(i):\n        if i == n - 1:\n            return arr[i]\n        else:\n            return max(arr[i] * max_product_increasing_subsequence(i + 1), max_ending_here(i))\n\n    return max_product_increasing_subsequence(0)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:  # base case\n        return 0\n    elif len(arr) == 1:  # special case\n        return arr[0]\n    else:  # recursive case\n        max_left = max_product(arr[1:])\n        max_right = max_product(arr[:-1])\n        max_product = max(arr[0] * max_left, arr[-1] * max_right)\n        return max(max_product, arr[0] * max_right, arr[-1] * max_left)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = arr[i]\n\n    return max(max_product, current_product)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    def prefix_product(arr, prefix=1):\n        for i in range(1, len(arr)):\n            arr[i] *= prefix\n            prefix *= arr[i]\n        return prefix\n    \n    def max_product_increasing_subsequence(arr, prefix):\n        max_product = float('-inf')\n        current_product = prefix\n        for i in range(len(arr)):\n            current_product *= arr[i]\n            max_product = max(max_product, current_product)\n            prefix *= arr[i]\n        return max_product\n    \n    prefix = prefix_product(arr)\n    return max_product_increasing_subsequence(arr, prefix)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    min_so_far = float('inf')\n\n    for i in range(n):\n        if arr[i] > max_so_far:\n            max_product = max(max_product, max_so_far * arr[i])\n            max_so_far = arr[i]\n        else:\n            max_product = max(max_product, max_so_far * arr[i])\n            max_so_far = max(max_so_far, arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_ending_here = max(max_ending_here, arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n\n    return max_ending_here * min_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    def max_product_helper(start, end):\n        if start == end:\n            return arr[start]\n\n        max_so_far = float('-inf')\n        max_ending_here = float('-inf')\n\n        for i in range(start, end+1):\n            max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far\n\n    max_ending_here = float('-inf')\n    for i in range(n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    max_prod = float('-inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = arr[i] * arr[j]\n            \n            if i < j:\n                dp[i][j] += max(dp[i][k] * dp[k+1][j] for k in range(i, j))\n            \n            max_prod = max(max_prod, dp[i][j])\n            \n    return max_prod"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    total = 0\n    for i in range(n-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the pairwise additions\n    pairwise_additions = []\n    \n    # loop through the tuple and calculate the pairwise addition of each adjacent elements\n    for i in range(len(test_tup)-1):\n        pairwise_addition = test_tup[i] + test_tup[i+1]\n        pairwise_additions.append(pairwise_addition)\n    \n    return pairwise_additions"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    n = len(test_tup)\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        print(test_tup[i] + test_tup[i+1])\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of the neighboring elements\n    sum_neighb = 0\n    \n    # Loop through the tuple and add the pairwise sums to the sum_neighb variable\n    for i in range(len(test_tup)-1):\n        sum_neighb += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum_neighb variable\n    return sum_neighb"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to zero\n    sum_pairwise = 0\n    # Loop through the tuple and add the neighboring elements together\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    # Return the sum\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 'Tuple must have at least two elements.'\n    \n    result = 0\n    \n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments, arr and n. \n    arr is the array of integers and n is the modulo value.\n    The function returns the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)): \n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array `arr` and an integer `n` as input. It calculates the product of the array's elements and returns the remainder when divided by `n`.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number n as input and returns the product of the\n    array multiplication modulo n.\n\n    Args:\n        arr: list of integers\n        n: an integer\n\n    Returns:\n        product: an integer\n\n    \"\"\"\n    # initialize the product variable to 1\n    product = 1\n\n    # iterate through the array and multiply each element by the product variable\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the list is empty\n    if not l:\n        return False\n\n    # initialize two variables to keep track of the previous and current numbers in the list\n    prev_num = l[0]\n    current_num = l[0]\n\n    # loop through the list and check if each number is consecutive\n    for num in l[1:]:\n        if num - prev_num == 1:\n            current_num = num\n        else:\n            return False\n\n        prev_num = current_num\n\n    # if we made it through the loop without finding any consecutive numbers, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list of integers as input and returns True if the list contains consecutive numbers or False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    prev = None\n    for i in l:\n        if prev is not None and i == prev + 1:\n            return True\n        prev = i\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    # loop through the list and compare each consecutive pair of numbers\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, else False.\n    '''\n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, and False otherwise.\n    '''\n    if len(l) == 0:\n        return False\n    if l[0] == l[-1]:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a dictionary to store the count of each element in test_list1\n    count_dict1 = {}\n    for item in test_list1:\n        if item in count_dict1:\n            count_dict1[item] += 1\n        else:\n            count_dict1[item] = 1\n\n    # Create a dictionary to store the count of each element in test_list2\n    count_dict2 = {}\n    for item in test_list2:\n        if item in count_dict2:\n            count_dict2[item] += 1\n        else:\n            count_dict2[item] = 1\n\n    # Find the intersection of the two dictionaries\n    intersection_dict = {key: min(count_dict1[key], count_dict2[key]) for key in count_dict1 if key in count_dict2}\n\n    # Convert the intersection dictionary to a list\n    intersection_list = list(intersection_dict.items())\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists into sets\n    list1 = set(test_list1)\n    list2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = list1.intersection(list2)\n\n    # convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for element1 in test_list1:\n        for element2 in test_list2:\n            if element1 == element2:\n                result.append(element1)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of unique elements from both the lists\n    unique_set = set(test_list1) & set(test_list2)\n\n    # Create a list of tuples containing the intersection of unique elements from both the lists\n    intersection_list = [(x, y) for x in test_list1 for y in test_list2 if (x, y) in unique_set]\n\n    # Return the list of tuples\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    # Loop through each element in the first list\n    for element1 in test_list1:\n        # Loop through each element in the second list\n        for element2 in test_list2:\n            # If the elements are equal, add it to the common set\n            if element1 == element2:\n                common_set.add(element1)\n                break\n    # Return the common set as a tuple\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements of test_list1\n    unique_elements = set()\n    # Loop through test_list1 and add unique elements to unique_elements\n    for element in test_list1:\n        if element not in unique_elements:\n            unique_elements.add(element)\n    \n    # Initialize an empty set to store the intersection of unique elements in test_list1 and test_list2\n    intersection_set = set()\n    # Loop through unique elements in test_list1 and add the elements that are present in both test_list1 and test_list2 to intersection_set\n    for element in unique_elements:\n        if element in test_list1 and element in test_list2:\n            intersection_set.add(element)\n    \n    # Convert intersection_set to a tuple and return it\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    # Creating a set from test_list2 to avoid duplicates\n    set_test_list2 = set(test_list2)\n\n    # Looping through test_list1\n    for item in test_list1:\n        # If item is in set_test_list2, then append it to intersection\n        if item in set_test_list2:\n            intersection.append(item)\n\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    # convert test_list1 and test_list2 into sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # check if all elements in set1 are present in set2\n    for i in set1:\n        if i in set2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store the unique elements of the two input lists\n    unique_set = set(test_list1 + test_list2)\n    # Create an empty list to store the intersection of the unique elements\n    intersection = []\n    # Loop through the unique elements in the set\n    for element in unique_set:\n        # Check if the element is present in both lists\n        if element in test_list1 and element in test_list2:\n            # If it is present in both lists, append it to the intersection list\n            intersection.append(element)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # replace the character in the string\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the target character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by values in descending order\n    sorted_dict = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the counter object by value in descending order\n    sorted_counter = counter.most_common()\n    sorted_counter.sort(key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted counter object back to a dictionary\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Counter object to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the counter by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with the sorted values as keys\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    max_val = nums[0]\n    min_val = nums[0]\n\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize largest and smallest values to be the first and last elements of the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array starting from the second element\n    for i in range(1, len(nums)):\n        # If the current element is greater than the current largest value, update the largest value\n        if nums[i] > largest:\n            largest = nums[i]\n            \n        # If the current element is less than the current smallest value, update the smallest value\n        if nums[i] < smallest:\n            smallest = nums[i]\n            \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # return the sum of the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest value in the given array\n    max_value = max(nums)\n    min_value = min(nums)\n    \n    # calculate the sum of the largest and smallest values\n    result = max_value + min_value\n    \n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Use the `lower()` method to convert the string to lower case.\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # remove lowercase substrings using regex\n    string = re.sub(r'[a-z]+', '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the re.findall() function to find all lowercase substrings\n    matches = re.findall(pattern, string)\n\n    # Remove the matches from the string using the replace() method\n    string = re.sub(pattern, '', string)\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns the string with all lowercase substrings removed.\n    '''\n    # Define a regular expression to match all lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the search() method to find all lowercase substrings in the input string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the input string\n    str2 = re.sub(pattern, '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # split the string into lowercase and uppercase substrings\n    substrings = re.findall(r'[a-z]+', str1)\n    # join the lowercase substrings into one string\n    lowercase_str = ''.join(substrings)\n    # replace all the lowercase substrings with an empty string\n    cleaned_str = re.sub(r'\\b[a-z]+\\b', '', str1)\n    # append the lowercase substrings from the original string to the cleaned string\n    cleaned_str += lowercase_str\n    return cleaned_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    # Remove all lowercase substrings\n    pattern = r'([a-z]){1,}'\n    result = re.sub(pattern, r'\\1', string)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub('[a-z]+', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the given string\n    lowercase_pattern = r'[a-z]+'\n    result = re.sub(lowercase_pattern, '', string)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the input number to a string and split it into its individual digits\n    digits = str(n)\n    # convert the first digit to an integer\n    first_digit = int(digits[0])\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to string\n    num_str = str(n)\n    # Find the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Extract the first digit of the given number\n    first_digit = n % 10\n    \n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if type(n)!= int:\n        raise TypeError(\"Input must be an integer.\")\n    elif n < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    else:\n        return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the first digit of the number.\n    \"\"\"\n    # Check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Find the first digit of the number\n    first_digit = n % 10\n    \n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a number\n    if not isinstance(n, (int, float)):\n        print(\"Input is not a number\")\n        return None\n    \n    # Convert the number to a string\n    n = str(n)\n    \n    # Find the first digit of the string\n    first_digit = n[0]\n    \n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the input is a number\n    if not isinstance(n, int):\n        raise ValueError('Input must be an integer.')\n\n    # get the first digit\n    digit = n % 10\n\n    # return the first digit\n    return digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0: #checking if the number is odd\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # Initialize an empty list to store the odd numbers\n    odd_lst = []\n    \n    # Iterate over each number in the input list\n    for num in lst:\n        # If the number is odd, add it to the odd list\n        if num % 2!= 0:\n            odd_lst.append(num)\n    \n    # Return the odd list\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to calculate the sum of cubes\n    def sum_cubes(n):\n        \"\"\"\n        Function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i ** 3\n        return sum\n    \n    # Function to calculate the sum of natural numbers\n    def sum_natural(n):\n        \"\"\"\n        Function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    # Calculating the sum of cubes and natural numbers\n    sum_cubes_n = sum_cubes(n)\n    sum_natural_n = sum_natural(n)\n    \n    # Calculating the difference between the sums\n    diff = sum_cubes_n - sum_natural_n\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([num**3 for num in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # calculate the sum of the first n natural numbers\n    sum_of_natural = 0\n    for i in range(1, n+1):\n        sum_of_natural += i\n\n    # find the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural\n\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Find the sum of first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # Calculate the difference\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = [num**3 for num in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    \n    # Calculate the sum of the first n natural numbers\n    natural_numbers = [num for num in range(1, n+1)]\n    sum_natural_numbers = sum(natural_numbers)\n    \n    # Find the difference between the sum of cubes and sum of natural numbers\n    difference = sum_cubes - sum_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(n+1)]\n    sum_cubes = sum(cubes)\n    first_n = [i for i in range(n+1)]\n    sum_first_n = sum(first_n)\n    return sum_cubes - sum_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i*i*i\n        sum_natural += i+1\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [i**3 for i in range(1, n+1)]\n    first_n = [i for i in range(1, n+1)]\n    sum_of_cubes = sum(cubes)\n    sum_of_first_n = sum(first_n)\n    return sum_of_cubes - sum_of_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = 0\n    natural_sum = 0\n    for i in range(n):\n        cubes_sum += i*i*i\n        natural_sum += i\n    return cubes_sum - natural_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Count the number of pairs whose xor value is odd\n    odd_count = 0\n\n    # Iterate through the elements of the array\n    for i in range(N):\n        # Iterate through the elements of the array again to check if the xor value is odd\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n\n            # Check if the xor value is odd\n            if xor % 2!= 0:\n                odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables to keep track of the number of odd pairs\n    odd_pairs = 0\n\n    # Loop through all possible pairs of numbers from 1 to N\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            # Check if the XOR of the two numbers is odd\n            if (A[i-1] ^ A[j-1]) % 2!= 0:\n                # If it is odd, increment the count of odd pairs\n                odd_pairs += 1\n\n    # Return the count of odd pairs\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                xor_count += 1\n    \n    return xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and its size N as input and returns the count of odd pairs in the array.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize count variable\n    count = 0\n\n    # loop through all possible pairs of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n\n            # check if xor is odd\n            if xor % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!=0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the character is uppercase\n        if string[i].isupper():\n            # Convert the character to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # Check if the character is lowercase\n        elif string[i].islower():\n            # Convert the character to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a new string and iterate over each character in the original string\n    new_string = \"\"\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # convert the character to lowercase and append it to the new string\n            new_string += char.lower()\n        # check if the character is lowercase\n        elif char.islower():\n            # convert the character to uppercase and append it to the new string\n            new_string += char.upper()\n        # otherwise, append the character as is to the new string\n        else:\n            new_string += char\n    # return the new string\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to strings so that we can compare them digit by digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # initialize the sum variable to 0\n    sum_diff = 0\n\n    # loop through each character in the strings\n    for i in range(len(n1_str)):\n        # calculate the difference between the corresponding digits\n        diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        # add the difference to the sum\n        sum_diff += diff\n\n    # return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # get the length of the largest number\n    max_len = max(len(str(n1)), len(str(n2)))\n\n    # calculate the digit difference for each digit of the two numbers\n    digit_diff = [abs(int(str(n1)[i]) - int(str(n2)[i])) for i in range(max_len)]\n\n    # calculate the sum of the digit differences\n    sum_digit_diff = sum(digit_diff)\n\n    return sum_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    digits_1 = [int(d) for d in str(n1)]\n    digits_2 = [int(d) for d in str(n2)]\n\n    # Initialize the sum of per-digit difference to 0\n    diff_sum = 0\n\n    # Iterate over the digits of the two integers\n    for i in range(max(len(digits_1), len(digits_2))):\n        # Calculate the difference between the corresponding digits\n        diff = digits_1[i] - digits_2[i]\n\n        # Add the difference to the sum of per-digit difference\n        diff_sum += abs(diff)\n\n    # Return the sum of per-digit difference\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 ^ n2\n    sum_diff = 0\n    \n    while diff > 0:\n        digit = diff % 10\n        sum_diff += digit * (digit + 1) // 2\n        diff //= 10\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1 = str(n1)\n    num2 = str(n2)\n    diff = 0\n    for i in range(len(num1)):\n        diff += abs(int(num1[i]) - int(num2[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    while n1!= 0 or n2!= 0:\n        distance += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    # initialize the sum to 0\n    sum_diff = 0\n    # loop through each digit in both strings\n    for i in range(len(str_n1)):\n        # subtract the digit at index i from the digit at index i in the other string\n        diff = int(str_n1[i]) - int(str_n2[i])\n        # add the difference to the sum\n        sum_diff += diff\n    # return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    distance = 0\n    n1_list = list(map(int, str(n1)))\n    n2_list = list(map(int, str(n2)))\n\n    for i in range(len(n1_list)):\n        distance += abs(n1_list[i] - n2_list[i])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum_digit_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_digit_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    # loop through each digit of the two numbers\n    for i in range(10):\n        # find the difference between the two digits\n        diff = abs(n1 % 10 - n2 % 10)\n        # add the difference to the count\n        count += diff\n        # remove the last digit of n1 and n2\n        n1 //= 10\n        n2 //= 10\n    return count"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"Size is greater than the length of the list\")\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    while end < len(a):\n        current_sum += a[end]\n        end += 1\n\n        while current_sum > max_sum and start < end:\n            current_sum -= a[start]\n            start += 1\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            end = i\n        elif current_sum < 0:\n            current_sum = 0\n            start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables to store the maximum sum and the current subarray sum\n    max_sum = a[0]\n    current_sum = 0\n\n    # Iterate through the list and update the maximum sum and the current subarray sum accordingly\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum of the largest contiguous sublist in the given list\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n        a: list\n            A list of integers.\n        size: int\n            The size of the sublist to be considered.\n\n    Returns:\n        int\n            The sum of the largest contiguous sublist in the given list.\n\n    Example:\n        >>> max_sub_array_sum([1, 2, 3, 4, 5], 2)\n        6\n        >>> max_sub_array_sum([1, 2, 3, 4, 5, 6], 3)\n        15\n        >>> max_sub_array_sum([1, 2, 3, 4, 5, 6], 4)\n        18\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    start_index = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum += a[i + size - 1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = a[0]\n    current_sum = a[0]\n    start_index = 0\n\n    # Loop through the array\n    for i in range(1, size):\n        # Update the current sum\n        current_sum += a[i]\n\n        # Update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n    # Return the maximum sum\n    return max_sum, start_index\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        raise ValueError(\"Size should be greater than zero.\")\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # convert the combined tuple into a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # convert the set back into a tuple\n    unique_tup = tuple(unique_set)\n    \n    # sort the tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    \n    # print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    union_list = test_tup1 + test_tup2\n    \n    # Remove duplicates from the combined list using set()\n    unique_elements = list(set(union_list))\n    \n    # Sort the unique elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    \n    # Print the sorted elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two given tuples\n    union_list = test_tup1 + test_tup2\n\n    # Sort the union list in ascending order\n    union_list = sorted(union_list)\n\n    # Print the union list\n    print(\"The union of the elements of the two tuples is:\")\n    for element in union_list:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # First, we check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n\n    # If the tuples have the same length, we concatenate them\n    combined_tup = test_tup1 + test_tup2\n\n    # We then sort the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n\n    # Finally, we print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # convert the combined tuple into a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # convert the set back into a tuple and sort it in ascending order\n    sorted_tup = tuple(sorted(unique_set))\n    \n    # output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert the given tuples to sets and then to lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the union of the sets\n    union = set1.union(set2)\n\n    # Convert the union to a list and sort it in ascending order\n    sorted_union = sorted(union)\n\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Find the set of elements in the combined tuple\n    unique_elements = set(combined_tup)\n    \n    # Convert the set back to a list\n    unique_elements_list = list(unique_elements)\n    \n    # Sort the list in ascending order\n    unique_elements_list.sort()\n    \n    # Output the sorted list\n    print(unique_elements_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge the two tuples in sorted order\n    sorted_tup = sorted(test_tup1 + test_tup2)\n    \n    # Output the union of the elements of the merged tuple\n    print(\"Union of elements in the given tuples:\", sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for item in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables to store the lengths of the sublists and their index\n    lengths = []\n    index = 0\n\n    # loop through the list\n    for i in range(len(lst)):  \n\n        # if the current element is greater than the last element in the sublist, add the length of the sublist to the list\n        if lst[i] > lst[index]:  \n            lengths.append(i-index+1)  \n            index = i  \n\n    # add the last sublist to the list\n    lengths.append(len(lst)-index)  \n\n    # return the maximum length of the sublists\n    return max(lengths)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            length = j-i\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in lst:\n        if len(i) > current_length:\n            max_length = current_length\n            current_length = len(i)\n        else:\n            current_length = max(len(i), current_length)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    # initialize the length of the longest sublists as 0\n    max_length = 0\n\n    # initialize a 2D list to store the length of longest sublists for each sublist in lst\n    # the first row will be filled with 0s, since the length of the longest sublists for the first sublist is 0\n    length_of_longest_sublists = [[0] * len(lst[0]) for i in range(len(lst))]\n\n    # fill the length_of_longest_sublists list using the dynamic programming approach\n    for i in range(1, len(lst)):\n        for j in range(len(lst[i])):\n            # if the current sublist is not empty, find the length of the longest sublist ending at the current position\n            if lst[i][j]!= []:\n                max_length_ending_at_j = 0\n                for k in range(j + 1, len(lst[i])):\n                    if lst[i][k]!= []:\n                        max_length_ending_at_k = length_of_longest_sublists[i - 1][k]\n                    else:\n                        max_length_ending_at_k = 0\n\n                    if max_length_ending_at_k > max_length_ending_at_j:\n                        max_length_ending_at_j = max_length_ending_at_k\n\n                # update the length_of_longest_sublists list for the current sublist\n                length_of_longest_sublists[i][j] = max_length_ending_at_j + 1\n\n                # update the max_length variable if the current sublist is longer than the previous longest sublist\n                if length_of_longest_sublists[i][j] > max_length:\n                    max_length = length_of_longest_sublists[i][j]\n\n    # return the max_length variable\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            j = i + 1\n            while j < len(lst) and lst[j] == 0:\n                j += 1\n            if j - i > max_length:\n                max_length = j - i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:  \n        return 0  \n    else:  \n        max_length = 1  \n        for i in range(1, len(lst)):  \n            if lst[i] > lst[i-1]:  \n                max_length += 1  \n            else:  \n                max_length = 1  \n        return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_sublist):\n            longest_sublist = lst[i]\n\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    current_length = 1\n    \n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n            \n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sub_list = lst[i:j+1]\n            sub_length = len(sub_list)\n            if sub_length > length:\n                max_length = length\n                length = sub_length\n            elif sub_length > max_length:\n                max_length = sub_length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\\\"(.*?)\\\"' # regex pattern to match values enclosed in double quotes\n    values = re.findall(pattern, text) # find all matches in the text using the pattern\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes in a string and extracts values between quotation marks.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text)\n    return [match.strip() for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] in arr[:j] and arr[j] - arr[i] in arr[j+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a dictionary to store the count of pairs\n    count = {}\n\n    # Iterate through the array and count the pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the two elements are equal and not already in the dictionary\n            if arr[i] == arr[j] and (arr[i], arr[j]) not in count:\n                # If so, increment the count of the pair\n                count[(arr[i], arr[j])] = count.get((arr[i], arr[j]), 0) + 1\n\n    # Return the count of pairs\n    return sum(count.values())"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Initialize an empty list to store the characters\n    result = []\n    # Loop through each character in the string\n    for char in word:\n        # Append the character to the result list\n        result.append(char)\n    # Return the result list\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n\n    Args:\n        n (int): the number to be analyzed\n\n    Returns:\n        int: the sum of the digits of the input number\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert n to a string to iterate over its digits\n    n_str = str(n)\n    # initialize the sum of digits as 0\n    sum_of_digits = 0\n    # iterate over each digit in the string\n    for digit in n_str:\n        # convert the digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Initialize the sum variable to 0\n    sum_val = 0\n\n    # Loop through each character in the string and add its integer value to the sum\n    for digit in num_str:\n        sum_val += int(digit)\n\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) == 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and checks whether the list is sorted or not.\n    If the list is sorted, it returns True, otherwise False.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Returns True if the list is sorted in ascending order and False otherwise.\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as an input and returns True if the list is sorted and False otherwise.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, and False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate through each list in the input\n    for lst in nums:\n        # Iterate through each number in the list\n        for num in lst:\n            # If the number is not already in the set, add it\n            if num not in unique_nums:\n                unique_nums.add(num)\n                \n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with the unique numbers.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # iterate through each list in the input\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # add the number to the set if it is not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # create a new list to store the unique numbers\n    unique_num_list = []\n    \n    # iterate through the unique set and add it to the new list\n    for num in unique_nums:\n        unique_num_list.append(num)\n    \n    # return the new list of unique numbers\n    return unique_num_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_numbers = set(list_data)\n\n    # Calculate the product of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to store unique numbers in the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers using the product() function\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the list data\n    unique_nums = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))  # Get a list of unique numbers from the input list\n    product = 1  # Initialize the product as 1\n    \n    # Loop through the unique numbers and multiply them together\n    for num in unique_nums:\n        product *= num\n    \n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    if len(unique_nums) == 1:\n        return unique_nums[0]\n    else:\n        product = 1\n        for num in unique_nums:\n            product *= num\n        return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a list.\n\n    Args:\n        list_data (list): List of integers.\n\n    Returns:\n        int: Product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # Convert list_data to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # calculate the base area using the formula A = pi * r^2\n    A = 3.14159 * r**2\n    \n    # calculate the surface area of the cylinder using the formula S = 2 * pi * r * h\n    S = 2 * 3.14159 * r * h\n    \n    # return the surface area of the cylinder\n    return S"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula:\n    # A = \u03c0r\u00b2h\n    surface_area = 3.14159 * r**2 * h\n    \n    # Return the surface area as the output:\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Using the formula for the surface area of a cylinder\n    area = math.pi * r**2 + 2 * math.pi * r * h + math.pi * h**2\n    \n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2) + math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area using the formula\n    surface_area = 2 * math.pi * r * h\n    \n    # return the result\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * h * r + 2 * 3.14159 * r * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return \"Both A and B must be lists\"\n    if len(A) > len(B):\n        return \"A must be a sublist of B\"\n    for i in range(len(B)):\n        if B[i] not in A:\n            return \"B is not a sublist of A\"\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # If B is empty, return True as B is a sublist of A\n    if not B: \n        return True\n    # Traverse through A and check if B is a sublist of A\n    for i in range(len(A) - len(B) + 1): \n        if B == A[i:i+len(B)]: \n            return True\n    # If the above loop doesn't return any value, then B is not a sublist of A\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A and False otherwise.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function checks whether a list is a sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    if A == B:\n        return True\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i, j = 0, 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n        \n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:\n        return True\n    if len(A) < len(B):\n        return is_Sub_Array(B,A)\n    if B[0] in A:\n        if is_Sub_Array(A[1:],B):\n            return True\n    return is_Sub_Array(A[1:],B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function will check whether the first list is a sublist of the second or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = j - i + 1\n            i = 0\n    \n    return j == len(B)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # loop through the digits of the factorial\n    while n > 0:\n        # extract the last digit of the factorial\n        last_digit = n % 10\n        \n        # multiply by 10 to remove it from the factorial\n        n = n // 10\n    \n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Convert the string to a list of characters\n    num_list = list(num_str)\n    \n    # Calculate the factorial of the number\n    fact = 1\n    for i in range(len(num_list)):\n        fact *= int(num_list[i])\n    \n    # Convert the factorial to a string\n    fact_str = str(fact)\n    \n    # Convert the string to a list of characters\n    fact_list = list(fact_str)\n    \n    # Find the last digit of the factorial and return it\n    return fact_list[-1]"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input to integer\n    n = int(n)\n    # Initialize the result variable to store the last digit\n    result = 0\n    # Loop over the digits of the input number\n    while n > 0: \n        # Extract the last digit of the input number\n        digit = n % 10\n        # Add the last digit to the result variable\n        result += digit\n        # Remove the last digit from the input number\n        n //= 10\n    # Return the result variable\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    while n > 0:\n        last_digit = n % 10\n        n = n // 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert n to a string\n    n = str(n)\n    # Convert the string to an integer\n    n = int(n)\n    # Calculate the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    # Calculate the last digit of the factorial\n    last_digit = fact % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number to a string\n    number_str = str(n)\n\n    # Find the last digit of the factorial\n    last_digit = int(number_str[-1])\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert number to string\n    n_str = str(n)\n    # split string into list of digits\n    digits = [int(digit) for digit in n_str]\n    # find last digit\n    last_digit = digits[-1]\n    # find factorial of number without last digit\n    factorial_without_last = 1\n    for i in range(1, n):\n        factorial_without_last *= i\n    # find last digit in factorial of number without last digit\n    last_digit_without_last = factorial_without_last % 10\n    # return last digit of factorial of number with last digit\n    return last_digit_without_last"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate all the lists into one flat list\n    flat_list = list1 + list2 + list3\n    \n    # Create a new list to hold the interleaved list\n    interleaved_list = []\n    \n    # Iterate over each element in the flat list\n    for element in flat_list:\n        # Check if the element is the last element in the list\n        if element == flat_list[-1]:\n            # If it is, add it to the end of the interleaved list\n            interleaved_list.append(element)\n        else:\n            # If it isn't, add it to the beginning of the interleaved list\n            interleaved_list.insert(0, element)\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the lists and check if they are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('The lists must be of the same length.')\n\n    # Initialize an empty list to store the final interleaved list\n    interleaved_list = []\n\n    # Loop through each element in the lists and add it to the final interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Flatten the 3 lists\n    flat_list = [num for sublist in [list1, list2, list3] for num in sublist]\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    result = []\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    result += list1[i:]\n    result += list2[j:]\n    result += list3[k:]\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # loop through each element in the first list\n    for i in range(len(list1)):\n        # append the i-th element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the result\n    result = []\n    # iterate over the lists\n    for i in range(len(list1)):\n        # add the first element of each list to the result list\n        result.append(list1[i])\n        # add the second element of each list to the result list\n        result.append(list2[i])\n        # add the third element of each list to the result list\n        result.append(list3[i])\n    # return the result list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the common elements\n    common_elements = [i for i in test_tup1 if i in test_tup2]\n\n    # Find the elements that are present in test_tup1 but not in test_tup2\n    dissimilar_elements1 = [i for i in test_tup1 if i not in test_tup2]\n\n    # Find the elements that are present in test_tup2 but not in test_tup1\n    dissimilar_elements2 = [i for i in test_tup2 if i not in test_tup1]\n\n    # Combine the two dissimilar lists\n    combined_dissimilar = dissimilar_elements1 + dissimilar_elements2\n\n    # Return the common elements, combined dissimilar elements, and the length of the combined list\n    return common_elements, combined_dissimilar, len(combined_dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # initialize a set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # loop through the elements in the first tuple\n    for element1 in test_tup1:\n        # check if the element is in the second tuple\n        if element1 not in test_tup2:\n            # if it's not, add it to the dissimilar set\n            dissimilar_set.add(element1)\n\n    # return the dissimilar set as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the elements in test_tup1 that are not present in test_tup2.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    # Iterate through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is present in the second tuple\n        if element not in test_tup2:\n            # If the element is not present in the second tuple, add it to the dissimilar_elements list\n            dissimilar_elements.append(element)\n    \n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elements.append(elem1)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns a list of the elements that are present in test_tup1 but not in test_tup2.\n    '''\n\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # loop through each element in the first tuple\n    for elem in test_tup1:\n\n        # check if the element is present in the second tuple\n        if elem not in test_tup2:\n\n            # if the element is not present in the second tuple, add it to the dissimilar list\n            dissimilar_list.append(elem)\n\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elements that are present in the first tuple but not in the second tuple.\n    '''\n    return set(test_tup1) - set(test_tup2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Combine the two tuples into a list\n    combined_list = test_tup1 + test_tup2\n    \n    # Use set() to remove duplicates and get a list of unique elements\n    unique_list = list(set(combined_list))\n    \n    # Use set operations to find the difference between the two tuples\n    difference_set = set(combined_list) - set(test_tup1) - set(test_tup2)\n    \n    # Return a list of the unique elements in the difference set\n    return list(difference_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_fnc(x):\n    return x % 2 == 0\n\ndef even_ele(test_tuple, even_fnc):\n    result_tuple = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            result_tuple.append(elem)\n    return result_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    odd_list = []\n\n    for i in test_tuple:\n        if isinstance(i, list):\n            for j in i:\n                if even_fnc(j):\n                    even_list.append(j)\n                else:\n                    odd_list.append(j)\n        elif even_fnc(i):\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n\n    return even_list, odd_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            result.append(even_fnc(item))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # function to check if an element is even or odd\n    def is_even(num): \n        if num % 2 == 0: \n            return True\n        else: \n            return False\n\n    # function to remove even elements from a nested mixed tuple\n    def remove_even(elem): \n        if isinstance(elem, tuple): \n            return tuple(remove_even(x) for x in elem)\n        elif isinstance(elem, list): \n            return [remove_even(x) for x in elem]\n        elif isinstance(elem, dict): \n            return {key: remove_even(value) for key, value in elem.items()}\n        elif isinstance(elem, set): \n            return set(remove_even(x) for x in elem)\n        else: \n            if even_fnc(elem) and not is_even(elem): \n                return elem\n            else: \n                return None\n\n    # remove even elements from the nested mixed tuple\n    result = remove_even(test_tuple)\n\n    # print the result\n    print(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_fnc_helper(ele):\n        if isinstance(ele, tuple):\n            return [even_fnc_helper(sub_ele) for sub_ele in ele]\n        else:\n            return even_fnc(ele)\n\n    return [even_fnc_helper(ele) for ele in test_tuple]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a tuple containing mixed data and a function as arguments. \n    The function should return a new tuple with only the elements from the original tuple that satisfy the condition defined in the function. \n    The mixed data can be a tuple, a list, a set, etc.\n    \"\"\"\n    # Use list comprehension to create a new list that contains only the even elements from the original tuple\n    new_list = [even_fnc(x) for x in test_tuple if even_fnc(x)]\n    # Convert the new list back to a tuple and return it\n    return tuple(new_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    \n    result = [even_fnc(item) for item in test_tuple if all(map(is_even, item))]\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for item in test_tuple: \n        if even_fnc(item): \n            filtered_tuple.append(item) \n    return filtered_tuple \n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for element in test_tuple:\n        if even_fnc(element):\n            even_elements.append(element)\n    return even_elements"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b**2) * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of a square pyramid\n    surface_area = 2*b*s + 2*s*b + b*b\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of the base and height of the pyramid\n    base_area = b*b\n    pyramid_height = s\n    \n    # Adding the surface area of the base and height of the pyramid to get the total surface area\n    total_area = base_area + pyramid_height*base_area\n    \n    # Returning the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2  # Formula for surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n\n    :param b: The base edge of the square pyramid.\n    :type b: float\n    :param s: The height of the square pyramid.\n    :type s: float\n    :return: The surface area of the square pyramid.\n    :rtype: float\n    \"\"\"\n    # Calculate the surface area of the pyramid using the formula:\n    # surface area = (1/2) * base * height\n    surface_area = 0.5 * b * s\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s) + (b*s*s) + (b*s*s*s)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of a square pyramid using Heron's formula\n    area = (b * b) * s\n    # Return the surface area of the square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s) + (b*s)\n    print(\"The surface area of the pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s  #formula to calculate the surface area of a square pyramid\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.items() == []:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes a dictionary as an argument and checks if it is empty or not.\n    \"\"\"\n\n    if dict1:\n        print(\"The dictionary is not empty.\")\n    else:\n        print(\"The dictionary is empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    Returns nth catalan number using the formula:\n\n    C(n,k) = (n-k+1)C(n-1,k-1) - kC(n-1,k)\n\n    where n is the number of elements in the set and k is the number of elements selected.\n\n    For example, C(6,2) = C(6,1) + C(6,3) - C(6,2) + C(6,4)\n\n    This function assumes that n is a positive integer.\n    '''\n    if n < 0:\n        return None\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        n = n - 1\n        catalan_num = 0\n        for k in range(n+1):\n            catalan_num += (n-k+1)*catalan_number(n-1, k-1) - k*catalan_number(n-1, k)\n        return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return int(num * (2*num - 1) / (factorial(num-1) * factorial(2)))\n\ndef factorial(n):\n    '''\n    Write a function which returns n!\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num <= 0:\n        return None\n    elif num == 1:\n        return 1\n    else:\n        catalan_list = [0, 1]\n        for i in range(2, num+1):\n            catalan_list.append((i*catalan_list[i-1])//(i))\n        return catalan_list[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (2*num-1) // (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return int((factorial(2*n) / (factorial(n+1) * factorial(n))))\n\ndef factorial(n):\n    '''\n    Write a function which returns the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) * catalan_number(n//2) * 4\n    else:\n        return catalan_number((n-1)//2) * catalan_number((n-1)//2) * 4"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using matrix exponentiation.\n    \"\"\"\n    # Helper function to multiply two matrices\n    def multiply(a, b):\n        return [[a[0][0]*b[0][0] + a[0][1]*b[1][0], a[0][0]*b[0][1] + a[0][1]*b[1][1]],\n                [a[1][0]*b[0][0] + a[1][1]*b[1][0], a[1][0]*b[0][1] + a[1][1]*b[1][1]]]\n\n    # Base case: n = 0 or n = 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Compute the Catalan numbers using matrix exponentiation\n    catalan_list = [1]\n    for i in range(1, n+1):\n        catalan_list.append(catalan_list[-1] * (2*i-1) / i)\n    result = catalan_list[-1]\n    for i in range(2, n+1):\n        result = multiply(result, [[2*i-1, 2*i], [2*i-1, 2*i]])\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = 1\n        for i in range(1, n + 1):\n            c = c * i\n        for i in range(2, n + 1):\n            c = c / i\n        return c"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    pattern = r'(\\b[a-z]+ly\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w*ly\\b'\n    # Use the re.finditer() function to iterate over all non-overlapping matches of the pattern\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # Initialize an empty list to store the adverbs' positions and their lengths\n    adverbs = []\n    # Iterate over all matches and add their positions and lengths to the adverbs list\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        # Add the position and length of the adverb to the adverbs list\n        adverbs.append((start, end - start))\n    # Return the adverbs list\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression to match adverbs ending with 'ly'\n    pattern = r'\\b([a-zA-Z]+[.]?[.]?)*ly\\b'\n\n    # Use the re.findall() function to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Loop through all the adverbs found and their positions\n    for i, adv in enumerate(adverbs):\n        # Convert the adverb to lowercase and add its position to the list\n        positions.append((i, adv.lower().index('ly')))\n\n    # Sort the positions list in ascending order and return the list of adverbs\n    return sorted(positions)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n\n    # search for the pattern in the given string\n    matches = re.findall(pattern, text)\n\n    # return the list of matches and their positions\n    return matches, [m.start() for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(?:the|a|an)\\s+adverb\\s+(?:ending|endingly)\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all words that end in ly\n    words_ending_ly = re.findall(r'\\w+ly$', text)\n    \n    # Create a list to store the adverb and its positions in the text\n    adverbs = []\n    \n    # Loop through the words found and add the adverbs to the list\n    for i, word in enumerate(words_ending_ly):\n        # Find the positions of the words that end in ly\n        positions = re.finditer(r'\\b{}\\b'.format(word), text)\n        for pos in positions:\n            # Check if the adverb is the first one found\n            if len(adverbs) == 0:\n                adverbs.append((word, pos.start()))\n            else:\n                # Check if the adverb is the same as the previous one and if its position is closer to the end of the text\n                if adverbs[-1][0] == word and pos.start() < adverbs[-1][1]:\n                    adverbs[-1] = (word, pos.start())\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    # Use the pattern to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Iterate through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return the list of positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'(?<=[a-zA-Z])(ly)$'\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate over the matches and append the positions to the adverb_positions list\n    for match in matches:\n        start_position = match.start()\n        end_position = match.end()\n        adverb_positions.append((start_position, end_position))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b(ly)\\b(?=\\s|$)'\n    \n    # Use the re.finditer() function to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    adverbs = []\n    \n    # Iterate over the matches and add their positions to the list of adverbs\n    for match in matches:\n        start, end = match.span()\n        adverbs.append((start, end))\n    \n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and returns a list of the n most expensive items in the dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add each item to the min heap if its price is less than or equal to the price of the smallest item in the heap\n    for item in items:\n        if len(min_heap) < n or item[1] <= min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        else:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items in the dataset as a list\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and a target number n, return the n most expensive items.\n    '''\n    # Sort the items in descending order based on their value\n    items.sort(reverse=True)\n\n    # Extract the first n items from the sorted list and return them\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min heap of size n\n    min_heap = []\n\n    # Iterate through the items\n    for item in items:\n\n        # If the heap is not full, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap,item)\n\n        # If the heap is full and the current item is less than the smallest item in the heap, remove the smallest item from the heap and add the current item to the heap\n        elif item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap,item)\n\n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    # Sort the items in descending order of their cost\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Return the first n items from the sorted list\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the min-heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the min-heap has more than n items, remove the last item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items from the min-heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap of size n\n    min_heap = [float('inf')] * n\n\n    # initialize the min-heap with the prices of the items\n    for item in items:\n        heapq.heappushpop(min_heap, -item)\n\n    # extract the n most expensive items from the min-heap\n    return heapq.nsmallest(n, min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a heap to keep track of the n most expensive items\n    heap = []\n    # Initialize the heap with the first n items in the dataset\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # Remove the items from the heap and append them to a list until the heap is empty\n    result = []\n    while heap:\n        item = heapq.heappop(heap)\n        result.append(item)\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    # initialize an empty list to store the n most expensive items\n    heap = []\n\n    # loop through the items and add each item to the heap if its price is greater than the price of the smallest item in the heap\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item[1] > heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # return the n most expensive items in descending order of price\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns a list containing the n most expensive items in the dataset.\n    \"\"\"\n    # Sort the items in descending order based on their price\n    items.sort(key=lambda x: x[1], reverse=True)\n    \n    # Create an empty list to store the n most expensive items\n    result = []\n    \n    # Iterate over the first n items in the sorted list\n    for i in range(n):\n        # Add the item to the result list\n        result.append(items[i][0])\n        \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"Error: Invalid index\")\n        return\n    else:\n        new_list = l[n:]\n        l[:n] = []\n        l.extend(new_list)\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list is empty\n    if not l:\n        return l\n    \n    # Check if the index is valid\n    if n < 0 or n >= len(l):\n        return \"Invalid index!\"\n    \n    # Split the list at the nth element\n    mid = len(l) // 2\n    if n == mid:\n        return l[mid:] + l[:mid]\n    elif n < mid:\n        return l[:n] + l[n+1:]\n    else:\n        return l[:mid] + l[mid+1:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 0:\n        return []\n    else:\n        mid = len(l)//2\n        return split_Arr(l[:mid] + l[mid:n] + l[mid+1:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    arr1, arr2 = l[:n], l[n:]\n    # Concatenate the first part of the first list with the second part of the second list\n    arr3 = arr1 + arr2\n    return arr3"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == len(l):\n        return [l]\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n+1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Invalid input: n is greater than the length of the list.\")\n        return\n    \n    l.extend(l[:n])\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Define the length of the list\n    length = len(l)\n    # Check if the index is out of range\n    if n < 0 or n >= length:\n        print(\"Error: Index out of range\")\n        return\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    l = first_part + second_part\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Parameters\n    ----------\n    lst : list\n        The list to be converted.\n\n    Returns\n    -------\n    tuple\n        The tuple representation of the list.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Return the difference between the largest and smallest value\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Find the difference between the first and last element in the list\n    diff = nums[-1] - nums[0]\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) > 0:\n        min_val = min(nums)\n        max_val = max(nums)\n        return max_val - min_val\n    else:\n        return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # iterate over the range of numbers from a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        square = num*num\n        if square == num:\n            # print the number if it is a perfect square\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for num in range(a, b+1):\n        if num ** 2 == num:\n            yield num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all numbers between a and b\n    for i in range(a, b+1):\n        # check if the square of the number is equal to the number\n        if i*i == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        square = i ** 2\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    while a <= b:\n        if a ** 2 == b:\n            squares.append(a)\n        a += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i ** 2\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            squares.add(i*i)\n    return sorted(list(squares))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        if i**2 == a:\n            return [i, i**2]\n        elif i**2 == b:\n            return [i**2, i]\n        elif i**2 > a and i**2 < b:\n            return [i**2, i]\n    return \"No perfect squares found\""
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through the range of a to b (inclusive)\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = i*i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize empty list to store perfect squares\n    squares = []\n    # loop through each number in range a to b\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        if num**0.5**2 == num:\n            squares.append(num)\n    # return list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The distance from the origin to the point.\n    theta (float): The angle in radians.\n\n    Returns:\n    (x, y): The rectangular coordinates of the point.\n    \"\"\"\n    # Convert theta to degrees\n    theta_deg = cmath.phase(theta) * 180.0 / cmath.pi\n\n    # Calculate the x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the radius and angle of a point in polar coordinates and returns the corresponding point in rectangular coordinates.\n    \"\"\"\n    \n    # Convert angle from degrees to radians\n    theta = cmath.radians(theta)\n    \n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Args:\n        x (float): The radius of the point.\n        y (float): The angle of the point.\n    \n    Returns:\n        tuple: A tuple containing the x and y coordinates of the point in rectangular coordinates.\n    \"\"\"\n    # Convert angle to radians\n    theta = y*cmath.pi/180.0\n    \n    # Calculate the x and y coordinates of the point in rectangular coordinates\n    x_rect = x*cmath.cos(theta)\n    y_rect = x*cmath.sin(theta)\n    \n    # Return the x and y coordinates of the point in rectangular coordinates as a tuple\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the circle\n    theta (float): The angle in radians\n\n    Returns:\n    (float, float): The rectangular coordinates (x, y)\n    '''\n    # Convert radians to degrees\n    theta = theta * 180 / cmath.pi\n    # Calculate x and y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    # Return the rectangular coordinates\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    x (float): x-coordinate\n    y (float): y-coordinate\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Convert polar coordinates (r, phi) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    else:\n        return \"The given list must have at least 2 elements.\"\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        #Interchanging the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        #Calling the function recursively for the new list\n        return swap_List(newList[1:])"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # checking if the list is empty or not \n    if not newList: \n        return None \n\n    # taking the length of the list \n    n = len(newList) \n\n    # using modulo operator to get the last index of the list \n    last_index = n-1 \n\n    # swapping the first and last elements of the list \n    newList[0], newList[last_index] = newList[last_index], newList[0] \n\n    return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: # check if the list has less than two elements\n        print(\"List must have at least two elements\")\n        return None\n    else: # if the list has at least two elements\n        first_element = newList[0] # assign the first element to a variable\n        last_element = newList[-1] # assign the last element to a variable\n        newList[0] = last_element # interchange the first and last elements in the list\n        newList[-1] = first_element # interchange the first and last elements in the list\n        return newList # return the modified list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n    \n    # Check if the list has only two elements\n    elif len(newList) == 2:\n        print(\"The list must have at least three elements.\")\n        return\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The list after swapping the first and last elements is: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # changing the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Reverse the list\n    newList.reverse()\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # Reverse the list again\n    newList.reverse()\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the first binomial coefficient\n    coeff = 1\n\n    # loop over the range of k\n    for i in range(k):\n        # add the binomial coefficient to the sum\n        coeff *= (n-i) // (i+1)\n    \n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    # Initialize sum variable \n    sum_coeff = 0 \n    # Check if n is greater than or equal to k \n    if n >= k: \n        # If n is greater than or equal to k, then the product of co-efficients are \n        # (n-k+1) * (n-k) / k * (n-k+1) * (n-k)/k *... * (n-k+1) * (n-k)/k * 1 \n        for i in range(1, k+1): \n            sum_coeff += (n-k+1) * (n-k) / k * binomial_Coeff(n-k+1, i-1) \n        return sum_coeff \n    else: \n        # If n is less than k, then the product of co-efficients are 1 \n        return 1"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check for invalid input values\n    if k > n or k < 0 or n < 0:\n        print(\"Invalid input values. Please enter positive integers.\")\n        return\n\n    # Initialize variables\n    numerator = 1\n    denominator = 1\n    sum = 0\n\n    # Calculate the product of consecutive binomial coefficients\n    for i in range(1, k + 1):\n        numerator = numerator * (n - i + 1)\n        denominator = denominator * i\n        sum = sum + numerator // denominator\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Find the sum of the product of consecutive binomial co-efficients\n    for i in range(1,n+1):\n        sum += (1/i)*((1/i)**k)*((1/(i-k+1))**(n-k))\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    #initialize the sum variable\n    sum = 0\n\n    #loop through the n numbers\n    for i in range(n):\n        #multiply the i+1th number with the (n-i)th number and add the result to the sum variable\n        sum += i*k*(n-i)\n\n    #return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): total number of elements in the set\n        k (int): number of consecutive elements to be summed\n\n    Returns:\n        int: sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    # calculate the product of consecutive binomial coefficients\n    product = 1\n    for i in range(1, k + 1):\n        product *= (n - i + 1) // i\n\n    # calculate the sum of the product\n    sum = 0\n    for i in range(k + 1):\n        sum += product // (i + 1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): number of terms in the sum\n    k (int): number of terms to be included in the sum\n\n    Returns:\n    (int): the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n\n    # Initialize variables\n    sum_binomial = 0\n    count = 1\n    product = 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    while count <= n:\n        sum_binomial += product\n        count += 1\n        product *= k\n\n    return sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of terms in the sequence.\n    k (int): The number of terms to include in the sum.\n\n    Returns:\n    sum (float): The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum\n    sum = 0.0\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1, k + 1):\n        sum += (1.0 / i) * (n + 1 - i)\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum = 0\n    for i in range(1, n+1):\n        coeff *= (n-i+1) // i\n        sum += coeff\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(1,k+1):\n        product *= (n-i+1)\n        product //= i\n    return product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r\"^0+\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group().replace('.0', '')\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define a regular expression pattern to match zero-padded numbers\n    pattern = r'^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$'\n    # use the re.match() function to find the first match in the input string\n    match = re.match(pattern, ip)\n    # if a match is found, replace the zero-padded numbers with non-zero ones\n    if match:\n        ip = f\"{match.group(1)}.{match.group(2)}.{match.group(3)}.{match.group(4)}\"\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\.0+){3}', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0\\d{1,2}\\b)', r'\\1.', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0\\b|\\b0\\.)+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(0)(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.)(0)(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.)(0)(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.)(0)(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$'\n    ip_pattern = r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    if re.match(pattern, ip):\n        return re.sub(ip_pattern, r'\\1\\2\\3\\4', ip)\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list is empty or not\n    if len(list1) == 0:\n        return 'The list is empty.'\n    \n    # Check if the list has only one number\n    elif len(list1) == 1:\n        return 'The list has only one number.'\n    \n    # Find the first even number\n    first_even = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n    \n    # Find the first odd number\n    first_odd = None\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n    \n    # Check if both even and odd numbers exist\n    if first_even is None or first_odd is None:\n        return 'The list has no even or odd numbers.'\n    \n    # Calculate the difference of the two numbers\n    diff = first_even - first_odd\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i == 0:\n            even = lst[i]\n        elif lst[i] % 2 == 1 and i == 0:\n            odd = lst[i]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    first_even = None\n    first_odd = None\n\n    # iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if first_even is None:\n                first_even = num\n        else:\n            odd_count += 1\n            if first_odd is None:\n                first_odd = num\n\n    # return the difference of the first even and first odd numbers\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 1\n    \n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0 and list1[odd_index] % 2 == 1:\n            return list1[even_index] - list1[odd_index]\n        elif list1[even_index] % 2 == 1 and list1[odd_index] % 2 == 0:\n            return list1[odd_index] - list1[even_index]\n        else:\n            even_index += 1\n            odd_index += 1\n    \n    if even_index == len(list1):\n        return list1[odd_index] - list1[0]\n    elif odd_index == len(list1):\n        return list1[even_index] - list1[0]\n    else:\n        return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    '''\n    Function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number\n    even_index = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_index = i\n            break\n    \n    # Find the first odd number\n    odd_index = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_index = i\n            break\n    \n    # Calculate the difference of the first even and first odd numbers\n    diff = lst[even_index] - lst[odd_index]\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    diff = abs(even_num - odd_num)\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list contains only integers\n    if not all(isinstance(x, int) for x in list1):\n        raise TypeError('List should contain only integers')\n    \n    # Find the first even and first odd numbers in the list\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                raise ValueError('List should contain only odd numbers')\n        elif num % 2 == 1:\n            if odd_num is None:\n                odd_num = num\n            else:\n                raise ValueError('List should contain only even numbers')\n                \n    # Calculate the difference of even and odd numbers\n    diff = abs(even_num - odd_num)\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = even - num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = odd - num\n    return even - odd if even is not None and odd is not None else None"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the binary strings to lists of integers\n    binary_list1 = [int(i) for i in bin(int(str1, 2))[2:]]\n    binary_list2 = [int(i) for i in bin(int(str2, 2))[2:]]\n\n    # compare the binary lists\n    swaps = 0\n    for i in range(len(binary_list1)):\n        if binary_list1[i]!= binary_list2[i]:\n            swaps += 1\n            binary_list1[i], binary_list2[i] = binary_list2[i], binary_list1[i]\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        return \"Both binary numbers must have the same length.\"\n    \n    count = 0\n    \n    # Loop through each bit of the binary number\n    for i in range(len(str1)):\n        # If the bits are different, swap them and increment the count\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            count += 1\n            \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # initialize swaps count and length of input strings\n    swaps = 0\n    str1_len = len(str1)\n    str2_len = len(str2)\n    \n    # convert input strings into lists of binary numbers\n    binary1 = [int(x) for x in str1]\n    binary2 = [int(x) for x in str2]\n    \n    # compare length of binary1 and binary2\n    if len(binary1)!= len(binary2):\n        # length of binary1 is greater than binary2\n        # swap digits that are different in binary1 and binary2\n        for i in range(len(binary1)):\n            if binary1[i]!= binary2[i]:\n                str1 = str1[:i] + str(binary1[i]) + str(binary2[i]) + str1[i+1:]\n                str2 = str2[:i] + str(binary2[i]) + str(binary1[i]) + str2[i+1:]\n                swaps += 1\n    else:\n        # length of binary1 is less than or equal to binary2\n        # swap digits in common position of binary1 and binary2\n        for i in range(str1_len):\n            if binary1[i]!= binary2[i]:\n                str1 = str1[:i] + str(binary1[i]) + str(binary2[i]) + str1[i+1:]\n                str2 = str2[:i] + str(binary2[i]) + str(binary1[i]) + str2[i+1:]\n                swaps += 1\n    \n    # convert lists of binary numbers back to strings\n    str1 = ''.join([str(x) for x in binary1])\n    str2 = ''.join([str(x) for x in binary2])\n    \n    # return swaps count and final strings\n    return swaps, str1, str2"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    i = 0\n    while i < n:\n        if str1[i] == '0' and str2[i] == '1':\n            str1 = str1[:i] + '1' + str1[i+1:]\n            str2 = str2[:i] + '0' + str2[i+1:]\n            swaps += 1\n        i += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # creating a dictionary to store the frequency of each character in each string\n    freq1 = {}\n    freq2 = {}\n    \n    # counting the frequency of each character in the first string\n    for i in range(len(str1)):\n        if str1[i] in freq1:\n            freq1[str1[i]] += 1\n        else:\n            freq1[str1[i]] = 1\n            \n    # counting the frequency of each character in the second string\n    for i in range(len(str2)):\n        if str2[i] in freq2:\n            freq2[str2[i]] += 1\n        else:\n            freq2[str2[i]] = 1\n            \n    # finding the number of swaps required to convert the first string to the second string\n    swaps = 0\n    for char in freq1:\n        if char not in freq2:\n            swaps += freq1[char]\n            \n    # finding the number of swaps required to convert the second string to the first string\n    for char in freq2:\n        if char not in freq1:\n            swaps += freq2[char]\n            \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.replace('0', '')\n    str2 = str2.replace('0', '')\n\n    # Calculate the length of the two binary strings\n    n = max(len(str1), len(str2))\n\n    # Create a boolean list of size n+1 to store whether each bit of str1 is greater or equal to the corresponding bit in str2\n    # We can calculate the required swaps as the number of flips required to convert the binary strings to their respective decimal representations\n    swaps = [0] * (n + 1)\n    for i in range(n):\n        # If the i-th bit of str1 is greater than or equal to the i-th bit of str2\n        if int(str1[i]) >= int(str2[i]):\n            # Increase the count of flips required by 1\n            swaps[i] = swaps[i] + 1\n\n    # Calculate the minimum number of swaps required by finding the minimum value in the boolean list\n    min_swaps = min(swaps)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Check if the length of the two binary strings are equal\n    if len(str1) == len(str2):\n        # If the length of the two binary strings are equal, return 0\n        return 0\n    else:\n        # If the length of the two binary strings are not equal, calculate the minimum number of swaps required\n        # to convert the first binary string to the second binary string\n        n = len(str1)\n        swap_count = 0\n        for i in range(n):\n            if num1 & 1 == 1 and num2 & 1 == 0:\n                # If the i-th bit of num1 is 1 and the i-th bit of num2 is 0, then swap them\n                num1 = num1 ^ (1 << i)\n                num2 = num2 ^ (1 << i)\n                swap_count += 1\n            elif num1 & 1 == 0 and num2 & 1 == 1:\n                # If the i-th bit of num1 is 0 and the i-th bit of num2 is 1, then swap them\n                num1 = num1 ^ (1 << i)\n                num2 = num2 ^ (1 << i)\n                swap_count += 1\n            else:\n                # If the i-th bit of num1 is 0 and the i-th bit of num2 is 0, then do nothing\n                pass\n            # Shift num1 and num2 to the right by 1 bit\n            num1 = num1 >> 1\n            num2 = num2 >> 1\n        # Return the minimum number of swaps required\n        return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the number of swaps\n    swaps = 0\n\n    # Iterate through the binary strings\n    while num1!= num2:\n        # If the binary strings are not equal, check if there is a 1 in num1 that is not in num2\n        if (num1 & num2)!= 0:\n            # If there is a 1 in num1 that is not in num2, swap the 1 in num1 with the 1 in num2\n            num1 = num1 ^ (1 << (num1 & num2).bit_length())\n            num2 = num2 ^ (1 << (num2 & num1).bit_length())\n            swaps += 1\n        # If there is no 1 in num1 that is not in num2, convert the binary strings to integers and continue\n        else:\n            num1 = int(str1, 2)\n            num2 = int(str2, 2)\n\n    # Return the number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of swaps required to convert num1 to num2\n    swaps = 0\n    while num1!= num2:\n        if num1 < num2:\n            num1 <<= 1\n            swaps += 1\n        else:\n            num2 <<= 1\n            swaps -= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # find the length of the binary string\n    length = len(str1)\n\n    # initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # loop through the binary string\n    for i in range(length):\n        # get the bits of num1 and num2 at positions i and i+1\n        bit1 = (num1 >> i) & 1\n        bit2 = (num2 >> i) & 1\n\n        # calculate the number of swaps required to convert the bits\n        swaps = abs(bit1 - bit2)\n\n        # update the minimum number of swaps if the current swap count is smaller\n        min_swaps = min(min_swaps, swaps)\n\n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    # Get the size of each tuple in the list\n    sizes = [sys.getsizeof(t) for t in tuple_list]\n    # Calculate the total size of all tuples\n    total_size = sum(sizes)\n    # Return the total size in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_list = []\n    for tup in tuple_list:\n        size_list.append(sys.getsizeof(tup))\n    return sum(size_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = 0\n    for item in tuple_list:\n        byte_size += sys.getsizeof(item)\n    return byte_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    \n    if k == 1:\n        return arr1[i]\n    return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the arrays\n    m = len(arr1)\n    n = len(arr2)\n\n    # Initialize two pointers for each array\n    i = j = 0\n\n    # Initialize the index of the kth element\n    kth_index = 0\n\n    # Check if the kth element is present in both arrays\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            # If the element in the first array is smaller, increment the first pointer\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # If the element in the second array is smaller, increment the second pointer\n            j += 1\n        else:\n            # If the elements are equal, increment both pointers\n            i += 1\n            j += 1\n            kth_index += 1\n\n        if kth_index == k-1:\n            # If the kth element is found, return its value\n            return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k:\n        return None\n    \n    if len(arr1) == len(arr2):\n        return arr1[k-1]\n    \n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    if k <= mid1:\n        return find_kth(arr1, arr2[:mid2], k)\n    else:\n        return find_kth(arr1[mid1:], arr2, k - mid1 - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize a counter variable to keep track of the number of elements in the current array\n    count = 0\n    # initialize the result variable to None to indicate that the kth element is not found yet\n    result = None\n    # iterate through both arrays\n    for i in range(len(arr1)):\n        # add the count of the i-th element in both arrays\n        count += arr1[i] + arr2[i]\n        # if the count is greater than or equal to k, return the k-th element\n        if count >= k:\n            # calculate the position of the k-th element in the combined array\n            index = i + k - 1\n            # set the result to the k-th element\n            result = arr1[index] if i % 2 == 0 else arr2[index]\n            break\n    # return the result\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a positive integer k as input and returns\n    the kth smallest element from the two arrays.\n\n    Args:\n        arr1 (list): A list of integers.\n        arr2 (list): A list of integers.\n        k (int): The index of the element to be returned.\n\n    Returns:\n        int: The kth smallest element from the two arrays.\n\n    Raises:\n        ValueError: If the input arrays are not sorted.\n    \"\"\"\n    if not sorted(arr1) == sorted(arr2):\n        raise ValueError(\"Input arrays are not sorted\")\n\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"Invalid index k\")\n\n    left, right = 0, len(arr1) + len(arr2) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid < k:\n            left = mid + 1\n        elif mid > k:\n            right = mid - 1\n        else:\n            return arr1[k - 1]\n\n    raise ValueError(\"Invalid index k\")\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Initialize variables\n    i, j = 0, 0\n    count = 0\n    \n    # Iterate through the arrays\n    while count < k:\n        if i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                i += 1\n            elif arr1[i] > arr2[j]:\n                j += 1\n            else:\n                count += 1\n                i += 1\n                j += 1\n        elif i < len(arr1):\n            i += 1\n        else:\n            j += 1\n    \n    # Return the kth element\n    return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    # Check if the arrays are sorted in ascending order\n    if arr1[0] >= arr2[-1]:\n        print(\"Error: Arrays must be sorted in ascending order.\")\n        return None\n\n    # Initialize two pointers to the start of the arrays\n    i, j = 0, 0\n\n    # Initialize the count of elements found\n    count = 0\n\n    # Traverse the arrays using two pointers\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If the count is less than k, return None\n    if count < k:\n        return None\n\n    # If k is equal to count, return the kth element\n    if count == k:\n        return arr1[i]\n\n    # If k is greater than count, find the kth element using binary search\n    left, right = 0, i\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] == arr2[j]:\n            count += 1\n            i = mid + 1\n            j += 1\n        elif arr1[mid] < arr2[j]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If one of the arrays is empty, return the other array\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    elif n2 > n1:\n        return find_kth(arr1, arr2, k)\n\n    # Calculate the middle indices of both arrays\n    mid1 = n1 // 2\n    mid2 = n2 // 2\n\n    # If the middle elements are equal, we have found the kth element\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n\n    # If k is smaller than the index of the middle element in arr1,\n    # we have found the kth element in arr2\n    elif k < mid1:\n        return find_kth(arr1[:mid1], arr2, k)\n\n    # If k is greater than the index of the middle element in arr2,\n    # we have found the kth element in arr1\n    else:\n        return find_kth(arr1, arr2[:mid2], k - mid1)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Take the number of digits in the given number\n    n = len(str(number))\n    \n    # Calculate the sum of the cubes of the digits of the number\n    sum = 0\n    for i in range(n):\n        digit = int(str(number)[i])\n        sum += digit ** 3\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    \n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    \n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_len = len(num_str)\n    num_sum = 0\n    \n    for i in range(num_len):\n        digit = int(num_str[i])\n        num_sum += digit ** num_len\n    \n    if num_sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # initialize the sum of digits to 0\n    sum = 0\n\n    # loop through each digit of the number\n    while number > 0:\n        digit = number % 10\n        sum += digit ** 3\n        number //= 10\n\n    # check if the sum of digits is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize variables\n    num_digits = len(str(number))\n    sum_of_cubes = 0\n\n    # calculate sum of cubes of individual digits\n    for digit in str(number):\n        digit = int(digit)\n        sum_of_cubes += digit ** num_digits\n\n    # compare sum of cubes with original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    A function to check whether the given number is Armstrong number or not.\n    \"\"\"\n    if n <= 0:\n        return False\n    total = 0\n    power = 1\n    while n > 0:\n        digit = n % 10\n        total += digit ** power\n        n //= 10\n        power += 1\n    return total == n\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))!= len(set(str(number))):\n        return False\n    else:\n        num = int(number)\n        temp = num\n        sum = 0\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** len(str(num))\n            temp //= 10\n        return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # Initialize a variable to keep track of the power of each digit\n    powers = [1] * 10\n    # Loop through the digits of the number and calculate the power of each digit\n    for digit in digits:\n        powers[digit] *= digit\n    # Calculate the sum of the power of each digit\n    total_power = sum(powers)\n    # Check if the total power is equal to the original number\n    return total_power == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    if not isinstance(n, int):\n        print(\"Error: input must be an integer.\")\n        return None\n    if n <= 0:\n        print(\"Error: input must be greater than 0.\")\n        return None\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit ** len(str(n))\n        n //= 10\n    return total == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize the sum of the cubes of the digits as 0\n    cube_sum = 0\n\n    # Iterate over the digits of the given number\n    for digit in str(number):\n        # Convert the digit to an integer and cube it\n        cube = int(digit) ** 3\n        # Add the cube to the sum\n        cube_sum += cube\n\n    # Check if the sum of the cubes of the digits is equal to the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum_of_numbers = 0\n    count = 0\n    sum_of_squares = 0\n    average = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # add the current number to the sum of numbers\n        sum_of_numbers += i\n\n        # add the current number to the sum of squares\n        square = i**2\n        sum_of_squares += square\n\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = sum_of_numbers / count\n\n    # print the results\n    print(\"Sum of numbers:\", sum_of_numbers)\n    print(\"Average:\", average)\n    print(\"Sum of squares:\", sum_of_squares)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_val = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_val += i\n        count += 1\n    avg_val = sum_val/count\n    return sum_val, avg_val"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        sum += count\n        count += 1\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initializing variables for sum and sum of squares\n    sum = 0\n    sum_square = 0\n    count = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # adding the current number to the sum\n        sum += i\n        # adding the square of the current number to the sum of squares\n        sum_square += i**2\n        # incrementing the count\n        count += 1\n\n    # finding the average of the first n numbers\n    average = sum / count\n\n    # printing the sum and average\n    print(\"Sum of first\", n, \"natural numbers:\", sum)\n    print(\"Sum of squares of first\", n, \"natural numbers:\", sum_square)\n    print(\"Average of first\", n, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    avg = sum / count\n    print(\"Sum of first\", n, \"natural numbers is\", sum)\n    print(\"Average of first\", n, \"natural numbers is\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    # Initialize sum and count to zero\n    total = 0\n    count = 0\n    \n    # Calculate sum and count of first n natural numbers\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    \n    # Calculate average\n    average = total / count\n    \n    # Return sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # iterate over the first n natural numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum += i\n        # increment the count\n        count += 1\n        \n    # calculate and return the average\n    return sum/count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    \n    average = sum / count\n    \n    print(\"The sum of the first\", n, \"natural numbers is:\", sum)\n    print(\"The average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(number):\n        total += i+1\n    average = total/number\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n and returns True if n is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n,\"is even.\")\n    else:\n        print(n,\"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # to store count of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return None # if no repeated characters are found in the string"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the frequency of each character\n    char_freq = {}\n    # iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # iterate through the dictionary and find the first repeated character\n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated character found in the string.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If the string has no repeated character, it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    char_dict = {}\n\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first character that appears more than once in the string\n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            lucid.append(lucid[-1] + lucid[-2])\n        else:\n            lucid.append(lucid[-1] ** 2)\n    return lucid[:n]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [2]\n    i = 1\n    \n    while True:\n        if i % 2 == 0:\n            if i in ludic_nums:\n                break\n            else:\n                ludic_nums.append(i)\n        i += 1\n        \n    for num in ludic_nums:\n        if num <= n:\n            yield num\n            "
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucids.append(i)\n        else:\n            lucids.append(i**2 - (i-2)**2)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(2, n+1):\n        if i == 2:\n            lucid_nums.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n    while current_number <= n:\n        lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_list = []\n    for i in range(n+1):\n        lucid = 0\n        while True:\n            if lucid**2 <= i:\n                break\n            lucid += 1\n        lucid_list.append(lucid)\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid.append(1)\n        elif i == 2:\n            lucid.append(2)\n        else:\n            for j in range(2, i//2+1):\n                if i%j == 0:\n                    break\n            else:\n                lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n):\n        if i == 0:\n            lucid_numbers.append(i)\n        elif i > 0:\n            lucid_numbers.append(i**2)\n    return lucid_numbers\n\nprint(get_ludic(10))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        for j in range(i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-(i+1)] = words[-(i+1)], words[i]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words into a string\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    \n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them together with spaces\n    reversed_words =''.join(word[::-1] for word in words)\n    # Return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The number is prime:\", is_prime(num))"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num**0.5)+1, 6):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literals.append((text[start:end], start, end))\n    return literals\n\ntext = \"This is a test string with literals like 123 and 456.\"\npattern = r\"\\d+\"\nliterals = find_literals(text, pattern)\nprint(literals)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find all matches of the pattern in the text using re.findall()\n    matches = re.findall(pattern, text)\n    \n    # if there are matches, iterate through them and return the first match with a start and end index\n    if matches:\n        for match in matches:\n            return match, match.start(), match.end()\n    \n    # if there are no matches, return None\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function takes a string and a regex pattern as input, and returns a tuple of the matching substring, the start index, and the end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, 0, 0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(f\"Match: {match}, Start: {start}, End: {end}\")\n        return match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        literal = text[match.start():match.end()]\n        print(f\"Match {matchNum}: {literal}\")\n        return literal, match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog barks and wags its tail.\"\npattern = r'\\b[a-z]+\\b'\nresult = find_literals(text, pattern)\nprint(result)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0], 0, len(text)\n    else:\n        return None, -1, -1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n\n    Parameters\n    ----------\n    n : int\n        The index of the bell number to be found.\n\n    Returns\n    -------\n    int\n        The nth bell number.\n    \"\"\"\n    return (n * (n - 1) * 2**n) // (factorial(n))\n\ndef factorial(n):\n    \"\"\"\n    Compute the factorial of a number.\n\n    Parameters\n    ----------\n    n : int\n        The number whose factorial is to be computed.\n\n    Returns\n    -------\n    int\n        The factorial of `n`.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find nth bell number.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer greater than zero.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 1\n    for i in range(n):\n        bell_num = (bell_num * (n-i)) / i\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (1/math.factorial(n)) * math.pow(math.e, -1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    This function will find the nth Bell number using the formula:\n\n    B(n) = (n/2) * ((n/2) + 1)\n\n    Input: n (integer) - the position of the Bell number to find\n\n    Output: The nth Bell number\n    '''\n\n    return (n//2) * ((n//2) + 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [0, 1]\n    for i in range(2, n+1):\n        bell_list.append(bell_list[-1] + bell_list[-2])\n    return bell_list[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # checking if k is in range\n    if L < 1 or L > len(list1):\n        return \"Invalid value of k.\"\n    \n    # creating a new list without the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    \n    # returning the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the k'th element from the list\n    kth_element = list1[L-1]\n    list1.remove(kth_element)\n    # Return the list with the first k-1 elements\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[:-1]\n    else:\n        return [i for i in list1[:-1] if i!= list1[L-1]] + [list1[-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L # k is the index of the element to be removed\n    n = len(list1) # n is the length of the list\n\n    if k == 1:\n        return list1[2:] # remove the element at index 1\n    elif k == n:\n        return list1[:-1] # remove the element at index n-1\n    else:\n        return list1[:k-1] + list1[k:] # remove the element at index k and add the remaining elements to the result list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L and returns a list with the same elements, but the k'th element removed.\n    If L is greater than the length of the list, then the function returns an empty list.\n    '''\n    if L > len(list1):\n        return []\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and a non-negative integer k and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k >= len(list1):\n        raise ValueError(\"k is too large for the given list\")\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the kth element from a list.\n\n    Args:\n        lst (list): The list to remove an element from.\n        k (int): The index of the element to remove.\n\n    Returns:\n        list: The modified list with the element at index k removed.\n    \"\"\"\n    # create a copy of the list to remove the element from\n    new_lst = lst.copy()\n    # remove the kth element from the list\n    new_lst.pop(k)\n    # return the modified list\n    return new_lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Convert the list to a tuple\n    list1 = tuple(list1)\n\n    # Check if L is a valid input\n    if L <= 0 or L > len(list1):\n        return None\n\n    # Remove the k'th element from the tuple\n    list1 = list1[:L-1] + list1[L-1:]\n\n    # Convert the tuple back to a list\n    list1 = list(list1)\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)-1):\n        if i!= k:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the max of then'th column.\n    \"\"\"\n    # Find the maximum value in each row\n    max_values = [max(row[i] for row in test_list) for i in range(len(test_list[0]))]\n    # Find the index of the maximum value in then'th column\n    index = max_values.index(max(max_values))\n    # Return the maximum value in then'th column\n    return test_list[index][N-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max(max(row) for row in test_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the list is empty or not\n    if not test_list:\n        return None\n\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # Check if the given N is valid or not\n    if N < 1 or N > num_cols:\n        return None\n\n    # Initialize the maximum value\n    max_val = None\n\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Get the nth column value\n        col_val = row[N-1]\n\n        # Check if the current column value is greater than the maximum value\n        if max_val is None or col_val > max_val:\n            max_val = col_val\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max value to be the first value in the first row\n    max_value = test_list[0][0]\n    # loop through the rest of the rows\n    for row in test_list[1:]:\n        # check if the current row has a value greater than the max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N-1 < len(row):\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in matrix:\n        if len(row) > N:\n            if row[N] > max_value:\n                max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i < N:\n            continue\n        if max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n\n    # Check if the n is within the valid range\n    if N < 1 or N > num_cols:\n        return \"Invalid input. n must be between 1 and the number of columns in the matrix.\"\n\n    # Initialize the max value to negative infinity\n    max_val = float('-inf')\n\n    # Loop through each row of the matrix and compare then'th column to the max value\n    for i in range(num_rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        first_element = lst[i][0]\n        second_element = lst[i][1]\n        merged_lst.append([first_element, second_element])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # create a list to store the merged lists\n    merged_lst = []\n    # loop through each sublist in the list of lists\n    for sublist in lst:\n        # check if the sublist has two elements\n        if len(sublist) == 2:\n            # add the first element of the sublist to the merged list\n            merged_lst.append([sublist[0], sublist[1]])\n    # return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable\n    cumulative_sum = 0\n    \n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # If the value is not None, add it to the cumulative sum\n        if test_list[i] is not None:\n            cumulative_sum += test_list[i]\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # Loop through the list and add up the values\n    for num in test_list:\n        cum_sum += num\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for item in test_list:\n        cumsum += item\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = 0\n        count = 0\n        for num in num_tuple:\n            total += num\n            count += 1\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    avg_list = []\n    \n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the sum of all the numbers in the tuple\n        total = sum(tup)\n        # calculate the average by dividing the sum by the length of the tuple\n        avg = total / len(tup)\n        # add the average to the list of averages\n        avg_list.append(avg)\n    \n    # return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total/count\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        avg = total / len(num_tuple)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        count = 0\n        for value in num:\n            total += value\n            count += 1\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            average = sum(num) / len(num)\n            result.append(average)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_tuples = len(nums)\n    avg_list = []\n    for i in range(num_tuples):\n        num_elements = len(nums[i])\n        total = 0\n        for j in range(num_elements):\n            total += nums[i][j]\n        avg = total / num_elements\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sublist in nums:\n        total = 0\n        for num in sublist:\n            total += num\n        averages.append(total/len(sublist))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        count = len(tup)\n        for num in tup:\n            total += num\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element-wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must match\")\n    result_tup = tuple((i % j for i, j in zip(test_tup1, test_tup2)))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples should be equal.\")\n        return\n    \n    # Perform element-wise modulo\n    modulo_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    # Return the modulo tuple\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return None\n    \n    # Perform element-wise modulo operation\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    curr_x = 0\n    curr_y = d\n    jumps = 0\n    \n    # Loop until the point (0, d) is reached\n    while curr_x!= 0:\n        # Increment the jumps count\n        jumps += 1\n        \n        # Check if the next step in the x direction will reach the point (0, d)\n        next_x = curr_x + 1\n        if next_x <= steps:\n            curr_x = next_x\n        else:\n            curr_x = steps\n            \n        # Check if the next step in the y direction will reach the point (0, d)\n        next_y = curr_y - 1\n        if next_y >= 0:\n            curr_y = next_y\n        else:\n            curr_y = 0\n            \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    start = 0\n    \n    while start < steps:\n        if start + d >= steps:\n            return count\n        \n        start += d\n        count += 1\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    min_jumps = 1\n    for i in range(1, steps):\n        if d > 0:\n            d -= 1\n            min_jumps += 1\n        else:\n            d += 1\n            min_jumps += 1\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Convert given d to a tuple to store the coordinates\n    d = (d, 0)\n    \n    # Initialize variables to store the required jumps and the current step\n    jumps = 0\n    current_step = 0\n    \n    # Iterate through the given number of steps\n    while current_step < steps:\n        # If current step is equal to the desired point, return the required jumps\n        if current_step == steps - 1:\n            return jumps\n        \n        # Find the shortest distance to the desired point\n        shortest_distance = steps - current_step\n        \n        # Calculate the maximum distance that can be reached with the current number of jumps\n        max_distance = (shortest_distance**2 - (2*shortest_distance - steps) + 1)**0.5\n        \n        # Update the required jumps based on the maximum distance\n        jumps = int(max_distance // d[0])\n        \n        # Update the current step based on the number of jumps\n        current_step += jumps\n        \n    # If the loop has not exited, there is no valid path to reach the desired point\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Function to check if we can reach the point (d, 0) from origin\n    def reachable(x):\n        if x < 0 or x >= steps:\n            return False\n        return reachable(x+d) or reachable(x+1)\n\n    # Function to count the number of jumps required to reach the point (d, 0) from origin\n    def count_jumps(x):\n        if x == 0:\n            return 1\n        if reachable(x-1):\n            return count_jumps(x-1) + count_jumps(x-d)\n        return count_jumps(x-d)\n\n    # Return the minimum number of jumps required\n    return count_jumps(steps-1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    step = 0\n    \n    # Loop through each step\n    while step < steps:\n        # Move towards the right\n        step += 1\n        \n        # Check if we have reached the point (d, 0)\n        if step == d:\n            # Increment count\n            count += 1\n            \n            # Move upwards\n            step -= 1\n    \n    # Return the count of jumps required\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a 2d array to store the minimum number of jumps required to reach the given point \n    min_jumps_arr = [[0 for x in range(steps+1)] for y in range(d+1)]\n\n    # initialize the minimum jumps required to reach (0, 0) \n    min_jumps_arr[0][0] = 0\n\n    # iterate over all the possible points of the 2d plane from (0, 0) to (d, 0) \n    for i in range(1, d+1): \n        # iterate over all the possible steps of the current point \n        for j in range(1, steps+1): \n            # check if the current point is at (d, 0) \n            if i == d and j == steps: \n                min_jumps_arr[i][j] = 1\n            # check if the current point is at (0, 0) \n            elif i == 0 and j == steps: \n                min_jumps_arr[i][j] = 1\n            # check if the current point is a corner point \n            elif i == 0 or i == d or j == 0 or j == steps: \n                min_jumps_arr[i][j] = min_jumps_arr[i-1][j-1]\n            # check if the current point is an edge point \n            else: \n                # check if the point can be reached by jumping to any other point of the plane \n                if i-d >= 0 and j-d >= 0 and min_jumps_arr[i-1][j-1]!= 1: \n                    min_jumps_arr[i][j] = min_jumps_arr[i-1][j-1]\n                # check if the point can be reached by jumping to (0, 0) \n                elif i-1 >= 0 and j-1 >= 0 and min_jumps_arr[i][j-1]!= 1: \n                    min_jumps_arr[i][j] = min_jumps_arr[i-1][j-1]\n                # check if the point can be reached by jumping to (d, 0) \n                elif i-d >= 0 and j-steps >= 0 and min_jumps_arr[i-1][j-1]!= 1: \n                    min_jumps_arr[i][j] = min_jumps_arr[i-1][j-1]\n                # if none of the above cases are true, then the point cannot be reached from (0, 0) \n                else: \n                    min_jumps_arr[i][j] = 1\n\n    # return the minimum number of jumps required to reach (d, 0) from origin \n    return min_jumps_arr[d][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two parameters, steps and d, which represent the number of steps and the distance required to reach the point (d, 0) from origin respectively.\n    It returns the minimum number of jumps required to reach the point (d, 0) from origin.\n    '''\n\n    # Initialize variables to store the number of jumps and the minimum number of jumps\n    jumps = 0\n    min_jumps = float('inf')\n\n    # Iterate through the number of steps and calculate the number of jumps required\n    for step in range(steps):\n        # Calculate the distance to the point (d, 0)\n        distance = d - step\n\n        # If the distance is less than or equal to 0, then we have reached the point (d, 0) from origin\n        if distance <= 0:\n            # If the current number of jumps is smaller than the minimum number of jumps, update the minimum number of jumps\n            if jumps < min_jumps:\n                min_jumps = jumps\n\n            # Reset the number of jumps\n            jumps = 0\n            d = step\n        else:\n            # If the distance is greater than 0, then we can jump one step\n            jumps += 1\n\n    # If there are any remaining steps left, then the point (d, 0) from origin cannot be reached, so return -1\n    if d!= steps:\n        return -1\n\n    # If the minimum number of jumps found is greater than or equal to 0, then return it\n    if min_jumps >= 0:\n        return min_jumps\n\n    # If the minimum number of jumps found is less than 0, then there is no point (d, 0) from origin, so return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    current_point = (0, 0)\n    current_distance = 0\n    \n    while True:\n        count += 1\n        current_distance += d\n        if current_distance == 0:\n            return count\n        elif current_distance > steps:\n            return -1\n        else:\n            if current_point[0] >= d:\n                return -1\n            current_point = (current_point[0] + 1, current_point[1])"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # initialize variables to store the number of jumps and the current position\n    jumps = 0\n    x = 0\n    \n    # loop through each step and check if the current position is at the point of form (d, 0)\n    for i in range(steps):\n        x += 1\n        if x == d:\n            jumps += 1\n            x = 0\n    \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n    else:\n        for i in range(len(nums1)):\n            try:\n                result.append(nums1[i] / nums2[i])\n            except ZeroDivisionError:\n                print(\"Cannot divide by zero.\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # If the length of the two lists are not equal, return False.\n    if len(nums1)!= len(nums2):\n        return False\n\n    # Initialize a new list to store the result.\n    result = []\n\n    # Iterate over each element in both lists.\n    for i in range(len(nums1)):\n        # If both elements are integers, divide them element wise and append the result to the new list.\n        if isinstance(nums1[i], int) and isinstance(nums2[i], int):\n            result.append(nums1[i] / nums2[i])\n        # If either one of the elements is a float, return False.\n        elif not isinstance(nums1[i], int) and not isinstance(nums2[i], int):\n            return False\n\n    # Return the new list containing the results.\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # if the length of the lists are not equal, return an empty list\n    if len(nums1)!= len(nums2):\n        return []\n    # create an empty list to store the result\n    result = []\n    # iterate over the lists\n    for i in range(len(nums1)):\n        # divide the corresponding elements and append the result to the result list\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments and returns a list of their element-wise division.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    # Function to move all the numbers to the end of the given string\n    # Use a loop to iterate through each character in the string\n    # If the character is a number, append it to a new string\n    # Concatenate the new string with the original string\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n    return new_str + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    nums.sort(reverse=True)\n    nums_str = ''.join(nums)\n    test_str = ''.join([char for char in test_str if char.isdigit() == False])\n    return test_str + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of numbers in the string\n    num_list = re.findall(r'\\d+', test_str)\n    # sort the list of numbers\n    num_list.sort(reverse=True)\n    # join the numbers back into the string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n\n    # Separate the string into two lists: numbers and alphabets\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n\n    # Move the numbers to the end of the alphabets list\n    num_list.reverse()\n    for i in range(len(alpha_list)):\n        alpha_list[i] = num_list[i]\n\n    # Concatenate the two lists\n    new_str = ''.join(alpha_list)\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize an empty list to store the numbers\n    num_list = []\n\n    # Loop through each character in the given string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the num_list\n            num_list.append(char)\n        # If the character is not a number, add it to the end of the original string\n        else:\n            # Split the original string into two parts\n            new_str, rest = test_str.split(char)\n            # Append the first part to the num_list and the second part to the original string\n            num_list.append(rest)\n            test_str = new_str\n\n    # Join the num_list into a single string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n    return test_str.replace(numbers, \"\") + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Split the string into characters\n    char_list = list(test_str)\n\n    # Loop through each character and move any number to the end\n    for i in range(len(char_list)):\n        if char_list[i].isdigit():\n            char_list.append(char_list.pop(i))\n\n    # Join the characters back into a string and return the result\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    found_num = False\n    for char in test_str:\n        if char.isdigit():\n            found_num = True\n        elif found_num:\n            result += char\n        else:\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a list to store all the numbers\n    nums = []\n    # Define a variable to store the length of the string\n    length = len(test_str)\n    # Loop through each character of the string\n    for i in range(length):\n        # If the character is a number, add it to the nums list\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n        # If the character is not a number, append it to the end of the string\n        else:\n            test_str += test_str[i]\n    # Return the modified string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Step 1: Remove duplicates from the list\n    a = list(set(a))\n    # Step 2: Sort the list in descending order\n    a.sort(reverse=True)\n    # Step 3: Initialize variables to store the result and the current subset\n    max_size = 0\n    current_subset = []\n    # Step 4: Iterate through the sorted list and check if the current number is divisible by all the numbers in the current subset\n    for num in a:\n        if all(num % i == 0 for i in current_subset):\n            current_subset.append(num)\n            if len(current_subset) > max_size:\n                max_size = len(current_subset)\n        else:\n            if len(current_subset) > max_size:\n                max_size = 1\n            current_subset = [num]\n    # Step 5: Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            size += 1\n            max_size = max(max_size, size)\n        else:\n            size = 1\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables to store the size of the largest subset and the maximum value in the subset\n    max_subset_size = 1\n    max_value = a[0]\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the current value is not divisible by the next value, add 1 to the subset size and update the maximum value\n        if a[i] % a[i+1]!= 0:\n            max_subset_size += 1\n            max_value = max(max_value, a[i])\n        # If the current value is divisible by the next value, update the maximum value\n        else:\n            max_value = max(max_value, a[i])\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = list(map(int, a.split()))\n    a.sort()\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            max_size = max(max_size, 2)\n        elif a[i] % 3 == 0:\n            max_size = max(max_size, 3)\n        else:\n            max_size = max(max_size, 4)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize the largest subset to 0\n    largest_subset_size = 0\n    # Initialize the current subset size to 0\n    current_subset_size = 0\n    # Initialize the index of the current subset to 0\n    current_subset_index = 0\n    # Iterate through the list\n    for i in range(len(a)):\n        # If the current number is not divisible by the current subset size, add the current number to the current subset\n        if a[i] % current_subset_size!= 0:\n            current_subset_size += 1\n            current_subset_index += 1\n            # If the current subset size is greater than the largest subset size, update the largest subset size\n            if current_subset_size > largest_subset_size:\n                largest_subset_size = current_subset_size\n        # If the current number is divisible by the current subset size, add the current number to the current subset\n        else:\n            current_subset_size += 1\n            # If the current subset size is greater than the largest subset size, update the largest subset size\n            if current_subset_size > largest_subset_size:\n                largest_subset_size = current_subset_size\n    # Return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # create a set of all possible divisors\n    divisors = set(range(1, max(a)+1))\n\n    # loop through the list and check if every pair is divisible\n    for num in a:\n        # check if the current number is divisible by any of the divisors in the set\n        if num % 2 == 0:\n            divisors.discard(num//2)\n        else:\n            divisors.discard(num*2)\n\n    # return the size of the largest subset\n    return max(len(divisors), 1)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize the variables\n    count = 0\n    max_count = 0\n    max_size = 0\n    current_count = 1\n\n    # loop through the list\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_count += 1\n        else:\n            if current_count > max_count:\n                max_count = current_count\n                max_size = i - current_count + 1\n            current_count = 1\n\n    # check if the current count is greater than the maximum count\n    if current_count > max_count:\n        max_count = current_count\n        max_size = len(a) - current_count + 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    # Initialize the maximum subset size\n    max_subset_size = 1\n    # Initialize the current subset size\n    subset_size = 1\n    # Loop through each element in the list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the previous element, increment the subset size and update the maximum subset size if necessary\n        if a[i] % a[i-1] == 0:\n            subset_size += 1\n            if subset_size > max_subset_size:\n                max_subset_size = subset_size\n        # If the current element is not divisible by the previous element, reset the subset size to 1\n        else:\n            subset_size = 1\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1]*n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize two pointers, one at the start and the other at the end of the list\n    start = 0\n    end = len(a) - 1\n    # initialize the maximum size of the largest subset to 0\n    max_size = 0\n    # initialize a variable to keep track of the size of the current subset\n    current_size = 0\n    # loop while the start pointer is less than or equal to the end pointer\n    while start <= end:\n        # if the current element at the start pointer is divisible by the next element at the end pointer,\n        # increment the size of the current subset and move both pointers towards each other\n        if a[start] % a[end] == 0:\n            current_size += 1\n            start += 1\n            end -= 1\n        # if the current element at the start pointer is not divisible by the next element at the end pointer,\n        # decrement the size of the current subset and move the start pointer towards the end of the list\n        else:\n            current_size -= 1\n            end -= 1\n        # update the maximum size of the largest subset if necessary\n        max_size = max(max_size, current_size)\n    # return the maximum size of the largest subset\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the median\n    if n % 2 == 0:\n        median = sorted_list[n//2-1]\n    else:\n        median = sorted_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists and sort it\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Calculate the median\n    median = merged_list[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # check if the arrays have same size\n    if len(arr1)!= len(arr2):\n        raise ValueError('Arrays must have same size.')\n\n    # sort the arrays\n    arr1.sort()\n    arr2.sort()\n\n    # calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr1[mid-1] + arr1[mid] + arr2[mid-1] + arr2[mid]) / 4\n    else:\n        median = arr1[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the length of the merged list\n    length = len(merged_list)\n\n    # Calculate the median\n    if length % 2 == 0:\n        # If the length is even, take the average of the two middle values\n        median = (merged_list[length//2-1] + merged_list[length//2]) / 2\n    else:\n        # If the length is odd, take the middle value\n        median = merged_list[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Find the middle element of the merged list\n    mid = n // 2\n\n    # If the length of the merged list is odd, then the median is in the middle element\n    if n % 2 == 1:\n        median = merged_list[mid]\n    else:\n        # If the length of the merged list is even, then the median is average of two middle elements\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    sorted_list = merge_lists(arr1, arr2)\n\n    # Find the median index\n    mid = n // 2\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median\n\ndef merge_lists(arr1, arr2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n\n    merged_list += arr1[i:]\n    merged_list += arr2[j:]\n\n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the median index of arr1 and arr2\n    median_index = n // 2\n    \n    # If the length of arr1 is odd, the median is the middle element of arr1\n    if n % 2 == 1:\n        median = arr1[median_index]\n    # If the length of arr1 is even, the median is the average of the middle elements of arr1 and arr2\n    else:\n        median = (arr1[median_index] + arr1[median_index - 1]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    arr = arr1 + arr2\n    arr.sort()\n    # Find the median\n    if n % 2 == 0:\n        # If the length of the array is even, return the average of the two middle values\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        # If the length of the array is odd, return the middle value\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge two sorted lists into one\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Return the median\n    return merged_list[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n\n    result = []\n    for num in nums:\n        result.append(num ** n)\n\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert string to uppercase\n    uppercase_string = string.upper()\n    # Return uppercase string\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as an input and returns True if all the characters in the string are uppercase, and False otherwise.\n    \"\"\"\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Accessing the last element of the list\n    last_element = newList[-1]\n    # Removing the last element from the list\n    newList.pop()\n    # Inserting the last element as the first element of the list\n    newList.insert(0, last_element)\n    # Returning the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least 2 elements.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    # checking if the length of the list is 1 or less\n    if n <= 1:\n        return newList\n    # swapping the first and last element of the list\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # set the first element to the last element and the last element to the first element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # return the new list with the elements interchanged\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return \"List should contain at least 2 elements\"\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # check that the given list has at least two elements\n    if len(newList) < 2:\n        return \"Error: the list must have at least two elements\"\n    \n    # swap the first and last element of the list\n    first, last = newList[0], newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Assign the length of the list to a variable\n    length = len(newList)\n    # Check if the length is greater than 1, as swapping only works for lists with at least two elements\n    if length > 1:\n        # Swap the first and last elements of the list\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        # Print the new list after interchanging the first and last elements\n        print(\"New list after interchanging the first and last elements:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the semi-circle area\n    area_semi_circle = 2 * r * r\n    \n    # Find the area of the largest triangle\n    area_largest_triangle = (3 * r * r) / 4\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the length of the longest side of the triangle\n    a = math.sin(math.pi/3) * r\n    # Find the length of the shortest side of the triangle\n    b = math.sin(2 * math.pi/3) * r\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b) / 2\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b))\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the semi-diameter\n    s = 2 * r\n    \n    # calculate the base of the triangle\n    base = (3 * r ** 2) / (4 * (1 + (s / r) ** 2))\n    \n    # calculate the height of the triangle\n    height = (r ** 2) / (4 * (1 - (s / r) ** 2))\n    \n    # calculate the area of the triangle\n    area = 0.5 * base * height\n    \n    # print the area of the largest triangle\n    print(\"Area of the largest triangle that can be inscribed in a semicircle with a radius of\", r, \"is\", area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for area of triangle\n    A = 1/2*r**2\n    # Formula for area of inscribed circle\n    C = 2*r\n    # Formula for perimeter of inscribed circle\n    P = 2*3.14159265*r\n    # Formula for area of triangle that can be inscribed in the inscribed circle\n    B = C**2 - A**2\n    # Area of largest triangle that can be inscribed in the inscribed circle\n    largest_area = (B/(2*P))**(1/2)\n    # Return the area of the largest triangle that can be inscribed in the inscribed circle\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Using Heron's formula to find the area of a triangle\n    a = 2 * r * math.sin(math.pi / 3)\n    b = math.sqrt(3) * r * math.sin(2 * math.pi / 3)\n    c = math.sqrt(3) * r * math.sin(4 * math.pi / 3)\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the circumference of a semicircle with the given radius\n    circ = 2 * math.pi * r\n\n    # Calculate the area of a triangle with sides of length 1\n    area = 0.5 * r ** 2\n\n    # Calculate the area of the largest possible triangle\n    max_area = (circ / 3) * (area ** 0.5) ** 2\n\n    # Return the maximum area that can be inscribed in the semicircle\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculating the semi-circle radius using the formula: r = a * (1 - (s/2)^2)\n    a = 2 * r\n\n    # Defining the area of a triangle using Heron's formula\n    def triangle_area_formula(a, b, c):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n\n    # Finding the largest triangle that can be inscribed in the semicircle\n    a = max(r, a)\n    b = min(2 * r, a)\n    c = min(r, a)\n    area = max(triangle_area_formula(a, b, c), triangle_area_formula(a, c, b))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): the radius of the semicircle\n\n    Returns:\n    float: the area of the largest triangle that can be inscribed in the semicircle\n    \"\"\"\n    pi = 3.14159265358979323846\n    area = 0\n    for i in range(1, 30):\n        s = (2 * i - 1) * pi * r ** 2\n        area = max(area, s)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1, 6):\n        s = 2 * r * i\n        area += s * (s - r ** 2) ** 0.5\n    area *= 2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a square that is equal to r\n    area_sq = r**2\n    \n    # calculate the circumference of the semicircle\n    circumference = 2*r*3.14\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_max = area_sq/(2*circumference)\n    \n    return area_max"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # If no end is provided, default to the last index of the array\n    if end is None:\n        end = len(array)-1\n    \n    # Find the smallest missing number\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    \n    # If no missing number is found, the array is fully sorted and the last index is the last missing number\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes an array of natural numbers and returns the first missing number in the array.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Parameters:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the search range. Default is 0.\n        end (int): The ending index of the search range. Default is None (i.e., the last index of the array).\n\n    Returns:\n        int: The smallest missing number.\n    \"\"\"\n\n    # If end is None, set it to the length of the array - 1\n    if end is None:\n        end = len(array) - 1\n\n    # Loop through the array from the start index to the end index\n    for i in range(start, end + 1):\n        # If the current element is missing, return the current index\n        if array[i]!= i:\n            return i\n\n    # If we reach this point, there is no missing number\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for num in range(start, end + 1):\n        if array[num]!= num:\n            return num\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes an array of natural numbers and returns the smallest missing number in the array.\n    If the array is already sorted, it returns the first missing number.\n    If the array is not sorted, it uses a binary search algorithm to find the smallest missing number.\n    '''\n    # If the array is already sorted, return the first missing number\n    if all(array[i] < array[i+1] for i in range(len(array)-1)):\n        return next((i for i in range(start, end+1) if i not in array), None)\n    \n    # If the array is not sorted, use a binary search algorithm to find the smallest missing number\n    else:\n        low, high = start, end\n        while low <= high:\n            mid = (low + high) // 2\n            if mid not in array:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Find the first missing number in a sorted list of natural numbers.\n\n    Parameters\n    ----------\n    array : list of integers\n        A sorted list of natural numbers.\n    start : integer\n        The starting index of the array.\n    end : integer\n        The ending index of the array.\n\n    Returns\n    -------\n    integer\n        The smallest missing number in the array.\n    \"\"\"\n    # Check if the array is sorted\n    if not all(x < y for x, y in zip(array[start:], array[:end or len(array)])) or start == 0:\n        raise ValueError(\"The array must be sorted.\")\n\n    # Initialize the missing number and the counter\n    missing = start\n    count = 1\n\n    # Iterate over the array\n    while count <= len(array) - start:\n        # Check if the current number is missing\n        if array[missing] - missing!= count:\n            return missing\n        else:\n            missing += count\n            count += 1\n\n    # The missing number is the last number in the array\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i == array[i]:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if mid == 0 or array[mid - 1]!= mid:\n        return mid\n    else:\n        return find_First_Missing(array, mid + 1, end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] < mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if end is not passed, set it to the last index of the array\n    if end is None:\n        end = len(array)-1\n    # initialize the variable to store the minimum missing number\n    min_missing = start\n    # loop through the array to find the smallest missing number\n    for num in array:\n        if num > min_missing:\n            min_missing = num + 1\n    # return the minimum missing number\n    return min_missing"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing only the even numbers in the input list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if not (dx == 0 and dy == 0)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < 9:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < 9:\n        adjacent.append((x, y+1))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the coordinates from the tuple\n    x, y = ele\n    \n    # Define the adjacent coordinates\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    # If the tuple contains a sub-coordinate, add it to the list\n    if sub:\n        adjacent += [(x+sub[0], y+sub[1])]\n    \n    # Return the list of adjacent coordinates\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # Convert the input tuple into a list of coordinates\n    coord = [int(x) for x in ele]\n    \n    # Calculate the adjacent coordinates using a nested list comprehension\n    adj = [[coord[0]-1, coord[1]], [coord[0]+1, coord[1]], [coord[0], coord[1]-1], [coord[0], coord[1]+1]]\n    \n    # Remove duplicates and sort the adjacent coordinates\n    adj = list(set(adj))\n    adj.sort()\n    \n    # Add the sublist to the input tuple and return the updated tuple\n    sub.append(adj)\n    return tuple(sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x, y = ele\n    if x > 0:\n        adj.append((x - 1, y))\n    if x < 5:\n        adj.append((x + 1, y))\n    if y > 0:\n        adj.append((x, y - 1))\n    if y < 5:\n        adj.append((x, y + 1))\n    sub.extend(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        if y == 0:\n            sub.append((x+1, y-1))\n            sub.append((x+1, y))\n            sub.append((x+1, y+1))\n        elif y == 1:\n            sub.append((x-1, y))\n            sub.append((x, y))\n            sub.append((x+1, y))\n        else:\n            sub.append((x, y-1))\n            sub.append((x, y+1))\n    elif x == 1:\n        if y == 0:\n            sub.append((x-1, y))\n            sub.append((x, y))\n            sub.append((x-1, y-1))\n        elif y == 1:\n            sub.append((x-1, y-1))\n            sub.append((x, y))\n            sub.append((x-1, y+1))\n        else:\n            sub.append((x, y-1))\n            sub.append((x, y+1))\n    else:\n        if y == 0:\n            sub.append((x-1, y))\n            sub.append((x, y))\n            sub.append((x+1, y))\n        elif y == 1:\n            sub.append((x-1, y-1))\n            sub.append((x, y))\n            sub.append((x+1, y))\n        else:\n            sub.append((x, y-1))\n            sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n    for i in range(row-1, row+2):\n        for j in range(col-1, col+2):\n            if i >= 0 and i < 10 and j >= 0 and j < 10:\n                if (i, j)!= ele:\n                    adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function takes a coordinate tuple and returns a list of all adjacent coordinates.\n    If the input coordinate is None, an empty list is returned.\n    '''\n    if sub is None:\n        sub = []\n    if ele is None:\n        return sub\n    x, y = ele\n    sub.append((x-1, y)) # Up\n    sub.append((x+1, y)) # Down\n    sub.append((x, y-1)) # Left\n    sub.append((x, y+1)) # Right\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the x and y coordinates of the given element\n    x, y = ele\n\n    # Define a list of adjacent coordinates\n    adjs = []\n\n    # Iterate through the x and y axes and check for adjacent coordinates\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Check if the current coordinates are within the boundary of the array\n            if 0 <= x + dx < len(sub) and 0 <= y + dy < len(sub[0]):\n                # Add the adjacent coordinate to the list\n                adjs.append((x + dx, y + dy))\n\n    # Return the list of adjacent coordinates\n    return adjs"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the x and y coordinates of the given element from the list\n    x, y = ele\n\n    # Create a list to store the adjacent coordinates\n    adj = []\n\n    # Add the element itself to the list\n    adj.append(ele)\n\n    # Loop through all the possible directions and add the adjacent coordinates to the list\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                # Check if the adjacent coordinates exist within the matrix bounds\n                if 0 <= x + i < len(sub) and 0 <= y + j < len(sub[0]):\n                    # Add the adjacent coordinates to the list\n                    adj.append((x + i, y + j))\n\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert spaces to underscores\n    text = text.replace(' ', '_')\n    # convert underscores to spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i].isspace():\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    This function will replace all spaces in a given string with an underscore and vice versa.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n\n    # Replace underscores with spaces\n    text = text.replace('_','')\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the text into words\n    words = text.split()\n    # loop through each word\n    for i in range(len(words)):\n        # if the word contains whitespaces, replace them with underscores\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n        # if the word does not contain whitespaces, replace them with whitespaces\n        else:\n            words[i] = words[i].replace('_','')\n    # join the words with whitespaces and return the result\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    new_text = text.replace(' ', '_').replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\") # replace spaces with underscores\n    text = text.replace(\"_\", \" \") # replace underscores with spaces\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    \n    for i in range(len(zero_index)-1, -1, -1):\n        num_list.insert(zero_index[i]+1, 0)\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # loop through the list and move all zeroes to the end of the list\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + [0] + num_list[zero_index:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers: one at the beginning and one at the end of the list.\n    i = 0\n    j = len(num_list) - 1\n\n    # Move all zeroes to the end of the list.\n    while i < j:\n        if num_list[i] == 0:\n            # Move the element at index i to the index j.\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1  # Decrement j to move the current element to the next position.\n        else:\n            i += 1  # Increment i to move the next element.\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one at the beginning of the list and the other at the end\n    # of the list.\n    i = 0\n    j = len(num_list) - 1\n    \n    # While i is less than j, move all non-zero elements to the left of i and increment i.\n    while i < j:\n        while num_list[i]!= 0:\n            i += 1\n        num_list[i], num_list[j] = num_list[j], num_list[i]\n        i += 1\n        j -= 1\n    \n    # Return the updated list.\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    return [x for x in num_list if x!= 0] + [0] * (len(num_list) - len([x for x in num_list if x!= 0]))"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    # Create a copy of the input list\n    new_list = num_list[:]\n    # Loop through the new list\n    for i in range(len(new_list)):\n        # If the current element is zero, move it to the end of the list\n        if new_list[i] == 0:\n            new_list[i], new_list[len(new_list)-1] = new_list[len(new_list)-1], new_list[i]\n    # Return the new list\n    return new_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        xor = 0\n        for j in range(n):\n            xor ^= arr[j]\n        total ^= xor\n    return total"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize variables\n    sum = 0\n    xor = 0\n\n    # loop through all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate xor of the pair of elements\n            xor = arr[i] ^ arr[j]\n            # add xor to the sum\n            sum += xor\n\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = arr[i] ^ arr[j]\n            total_sum += xor_sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list and returns the sum of xor of all pairs of numbers in the list.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and its size n as input,\n    and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    # initialize a variable to store the xor of all pairs of numbers\n    xor_sum = 0\n\n    # loop through all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n\n    # return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the input iterable\n    hq.heapify(iterable)\n    \n    # extract elements from the max heap and append them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the given list\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # extract the maximum element from the heap and insert it into a new heap, until the heap becomes empty\n    sorted_list = []\n    while heap:\n        # extract the maximum element from the heap\n        max_element = heapq.heappop(heap)\n        # insert the maximum element into the sorted_list\n        sorted_list.append(max_element)\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [x for x in iterable]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Use heapify to build the max-heap\n    hq.heapify(iterable)\n    # Iterate through the max-heap and extract elements\n    while iterable:\n        # Extract the maximum element from the heap\n        max_val = hq.heappop(iterable)\n        # Add the maximum element to the sorted list\n        sorted_list.append(max_val)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the list into a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # sort the list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a sorted list using the heap sort algorithm.\n    '''\n    # create a min heap of the iterable\n    hq.heapify(iterable)\n\n    # sort the heap using heapify\n    sorted_iterable = []\n    while hq.heapify(iterable):\n        sorted_iterable.append(hq.heappop(iterable))\n\n    return sorted_iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort.\n    '''\n    # Create a max-heap from the list\n    hq.heapify(iterable)\n    \n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(iterable, i)\n\ndef heapify(iterable, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and iterable[left] > iterable[largest]:\n        largest = left\n\n    if right < n and iterable[right] > iterable[largest]:\n        largest = right\n\n    if largest!= i:\n        iterable[i], iterable[largest] = iterable[largest], iterable[i]\n        heapify(iterable, n, largest)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True, 0\n    if actual_cost >= sale_amount:\n        return False, actual_cost - sale_amount\n    return False, 0"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit > 0 or loss > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check if actual cost is less than or equal to zero \n    if actual_cost <= 0: \n        return True \n    # check if sale amount is less than or equal to zero \n    if sale_amount <= 0: \n        return True \n    # check if sale amount is less than or equal to actual cost \n    if sale_amount <= actual_cost: \n        return True \n    # if none of the conditions are satisfied, return False \n    return False "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments - actual_cost and sale_amount.\n    The function checks whether the given amount has no profit and no loss or not.\n    \n    Returns True if the sale_amount has no profit and no loss, else False.\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are 0\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit = actual_cost - sale_amount\n    if total_profit <= 0 and sale_amount <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        print(\"Profitable\")\n    else:\n        print(\"Loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check if the actual cost is less than or equal to the sale amount\n    if actual_cost <= sale_amount:\n        # if yes, then the amount has no profit and no loss\n        return True\n    else:\n        # if not, then the amount has profit and loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * (1 - 0.14 * math.log(v)) - 0.5778 * (v ** 2) / t\n    w_rounded = math.floor(w + 0.5)\n    return w_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill_index = -42.379 + 2.04901523 * v + 10.14333127 * t - 0.22475541 * v * t + 0.00683783 * math.pow(v, 2) - 0.05481717 * math.pow(t, 2) + 0.00122874 * math.pow(v, 2) * t + 0.00085282 * math.pow(t, 2)\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # calculate wind chill index\n    wind_chill_index = 35.74 + (0.6215 * v) + (t_f - 32) * 1.852\n    \n    # round wind chill index to the nearest integer\n    wind_chill_int = round(wind_chill_index)\n    \n    return wind_chill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_in_m_per_s = v * 1000\n    temp_in_c = t - 273.15\n    if temp_in_c < -10.0:\n        return -273.15 + 10.0  # return low cloudiness index for temperature below -10.0 degrees C\n    elif temp_in_c < 0.0:\n        return -273.15 + 2.0 * (temp_in_c + 273.15)\n    else:\n        return -273.15 + 1.0 * math.log(wind_speed_in_m_per_s / 7.5) + 0.6215 * temp_in_c + 0.0000396 * temp_in_c**2"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    celsius_to_kelvin = 273.15\n    \n    # Convert temperature to kelvin\n    kelvin = (t + celsius_to_kelvin) * 100\n    \n    # Calculate wind speed in m/s\n    speed = v * 1000\n    \n    # Calculate air density\n    air_density = 1.225\n    \n    # Calculate the specific heat capacity of air\n    specific_heat_capacity = air_density * 0.001\n    \n    # Calculate the ratio of specific heat capacity to the specific heat capacity of water vapor\n    ratio = specific_heat_capacity / (air_density * 0.0001)\n    \n    # Calculate the vapor pressure deficit\n    vapor_pressure_deficit = 611.12 * math.exp((17.625 * (kelvin - 273.15)) / (kelvin - 243.15))\n    \n    # Calculate the ratio of vapor pressure deficit to the vapor pressure deficit at 20 degrees Celsius\n    ratio_vapor_pressure = vapor_pressure_deficit / (611.12 * math.exp((17.625 * (273.15 - 243.15)) / (273.15 - 243.15)))\n    \n    # Calculate the heat capacity of water vapor\n    heat_capacity_vapor = ratio * vapor_pressure_deficit\n    \n    # Calculate the specific heat capacity of water vapor\n    specific_heat_capacity_vapor = 0.0001 * heat_capacity_vapor\n    \n    # Calculate the heat capacity ratio of water vapor\n    heat_capacity_ratio_vapor = specific_heat_capacity_vapor / specific_heat_capacity\n    \n    # Calculate the latent heat of vaporization of water vapor\n    latent_heat_of_vaporization_vapor = 2500 * ratio_vapor_pressure\n    \n    # Calculate the latent heat of vaporization of air\n    latent_heat_of_vaporization_air = 287.05 * ratio\n    \n    # Calculate the specific latent heat of vaporization of water vapor\n    specific_latent_heat_of_vaporization_vapor = 0.0000001 * latent_heat_of_vaporization_vapor\n    \n    # Calculate the specific latent heat of vaporization of air\n    specific_latent_heat_of_vaporization_air = 0.0000001 * latent_heat_of_vaporization_air\n    \n    # Calculate the specific heat of sublimation of water vapor\n    specific_heat_of_sublimation_vapor = 0.0000001 * (latent_heat_of_vaporization_vapor - latent_heat_of_vaporization_air)\n    \n    # Calculate the specific heat of sublimation of air\n    specific_heat_of_sublimation_air = 0.0000001 * (latent_heat_of_vaporization_air - latent_heat_of_vaporization_vapor)\n    \n    # Calculate the heat capacity ratio of sublimation\n    heat_capacity_ratio_sublimation = specific_heat_of_sublimation_air / specific_heat_of_sublimation_vapor\n    \n    # Calculate the heat capacity of the mixture of water and air\n    heat_capacity_mixture = specific_heat_capacity + specific_heat_capacity_vapor\n    \n    # Calculate the ratio of specific heat capacity to the heat capacity ratio of the mixture\n    ratio_specific_heat_capacity = specific_heat_capacity / heat_capacity_ratio_mixture\n    \n    # Calculate the heat capacity ratio of the water vapor component\n    heat_capacity_ratio_vapor_component = ratio_specific_heat_capacity / ratio\n    \n    # Calculate the heat capacity ratio of the air component\n    heat_capacity_ratio_air_component = 1 - heat_capacity_ratio_vapor_component\n    \n    # Calculate the heat capacity ratio of the sublimation component\n    heat_capacity_ratio_sublimation_component = 1 - heat_capacity_ratio_vapor_component\n    \n    # Calculate the total heat capacity of the mixture\n    heat_capacity_total = heat_capacity_mixture\n    \n    # Calculate the ratio of"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_in_meters_per_second = v * 1000\n    temperature_in_fahrenheit = t * 1.8 + 32\n    wind_chill_in_fahrenheit = 237.3 - 0.6215 * temperature_in_fahrenheit + 10.14 * math.log10(wind_speed_in_meters_per_second)\n    wind_chill_in_celsius = (wind_chill_in_fahrenheit - 32) * 5/9\n    wind_chill_index_rounded = round(wind_chill_in_celsius)\n    return wind_chill_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.log(t/10) + 0.4275 * v * math.log(t/10)\n    \n    # Convert wind chill index to integer\n    wc = math.ceil(wc)\n    \n    # Return wind chill index rounded to the next integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v, t):\n    '''\n    This function calculates the wind chill index for a given wind velocity in km/h and temperature in celsius.\n    The formula used is given by:\n    WindChill = 35.74 + 0.6215 * Temperature - 35.757 * math.pow(v, 0.16) + 0.4275 * math.pow(v, 0.16) * math.pow(Temperature, 0.094)\n    \n    where:\n    WindChill = the wind chill index in degrees Celsius\n    Temperature = the temperature in degrees Celsius\n    v = the wind velocity in km/h\n    \n    The function returns the wind chill index rounded to the nearest integer.\n    '''\n    WindChill = 35.74 + 0.6215 * t - 35.757 * math.pow(v, 0.16) + 0.4275 * math.pow(v, 0.16) * math.pow(t, 0.094)\n    return round(WindChill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 5.0 / 9.0\n    k = 0.621972\n    t = t - 273.15\n    if v <= 5:\n        chill = -42.379 + 2.04901523 * t - 16.2986397 * math.pow(t, 2) + 3.52367951 * math.pow(v, 2) - 0.146116046 * math.pow(v, 2) * t + 0.012308084 * math.pow(v, 3)\n    elif v <= 10:\n        chill = -45.879 + 1.84901523 * t - 15.5986397 * math.pow(t, 2) + 3.14367951 * math.pow(v, 2) - 0.036816046 * math.pow(v, 2) * t + 0.0016260808 * math.pow(v, 3)\n    elif v <= 15:\n        chill = -48.379 + 1.64901523 * t - 14.2986397 * math.pow(t, 2) + 2.74367951 * math.pow(v, 2) - 0.007316046 * math.pow(v, 2) * t + 0.0002460808 * math.pow(v, 3)\n    else:\n        chill = -50.879 + 1.44901523 * t - 12.9986397 * math.pow(t, 2) + 2.34367951 * math.pow(v, 2)\n    chill = chill + k * (t - 273.15)\n    return math.ceil(chill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 0 or v < 0:\n        return 'Invalid input values.'\n    elif v == 0:\n        return 0\n    else:\n        # Calculate the wind chill index using the formula given in the problem statement\n        wind_chill_index = round(35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v))\n        \n        # Return the wind chill index rounded to the nearest integer\n        return int(wind_chill_index)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of names length\n    total = 0\n    # loop through each name in the list\n    for name in sample_names:\n        # remove any lowercase letter from the name\n        name = ''.join(c for c in name if not c.islower())\n        # add the length of the name to the total\n        total += len(name)\n    # return the sum of names length\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if not name[0].islower():\n            names.append(name)\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    # sum the length of the remaining names\n    total_length = sum(len(name) for name in sample_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper(): # check if the first letter of the name is uppercase\n            continue # skip this name if it starts with a lowercase letter\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of names' lengths to 0\n    total_length = 0\n\n    # Iterate through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n\n    # Return the total length of the names after removing the lowercase ones\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\([^()]*?\\)\" # match anything inside parentheses\n    items = re.sub(pattern, \"\", items) # remove parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'  # matches any parenthesis sequence\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regular expression to match any parenthesis enclosed string\n    pattern = r'\\((.*?)\\)'\n    # use re.findall to find all occurrences of pattern in items\n    matches = re.findall(pattern, items)\n    # loop through matches and remove the parenthesis\n    for match in matches:\n        items = items.replace(match, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n\n    Args:\n    items (str): A string containing parenthesis.\n\n    Returns:\n    str: The string with parenthesis removed.\n    \"\"\"\n    pattern = re.compile(r\"\\(.*?\\)\")\n    return pattern.sub(\"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Use the findall method to find all occurrences of parenthesis in the string\n    matches = pattern.findall(items)\n    \n    # Iterate over the matches and replace them with an empty string\n    for match in matches:\n        items = items.replace(match, '')\n        \n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\([^)]*\\))'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n * (n + 1)) // 2\n\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    result = is_nonagonal(n)\n    print(f\"The {n}th nonagonal number is: {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i * (i+1) // 2\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = n * (n + 1) // 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns True if n is the nth nonagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n\n    return a == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the first two nonagonal numbers\n    nonagonal_numbers = [1, 1]\n\n    # Loop through the remaining numbers\n    for i in range(2, n):\n        # Calculate the next nonagonal number\n        next_nonagonal = 2 * nonagonal_numbers[-1]\n\n        # Add the next nonagonal number to the list\n        nonagonal_numbers.append(next_nonagonal)\n\n    # Return the nth nonagonal number\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    prev_nonagonal = 1\n    current_nonagonal = 1\n    # Loop through the remaining nonagonal numbers\n    for i in range(1, n):\n        # Compute the next nonagonal number\n        next_nonagonal = prev_nonagonal + current_nonagonal\n        # Update the variables\n        prev_nonagonal = current_nonagonal\n        current_nonagonal = next_nonagonal\n    # Return the final nonagonal number\n    return current_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n\n    # Initialize the first and second nonagonal numbers\n    a = 1\n    b = 4\n    \n    # Calculate and return the nth nonagonal number\n    for i in range(1, n):\n        c = a + b\n        a = b\n        b = c\n    \n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    i = 1\n    j = 1\n    # initialize sum\n    sum = i + j\n    # loop through until the nth nonagonal number is found\n    while i <= n:\n        # find the next nonagonal number\n        temp = i + j\n        # update the sum\n        sum += temp\n        # update i and j\n        i += 1\n        j += 1\n    # return the nth nonagonal number\n    return sum"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define the pattern to match the middle word of the string\n    pattern = r'\\b[a-zA-Z]+[zZ]?'\n    # Compile the pattern to use in searching\n    compiled_pattern = re.compile(pattern)\n    # Search for the middle word using the pattern\n    middle_word = re.search(compiled_pattern, text)\n    # If the middle word is found, return True\n    if middle_word:\n        return True\n    # If the middle word is not found, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\w+', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            if word == word.swapcase():\n                return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!\\w)z\\b(?!\\w)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_match_wordz_middle(text):\n    # define regex pattern to match word with 'z' at the middle\n    pattern = r'\\b(?<![a-zA-Z])[zZ](?!\\w)\\b'\n    # compile regex pattern\n    regex = re.compile(pattern)\n    # search for pattern in text\n    matches = regex.findall(text)\n    # return True if there is a match, otherwise False\n    return True if matches else False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    # reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # reverse the remaining elements of the array\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the first k elements of the array\n    input[0:k] = input[0:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input) or k <= 0:\n        return None\n    else:\n        input = input[::-1][:k]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a copy of the input array\n    reverse_input = input[:]\n    # reverse the array upto k\n    reverse_input[:k] = reverse_input[:k][::-1]\n    # reverse the array from k to the end\n    reverse_input[k:] = reverse_input[k:][::-1]\n    # return the reversed array\n    return reverse_input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        for i in range(k-1, n//2):\n            input[i], input[n-i-1] = input[n-i-1], input[i]\n        return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from start to k-1\n    input = input[::-1]\n    # Reverse the array from k to the end\n    input = input[::-1][::-1]\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(input) - 1\n\n    # Loop until the left pointer is greater than or equal to k\n    while left < k:\n\n        # Swap the elements at the left and right pointers\n        input[left], input[right] = input[right], input[left]\n\n        # Increment the left and right pointers\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n):\n        if i <= k:\n            input[i], input[k-i] = input[k-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n\n    if k > n:\n        return \"Error: k is greater than the size of the array.\"\n\n    reverse_arr = input[0:k] + input[k:n] + input[0:k]\n    reverse_arr = reverse_arr[::-1]\n\n    return reverse_arr\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Copy the tuple and add the dictionary to it\n    new_tup = test_tup[:]\n    new_tup.append(test_dict)\n    return tuple(new_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the input is a tuple and a dictionary\n    if isinstance(test_tup, tuple) and isinstance(test_dict, dict):\n        # Merge the two dictionaries\n        merged_dict = {**test_dict}\n        # Add the merged dictionary to the tuple\n        updated_tup = (test_tup + (merged_dict,),)\n        # Return the updated tuple\n        return updated_tup\n    else:\n        print(\"The input must be a tuple and a dictionary.\")"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new tuple with the added dictionary\n    new_tup = tuple(test_tup)\n    new_tup += tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tuple = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tuple += (key, value)\n    return new_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def find_paths(i, j, total_cost, path):\n        if i == N-1 and j == N-1:\n            if path not in paths:\n                paths[path] = total_cost / (i+1)\n            return\n        if i < N-1:\n            find_paths(i+1, j, total_cost+cost[i][j], path+\"->\"+str(i))\n        if j < N-1:\n            find_paths(i, j+1, total_cost+cost[i][j], path+\"->\"+str(j))\n            \n    N = len(cost)\n    paths = {}\n    find_paths(0, 0, 0, \"\")\n    max_avg = max(paths.values())\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        dp[i][0] = cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_sum = 0\n    N = len(cost)\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_sum = cost[i][j]\n            elif i == 0:\n                max_sum = max(max_sum, cost[i][j])\n            elif j == 0:\n                max_sum = max(max_sum, cost[i][j])\n            else:\n                max_sum = max(max_sum, cost[i][j], cost[i][j] + cost[i-1][j], cost[i][j] + cost[i][j-1])\n    return max_sum/(N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        dp[i][0] = cost[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            max_avg = max(max_avg, dp[i][j]/(j+1))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    dp = [[0]*N for _ in range(N)]\n    \n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, dp[i][i])\n    \n    for k in range(N-2, -1, -1):\n        for i in range(N-1):\n            j = i+k+1\n            \n            if i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == N:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n            \n            max_avg = max(max_avg, dp[i][j])\n            \n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables to store the maximum path and its average\n    max_path = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n\n    # Calculate the maximum path for each cell\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_path[i][j] = cost[i][j]\n            elif i == 0:\n                max_path[i][j] = max(max_path[i][j-1], max_path[i][j])\n            elif j == 0:\n                max_path[i][j] = max(max_path[i-1][j], max_path[i][j])\n            else:\n                max_path[i][j] = max(max_path[i-1][j], max_path[i][j-1])\n\n    # Calculate the maximum average\n    for i in range(N):\n        for j in range(N):\n            avg = 0\n            for k in range(i+1, N):\n                for l in range(j+1, N):\n                    avg += max_path[k][l]\n            avg += max_path[i][j]\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, path_cost, visited):\n        if i == N - 1 and j == N - 1:\n            path_cost = min(path_cost, visited_sum)\n            max_avg = max(max_avg, path_cost / visited_sum)\n            return\n\n        if i < N and j < N and visited[i][j] == 0:\n            visited[i][j] = 1\n            visited_sum += cost[i][j]\n\n            dfs(i + 1, j, path_cost + cost[i][j], visited)\n            dfs(i, j + 1, path_cost + cost[i][j], visited)\n\n            visited[i][j] = 0\n            visited_sum -= cost[i][j]\n\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[0] * N for _ in range(N)]\n\n    dfs(0, 0, cost[0][0], visited)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = set()\n    max_sum = float('-inf')\n\n    for i in range(N):\n        for j in range(N):\n            if (i, j) in visited:\n                continue\n            visited.add((i, j))\n            if i == N - 1 and j == N - 1:\n                max_sum = max(max_sum, cost[i][j])\n            else:\n                max_sum = max(max_sum, cost[i][j])\n                max_sum = max(max_sum, cost[i][j])\n                visited.add((i + 1, j))\n                visited.add((i, j + 1))\n\n    return max_sum / len(visited)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = 0\n    max_average = float('-inf')\n    \n    for i in range(N):\n        start_row, start_col = i, 0\n        total_cost = 0\n        \n        while True:\n            visited += 1\n            \n            if i == N-1 and visited > 1:\n                avg_cost = total_cost / visited\n                max_average = max(max_average, avg_cost)\n                break\n            \n            if start_row == N-1 and start_col == N-1:\n                break\n            \n            if start_row == N-1:\n                start_col += 1\n            else:\n                start_row += 1\n            \n            total_cost += cost[start_row][start_col]\n    \n    return max_average"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Loop through the dictionary and check if the height and weight are greater than or equal to the minimum height and weight\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students.append((name, height, weight))\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n\n    # Iterate over all the students in the input dictionary\n    for name, data in students.items():\n        # Extract the height and weight of each student\n        height, weight = data\n\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # If they are, append the student name to the filtered list\n            filtered_students.append(name)\n\n    # Return the filtered list of students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pair_count += 1\n    return same_pair_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits_sum = 0\n    while power > 0:\n        digits_sum += base % 10\n        base //= 10\n        power -= 1\n    return digits_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    for i in range(power):\n        total += base % 10\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Convert the base to a string and convert it to a list of digits\n    base_list = list(str(base))\n\n    # Calculate the sum of all digits of the base to the specified power\n    for digit in base_list:\n        power -= 1\n        sum += int(digit) ** power\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum variable\n        sum += int(digit)\n    \n    # Calculate the power of the sum variable to the power of the power variable\n    result = sum ** power\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert base to integer\n    base = int(base)\n\n    # Calculate sum of digits\n    sum_digits = 0\n    while base > 0:\n        sum_digits += base % 10\n        base //= 10\n\n    # Calculate sum of digits raised to power\n    power_sum = 0\n    for _ in range(power):\n        power_sum += sum_digits\n\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of digits of the base to the specified power using recursion\n    def sum_digits(num, power, total):\n        if power == 0:\n            return total\n        else:\n            return sum_digits(num // 10, power - 1, total + num % 10)\n\n    # Call the function to calculate the sum of digits of the base to the specified power\n    result = sum_digits(base, power, 0)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can work with it\n    base_str = str(base)\n    # Initialize a variable to store the sum\n    power_sum = 0\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert the current digit to an integer and add it to the sum\n        power_sum += int(digit)\n    # Calculate the final sum of digits raised to the power\n    final_sum = 0\n    for i in range(power):\n        final_sum += power_sum\n    # Return the final sum\n    return final_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # define a regex pattern to match quotation marks\n    result = re.findall(pattern, text1) # find all occurrences of the pattern in the string\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract all the values between quotation marks \" \" of the given string\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to match any sequence of characters between quotes\n    pattern = r'\"([^\"]*)\"'\n    # Use the re.findall() function to extract all the matches of the pattern in the text\n    matches = re.findall(pattern, text1)\n    # Combine the matches into a single string and return it\n    return''.join(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regex to find all quotation marks in the string\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # iterate through the matches and extract the values\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n\n    # return the list of extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regex to find all the quotation marks in the string\n    pattern = r'\"[^\"]*\"|'[^']*'\n    matches = re.findall(pattern, text1)\n\n    # Initialize an empty list to store the extracted values\n    result = []\n\n    # Loop through the matches and append the values to the result list\n    for match in matches:\n        if match[0] == '\"' or match[0] == \"'\":\n            result.append(match[1:-1])\n        else:\n            result.append(match)\n\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts the values between quotation marks \" \" of the string.\n    '''\n    \n    # Find all matches between quotation marks and remove the quotes\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    \n    # Join the matches into a single string\n    quotation = \" \".join(matches)\n    \n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Define a regular expression pattern for finding quotation marks and their values\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text1)\n\n    # Return a list of the extracted values, or an empty list if no matches were found\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # Loop through the tuple and multiply each element with the next element\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    \n    # Add the last element of the original tuple to the result tuple\n    result_tup += (test_tup[-1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return None\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    result_tup.append(test_tup[-1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the tuple to be returned\n    result_tup = []\n\n    # Loop through the tuple and multiply each element by the next element\n    for i in range(len(test_tup) - 1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n\n    # Return the final result\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple([num * (test_tup[i+1] if i < len(test_tup) - 1 else 1) for i, num in enumerate(test_tup)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2  # calculate the number of elements in the tuple\n    result = [0] * N  # create a list of zeros of length N\n    for i in range(N):  # iterate over the elements in the tuple\n        result[i] = test_tup[i] * test_tup[i+N]  # calculate the product of the i-th and (i+N)-th elements and store the result in the i-th position of the result list\n    return tuple(result)  # return the result as a tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        if i == N-1:\n            result.append(test_tup[i])\n        else:\n            result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    \n    new_tup = []\n    for i in range(0, len(test_tup)-1, 2):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    \n    return tuple(new_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize an empty list to store the result\n    result = []\n    # loop through the first list\n    for i in range(len(lst1)):\n        # add the corresponding element from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates using itertools groupby function\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n    # Split the set into subsets, each containing consecutive duplicates\n    groups = [list(g) for k, g in groupby(nums)]\n    # Flatten the list of groups to remove duplicates\n    return list(set(sum(groups, [])))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    nums = list(set(nums))\n    consecutive_duplicates = []\n    for key, group in groupby(nums):\n        consecutive_duplicates.extend(list(group))\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums_set = set(nums)\n    # Group the numbers by their prefix\n    grouped_nums = groupby(nums_set)\n    # Initialize an empty list to store the consecutive duplicates\n    consecutive_list = []\n    # Iterate through the grouped numbers\n    for key, group in grouped_nums:\n        # If the group is not empty and the next item is also in the group\n        if group and next(group, None) in group:\n            # Add the current item to the consecutive list\n            consecutive_list.append(key)\n    # Return the resulting list of consecutive duplicates\n    return list(consecutive_list)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(sorted(nums)) if k == 0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    def is_consecutive(num):\n        return len(list(grouper(num))) == 1\n\n    return [num for num in nums if not is_consecutive(num)]\n\ndef grouper(n, iterable):\n    return groupby(iterable, lambda x: x//n)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function takes a list of integers and removes consecutive duplicates.\n\n    Args:\n        nums (list): List of integers\n\n    Returns:\n        list: A new list with consecutive duplicates removed.\n\n    \"\"\"\n    return [k for k, g in groupby(enumerate(nums), lambda x: x[0] == x[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2) / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3/4) * r**2 * h\n    return s\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateral_surface_area = lateralsurface_cone(radius,height)\nprint(\"The lateral surface area of the cone is:\",lateral_surface_area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*(h/2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone with the given radius r and height h.\n    '''\n    lateral_surface_area = math.pi * (r**2 + h**2) # Calculating the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*r**2*h\n    return surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    s = math.pi * r**2 * (h/3)\n    \n    # Return the lateral surface area\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area of the cone using the formula:\n    # lateral surface area = 2*pi*(r+h)\n    lateral_surface_area = 2 * math.pi * (r + h)\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone\n    area_cone = math.pi * r**2 * h / 3\n    \n    # Calculate the lateral surface area\n    lateral_area = area_cone * r / 2\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LSA = math.pi * r**2 * h\n    return LSA"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\.|,| ]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([,.])', r':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # define a regular expression pattern to match special characters\n    pattern = re.compile(r'\\s+|,+|\\.+')\n    # replace all occurrences of special characters with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s.,]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s:]'\n    text = re.sub(pattern, '', text)\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define a regular expression pattern to match any whitespace characters\n    pattern = re.compile(r'\\s+')\n    # replace all whitespace characters with a colon\n    text = pattern.sub(':', text)\n    # define another regular expression pattern to match any punctuation characters\n    pattern = re.compile(r'[^\\w\\s:]')\n    # replace all punctuation characters with a colon\n    text = pattern.sub(':', text)\n    # return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_char = r'\\s|,|\\.'\n    colon_char = r':'\n    text = re.sub(special_char, colon_char, text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, and dots\n    pattern = re.compile(r'[., ]')\n    # Use the pattern to replace all matches with a colon\n    text = pattern.sub(':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # find the index of the first occurrence of x in A\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # if x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A (list): A sorted array.\n    x (int): The number to search for in the array.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n    # Find the index of the first occurrence of x in A\n    first_occurrence = bisect_left(A, x)\n\n    # If x is not in A, return -1\n    if first_occurrence == len(A) or A[first_occurrence]!= x:\n        return -1\n\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first element in A greater than or equal to x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    # Check if x is equal to the element at that index\n    if i < len(A) and A[i] == x:\n        return i\n    # If not, find the index of the first element in A greater than x\n    i = 0\n    while i < len(A) and A[i] <= x:\n        i += 1\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n\n            return mid\n\n        elif A[mid] < x:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize variables\n    i = 0\n    count = 0\n\n    # loop through the array\n    while i < len(A):\n        # check if the current element is equal to the given number\n        if A[i] == x:\n            count += 1\n            # if the count is equal to 1, return the index of the current element\n            if count == 1:\n                return i\n        i += 1\n\n    # if the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # loop through the array until the first occurrence of x is found\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    # if the array is exhausted without finding x, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if arr[i]!= arr[j]:\n                dp[i] += dp[j] * dp[i-j-1]\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            dp[i][j] = arr[j-1]*dp[i-1][j-1]\n    return dp[n][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    result = 0\n\n    for i in range(n):\n        prod *= arr[i]\n        result += prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a list to store the products of each subarray\n    subarray_products = [1]*n\n    for i in range(n):\n        for j in range(i, n):\n            subarray_products[j] *= arr[j]\n    # Calculate the sum of products of all subarrays\n    sum_of_products = sum(subarray_products)\n    # Initialize the final result to 0\n    final_sum = 0\n    # Iterate through all possible sublists of length 1 to n\n    for i in range(1, n+1):\n        sublist_products = [1]*n\n        # Calculate the sum of products of all subarrays of length i\n        for j in range(n-i+1):\n            for k in range(j, j+i):\n                sublist_products[k] *= arr[k]\n            final_sum += sum(sublist_products)\n    return final_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sub_sums = [0] * n\n\n    # Finding sum of subarrays using Kadane's algorithm\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += arr[j]\n            if j - i + 1 > sub_sums[j]:\n                sub_sums[j] = j - i + 1\n\n    # Finding sum of products of all possible sublists\n    prod_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod_sum += sub_sums[j] * arr[i] * arr[j]\n\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    prod = 1\n    \n    # Calculate prefix sum\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n    \n    # Initialize result\n    result = 0\n    \n    # Iterate through all possible subarrays\n    for i in range(n):\n        for j in range(i+1, n+1):\n            \n            # Calculate the product of the subarray\n            sub_prod = prod * (prefix_sum[j] - prefix_sum[i])\n            \n            # Update result\n            result += sub_prod\n            \n            # Update product\n            prod *= arr[i]\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize the sum of products of all possible sublists to zero\n    sublist_prod_sum = 0\n\n    # Calculate the product of the first element of the list\n    sublist_prod_sum += arr[0]\n\n    # Loop through the list starting from the second element\n    for i in range(1, len(arr)):\n        # Calculate the product of the previous element and the current element\n        prev_prod = sublist_prod_sum\n        curr_prod = prev_prod * arr[i]\n\n        # Update the sum of products of all possible sublists\n        sublist_prod_sum = curr_prod\n\n    # Return the sum of products of all possible sublists\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize variables\n    n = len(arr)\n    result = 0\n\n    # Create a list to store products of subarrays\n    products = []\n\n    # Compute products of subarrays\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n        products.append(product)\n\n    # Compute the sum of products of subarrays\n    for i in range(n):\n        for j in range(i, n):\n            result += products[i] * products[j]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of products of all possible sublists of the array.\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            dp[j] = (dp[j] + dp[i] * prod) % (10**9+7)\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            res += prod\n    return res"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    first_bit = 0\n    last_bit = n & 1  # the last bit is the LSB of n\n    n >>= 1  # shift n to the right by 1 bit\n    # toggle all bits except the first and the last bit\n    for i in range(n):\n        if i == first_bit or i == last_bit:\n            continue\n        n ^= 1 << i\n    # set the first and last bits back to their original values\n    n |= 1 << first_bit\n    n |= 1 << last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the length of the binary representation of the number\n    length = len(bin(n)[2:])\n\n    # Initialize variables for the first and last bits\n    first_bit = n & 1\n    last_bit = n >> (length - 1) & 1\n\n    # Toggle the bits except the first and last\n    for i in range(length - 2):\n        n ^= 1 << i\n\n    # Set the first and last bits\n    n |= first_bit << length - 1\n    n |= last_bit << length - 2\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the leftmost and rightmost bits\n    leftmost_bit = n & 1\n    rightmost_bit = n >> 1 & 1\n\n    # Toggle the middle bits\n    middle_bits = (n ^ (leftmost_bit << 1)) ^ (rightmost_bit << 1)\n\n    # Return the result\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Calculate the number of bits needed to represent n-1\n    num_of_bits = 0\n    while n > 1:\n        n = n // 2\n        num_of_bits += 1\n    # Calculate the middle bit\n    middle_bit = 1 << (num_of_bits - 1)\n    # Toggle the middle bit and the first and last bits of n\n    n = n ^ middle_bit ^ ((n & 1) << num_of_bits - 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Create a bitmask of all 1s except for the first and the last bit\n    mask = ((1 << (32 - 2)) - 1) ^ ((1 << 31) - 1)\n\n    # Extract the first and last bits of the number\n    first_bit = (n & ((1 << 32) - 1)) >> 31\n    last_bit = n & ((1 << 31) - 1)\n\n    # Toggle the bits of the number except the first and the last bit\n    n = (n ^ mask) | ((first_bit ^ last_bit) << 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1   # get the first bit\n    last_bit = n & (2**31-1)  # get the last bit\n    n = n ^ (first_bit + last_bit)  # toggle the first and last bits\n    n = n ^ (2**31-1)  # toggle the first bit\n    n = n ^ (2**32-1)  # toggle the last bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    # Initialize the bits array\n    bits = []\n\n    # Convert the integer to binary\n    binary = bin(n)[2:]\n\n    # Split the binary string into an array of bits\n    for bit in binary:\n        bits.append(int(bit))\n\n    # Toggle the middle bit\n    middle_bit = bits[1]\n    if middle_bit == 0:\n        middle_bit = 1\n    else:\n        middle_bit = 0\n\n    # Reconstruct the binary string from the array of bits\n    binary_string = \"\"\n    for bit in bits:\n        binary_string += str(bit)\n\n    # Convert the binary string back to an integer and return it\n    return int(binary_string, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ 0x5555555555555555  \n    n = n ^ 0xAAAAAAAAAAAAAAA  \n    n = n ^ 0xCCCCCCCCCCCCCCCC  \n    n = n ^ 0xF0F0F0F0F0F0F0F  \n    return n  \n  \n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Get the first and last bits\n    first_bit = int(bin(n)[2])[0]\n    last_bit = int(bin(n)[2])[-1]\n\n    # Calculate the middle bits to be toggled\n    mid_bits = num_bits // 2 - 1\n\n    # Toggle the middle bits and add the first and last bits\n    result = first_bit\n    if mid_bits > 0:\n        for i in range(mid_bits):\n            result = int(not(result))\n    result = int(not(result))\n    if last_bit == 1:\n        result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle the middle bits\n    middle_bits = (n ^ (1 << first_bit) ^ (1 << last_bit))\n    \n    # Combine the first and last bits with the middle bits\n    toggled_number = first_bit ^ middle_bits ^ last_bit\n    \n    return toggled_number"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x, lo=i)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    if idx > 0 and a[idx-1] == x:\n        idx -= 1\n    return idx"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Returns the index at which to insert x in sorted order, so that all elements to the left of the\n    index are less than or equal to x, and all elements to the right of the index are greater than or\n    equal to x.\n    \"\"\"\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(\"The given string starts with a vowel.\")\n    else:\n        print(\"The given string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match: \n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n\n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    :param n: integer value.\n    :return: integer value.\n    \"\"\"\n    # base case\n    if n == 1:\n        return 0\n    # recursive case\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1/n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    min_triangular_num = 10**(n-1) - 1\n    triangular_nums = [min_triangular_num]\n    while True:\n        smallest_triangular_num = triangular_nums[-1] + min(triangular_nums)\n        if smallest_triangular_num >= 10**n - 1:\n            break\n        triangular_nums.append(smallest_triangular_num)\n    \n    index = triangular_nums.index(min_triangular_num)\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    # Calculate the sum of digits of n\n    digit_sum = sum(int(digit) for digit in str(n))\n\n    # Calculate the triangular number with n digits\n    triangular_num = math.trunc(math.pow(10, n) * (digit_sum + 1))\n\n    # Calculate the index of the triangular number\n    index = math.trunc(math.log10(triangular_num) + 1)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Using the math module to find the index of the smallest triangular number with n digits\n    index = math.factorial(5*n-1) // (math.factorial(n-1)*math.factorial(5*n-6))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize the value of the first triangular number with n digits\n    triangular_number = 10 ** (n - 1)\n\n    # Initialize the index of the smallest triangular number with n digits\n    smallest_triangular_number_index = 1\n\n    # Loop until we find the smallest triangular number with n digits\n    while True:\n        # Check if the triangular number is the smallest triangular number with n digits\n        if triangular_number == smallest_triangular_number_index * triangular_number:\n            return smallest_triangular_number_index\n\n        # If not, increment the index and update the value of the next triangular number with n digits\n        smallest_triangular_number_index += 1\n        triangular_number = smallest_triangular_number_index * triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function will find the index of the smallest triangular number with n digits.\n    '''\n    # Initialize the smallest triangular number with n digits and its index\n    smallest_num = 10**(n-1)\n    index = n-1\n    \n    # Iterate from 2 to the square root of the smallest triangular number with n digits\n    for i in range(2, int(math.sqrt(smallest_num))+1):\n        # Check if the current triangular number is smaller than the current smallest triangular number\n        if smallest_num // i <= smallest_num:\n            # If it is smaller, update the smallest triangular number and its index\n            smallest_num = smallest_num // i\n            index = n-1-i\n    \n    # Return the smallest triangular number and its index\n    return smallest_num, index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a Python function to find the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the first n terms of the sequence\n    sequence = [1] + [0] * (n - 1)\n    # Initialize the smallest triangular number\n    smallest_triangular = float('inf')\n    \n    # Calculate the smallest triangular number\n    for i in range(n):\n        # Calculate the next triangular number\n        triangular = sum(sequence)\n        # Update the smallest triangular number\n        if triangular < smallest_triangular:\n            smallest_triangular = triangular\n        # Update the sequence\n        sequence.append(triangular)\n    \n    # Return the index of the smallest triangular number\n    return sequence.index(smallest_triangular)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sieve_of_eratosthenes(n):\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return primes\n\n    def triangular_numbers(n):\n        triangular_numbers = []\n        prime_numbers = sieve_of_eratosthenes(n)\n        for i in range(1, n + 1):\n            if prime_numbers[i]:\n                triangular_numbers.append(i)\n        return triangular_numbers\n\n    def smallest_triangular_number_with_n_digits(n):\n        digits = []\n        for i in range(n, 0, -1):\n            digits.append(0)\n        index = 0\n        triangular_numbers = triangular_numbers(n)\n        for i in range(n):\n            if index >= len(triangular_numbers):\n                return -1\n            digits[i] = triangular_numbers[index]\n            index += 1\n        return int(''.join(map(str, digits)))\n\n    return smallest_triangular_number_with_n_digits(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    smallest = int(math.sqrt(5*n+1)+1)\n    for i in range(smallest, 0, -1):\n        triangular = i*i\n        if triangular % 5 == 0 and triangular > n:\n            return triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # function to generate triangular number with n digits\n    def generate_triangular(n):\n        triangular_number = 0\n        for i in range(n):\n            triangular_number = triangular_number * 10 + i + 1\n        return triangular_number\n\n    # function to find the index of the smallest triangular number with n digits\n    def find_index(n):\n        # initialize the index variable\n        index = 1\n        # initialize the smallest triangular number with n digits\n        smallest_triangular = generate_triangular(n)\n        # check if the smallest triangular number is greater than 1\n        while smallest_triangular > 1:\n            # find the index of the next triangular number\n            index = index + 1\n            # find the next triangular number with n digits and check if it's smaller than the smallest triangular number\n            next_triangular = generate_triangular(n)\n            if next_triangular < smallest_triangular:\n                smallest_triangular = next_triangular\n        return index\n\n    return find_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find T(n) using the formula for smallest triangular number with n digits\n    T = int(math.factorial(n) / (math.factorial(n-1) * math.factorial(2*n-1)))\n    # divide T(n) by 6 to get the index of smallest triangular number with n digits\n    return int(T / 6)\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        result[key] = value\n        i += 2\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"The length of the tuple should be even\"\n    \n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n        \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Tuple should have an even number of elements.\")\n    else:\n        dict_key_value = {}\n        for i in range(0, len(test_tup), 2):\n            dict_key_value[test_tup[i]] = test_tup[i+1]\n        return dict_key_value"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and converts it to a dictionary using adjacent elements.\n    '''\n    # Check if the input is a tuple\n    if type(test_tup)!= tuple:\n        print(\"Error: Input is not a tuple.\")\n        return None\n    \n    # Initialize the dictionary\n    my_dict = {}\n    \n    # Iterate through the tuple and add each element as a key-value pair\n    for i in range(len(test_tup)):\n        my_dict[i] = test_tup[i]\n        \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Check if the input is a tuple\n    if not isinstance(test_tup, tuple):\n        print(\"Input is not a tuple!\")\n        return None\n    \n    # Create an empty dictionary\n    dictionary = {}\n    \n    # Loop through the tuple and insert adjacent elements as a key-value pair\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n        \n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    dictionary = {}\n    # loop through the tuple elements and add pairs of adjacent elements to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    dict_result = {}\n    # loop through the tuple elements and add each pair as a key-value to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_result[key] = value\n    return dict_result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The given tuple should have an even number of elements.\")\n        return\n\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += 1\n        if count > 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        rest_of_string = s[1:]\n        return all_Characters_Same(rest_of_string) and first_char == rest_of_string[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string into a list of characters\n    s_list = list(s)\n    # Check if all the characters are same or not\n    if len(s_list) > 1 and s_list[0] == s_list[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Loop through each character of the string and compare it with the first character\n    for char in s:\n        if char!= first_char:\n            return False\n\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same, False otherwise.\n    \"\"\"\n    # If the string is empty or has only one character, it is considered as all the characters are same.\n    if len(s) <= 1:\n        return True\n    else:\n        # Iterating through all the characters in the string.\n        for i in range(len(s)):\n            # If the character is different from the first character, then all the characters are different.\n            if s[i]!= s[0]:\n                return False\n        # If the function reaches this point, it means all the characters are same.\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same and False otherwise.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    s_list = list(s)\n    # Check if all the characters in the list are same\n    if len(set(s_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    sp = (side + math.sqrt(3) * side ** 2) / 2\n    \n    # calculate the area using Heron's formula\n    area = math.sqrt(3) * side ** 2 / 2\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2\n    area = math.sqrt(s*(s-1)*(s-2)*(s-3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + 1) * (side + 2)) ** 0.5\n    area = 0.5 * s * (s - side) * (s - side - 1)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)/4 * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1/6 * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return 0.5 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Using Heron's formula\n    a = side / 2\n    b = math.sqrt(3) * side / 2\n    c = side / 2\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (3 * side)**0.5\n\n    # calculate the area of the tetrahedron\n    area = math.pi * (s**2)\n\n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (3 * side + math.sqrt(24 * side**2 - 36 * side**3)) / 4\n    \n    # Calculate the area of the tetrahedron\n    area = semi_perimeter ** 2 * (5 / 12)\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.reverse()\n    list[0:m] = list[m:n]\n    list[m:] = list[0:m]\n    list.reverse()\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst.extend(lst[:n])\n    lst[:n] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # If list is empty or has only one element, return the list\n    if n == 0 or n == 1:\n        return list\n    # If m is greater than or equal to the length of the list, return the list\n    elif m >= n:\n        return list\n    # If m is 0 or a negative number, return the empty list\n    elif m < 0:\n        return []\n    # If m is equal to 1, return the reversed list\n    elif m == 1:\n        return list[::-1]\n    # Create a new list and append the first m items of the original list to the new list\n    new_list = list[:m]\n    # Append the rest of the items of the original list to the new list\n    new_list.extend(list[m:])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        for i in range(m):\n            last = list[-1]\n            for j in range(n-2, -1, -1):\n                list[j+1] = list[j]\n            list[0] = last"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n\n    # Length of the list\n    n = len(list)\n\n    # Return an empty list if the length of the list is less than or equal to 1\n    if n <= 1:\n        return list\n    \n    # Calculate the number of rotations required\n    rotations = m % n\n    \n    # Calculate the number of elements to be shifted\n    shift = n - rotations\n    \n    # Return the rotated list\n    return list[-shift:] + list[:-shift]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # handle case where m is greater than n\n    # rotate the list\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # calculate the length of the list\n    n = len(list)\n    # check if the rotation index is valid\n    if m >= n or m < 0:\n        return list\n    # calculate the rotation distance\n    distance = m % n\n    # rotate the list\n    list = list[distance:] + list[:distance]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # check if the list is empty or not\n    if not list:\n        return []\n    \n    # check if the m is a positive integer or not\n    if not isinstance(m, int) or m <= 0:\n        return []\n    \n    # check if the list has only one item or not\n    if len(list) == 1:\n        return list\n    \n    # find the length of the list\n    length = len(list)\n    \n    # find the new index to start rotating from\n    new_index = length - m\n    \n    # initialize the temporary list to store the rotated items\n    temp_list = []\n    \n    # iterate through the original list from the last item to the first item\n    for i in range(length - 1, -1, -1):\n        # append the current item to the temporary list\n        temp_list.append(list[i])\n        \n        # if the new index is reached, break out of the loop\n        if i == new_index:\n            break\n    \n    # reverse the temporary list\n    temp_list.reverse()\n    \n    # insert the rotated items at the beginning of the original list\n    for i in range(length - 1, -1, -1):\n        list.insert(i, temp_list.pop(0))\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n\n    Parameters:\n    list: list, the list to be rotated.\n    m: int, the number of items to rotate the list by.\n\n    Returns:\n    list, the rotated list.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To rotate by m % n items\n\n    # To move all the elements of list to the right by m % n positions\n    for i in range(m):\n        list.append(list.pop(0))\n\n    # To reverse the first m % n positions and the last n - m % n positions\n    list = list[m:n] + list[:m]\n    list.reverse()\n\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    return any(val is None for val in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, and returns a list of all numbers between them that are divisible by every digit in their respective string representation.\n    \"\"\"\n\n    # Define a lambda function that checks if a number is divisible by a digit in its string representation\n    is_divisible = lambda num: all(int(d) % int(str(num)[i]) == 0 for i, d in enumerate(str(num)))\n\n    # Create a list comprehension that generates all numbers between startnum and endnum that are divisible by every digit in their respective string representation\n    divisible_numbers = [num for num in range(startnum, endnum + 1) if is_divisible(num)]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits_set = {int(digit) for digit in str(startnum) + str(endnum)}\n    digits_set.pop()  # to avoid duplicates\n    \n    # Function to check if a number is divisible by all the digits in the range\n    is_divisible_by_digits = lambda num: all(d in digits_set for d in str(num))\n    \n    # Filtering the numbers within the range\n    divisible_numbers = filter(is_divisible_by_digits, range(startnum, endnum + 1))\n    \n    return list(divisible_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Helper function to check if a number is divisible by any digit in its string representation.\n        \"\"\"\n        digits = str(num)\n        for digit in digits:\n            if int(digit) % 2!= 0:\n                return False\n        return True\n    \n    numbers = range(startnum, endnum + 1)\n    return list(filter(is_divisible, numbers))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_nums = lambda num: all(num % i == 0 for i in range(10))\n    return list(filter(divisible_nums, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two integers, startnum and endnum, and returns a list of numbers that meet the following criteria:\n    - Numbers within the given range from startnum to endnum\n    - Every number is divisible by every digit it contains.\n\n    Args:\n    startnum (int): The start of the range.\n    endnum (int): The end of the range.\n\n    Returns:\n    List of integers: A list of numbers that meet the given criteria.\n    \"\"\"\n    digits = [int(digit) for digit in str(startnum)] # Convert startnum to digits\n    for digit in digits:\n        if digit == 0: # Check if digit is 0\n            digits.remove(digit) # Remove it from the list of digits\n            break\n    return [num for num in range(startnum, endnum+1) if all(digit in str(num) for digit in digits)] # Check if number is divisible by all digits in the list of digits"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    :param startnum: starting number of the range\n    :type startnum: int\n    :param endnum: ending number of the range\n    :type endnum: int\n    :return: list of numbers within the given range that are divisible by every digit it contains\n    :rtype: list\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Check if a given number is divisible by every digit it contains.\n\n        :param num: number to check\n        :type num: int\n        :return: True if the number is divisible by every digit it contains, False otherwise\n        :rtype: bool\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n            if num % digit!= 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digit(num):\n            result.append(num)\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: x % 10 == 0 and x >= startnum and x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Convert startnum and endnum to string and split them into digits using map function\n    start_digits = list(map(int, str(startnum)))\n    end_digits = list(map(int, str(endnum)))\n\n    # Create a lambda function that checks if a number is divisible by every digit in the given range\n    is_divisible_by_digits = lambda x: all(x % d == 0 for d in start_digits)\n\n    # Use filter function to return a list of numbers that are divisible by every digit in the given range\n    result = list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(digit % i == 0 for i in range(1, 10)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * (r ** 2) * (a / 360)\n    \n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    area = r * a * 0.01\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    angle_rad = a/180*math.pi\n    area = r**2*math.sin(angle_rad/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle must be less than or equal to 360 degrees.\")\n        return None\n    else:\n        area = math.pi*(r**2)*(a/360)\n        print(\"Area of sector:\",area)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    angle = a * math.pi / 180 #converting angle to radians\n    area = r * r * angle #calculating area of sector\n    \n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of subsequences\n    L = [[0] * (p+1) for _ in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k])\n\n    # print the length of LCS of subsequences\n    print(\"Length of LCS is: \", L[m][n])\n\n    # create a table to store indices of LCS of subsequences\n    M = [[0] * (p+1) for _ in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    M[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    M[i][j] = L[i-1][j-1]\n                elif L[i-1][j] >= L[i][j-1] and L[i-1][j] >= L[i-1][k]:\n                    M[i][j] = M[i-1][j]\n                else:\n                    M[i][j] = M[i][j-1]\n\n    # create a list to store the common subsequence of the three strings\n    lcs = []\n\n    # Traverse the table to construct the common subsequence\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1] and L[i-1][j] > L[i-1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the common subsequence\n    lcs.reverse()\n\n    # print the common subsequence\n    print(\"Common subsequence is: \", \"\".join(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0]*(m+1) for i in range(n+1)] \n\n    # Build table in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n    # Find the length of LCS \n    lcs = \"\" \n    i = n \n    j = m \n    while i!= 0 and j!= 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n\n    return lcs[::-1] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # initialize variables for LCS lengths and sequences\n    n, m, p = len(X), len(Y), len(Z)\n    L = [[0 for j in range(p+1)] for i in range(n+1)]\n    S = [[\"\" for j in range(p+1)] for i in range(n+1)]\n\n    # calculate LCS lengths and sequences for all possible subsequences\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                    S[i][j] = X[i-1]\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j]\n                    S[i][j] = S[i-1][j]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j] = L[i][j-1]\n                    S[i][j] = S[i][j-1]\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n                    S[i][j] = max(S[i-1][j], S[i][j-1])\n\n    # find the length and sequence of the longest common subsequence\n    i, j = n, m\n    lcs_len = L[i][j]\n    lcs_seq = S[i][j]\n\n    while i > 0 and j > 0 and X[i-1] == Y[j-1] and X[i-1] == Z[p-1]:\n        i -= 1\n        j -= 1\n\n    return lcs_len, lcs_seq"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # creating table to store lengths of subsequences \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    # backtracking to find the LCS \n    LCS = []\n    i = n \n    j = m \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            LCS.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n    LCS.reverse()\n    return LCS\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence (LCS) for the given three string sequence X, Y, and Z.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D array to store the lengths of LCS of substrings of X, Y and Z\n    LCS = [[[0 for j in range(o + 1)] for i in range(m + 1)] for k in range(n + 1)]\n\n    # fill the LCS array using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i - 1][j - 1][k])\n\n    # find the LCS of all the substrings of X, Y and Z\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] == LCS[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Initialize a 3D array to store the length of LCS for substrings of X, Y and Z\n    LCS = [[[0 for j in range(len(Z)+1)] for i in range(len(Y)+1)] for k in range(len(X)+1)]\n    \n    # Fill the 3D array using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n    \n    # Extract the LCS subsequence from the 3D array\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = \"\"\n    while i>0 and j>0 and k>0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] == LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] == LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # Initialize a 2D table to store lengths of subsequences\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Reconstruct the subsequence\n    i = m\n    j = p\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of subsequences of lengths 1 to n\n    L = [[0] * (m+1) for i in range(n+1)]\n\n    # Fill in the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Traverse the L table to find the longest common subsequence\n    i = n\n    j = m\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D table to store the lengths of LCS for all prefixes of X,Y,Z\n    L = [[0 for j in range(o+1)] for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # return the length of the longest common subsequence\n    return L[m][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of longest common suffix for prefixes of X, Y, and Z\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # create a table to store the lcs for prefixes of X, Y and Z\n    LCS = [[\"\"] * (p + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + [X[i - 1]]\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1], key=len)\n\n    # find the length of the longest common subsequence\n    lcs_length = len(LCS[m][n])\n\n    # return the lcs as a string\n    return \"\".join(LCS[m][n][-lcs_length:])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match words starting with capital letters\n    word_pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Split the string into words using the regular expression\n    words = re.findall(word_pattern, str1)\n\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub('[^a-zA-Z0-9\\s]', '', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize each word starting with capital letter\n    words = [word.capitalize() for word in words]\n    # join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression to match capitalized words\n    pattern = r'[A-Z][a-z]+'\n\n    # Find all the capitalized words in the input string\n    matches = re.findall(pattern, str1)\n\n    # Loop through each match and replace it with a space\n    for match in matches:\n        str1 = str1.replace(match,'' + match)\n\n    # Remove the extra space at the start and end of the string\n    return str1.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Iterate over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    \n    # Join the words back together with spaces\n    str2 =''.join(words)\n    \n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the word starts with capital letter\n        if words[i][0].isupper():\n            # If it does, add a space before it\n            words[i] ='' + words[i]\n    # Join the words back into a string\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<=[a-z])(?=[A-Z])','', str1)\n    return str1.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Replace all non-word characters with spaces\n    str1 = re.sub(r'\\W+','', str1)\n\n    # Split the string into words\n    words = str1.split()\n\n    # Capitalize the first letter of each word\n    capitalized_words = [''.join([w[0].upper(), w[1:].lower()]) for w in words]\n\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # function to capitalize the first letter of each word and add spaces between them\n    def capitalize_and_add_spaces(s):\n        words = re.findall(r'\\b\\w+\\b', s)\n        capitalized_words = [''.join(x.title()) for x in words]\n        return''.join(capitalized_words)\n\n    # capitalize the first letter of each word and add spaces between them\n    capitalized_str = capitalize_and_add_spaces(str1)\n    return capitalized_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern for matching words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Use the re.sub() function to replace all matches of the pattern with a space\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern to match capital letters\n    pattern = r'(?<!\\w)(\\p{Lu})(?!\\w)'\n    # Split the string based on pattern and join with spaces\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            nums.append(num)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            nums.append(num)\n    nums.sort(key=lambda x: float(x))\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda s: int(s))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and returns a sorted list of strings in ascending order.\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    nums.sort()\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # convert all elements of the list to int\n    nums_int = [int(x) for x in nums_str]\n    # sort the list of integers using the built-in sort function\n    nums_int.sort()\n    # convert the sorted list back to strings\n    nums_str = [str(x) for x in nums_int]\n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Define a list to store the numeric strings\n    numeric_str = []\n    \n    # Iterate over each string in the list\n    for i in nums_str:\n        # Check if the string contains only digits\n        if all(c.isdigit() for c in i):\n            # Convert the string to a float\n            num = float(i)\n            # Add the float to the list\n            numeric_str.append(num)\n    \n    # Sort the list in ascending order\n    numeric_str.sort()\n    \n    # Return the sorted list\n    return numeric_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert all strings to numbers and sort them numerically\n    nums = sorted(map(int, nums_str))\n    # convert the sorted list back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n        else:\n            nums.append(num_str)\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Using list comprehension to add the tuple elements to the list\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for element in test_list:\n        test_list.append(element)\n    for element in test_tup:\n        test_list.append(element)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the lists\n    new_list = test_list + test_tup\n    # Return the new list\n    return new_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    elif arr[i] > arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(n - 1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n        arr[0], arr[i] = arr[i], arr[0]\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Checks if the given array represents a min heap or not.\n    :param arr: The array to check.\n    :param i: The index of the current element to check.\n    :return: True if the array is a min heap, False otherwise.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n    else:\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < len(arr) and arr[i] > arr[left_child]:\n            return False\n        if right_child < len(arr) and arr[i] > arr[right_child]:\n            return False\n        return check_min_heap_helper(arr, left_child) or check_min_heap_helper(arr, right_child)\n\ndef is_min_heap(arr):\n    \"\"\"\n    Checks if the given array represents a min heap or not.\n    :param arr: The array to check.\n    :return: True if the array is a min heap, False otherwise.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n\n\nif __name__ == \"__main__\":\n    arr = [6, 2, 8, 4, 1, 3, 5]\n    if check_min_heap(arr):\n        print(\"The array is a min heap\")\n    else:\n        print(\"The array is not a min heap\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    \n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    if len(arr) == 0:\n        return True\n    \n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i+1\n    right = 2*i+2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    parent = (i - 1) // 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    if parent >= 0 and arr[parent] > arr[i]:\n        return False\n\n    return True\n\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the array is empty or the current index is greater than or equal to its length, it is not a min heap\n    if not arr or i >= len(arr):\n        return False\n    \n    # If the left child index is greater than the current index and the left child is greater than the parent, it is not a min heap\n    if i*2+1 < len(arr) and arr[i*2+1] > arr[i]:\n        return False\n    \n    # If the right child index is greater than the current index and the right child is greater than the parent, it is not a min heap\n    if i*2+2 < len(arr) and arr[i*2+2] > arr[i]:\n        return False\n    \n    # If all the above conditions are true, the array is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    return arr[i] >= arr[parent]\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    for i in range(n - 1, 0, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398103, 2796206, 5592412, 11184825, 22369650, 44739301, 89478602, 178957205, 357914410, 715828821, 1431657642, 2863315285, 5726630570, 11453261141, 22906522281, 45813044563, 91626089126, 183252178252, 366504356505, 733008713010, 1466017426021, 2932034852042, 5864069704084, 11728139408169, 23456278816338, 46912557632677, 93825115265354, 187650230530709, 375300461061418, 750600922122837, 1501201844245674, 3002403688491348, 6004807376982697, 12009614753965394, 24019229507930789, 48038459015861579, 96076918031723158, 192153836063446317, 384307672126892634, 768615344253785269, 1537230688507570538, 3074461377015141077, 6148922754030282154, 12297845508060564309, 24595691016121128619, 49191382032242257238, 98382764064484514477, 196765528128969028954, 3935310562579380579"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    jacobsthal_list = []\n    while len(jacobsthal_list) < n:\n        j = (j * (j + 1)) // 2\n        jacobsthal_list.append(j)\n    return jacobsthal_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first three numbers of the sequence\n    j1, j2, j3 = 0, 1, 1\n\n    # Loop through the sequence and print each number\n    for i in range(n):\n        print(j1)\n\n        # Calculate the next number in the sequence\n        j1, j2 = j2, j1 + j2\n\n    # Return the nth number in the sequence\n    return j1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_numbers = []\n        jacobsthal_numbers.append(0)\n        jacobsthal_numbers.append(1)\n        for i in range(2, n + 1):\n            jacobsthal_numbers.append(jacobsthal_numbers[i - 2] + jacobsthal_numbers[i - 1])\n        return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacob = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174762, 349524, 699048, 1398096, 2796192, 5592384, 11184768, 22369536, 44739072, 89478144, 178956288, 357912576, 715825152, 1431650304, 2863300608, 5726601216, 11453202432, 22906404864, 45812809728, 91625619456, 183251238912, 366502477824, 733004955648, 1466009911296, 2932019822592, 5864039645184, 11728079290368, 23456158580736, 46912317161472, 93824634322944, 187649268645888, 375298537291776, 750597074583552, 1501194149167104, 3002388298334208, 6004776596668416, 12009553193336832, 24019106386673664, 48038212773347328, 96076425546694656, 192152851093389312, 384305702186778624, 768611404373557248, 1537222808747114496, 3074445617494228992, 6148891234988457984, 12297782469976915968, 24595564939953831936, 49191129879907663872, 98382259759815327744, 196764519519630655488, 393529039039"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two jacobsthal numbers\n    j0 = 0\n    j1 = 1\n\n    # Loop through the remaining jacobsthal numbers\n    for i in range(2, n+1):\n        # Calculate the next jacobsthal number\n        j = (j0 + j1) % 2\n\n        # Update the values of j0 and j1\n        j0 = j1\n        j1 = j\n\n        # Print the jacobsthal number\n        print(j)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples in descending order of the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    # Initialize a set to store the k records with the minimum value of k\n    min_k_set = set()\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # If the set contains k unique records with the same value as the minimum k record, add the current record to the set\n        if len(min_k_set) < K and sorted_list[i][1] in min_k_set:\n            min_k_set.add(sorted_list[i][0])\n        # If the set contains k unique records with the minimum value of k, add the current record to the set\n        elif len(min_k_set) < K:\n            min_k_set.add(sorted_list[i][0])\n        # If the set contains k unique records with the maximum value of k, remove the first record from the set and add the current record to the set\n        elif len(min_k_set) == K:\n            min_k_set.remove(sorted_list[i-K][0])\n            min_k_set.add(sorted_list[i][0])\n    # Convert the set to a list and return it\n    return list(min_k_set)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # create a list of dictionaries where each dictionary represents a record\n    records = [dict(zip(test_list[0], record)) for record in test_list]\n    \n    # sort the list of dictionaries based on the first element of each dictionary\n    records.sort(key=lambda x: x[test_list[0][0]])\n    \n    # create a new list of the first K elements of the sorted list\n    k_records = records[:K]\n    \n    # create a new list of lists containing the values of the first K elements of each record in the original list\n    k_record_values = [list(record[test_list[0][0]])[:K] for record in records[:K]]\n    \n    # calculate the minimum value of the K record values\n    min_value = min(min(values) for values in k_record_values)\n    \n    # create a new list of lists containing the indices of the first K elements of each record in the original list that have the minimum value\n    indices = [i for i, values in enumerate(k_record_values) if min(values) == min_value]\n    \n    # create a list of tuples containing the first K elements of each record from the original list and their indices in the new list\n    result = [(record[test_list[0][0]][i], i) for i, record in enumerate(records) if i in indices]\n    \n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list based on the last element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    # initialize the minimum count and the minimum record\n    count = 1\n    min_record = test_list[0]\n    # iterate over the list and keep track of the count and minimum record\n    for i in range(1, len(test_list)):\n        if count < K:\n            count += 1\n            if test_list[i][1] < min_record[1]:\n                min_record = test_list[i]\n        else:\n            break\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize a list to store the minimum k records\n    min_k_list = []\n\n    # Traverse the sorted list\n    for i in range(len(sorted_list)):\n        if len(min_k_list) < K:\n            # Add the tuple to the list if it's not already there\n            if sorted_list[i] not in min_k_list:\n                min_k_list.append(sorted_list[i])\n        elif sorted_list[i] in min_k_list:\n            # Remove the tuple from the list if it's already there\n            min_k_list.remove(sorted_list[i])\n\n    # Return the list of minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1], reverse=True)\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i][0])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    count = 0\n    min_list = []\n    for i in range(len(test_list)):\n        if count < K:\n            if not min_list or min_list[-1][0] > test_list[i][0]:\n                min_list.append(test_list[i])\n        else:\n            break\n        count += 1\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples in ascending order based on second element\n    test_list.sort(key=lambda x: x[1])\n    # initialize minimum count of records as infinity\n    min_count = float('inf')\n    # initialize minimum k count as 0\n    min_k_count = 0\n    # loop through the sorted list of tuples\n    for i in range(len(test_list)):\n        # if k records are found, update the minimum count and count of k records found\n        if min_k_count < K:\n            if min_count > test_list[i][0]:\n                min_count = test_list[i][0]\n                min_k_count += 1\n        # if k records are found, break out of the loop\n        else:\n            break\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    def get_count(lst, k):\n        \"\"\"\n        Helper function to count the number of occurrences of k records in a list of tuples.\n        \"\"\"\n        count = 0\n        for tup in lst:\n            if len(tup) == k:\n                count += 1\n        return count\n\n    min_count = float('inf')\n    min_lst = []\n\n    for tup in test_list:\n        count = get_count(test_list, len(tup))\n        if count < min_count:\n            min_count = count\n            min_lst = [tup]\n        elif count == min_count:\n            min_lst.append(tup)\n\n    if len(min_lst) < K:\n        return None\n\n    min_lst = sorted(min_lst)[:K]\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list as input and returns the minimum K records from the list.\n    If K is greater than the length of the list, the function returns all the records from the list.\n    '''\n    # Sort the list in descending order\n    test_list.sort(reverse=True)\n\n    # If K is greater than the length of the list, return all the records\n    if K > len(test_list):\n        return test_list\n\n    # Return the first K records from the sorted list\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Define a dictionary to store the counts of each element in each list\n    element_counts = {}\n\n    # Iterate over the first list and count the occurrences of each element\n    for i, elem in enumerate(l1):\n        if elem in element_counts:\n            element_counts[elem] += 1\n        else:\n            element_counts[elem] = 1\n\n    # Iterate over the second list and count the occurrences of each element\n    for i, elem in enumerate(l2):\n        if elem in element_counts:\n            element_counts[elem] += 1\n        else:\n            element_counts[elem] = 1\n\n    # Iterate over the third list and count the occurrences of each element\n    for i, elem in enumerate(l3):\n        if elem in element_counts:\n            element_counts[elem] += 1\n        else:\n            element_counts[elem] = 1\n\n    # Find common elements by iterating over the dictionary and adding elements that appear in all lists\n    common_elements = []\n    for elem, count in element_counts.items():\n        if count == 3:\n            common_elements.append(elem)\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Create an empty set to store the common elements\n    common = set()\n\n    # Loop through each index of the first list\n    for i in range(len(l1)):\n        # If the element at this index is also present in all other lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # Add the element to the set of common elements\n            common.add(l1[i])\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Find all the indices where the elements of l1, l2, and l3 are equal\n    indices = [i for i, x in enumerate(l1) if x == l2[i] and x == l3[i]]\n\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through each index and add the element to the list if it is common for all three lists\n    for index in indices:\n        element = l1[index]\n        if element in l2[index] and element in l3[index]:\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[1:])\n        return min(numbers[0], smallest)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list is empty\n    if len(numbers) == 0:\n        return None\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Found match: {match.group()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?i)a\\b(\\w+)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=(b*))'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print('Found match:', match.group())\n    else:\n        print('No match found')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(?:b+)*'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in reverse_dict:\n            count += reverse_dict[reversed_string]\n        reverse_dict[string] = reverse_dict.get(string, 0) + 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a dictionary to store the count of reverse pairs\n    reverse_dict = {}\n\n    # iterate through the list of strings\n    for string in test_list:\n        # reverse the string\n        reversed_string = string[::-1]\n\n        # check if the reversed string is already in the dictionary\n        if reversed_string in reverse_dict:\n            # increment the count of the string in the dictionary\n            reverse_dict[reversed_string] += 1\n        else:\n            # add the string to the dictionary with a count of 1\n            reverse_dict[string] = 1\n\n    # count the total number of pairs of reverse strings\n    count = sum([reverse_dict[key] for key in reverse_dict if key < reversed(key)])\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            reverse1 = test_list[j][::-1]\n            reverse2 = test_list[i][::-1]\n            if reverse1 in test_list[j+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize a dictionary to store the count of each reverse string\n    reverse_dict = {}\n\n    # Loop through the list of strings\n    for string in test_list:\n\n        # Convert the string to a list of characters and sort it in descending order\n        char_list = sorted(string, reverse=True)\n\n        # Convert the sorted list of characters back to a string\n        sorted_string = ''.join(char_list)\n\n        # If the sorted string is not already in the dictionary, add it and set its value to 1\n        if sorted_string not in reverse_dict:\n            reverse_dict[sorted_string] = 1\n        # If the sorted string is already in the dictionary, increment its value by 1\n        else:\n            reverse_dict[sorted_string] += 1\n\n    # Initialize the count of reverse pairs\n    count = 0\n\n    # Loop through the dictionary to count the reverse pairs\n    for string, count in reverse_dict.items():\n\n        # If the count is even, there are reverse pairs\n        if count % 2 == 0:\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count += 1  # Add 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count -= 1  # Subtract 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count += 1  # Add 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count -= 1  # Subtract 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count += 1  # Add 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count -= 1  # Subtract 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count += 1  # Add 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count -= 1  # Subtract 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count += 1  # Add 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count -= 1  # Subtract 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count += 1  # Add 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= 2  # Divide by 2 since we counted each pair\n            count *= 2  # Multiply by 2 since each string is counted twice\n            count -= 1  # Subtract 1 since each string is counted twice\n            count *= 2  # Multiply by 2 since we counted each pair\n            count //= "
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each unique sublist\n    count_dict = {}\n\n    # iterate over each list in the input list\n    for lst in list1:\n        # convert the list to a tuple using tuple() function\n        tuple_lst = tuple(lst)\n\n        # if the tuple is already in the dictionary, increment its value by 1\n        if tuple_lst in count_dict:\n            count_dict[tuple_lst] += 1\n        # otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            count_dict[tuple_lst] = 1\n\n    # return the dictionary containing the count of each unique sublist\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    unique_dict = {}\n    # Loop through the original list\n    for lst in list1:\n        # Convert the list to a tuple\n        tup = tuple(lst)\n        # Check if the tuple already exists in the dictionary\n        if tup in unique_dict:\n            # Increment the count of the tuple in the dictionary\n            unique_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            unique_dict[tup] = 1\n    # Return the dictionary\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the unique sublists and their count\n    count_dict = {}\n\n    # Loop through the list and convert each list to a tuple\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count for the tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple and its count to the dictionary\n            count_dict[sublist_tuple] = 1\n\n    # Return the dictionary with unique sublists and their count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert the original list to a set to remove duplicates\n    unique_set = set(list1)\n\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Iterate through each unique list in the set\n    for list_item in unique_set:\n        # Convert the unique list to a tuple\n        list_item_tuple = tuple(list_item)\n        # Check if the tuple is already in the dictionary\n        if list_item_tuple in count_dict:\n            # If it is, increment its value\n            count_dict[list_item_tuple] += 1\n        else:\n            # If it's not, add it with a value of 1\n            count_dict[list_item_tuple] = 1\n\n    # Return the dictionary of count values\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    sublist_counts = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple and check if it is in the dictionary\n        if tuple(element) in sublist_counts:\n            # If it is, increment its value\n            sublist_counts[tuple(element)] += 1\n        else:\n            # If not, add it to the dictionary with a value of 1\n            sublist_counts[tuple(element)] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist in count_dict:\n                count_dict[tuple_sublist] += 1\n            else:\n                count_dict[tuple_sublist] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple to ensure uniqueness\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # If it is, increment the count of the tuple by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store unique sublists and their count\n    count_dict = {}\n    # loop through the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sorted(sublist)) in count_dict:\n            # increment the count by 1\n            count_dict[tuple(sorted(sublist))][0] += 1\n        else:\n            # add the sublist and its count to the dictionary\n            count_dict[tuple(sorted(sublist))] = [1, sublist]\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist = tuple(sorted(sublist))\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    else:\n        dot_index = num.index('.')\n        left_part = num[:dot_index]\n        right_part = num[dot_index+1:]\n        if len(left_part) > 2 or len(right_part) > 2:\n            return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    num_list = list(num)\n    for i in range(len(num_list)-1):\n        if num_list[i] == '.' and num_list[i+1] == '0':\n            return False\n    if len(num_list) == 1 and num_list[0] == '0':\n        return False\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= '.' and num_list[i] == '0':\n            return False\n    if len(num_list) == 1 and num_list[0] == '0':\n        return False\n    for i in range(1, len(num_list)):\n        if num_list[i] == '.':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Convert the string to a float to get rid of any extra characters that may have come along\n    num = float(num)\n    # Check if the number is within the specified precision\n    if abs(num - int(num)) < 0.01:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 1 and num[0] == '-' and '.' not in num:\n        num = num[1:]\n    if '.' not in num:\n        return False\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    decimal_part = num.split('.')[1]\n\n    if len(decimal_part) > 2:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if type(num)!= str:\n        return False\n    # Check if the string contains non-numeric characters\n    if any(char not in '0123456789.' for char in num):\n        return False\n    # Check if the string has more than one decimal point\n    if '.' in num and '.' not in num[num.index('.')+1:]:\n        return False\n    # Check if the string is a valid decimal number with 2 decimal places\n    if '.' in num:\n        num = num[:num.index('.')+3]\n    else:\n        num += '.00'\n    num = float(num)\n    if num == int(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = []\n    for num in arr:\n        if num not in distinct_elements:\n            distinct_elements.append(num)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # check if the dictionary has only one element with a frequency of 1\n    return len(freq) == 1 and freq[arr[0]] == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the unique elements of the array\n    unique_set = set(arr)\n    \n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            distinct_count += 1\n    \n    if distinct_count == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element,\n    otherwise it returns False.\n    \"\"\"\n    unique_elements = []\n    for element in arr:\n        if element in unique_elements:\n            return False\n        else:\n            unique_elements.append(element)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return \"The list contains only one distinct element.\"\n    else:\n        return \"The list contains more than one distinct element.\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Convert the list to a set to get rid of duplicates\n    unique_set = set(arr)\n    \n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_element = set(arr)\n    if len(unique_element) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return \"The given month number is divisible by 2, which means it contains 30 days.\"\n    elif monthnum3 % 4 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return \"The given month number is divisible by 4, 100, or 400, which means it contains 30 days.\"\n    else:\n        return \"The given month number does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days_in_month[1] = 29\n            else:\n                days_in_month[1] = 28\n        return days_in_month[monthnum3-1]\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 in (4, 6, 9, 11):\n        return True\n    elif monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n    elif monthnum3 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 in range(4,7) and monthnum3!= 9:\n            return True\n        elif monthnum3 in [1,2,12] or (monthnum3 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0)):\n            return True\n        else:\n            return days[monthnum3-1] in [31, 30]\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # check for the correct number of days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # check if the given month number contains 30 days\n    if monthnum3 in range(1, 13):\n        return days_in_month[monthnum3-1] == 30\n    else:\n        return \"Invalid month number!\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # checking whether the given month number is 2 or 3 or 4\n    if monthnum3 in [2, 3, 4]:\n        return True\n    # checking whether the given month number is 5, 6, 7, 8, 9, 10 or 11\n    elif monthnum3 in [5, 6, 7, 8, 9, 10, 11]:\n        return False\n    # checking whether the given month number is 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    if n < 2:\n        return None\n\n    min_diff = float('inf')\n    min_elem = arr[0]\n    max_elem = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n        elif arr[i] > max_elem:\n            max_elem = arr[i]\n\n        diff = max_elem - min_elem\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Initialize the minimum difference\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i] - arr[i-1]\n        \n        # Update the minimum difference if the current difference is less than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array should have at least 2 elements\"\n    \n    # Initialize minimum difference and its position\n    min_diff = float('inf')\n    min_diff_pos = -1\n    \n    # Traverse the array and find the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_pos = i, j\n    \n    # Return the minimum difference and its position\n    return min_diff, min_diff_pos"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n): \n    arr.sort()  # sort the array in ascending order\n    min_diff = arr[n-1] - arr[0]  # minimum difference between any two elements is the difference between the last and first elements\n\n    for i in range(1, n): \n        diff = arr[i] - arr[i-1]  # calculate the difference between the current element and the previous element\n        if diff < min_diff: \n            min_diff = diff  # update the minimum difference if the current difference is smaller than the previous one\n\n    return min_diff  # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # calculate the minimum difference between any two elements\n    diff = arr[1] - arr[0]\n\n    # traverse the array to find the minimum difference between any two elements\n    for i in range(2,n):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff < diff:\n            diff = curr_diff\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the minimum difference\n    min_diff = float('inf')\n\n    # iterate over the array\n    for i in range(n-1):\n        # calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # if the current difference is smaller than the minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = abs(arr[n-1]-arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[n-1]-arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input and returns\n    the minimum difference between any two elements in the list.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    '''\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: list of integers\n    :param n: number of elements in the array\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_of_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_of_digits += 1\n    return num_of_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        '''\n        Check if a number is prime or not\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num):\n        '''\n        Find the next prime number\n        '''\n        i = num+1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def nth_polite(num):\n        '''\n        Find the nth polite number\n        '''\n        i = 1\n        polite_count = 0\n        prime = 1\n\n        while polite_count < num:\n            prime = find_next_prime(prime)\n            polite_count = 0\n            for j in range(1, 1000000):\n                if is_prime(j) and j > prime:\n                    polite_count += 1\n                    if polite_count == num:\n                        return j\n\n        return -1\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return \"Polite Number: 1\"\n    \n    # Initialize polite number and prime factors\n    polite = 1\n    prime_factors = []\n    \n    # Generate prime factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            if i not in prime_factors:\n                prime_factors.append(i)\n            n //= i\n    \n    # If n is not a prime number, it must be a prime factor of 1\n    if n > 1:\n        prime_factors.append(n)\n    \n    # Find the nth polite number\n    nth_polite = 1\n    for i in range(len(prime_factors)):\n        nth_polite *= prime_factors[i]\n        nth_polite = nth_polite + i\n    \n    # Return the nth polite number\n    return \"Polite Number: {}\".format(nth_polite)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    polite_numbers = {1: 3, 2: 4, 3: 5, 4: 7, 5: 9, 6: 11, 7: 13, 8: 15, 9: 17, 10: 19, 11: 21, 12: 23, 13: 25, 14: 27, 15: 29, 16: 31, 17: 33, 18: 35, 19: 37, 20: 39}\n    if n in polite_numbers:\n        return polite_numbers[n]\n    else:\n        return None\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th polite number is: {}\".format(n, is_polite(n)))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 1\n    if n == 4:\n        return 3\n    if n == 5:\n        return 1\n    if n == 6:\n        return 3\n    if n == 7:\n        return 1\n    if n == 8:\n        return 3\n    if n == 9:\n        return 1\n    if n == 10:\n        return 3\n    \n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    \n    return i\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(is_polite(n))\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables\n    i = 1\n    num = 2\n    count = 0\n\n    # Iterate through numbers until we find the nth polite number\n    while count < n:\n        # Check if num is polite\n        if num % 2 == 1:\n            # Calculate the next polite number\n            next_num = 3 * num + 1\n        else:\n            # Calculate the next polite number\n            next_num = 2 * num + 1\n\n        # If the next polite number is greater than the current number,\n        # we have found the nth polite number\n        if next_num > num:\n            return next_num\n\n        # Increment the count and num\n        count += 1\n        num = next_num\n\n    # If we have not found the nth polite number, return -1\n    return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. \n    '''\n    i = 1\n    polite_count = 0\n    while polite_count < n:\n        if is_prime(i) and is_prime(math.sqrt(i)):\n            polite_count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\nn = 10\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite_number(n):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        a = 5\n        b = 1\n        i = 1\n        while i <= n:\n            if a >= 50:\n                a -= 20\n            else:\n                a -= 10\n            b += a\n            i += 1\n        return b\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    polite = 0\n    # initialize counter to 0\n    # initialize polite number to 0\n    while polite < n: \n        # increment counter by 1\n        count += 1\n        # add the value of each counter to polite number\n        polite += count\n    # return the polite number\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the variables \n    a = 0 \n    b = 1\n    c = 1\n\n    # Find the nth polite number \n    for i in range(n): \n        a, b, c = b, c, a + b + c \n\n    # Return the nth polite number \n    return a "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Function to find nth polite number.\n    '''\n\n    def is_prime(num):\n        '''\n        Function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        '''\n        Function to find the greatest common divisor of two numbers.\n        '''\n        if a == 0:\n            return b\n        else:\n            return gcd(b%a, a)\n\n    def lcm(a, b):\n        '''\n        Function to find the least common multiple of two numbers.\n        '''\n        return (a * b) // gcd(a, b)\n\n    def is_multiple(num, multiple):\n        '''\n        Function to check if a number is a multiple of a given number.\n        '''\n        return num % multiple == 0\n\n    def nth_polite(n):\n        '''\n        Function to find the nth polite number.\n        '''\n        polite_number = 2\n        polite_count = 1\n        while polite_count < n:\n            if is_prime(polite_number) and is_multiple(polite_number, 3):\n                polite_count += 1\n            else:\n                polite_number += 1\n        return polite_number\n\n    return nth_polite(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1[::2], l1[1::2])"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            pairs.append((l1[i], l1[j]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n):\n        if i+1 < n:\n            result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    n = len(lst)\n    for i in range(n):\n        if i == n - 1:\n            pairs.append((lst[i], lst[0]))\n        else:\n            pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function counts the number of pairs whose sum is equal to'sum' in the given list 'arr'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers as input and the sum as an argument.\n    It returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list of elements that are present in li1 but not in li2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    # creating an empty list to store the difference\n    diff_list = []\n    # iterating over each element of the first list\n    for i in li1:\n        # if the element is not present in the second list, it is added to the difference list\n        if i not in li2:\n            diff_list.append(i)\n    # returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        return \"n must be a positive integer\"\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers\n\nn = int(input(\"Enter the value of n: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of first n odd natural numbers is:\", result)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [x for x in range(1, 2*n+1, 2)]\n    sum_fourth_powers = sum([x**4 for x in odd_numbers])\n    return sum_fourth_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    odd_sum = 0\n\n    while count < n:\n        if count % 2!= 0:\n            odd_sum += count ** 4\n        count += 1\n\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum_of_power_of_fourth = 0\n    while num <= n:\n        sum_of_power_of_fourth += num**4\n        num += 1\n    return sum_of_power_of_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    brackets = {'(': ')', '[': ']', '{': '}'}\n\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif char == brackets[stack.pop()]:\n            continue\n        else:\n            return False\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            if close_brackets[char]!= stack[-1]:\n                return False\n            stack.pop()\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    balanced = True\n    \n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                balanced = False\n                break\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    \n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1]!= '(':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ('(', ')'):\n            stack.append(char)\n        elif char in ('+', '-'):\n            if not stack:\n                return False\n            top = stack.pop()\n            if top not in ('(', '['):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Initialize a stack\n    stack = deque()\n\n    # Traverse through the expression\n    for i in exp:\n\n        # If the character is an opening bracket, push it onto the stack\n        if i in ['(', '{', '[']:\n            stack.append(i)\n\n        # If the character is a closing bracket, pop the last element from the stack\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if i == ')' and last_char!= '(':\n                return False\n            elif i == '}' and last_char!= '{':\n                return False\n            elif i == ']' and last_char!= '[':\n                return False\n\n    # If the stack is empty, then the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Remove words with length K\n    new_words = [word for word in words if len(word)!= K]\n\n    # Join the new words into a string\n    new_str =''.join(new_words)\n\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        matches = re.finditer(pattern,text)\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Match position: {match.start()}, {match.end()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Matching the pattern in the given text using re.search() function\n    match = re.search(pattern, text)\n\n    # If no match is found, return None\n    if not match:\n        return None\n\n    # Extracting the position of the match and its occurrence count\n    pos = match.start()\n    count = match.groups()\n\n    # Returning the extracted values\n    return (pos, count)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    result = re.findall(pattern, text)\n\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    match = re.search(pattern, text)\n\n    if match:\n        # Print the occurrence\n        print(f\"The pattern '{pattern}' occurs {match.group().count(pattern)} times in the string.\")\n\n        # Print the position\n        print(f\"The pattern '{pattern}' occurs at index {match.start()}.\")\n\n    else:\n        print(\"No match found for the pattern.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expressions to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If there is no match, return None\n    if len(matches) == 0:\n        return None\n    \n    # Find the position of the first occurrence of the pattern in the text\n    first_index = text.find(matches[0])\n    \n    # Find the position of the last occurrence of the pattern in the text\n    last_index = text.rfind(matches[-1])\n    \n    # Return a tuple containing the first and last indices of the pattern in the text\n    return (first_index, last_index)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to find the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are matches, return a list of tuples containing the match and its position in the text\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n\n    for match in matches:\n        print(f\"Found match: {match.group()}, start: {match.start()}, end: {match.end()}\")\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # check if index is odd\n            count = 0\n            for j in range(i, len(nums)): # check if the odd position contains odd numbers\n                if nums[j] % 2!= 0:\n                    count += 1\n                if count >= 2: # if the count is greater than 1, return False\n                    return False\n            if count < 2: # if the count is less than 2, return True\n                return True\n    return True # if no odd position contains odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if i+1 in range(len(nums)) and nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and i < len(nums) - 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers and returns True if all odd numbers appear in the odd positions,\n    and False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not any(nums[i] % 2 == 0 for _ in range(len(nums)//2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 1:\n                    count += 1\n                    if count % 2 == 1:\n                        return False\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    for char in test_str:\n        if char.lower() in vowels:\n            vowels[char.lower()] += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if (test_str[i].lower() in vowels) and (test_str[i+1].lower() in vowels):\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    count = 0\n    prev_char = None\n\n    for char in test_str:\n        if char in vowels:\n            if prev_char in vowels:\n                count += 1\n\n        prev_char = char\n\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize a set to store the non-repeated elements\n    non_repeated = set()\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated.add(num)\n    \n    # find the sum of the non-repeated elements\n    total_sum = 0\n    for num in non_repeated:\n        total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all elements that are not repeated.\n    \"\"\"\n    # Create a set to store the unique elements in the list\n    unique_set = set(arr)\n    # Initialize the sum to zero\n    sum_without_duplicates = 0\n    # Loop over the unique elements in the set\n    for element in unique_set:\n        # Add the element to the sum if it's not repeated\n        if arr.count(element) == 1:\n            sum_without_duplicates += element\n    return sum_without_duplicates"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # initialize variables to store the sum of non-repeated elements and the count of non-repeated elements\n    sum = 0\n    count = 0\n    \n    # loop through the dictionary and add the non-repeated elements to the sum and increment the count\n    for i in freq:\n        if freq[i] == 1:\n            sum += i\n            count += 1\n    \n    # return the sum and count of non-repeated elements\n    return sum, count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # use the set to find the sum of unique elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their indices\n    d = {}\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # If the element is not already in the dictionary, add it with its index\n        if arr[i] not in d:\n            d[arr[i]] = i\n        # If the element is already in the dictionary, remove its index from the dictionary\n        else:\n            del d[arr[i]]\n\n    # Iterate through the keys in the dictionary and add their values to the sum\n    sum = 0\n    for key in d.keys():\n        sum += key\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    n = len(arr)\n    i = 0\n    j = 1\n    while j < n:\n        if arr[i]!= arr[j]:\n            i += 1\n            arr[i] = arr[j]\n        j += 1\n    return sum(arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n    for element in arr:\n        if element not in unique_set:\n            unique_set.add(element)\n    \n    # Initialize the sum variable to 0\n    sum_var = 0\n    \n    # Iterate through the unique set and add its values to the sum variable\n    for value in unique_set:\n        sum_var += value\n    \n    # Return the sum variable\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # creating a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # iterating through the list and incrementing the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # creating a new list to store the non-repeated elements\n    non_repeated = []\n\n    # iterating through the dictionary to find the non-repeated elements\n    for num in count_dict:\n        if count_dict[num] == 1:\n            non_repeated.append(num)\n\n    # calculating the sum of the non-repeated elements\n    total_sum = 0\n    for num in non_repeated:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the non-repeated elements in the list\n    unique_elements = set(arr)\n    \n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n    \n    # Loop through the unique elements in the set and add their value to the sum_non_repeated variable\n    for element in unique_elements:\n        sum_non_repeated += element\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the count of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # initialize the sum to 0\n    total = 0\n    \n    # iterate through the counts dictionary to find the sum of non-repeated elements\n    for num, count in counts.items():\n        if count == 1:\n            total += num\n    \n    return total"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            continue\n        yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Group the list elements by their indices and count how many elements are there in each group\n    group_counts = dict(groupby(enumerate(list1), key=lambda x: x[0]))\n\n    # Iterate over the indices and pack consecutive duplicates into sublists\n    for index, group in group_counts.items():\n        # Check if there is at least one consecutive duplicate in the group\n        if len(list(group)) > 1:\n            # Pack consecutive duplicates into sublists and add the sublists to the result list\n            result = [list(group)]\n            for i in range(1, len(list(group))):\n                result.append(list(group)[i])\n            yield result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define a function to check if an element is consecutive with the previous element\n    def is_consecutive(previous, current):\n        return previous == current + 1\n\n    # Define a function to pack consecutive duplicates into sublists\n    def pack_duplicates(group):\n        if len(list(group)) == 1:\n            return [list(group)]\n        else:\n            return [list(group)[0]] + [list(group)[1]]\n\n    # Apply the above functions to group the elements in consecutive duplicates\n    result = [pack_duplicates(group) for key, group in groupby(list1, key=is_consecutive)]\n\n    # Flatten the list of sublists\n    return [sublist for sublist in result for subsublist in sublist]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[0] - x[1])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates\n    group_obj = groupby(list1)\n    # Convert the group object to a list of sublists\n    packed_list = [list(group) for group in group_obj]\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            result.append(list(group))\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Parameters:\n    list1 (list): a list of elements to be processed\n\n    Returns:\n    list: a new list where consecutive duplicates of elements are grouped and packed into sublists.\n    \"\"\"\n\n    grouped_list = [(key, list(group)) for key, group in groupby(list1) if len(list(group)) > 1]\n    return [list(group) for group in grouped_list]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(lst)\n    result = []\n    for item, group in grouped_list:\n        if len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple in count_dict:\n                count_dict[item_tuple] += 1\n            else:\n                count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n\n    count_dict = {}\n\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the counts of unique sublists\n    count_dict = {}\n    # loop over each element of the list\n    for elem in list1:\n        # if the element is a list, turn it into a tuple and add it to the dictionary\n        if isinstance(elem, list):\n            tup = tuple(elem)\n            if tup in count_dict:\n                count_dict[tup] += 1\n            else:\n                count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist not in sublist_count:\n            sublist_count[sublist] = 1\n        else:\n            sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary to store the counts\n    count_dict = {}\n\n    # loop through each element in the list\n    for element in list1:\n\n        # if the element is a list, convert it to a tuple and count its occurrences in the count_dict\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            if tuple_element in count_dict:\n                count_dict[tuple_element] += 1\n            else:\n                count_dict[tuple_element] = 1\n\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    sublist_dict = {}\n    # Loop through each element of the list\n    for item in list1:\n        # Check if the element is a list\n        if isinstance(item, list):\n            # If it is, turn it into a tuple and count its occurrences in the dictionary\n            sublist_dict[tuple(item)] = sublist_dict.get(tuple(item), 0) + 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary\n    sublists = {}\n\n    # loop through the list\n    for item in list1:\n\n        # check if the item is a list\n        if isinstance(item, list):\n\n            # convert the list to a tuple and check if it's in the dictionary\n            if (tuple(item),) in sublists:\n                sublists[(tuple(item),)] += 1\n            else:\n                sublists[(tuple(item),)] = 1\n\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of each unique list\n    count_dict = {}\n\n    # Loop through each element of the list\n    for elem in list1:\n        # Convert the element to a list\n        sublist = list(elem)\n\n        # Convert the sublist to a tuple\n        tup = tuple(sublist)\n\n        # Check if the tuple exists in the dictionary\n        if tup in count_dict:\n            # Increment the count of the tuple in the dictionary\n            count_dict[tup] += 1\n        else:\n            # If the tuple does not exist, add it with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary of unique lists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_sublist_set = set(tuple(sublist) for sublist in list1)\n    \n    # Create a dictionary to store the count of sublists\n    sublist_count_dict = {}\n    \n    # Loop through the unique sublists and count their occurrences\n    for sublist in unique_sublist_set:\n        if sublist in sublist_count_dict:\n            sublist_count_dict[sublist] += 1\n        else:\n            sublist_count_dict[sublist] = 1\n    \n    return sublist_count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Check if the input list is empty or not\n    if len(test_list) == 0:\n        return []\n\n    # Sort the input list\n    test_list.sort()\n\n    # Initialize an empty list to store the combinations\n    result = []\n\n    # Iterate through all possible combinations of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # Calculate the sum of the current combination\n            current_sum = sum(test_list[i:j])\n            # If the current sum is present in the input list, add the combination to the result list\n            if current_sum in test_list:\n                result.append(test_list[i:j])\n\n    # Return the list of combinations\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of tuples containing all the combinations of sums of tuples in the given list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for combo in combinations(test_list[i]+test_list[j], len(test_list[i])+len(test_list[j])):\n                if combo not in result:\n                    result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = list(combinations(test_list, len(test_list)))\n    result = []\n    for combination in all_combinations:\n        if sum(combination) == 0:\n            result.append(combination)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if (test_list[i][0]+test_list[j][0]+test_list[k][0]) == test_list[i][1] and (test_list[i][0]+test_list[j][0]+test_list[k][0]) == test_list[j][1] and (test_list[i][0]+test_list[j][0]+test_list[k][0]) == test_list[k][1]:\n                    yield (test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find the sums of tuples in the list\n    sums = set([sum(t) for t in test_list])\n    # Create a list of tuples with all possible combinations of sums\n    combinations = [(tuple(sorted(c)), s) for c in combinations(sums, len(test_list)) for s in sums]\n    # Return the list of tuples\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of all combinations of sums\n    with tuples in the given tuple list.\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(2, n+1):\n        for comb in combinations(range(n), i):\n            current_sum = sum(test_list[i][j] for j in comb)\n            result.append((current_sum, tuple(test_list[i][j] for j in comb)))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the tuples in the list\n    test_list.sort()\n\n    # Initialize empty list to store combinations\n    combinations_list = []\n\n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        # Initialize an empty list to store the current combination\n        current_combination = []\n\n        # Iterate over the remaining tuples\n        for j in range(i+1, len(test_list)):\n            # Append the remaining tuples to the current combination\n            current_combination.append(test_list[j])\n\n            # Check if the sum of the current combination is equal to the target sum\n            if sum(current_combination) == target_sum:\n                # Add the current combination to the list of combinations\n                combinations_list.append(tuple(current_combination))\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a function to find all possible combinations of sums from a given list\n    def find_combinations_of_sums(lst, target_sum):\n        # Initialize an empty list to store all combinations\n        combinations_list = []\n\n        # Iterate through all possible pairs of indices\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                # Check if the sum of the pairs is equal to the target sum\n                if lst[i][0] + lst[j][0] == target_sum:\n                    # If yes, append the current combination to the list\n                    combinations_list.append((lst[i], lst[j]))\n\n        return combinations_list\n\n    # Define a function to find all possible combinations of tuples from a given list\n    def find_combinations_of_tuples(lst):\n        # Initialize an empty list to store all combinations\n        combinations_list = []\n\n        # Iterate through all possible pairs of indices\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                # Check if the tuples in the pairs are equal\n                if lst[i] == lst[j]:\n                    # If yes, append the current combination to the list\n                    combinations_list.append((lst[i]))\n\n        return combinations_list\n\n    # Define a function to find all possible combinations of tuples and sums from a given list\n    def find_combinations_of_tuples_and_sums(lst):\n        # Find all possible combinations of tuples from the list\n        combinations_of_tuples = find_combinations_of_tuples(lst)\n\n        # Iterate through all combinations of tuples and find all combinations of sums\n        combinations_of_sums = []\n        for combination in combinations_of_tuples:\n            # Find all possible combinations of sums from the current combination of tuples\n            temp_list = [item for sublist in lst for item in sublist]\n            combinations_of_sums.extend(find_combinations_of_sums(temp_list, sum(combination)))\n\n        return combinations_of_sums\n\n    # Define the main function to find all possible combinations of tuples and sums from the given list\n    def find_combinations_of_tuples_and_sums_helper(lst):\n        # If the list contains only one element, return it as a combination\n        if len(lst) == 1:\n            return [lst]\n\n        # Find all possible combinations of sums from the list\n        combinations_of_sums = find_combinations_of_sums(lst, lst[0][0])\n\n        # Iterate through all combinations of sums and find all combinations of tuples\n        combinations_of_tuples = []\n        for combination in combinations_of_sums:\n            # Find all possible combinations of tuples from the current combination of sums\n            temp_list = [item for sublist in lst for item in sublist]\n            combinations_of_tuples.extend(find_combinations_of_tuples(temp_list))\n\n        # Find all possible combinations of tuples and sums from all sublists\n        combinations_of_lists = []\n        for sublist in lst:\n            # Find all possible combinations of tuples and sums from the sublist\n            temp_list = [item for sublist2 in lst for item in sublist2]\n            combinations_of_lists.extend(find_combinations_of_tuples_and_sums_helper(temp_list))\n\n        # Combine all combinations of sums, tuples, and sublists\n        all_combinations = []\n        for combination in combinations_of_sums:\n            for combination2 in combinations_of_tuples:\n                for combination3 in combinations_of_lists:\n                    all_combinations.append(combination + combination2 + combination3)\n\n        return all_combinations\n\n    # Call the main function to find all possible combinations of tuples and sums from the given list\n    combinations_list = find_combinations_of_tuples_and_sums_helper(test_list)\n\n    # Return the list of all combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the tuple list to get the combinations in sorted order\n    sorted_list = sorted(test_list, key=lambda x: sum(x))\n\n    # Use itertools.combinations() to find all combinations of sums\n    combinations_list = list(combinations(sorted_list, len(sorted_list[0])))\n\n    # Return the list of all combinations of sums\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)):\n        for j in range(i, len(test_list)):\n            for k in range(j, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    print(tuple(test_list[i]), tuple(test_list[j]), tuple(test_list[k]))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the divisors of a given number n and returns True if the count of divisors is even, else False.\n    '''\n\n    if n <= 1:\n        return False\n\n    # loop through all the numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # if n is divisible by i, add i to the count of divisors\n            count = 0\n            while n % i == 0:\n                count += 1\n                n //= i\n            # check if the count of divisors is even\n            if count % 2 == 1:\n                return True\n\n    # if no divisor was found, n must be prime\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    if n < 2:\n        return False\n    \n    divisors = [1]\n    i = 2\n    \n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n            i += 1\n            \n    divisors.append(n)\n    \n    count = sum(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 2\n    if n > 1:\n        divisors_count += 1\n    return divisors_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    # count the number of divisors of n \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n\n    # check if the count of divisors is even or odd\n    if count % 2 == 0:\n        return \"The count of divisors of {} is even.\".format(n)\n    else:\n        return \"The count of divisors of {} is odd.\".format(n)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and count == 0:\n        print(\"The number has no divisors.\")\n    elif count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the sum of all the divisors of n\n    divisor_sum = n + n//1 + n//2 + n//3 + n//4 + n//5 + n//6 + n//7 + n//8 + n//9 + n//10 + n//11 + n//12 + n//13 + n//14 + n//15 + n//16 + n//17 + n//18 + n//19 + n//20 + n//21 + n//22 + n//23 + n//24 + n//25 + n//26 + n//27 + n//28 + n//29 + n//30 + n//31 + n//32 + n//33 + n//34 + n//35 + n//36 + n//37 + n//38 + n//39 + n//40 + n//41 + n//42 + n//43 + n//44 + n//45 + n//46 + n//47 + n//48 + n//49 + n//50\n    print(\"Sum of all the divisors of\", n, \"is\", divisor_sum)\n\n    # calculate the count of divisors of n\n    count_div = math.floor(divisor_sum/2)\n    print(\"Count of divisors of\", n, \"is\", count_div)\n\n    # check whether the count of divisors is even or not\n    if count_div % 2 == 0:\n        print(\"The count of divisors of\", n, \"is even.\")\n    else:\n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, and False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n        if count == 2:\n            break\n    if count == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n\n    if n == 1:\n        return 1\n    count = 0\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n\n    if n > 2:\n        count += 1\n\n    if count % 2 == 0:\n        return \"Even count of divisors\"\n    else:\n        return \"Odd count of divisors\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    \n    if n > 2 and n % 2 == 0:\n        count += 1\n    \n    return count % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum_arr = []\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 1:\n            sum_arr.append(arr[i])\n            if i + 2 <= n and arr[i+1] % 2 == 0:\n                sum_arr.append(arr[i+1])\n                if i + 4 <= n and arr[i+2] % 2 == 1:\n                    sum_arr.append(arr[i+2])\n                    if i + 6 <= n and arr[i+3] % 2 == 0:\n                        sum_arr.append(arr[i+3])\n                        if i + 8 <= n and arr[i+4] % 2 == 1:\n                            sum_arr.append(arr[i+4])\n                            if i + 10 <= n and arr[i+5] % 2 == 0:\n                                sum_arr.append(arr[i+5])\n                                if i + 12 <= n and arr[i+6] % 2 == 1:\n                                    sum_arr.append(arr[i+6])\n                                    if i + 14 <= n and arr[i+7] % 2 == 0:\n                                        sum_arr.append(arr[i+7])\n                                        if i + 16 <= n and arr[i+8] % 2 == 1:\n                                            sum_arr.append(arr[i+8])\n                                            if i + 18 <= n and arr[i+9] % 2 == 0:\n                                                sum_arr.append(arr[i+9])\n                                                if i + 20 <= n and arr[i+10] % 2 == 1:\n                                                    sum_arr.append(arr[i+10])\n                                                    if i + 22 <= n and arr[i+11] % 2 == 0:\n                                                        sum_arr.append(arr[i+11])\n                                                        if i + 24 <= n and arr[i+12] % 2 == 1:\n                                                            sum_arr.append(arr[i+12])\n                                                            if i + 26 <= n and arr[i+13] % 2 == 0:\n                                                                sum_arr.append(arr[i+13])\n                                                                if i + 28 <= n and arr[i+14] % 2 == 1:\n                                                                    sum_arr.append(arr[i+14])\n                                                                    if i + 30 <= n and arr[i+15] % 2 == 0:\n                                                                        sum_arr.append(arr[i+15])\n    sum_odd = sum(sum_arr)\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = [0] * (n+1)\n    sum_arr[0] = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum_arr[i] = sum_arr[i-1] + arr[i-1]\n        else:\n            sum_arr[i] = sum_arr[i-1]\n    return sum_arr[n]"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    sum_odd = 0\n    for i in range(len(arr) - 1):\n        if len(arr[i:i+2]) % 2!= 0:\n            sum_odd += arr[i:i+2].sum()\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sub_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sub_sum += arr[j]\n    return sub_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_of_odd_length_subarrays = 0\n    n = len(arr)\n\n    for i in range(n):\n        # Initialize a variable to keep track of current odd length sum\n        current_odd_length_sum = 0\n\n        # Traverse through the array from the starting index i to the end\n        for j in range(i, n):\n            # Add the current element to the current odd length sum\n            current_odd_length_sum += arr[j]\n\n            # If the current odd length sum is odd, add it to the sum of all odd length subarrays\n            if j - i + 1 % 2!= 0:\n                sum_of_odd_length_subarrays += current_odd_length_sum\n\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            sub_array = arr[j:j+2]\n            if len(sub_array) % 2 == 1: # check if length is odd\n                sum += sum(sub_array) # add the subarray elements to the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd_subarrays = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd length\n        if len(arr[i]) % 2!= 0:\n            # Add the current element to the sum of odd length subarrays\n            sum_odd_subarrays += arr[i]\n    \n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    odd_length_sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n-1):\n            if (j-i+1) % 2!= 0:\n                odd_length_sum += arr[j]\n\n    return odd_length_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                sum += sum(sub_arr)\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n\n    for i in range(n):\n        # add the first element of the subarray to the sum\n        if i == 0:\n            sum_odd_length += arr[i]\n        # add the sum of the subarray to the sum of odd length subarrays\n        else:\n            sum_odd_length += arr[i] - arr[i-1]\n\n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to floating point values\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Convert r, g, b to integer values to get integer color components\n    rc, gc, bc = int(r*255), int(g*255), int(b*255)\n    \n    # Convert r, g, b to integer values to get integer color components\n    h, s, v = 0, 0, max(rc, gc, bc)\n    \n    # Calculate chroma and hue\n    if s == 0:\n        h = 0\n    else:\n        delta = max(rc - bc, gc - rc, bc - gc)\n        if rc == bc:\n            h = (gc - gc) / delta\n        elif gc == rc:\n            h = 2 + (bc - gc) / delta\n        elif bc == gc:\n            h = 4 + (rc - gc) / delta\n        h /= 6.0\n        if h < 0:\n            h += 1.0\n    \n    # Calculate saturation and value\n    if v == rc:\n        s = (gc - bc) / (v - min(gc, bc))\n    elif v == gc:\n        s = (bc - rc) / (v - min(gc, bc))\n    elif v == bc:\n        s = (rc - gc) / (v - min(gc, bc))\n    \n    s *= 100\n    v *= 100\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    h, s, v = 0.0, 0.0, max_color\n    delta = max_color - min_color\n    if delta == 0.0:\n        h = 0.0\n    elif max_color == r:\n        h = 60.0 * (((g - b) / delta) % 6.0)\n    elif max_color == g:\n        h = 60.0 * ((b - r) / delta + 2.0)\n    else:\n        h = 60.0 * ((r - g) / delta + 4.0)\n    if delta == 0.0:\n        s = 0.0\n    else:\n        s = delta / max_color\n    if max_color == 0.0:\n        v = 0.0\n    else:\n        v = max_color\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color value to HSV color value.\n\n    Args:\n        r: Red color channel value.\n        g: Green color channel value.\n        b: Blue color channel value.\n\n    Returns:\n        h: Hue value.\n        s: Saturation value.\n        v: Value value.\n\n    Examples:\n        rgb_to_hsv(255, 0, 0) # Returns: (360.0, 100.0, 100.0)\n        rgb_to_hsv(255, 255, 0) # Returns: (90.0, 100.0, 100.0)\n        rgb_to_hsv(0, 100, 255) # Returns: (120.0, 100.0, 100.0)\n        rgb_to_hsv(255, 255, 255) # Returns: (0.0, 0.0, 100.0)\n        rgb_to_hsv(128, 0, 128) # Returns: (180.0, 100.0, 100.0)\n    \"\"\"\n\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        h = 60 * ((max_val - b) / delta) if max_val == b else 60 * ((max_val - r) / delta)\n\n        if h < 0:\n            h += 360\n\n        s = (max_val + min_val) / 2 if max_val == min_val else delta / (max_val + min_val)\n\n    v = max_val\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red value.\n        g (int): Green value.\n        b (int): Blue value.\n\n    Returns:\n        tuple: (h, s, v) where h is the hue, s is the saturation, and v is the value.\n\n    Raises:\n        ValueError: If any of the input values are outside their valid range.\n    '''\n\n    # Check if the input values are within their valid range\n    if not all(-1 <= x <= 1 for x in (r, g, b)):\n        raise ValueError('All input values must be between -1 and 1.')\n\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    r, g, b = r/255, g/255, b/255 # scale rgb values from 0-1 to 0-255 for calculation\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    hue = 0\n    saturation = 0\n    \n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * (((g-b)/delta) % 6)\n    elif max_val == g:\n        hue = 60 * (((b-r)/delta) + 2)\n    elif max_val == b:\n        hue = 60 * (((r-g)/delta) + 4)\n    \n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta/max_val\n    \n    return hue, saturation, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val / 255\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h / 6\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * h - 1))\n    s = s * 100\n    if s > 100:\n        s = 100\n    return int(h * 360), int(s), int(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n    \"\"\"\n    r_min, r_max, g_min, g_max, b_min, b_max = min(r, g, b), max(r, g, b), min(r, g, b), max(r, g, b), min(r, b), max(r, b)\n    delta = r_max - r_min\n    if delta == 0:\n        h = 0\n    elif r_max == g_max:\n        h = 60 * ((g_min - b_min) / delta)\n    elif r_max == b_max:\n        h = 60 * ((b_min - g_min) / delta) + 120\n    elif r_max == g_min:\n        h = 60 * ((r_min - b_min) / delta) + 240\n    elif r_max == b_min:\n        h = 60 * ((g_min - r_min) / delta) + 360\n    else:\n        h = 0\n    \n    s = delta / (1 - abs(2 * delta - 1))\n    \n    v = r_max\n    \n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    d = v - min(r, g, b)\n    s = (d / v) * 100\n    if v == 0:\n        h = 0\n    else:\n        if r == v:\n            h = (g - b) / d\n        elif g == v:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n        h *= 60\n        if h < 0:\n            h += 360\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, and b values to float\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate delta value\n    delta = max_val - min_val\n\n    # Calculate hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Normalize hue value\n    if hue < 0:\n        hue += 6\n\n    # Calculate saturation and value\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    if max_val == min_val:\n        value = 0\n    else:\n        value = max_val\n\n    # Convert hue, saturation, and value to integer values\n    hue, saturation = int(hue * 65535), int(saturation * 65535)\n    value = int(value * 65535)\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to HSV color space.\n\n    Parameters\n    ----------\n    r : int\n        The red component of the color.\n    g : int\n        The green component of the color.\n    b : int\n        The blue component of the color.\n\n    Returns\n    -------\n    h : float\n        The hue value in the HSV color space.\n    s : float\n        The saturation value in the HSV color space.\n    v : float\n        The value value in the HSV color space.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    v = max_value / 255.0\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    if h < 0:\n        h += 6\n    \n    h *= 60\n    if h < 0:\n        h += 360\n    \n    s = delta / (max_value + delta)\n    \n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return None\n    \n    # Find the first even number\n    even_found = False\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_found = True\n            break\n    \n    # If no even number was found, return None\n    if not even_found:\n        return None\n    \n    # Find the product of the even number and the odd number\n    product = lst[0] * (len(lst) % 2)\n    \n    # Find the second even number (if any)\n    even_found = False\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_found = True\n            break\n    \n    # If no second even number was found, return the product\n    if even_found:\n        for i in range(len(lst)):\n            if lst[i] % 2 == 0:\n                product *= lst[i]\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0 and odd_count == 0:\n        return 1\n\n    product = even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    total = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        total *= num\n        \n        if even_count > 0 and odd_count > 0:\n            break\n            \n    return total"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n\n    # initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # iterate through the list and add even and odd numbers to the respective variables\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    # return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        product = 0\n    elif odd_count == 0:\n        product = 0\n    else:\n        product = list1[0] * list1[1]\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n        print(\"The product of the first even and first odd number in the list is:\", product)\n    else:\n        print(\"The list does not have at least one even and one odd number.\")"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        product *= (even + odd)\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n            count += 1\n        else:\n            odd += i\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return even * odd\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    int_tuple = tuple(int(x) for x in test_str.split())\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n\n    Input:\n    test_str - tuple string in the format (2, 3, 4, '5', '6', 7, 8, 9)\n\n    Output:\n    integer tuple in the format (2, 3, 4, 5, 6, 7, 8, 9)\n\n    Example:\n    >>> tuple_str_int((2, 3, 4, '5', '6', 7, 8, 9))\n    (2, 3, 4, 5, 6, 7, 8, 9)\n\n    Note: In the example, the input tuple string contains both integers and strings. The function should convert the tuple strings to integers and return the resulting integer tuple.\n    '''\n\n    # Split the tuple string by the delimiter ','\n    tuple_str_list = test_str.split(',')\n\n    # Convert each string in the list to integer\n    int_tuple_list = [int(elem) for elem in tuple_str_list]\n\n    # Return the resulting integer tuple\n    return int_tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = [int(i) for i in test_str.split(',')]\n    return tuple(str_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # convert the string to a list of strings\n    lst_str = list(test_str)\n    \n    # initialize a variable to store the integer tuple\n    int_tuple = ()\n    \n    # iterate over the list of strings\n    for i in range(len(lst_str)):\n        \n        # check if the string at the current index is an integer\n        if lst_str[i].isdigit():\n            \n            # convert the string to an integer\n            int_val = int(lst_str[i])\n            \n            # append the integer to the integer tuple\n            int_tuple += (int_val,)\n    \n    # return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    tuples = [tuple(map(int, sublist)) for sublist in test_str.split()]\n    # Return the resulting list of tuples\n    return tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define an empty tuple\n    int_tuple = ()\n    \n    # Split the tuple string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Loop through the list of strings and convert each string to an integer\n    for str in str_list:\n        try:\n            # Convert the string to an integer\n            int_val = int(str)\n            # Add the integer to the tuple\n            int_tuple += (int_val,)\n        except ValueError:\n            # If the string cannot be converted to an integer, skip it\n            continue\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of elements\n    elements = [int(x) for x in test_str.split()]\n    # Convert the list into a tuple\n    return tuple(elements)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into tuple elements using comma as delimiter\n    int_tuple = tuple(map(int, test_str.split(',')))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(map(int, test_str.split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a list to store the integer values\n    int_list = []\n    # Loop through each character in the string\n    for char in test_str:\n        # Convert the character to an integer if possible\n        try:\n            int_val = int(char)\n            # Add the integer value to the list\n            int_list.append(int_val)\n        except ValueError:\n            # If the character cannot be converted to an integer, pass it through unchanged\n            int_list.append(char)\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index+1:], x)\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n\n    # If x is greater than or equal to the last element of the list, the index will be equal to the length of the list\n    if index == len(a):\n        return index\n\n    # If x is less than the element at the right index, increment the index\n    if a[index] < x:\n        index += 1\n\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the insertion point\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    # If the value is not found, return the insertion point\n    return low"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    # Check if the value is already present in the array\n    if index < len(a) and a[index] == x:\n        # If it is, return the index\n        return index\n    else:\n        # If not, return the index of the next value\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n        a (list): sorted list of integers\n        x (int): value to locate\n\n    Returns:\n        int: index of the right insertion point for x in a\n\n    Example:\n        a = [1, 3, 5, 7, 9]\n        x = 4\n        output = right_insertion(a, x)\n        print(output) # Output: 2\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        if a[0] == x:\n            return 0\n        else:\n            return 1\n    elif a[index-1] < x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return \"Found match: {}\".format(matches[0])\n    else:\n        return \"No match found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split()), tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for char in test_str:\n        new_tuple_list.append(char)\n    for num in test_list:\n        new_tuple_list.append(num)\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of items to add to the new tuple.\n        test_str (str): A string to add to the new tuple.\n\n    Returns:\n        A new tuple consisting of the given string and list.\n    \"\"\"\n    return tuple(test_str + str(item) for item in test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i in range(len(nums)//2, len(nums)):\n                if any(nums[j] % 2 == 0 for j in range(i, len(nums), 2)):\n                    return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of integers as input and checks whether every even index contains\n    even numbers or not.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([num for num in nums[i:i+2] if num % 2 == 0]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n    return even_count == len(nums) * 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Iterate over the list\n    for i in range(0, len(nums), 2):\n        # Check if the number at the even index is even\n        if nums[i] % 2!= 0:\n            # If not, return False\n            return False\n    \n    # If we reach here, all even indices contain even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and len([x for x in nums[i:] if x % 2 == 0]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    # create an empty list to store the new tuples\n    new_tup = []\n    # iterate through the tuples in the input tuple\n    for tup in test_tup:\n        # if the tuple is not a tuple, add it to the new list\n        if not isinstance(tup, tuple):\n            new_tup.append(tup)\n        # if the tuple is a tuple, recursively call the function on it and add the new tuples to the new list\n        else:\n            new_tup.extend(remove_nested(tup))\n    # return the new list\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Convert the tuple into a list of lists\n    flat_list = [item for sublist in test_tup for item in sublist]\n    # Use set() to remove duplicates\n    unique_list = list(set(flat_list))\n    # Convert the list back into a tuple\n    result = tuple(unique_list)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create an empty list to store the non-nested tuples\n    non_nested_list = []\n    # loop through each element in the tuple\n    for elem in test_tup:\n        # if the element is a tuple, recursively call the function on it\n        if isinstance(elem, tuple):\n            # call the function on the nested tuple and add the result to the non-nested list\n            non_nested_list.append(remove_nested(elem))\n        # if the element is not a tuple, add it to the non-nested list\n        else:\n            non_nested_list.append(elem)\n    # return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    non_nested_list = []\n    # Loop through the tuples in the input tuple\n    for tup in test_tup:\n        # If the tuple is not nested, add it to the non_nested_list\n        if not isinstance(tup, tuple):\n            non_nested_list.append(tup)\n    # Return the non_nested_list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        test_tup (tuple): The input tuple to remove nested tuples from.\n\n    Returns:\n        tuple: The modified tuple without nested tuples.\n    \"\"\"\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    def remove_nested_helper(t):\n        if type(t) == tuple:\n            return [remove_nested_helper(x) for x in t]\n        else:\n            return t\n\n    return remove_nested_helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create a new empty list to store the new tuples\n    new_lst = []\n    # iterate through the original list of tuples\n    for tup in test_tup:\n        # check if the tuple is a tuple and not a list\n        if type(tup) == tuple:\n            # if the tuple is a nested tuple, add the values to a new list and append it to the new list\n            new_lst.extend(tup)\n        # if the tuple is not a nested tuple, simply append it to the new list\n        else:\n            new_lst.append(tup)\n    # return the new list of tuples\n    return new_lst"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n            count += count_list(i)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n        else:\n            pass\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n        else:\n            count += 0\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes in an array and an element as arguments. It returns the last position of the element in the array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr: List of elements sorted in ascending order.\n    x: Element to find in the array.\n\n    Returns:\n    index: Index of the last occurrence of x in the array, or -1 if x is not found in the array.\n    \"\"\"\n    n = len(arr)\n    low = 0\n    high = n - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n\n    :param arr: sorted array\n    :type arr: list\n    :param x: element to find last position of\n    :type x: int or float\n    :return: last position of the element in the array\n    :rtype: int\n\n    :Example:\n    >>> arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> x = 5\n    >>> last(arr, x)\n    6\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize a variable to keep track of the last index found\n    last_index = 0\n    \n    # Loop through the array and keep track of the last index of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    \n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last elements of the array, respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Iterate through the array until the left pointer is less than the right pointer\n    while left < right:\n        mid = (left + right) // 2\n\n        # If the element at the midpoint is equal to the search element,\n        # update the last position to the midpoint and break out of the loop\n        if arr[mid] == x:\n            last_position = mid\n            right = mid\n        # If the element at the midpoint is greater than the search element,\n        # move the left pointer to the midpoint + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the element at the midpoint is smaller than the search element,\n        # move the right pointer to the midpoint - 1\n        else:\n            right = mid - 1\n\n    # Return the last position of the search element\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element x in a sorted array arr.\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n\n        if arr[mid] == x:\n            return mid\n\n        if arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Find the first occurrence of x\n    i = 0\n    while i < len(arr) and arr[i]!= x:\n        i += 1\n\n    if i == len(arr):\n        return -1 # x not found in array\n\n    # Find the last occurrence of x\n    j = len(arr) - 1\n    while j >= 0 and arr[j]!= x:\n        j -= 1\n\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    # Define regular expression pattern\n    pattern = r'a[^b]*b'\n\n    # Search for pattern in text and return match object\n    match = re.search(pattern, text)\n\n    # If match is found, return the matched string, otherwise return None\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^a.*b$')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?P<a_string>.?)\\sb'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('a_string')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    # Find the pattern in the text that has an 'a' followed by anything and ending in 'b'\n    pattern = re.compile(r'a[^b]*b')\n    \n    # Search for the pattern in the text\n    match = pattern.search(text)\n    \n    # If a match is found, return the matched substring\n    if match:\n        return match.group(0)\n    else:\n        # If no match is found, return an empty string\n        return ''"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range: \").split())\n    return sum([x for x in range(l, r+1) if x % 2!= 0])"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, and returns the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through the range l to r\n    for i in range(n):\n        # check if the current number is odd\n        if i % 2!= 0:\n            # add the current number to the sum\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range of natural numbers (l, r): \").split())\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, which represent the lower and upper limits of the range.\n    It uses a for loop to iterate over all the odd natural numbers within the range and adds them to a variable s.\n    Finally, it returns the value of s.\n    \"\"\"\n    s = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 0\n    r = n\n    sum = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range 0 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of all elements in the array.\n    '''\n\n    sum = 0\n    for num in arr:\n        sum += num\n    \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    d = d % 32 # modulo 32 to ensure that d is in the range [0, 31]\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary string n to integer\n    num = int(n, 2)\n    # Calculate the number of bits that needs to be rotated\n    num_of_bits_to_rotate = d % 32\n    # Calculate the number of bits that needs to be shifted\n    num_of_bits_to_shift = 32 - num_of_bits_to_rotate\n    # Create the mask for the bits to be shifted\n    mask = ((1 << num_of_bits_to_shift) - 1) << (num_of_bits_to_rotate % 32)\n    # Shift the bits to the left\n    shifted_bits = (num & mask) | (num >> num_of_bits_to_shift)\n    # Convert the shifted bits to binary string\n    rotated_bits = bin(shifted_bits)[2:].zfill(32)\n    # Convert binary string to integer\n    rotated_num = int(rotated_bits, 2)\n    # Return the rotated number in binary string\n    return bin(rotated_num)[2:].zfill(32)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    while d > 0:\n        n = (n << 1) & mask\n        d -= 1\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert binary representation of n to a list of digits\n    digits = list(bin(n)[2:])\n\n    # Initialize the rotated list of digits\n    rotated_digits = []\n\n    # Iterate through the digits and rotate them left by d bits\n    for i in range(d):\n        rotated_digits.append(digits.pop(0))\n\n    # Add the remaining digits to the rotated list\n    rotated_digits += digits\n\n    # Convert the rotated list of digits to an integer and return it\n    return int(''.join(rotated_digits), 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the left shift value\n    shift_value = d % 32\n    \n    # Calculate the right shift value\n    right_shift = 32 - shift_value\n    \n    # Calculate the new value by shifting the left part to the right and adding the right part to the left\n    new_value = (n << shift_value) | (n >> right_shift)\n    \n    # Return the new value\n    return new_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary and compute the binary representation of the number shifted by d bits\n    binary = bin(n)[2:]\n    rotated_binary = binary[d:] + binary[:d]\n\n    # Convert the binary representation of the number rotated by d bits to its decimal representation\n    rotated_decimal = int(rotated_binary, 2)\n\n    # Return the rotated number\n    return rotated_decimal"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to replace all whitespaces with empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all spaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count\n\nprint(test_three_equal(1, 2, 3)) # Should print 1\nprint(test_three_equal(2, 2, 2)) # Should print 2\nprint(test_three_equal(1, 1, 1)) # Should print 3"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal = 0\n    if x == y and x == z:\n        equal += 1\n    if y == x and y == z:\n        equal += 1\n    if z == x and z == y:\n        equal += 1\n    return equal"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x!= y and x == z:\n        count += 1\n    if y == x and y!= z:\n        count += 1\n    if x!= y and x!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y or x == z or y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    equal_count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            equal_count += 1\n\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # To check if array is sorted or not\n    if arr == sorted(arr):\n        return 0\n    # If array is not sorted\n    # Find the minimum element in the array\n    min_val = min(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min_val)\n    # Find the second minimum element\n    second_min_val = min(arr[min_index+1:])\n    # Find the index of the second minimum element\n    second_min_index = arr[min_index+1:].index(second_min_val)\n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    # Check if the second minimum element is in the second half of the array\n    if second_min_val >= arr[min_index+1-second_min_index]:\n        # If second minimum element is in the second half of the array, then the minimum element must be in the first half of the array\n        count = second_min_index\n    else:\n        # If second minimum element is not in the second half of the array, then the minimum element must be in the second half of the array\n        count = second_min_index + 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n\n    # Check if the array is already sorted or not\n    if n <= 1:\n        return 0\n\n    # Traverse the array from the end to the beginning and find the first inversion point\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            inversion_point = i\n            break\n\n    # If inversion point is not found, the array is already sorted\n    if inversion_point == n-1:\n        return 0\n\n    # Traverse the array from the inversion point to the end and count the number of inversions\n    count = 0\n    i = inversion_point\n    j = n-1\n    while i < j:\n        if arr[i] > arr[j]:\n            count += j - i\n            i += 1\n        else:\n            j -= 1\n\n    # Return the count of inversions required to sort the array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the count of rotations\n    count = 0\n\n    # Loop through all possible rotations\n    for i in range(n - 1):\n        # Check if the current rotation is a valid rotation\n        if is_valid_rotation(arr, i, n):\n            # If it is, increment the count of rotations\n            count += 1\n\n    # Return the count of rotations\n    return count\n\ndef is_valid_rotation(arr, start, end):\n    # Check if the subarray starting from start and ending at end is a valid rotation\n    for i in range(start, end):\n        if arr[i] > arr[end - 1]:\n            return False\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Find the smallest element in the array\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n\n    # Initialize a counter variable to keep track of the number of rotations\n    count = 0\n\n    # Iterate through the array from the second element to the end\n    for i in range(1, len(arr)):\n        # Check if the current element is greater than the smallest element\n        if arr[i] > smallest:\n            # If it is, increment the counter by 1\n            count += 1\n        # Check if the current element is less than or equal to the smallest element\n        elif arr[i] <= smallest:\n            # If it is, set the smallest element to be the current element\n            smallest = arr[i]\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize count and max count variables\n    count = 0\n    max_count = n\n\n    # Loop through all possible rotations\n    for i in range(n):\n        # Check if all elements are in their correct positions\n        if all(arr[j] <= arr[j+i] for j in range(n-i-1)):\n            # If yes, increment the count\n            count += 1\n            # Update the maximum count\n            max_count = max(max_count, count)\n\n    return max_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # initialize variables\n    n = len(arr)\n    count = 0\n    end = n - 1\n    \n    # start from the second element\n    for i in range(1, end):\n        # check if the current element is greater than the next element\n        if arr[i] > arr[i+1]:\n            # if it is, then rotate the array by 1\n            count += 1\n            arr[i], arr[end] = arr[end], arr[i]\n            end -= 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    n = len(arr)   # Size of array\n\n    # Check if the array is already sorted or not\n    if sorted(arr) == arr:\n        return 0\n\n    # Find the index of the largest element\n    index = 0\n    for i in range(1, n):\n        if arr[i] > arr[index]:\n            index = i\n\n    # Find the pivot element\n    pivot = arr[index]\n\n    # Count the number of swaps required to sort the array\n    count = 0\n    for i in range(n):\n        if arr[i] < pivot:\n            # Swapping the elements at the current index with the pivot element\n            temp = arr[i]\n            arr[i] = pivot\n            pivot = temp\n            count += 1\n\n    # Count the number of rotations required\n    if count > 0:\n        return count\n    else:\n        return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                max_length = max(max_length, j - i + 1)\n    return max_length"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # initialize the count of rotations to 0\n    count = 0\n\n    # check if the array is already sorted\n    if sorted(arr) == arr:\n        return count\n\n    # check if the array has only one element\n    if len(arr) == 1:\n        return count\n\n    # check if the array has only two elements\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            count += 1\n        return count\n\n    # check if the array has more than two elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # check if the sum of the two elements is greater than the third element\n            if arr[i] + arr[j] > arr[j+1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(int(n**0.5)+1):\n            if n % i**2 == 0:\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n\n    # check if the number is negative or zero\n    if n <= 0:\n        return False\n\n    # check if the number is a perfect square by iterating from 1 to the square root of n\n    # if the number is a perfect square, then it will have one of the form 1^2, 2^2, 3^2,..., n^2\n    # if the number is not a perfect square, then it will have one of the form 1^2, 2^2, 3^2,..., (n-1)^2 and (n+1)^2\n    # this is because the sum of all integers from 1 to n squared is equal to the square of the sum of all integers from 1 to n-1 squared plus the square of the sum of all integers from 1 to n+1 squared\n    sqrt_n = int(n ** 0.5)\n    for i in range(1, sqrt_n + 1):\n        if i * i == n:\n            return True\n        if i * i < n:\n            j = int((n - i * i) ** 0.5)\n            if i * i + j * j == n:\n                return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                return True\n            else:\n                j = i + 1\n                while j * j <= n:\n                    if j * j == n:\n                        return True\n                    j += 1\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if n is already a perfect square\n    if n > 0 and int(n**0.5)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is negative\n    if n < 0:\n        return False\n    # check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # check if the number is divisible by 4\n    if n % 4 == 0:\n        return False\n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return is_perfect_square(n // 2)\n    # check if the number is divisible by 3\n    if n % 3 == 0:\n        return is_perfect_square(n // 3)\n    # check if the number is divisible by 5\n    if n % 5 == 0:\n        return is_perfect_square(n // 5)\n    # check if the number is divisible by 7\n    if n % 7 == 0:\n        return is_perfect_square(n // 7)\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return is_perfect_square(n // 11)\n    # check if the number is divisible by 13\n    if n % 13 == 0:\n        return is_perfect_square(n // 13)\n    # check if the number is divisible by 17\n    if n % 17 == 0:\n        return is_perfect_square(n // 17)\n    # check if the number is divisible by 19\n    if n % 19 == 0:\n        return is_perfect_square(n // 19)\n    # check if the number is divisible by 23\n    if n % 23 == 0:\n        return is_perfect_square(n // 23)\n    # check if the number is divisible by 29\n    if n % 29 == 0:\n        return is_perfect_square(n // 29)\n    # check if the number is divisible by 31\n    if n % 31 == 0:\n        return is_perfect_square(n // 31)\n    # check if the number is divisible by 37\n    if n % 37 == 0:\n        return is_perfect_square(n // 37)\n    # check if the number is divisible by 41\n    if n % 41 == 0:\n        return is_perfect_square(n // 41)\n    # check if the number is divisible by 43\n    if n % 43 == 0:\n        return is_perfect_square(n // 43)\n    # check if the number is divisible by 47\n    if n % 47 == 0:\n        return is_perfect_square(n // 47)\n    # check if the number is divisible by 53\n    if n % 53 == 0:\n        return is_perfect_square(n // 53)\n    # check if the number is divisible by 59\n    if n % 59 == 0:\n        return is_perfect_square(n // 59)\n    # check if the number is divisible by 61\n    if n % 61 == 0:\n        return is_perfect_square(n // 61)\n    # check if the number is divisible by 67\n    if n % 67 == 0:\n        return is_perfect_square(n // 67)\n    # check if the number is divisible by 71\n    if n % 71 == 0:\n        return is_perfect_square(n // 71)\n    # check if the number is divisible by 73\n    if n % 73 == 0:\n        return is_perfect_square(n // 73)\n    # check if the number is divisible by 79\n    if n % 79 == 0:\n        return is_perfect_square(n // 79)\n    # check if the number is divisible by 83\n    if n % 83 == 0:\n        return is_perfect_square(n // 83)\n    # check if the number is divisible by 89\n    if n % 89 == 0:\n        return is_perfect"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n\n    # initialize the square root and remainder\n    sqrt_n = int(n ** 0.5)\n    remainder = n - (sqrt_n ** 2)\n\n    # check if the square root is an integer and less than the original number\n    if sqrt_n * sqrt_n == n and sqrt_n < n:\n        return True\n    elif remainder == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return \"Please enter a non-negative number\"\n    else:\n        a = n\n        b = n\n        while b*b <= a:\n            a = b\n            b = (a + b) // 2\n        if a*a == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks if the given number is a perfect square or not.\n    \"\"\"\n    # Taking input from user\n    num = int(input(\"Enter a number: \"))\n    \n    # Checking if the number is a perfect square or not\n    if num == int(num**0.5 + 0.5):\n        print(f\"{num} is a perfect square\")\n    else:\n        print(f\"{num} is not a perfect square\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # convert the given number to an integer and check if it's positive\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # use the square root function to check if the given number is a perfect square\n    import math\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    if n < 0:\n        return False\n\n    d = 0\n    while n > 0:\n        n = n - d\n        d = d + 2\n\n    return n == 1"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of integers as input and returns True if the product of all numbers in the list is even, otherwise it returns False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                if lists[i][j][k] > max_sum:\n                    max_sum = lists[i][j][k]\n                    result = [lists[i][j][k]]\n                elif lists[i][j][k] == max_sum:\n                    result.append(lists[i][j][k])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = [sublist]\n        elif current_sum == max_sum:\n            result.append(sublist)\n            \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum to the first element of the first list\n    max_sum = lists[0][0]\n    # Loop through each element in the list\n    for i in range(1, len(lists[0])):\n        # Loop through each sublist in the first list\n        for j in range(1, len(lists)):\n            # Add the element at i to the sum of the sublist at j\n            lists[j][i] += lists[j][i-1]\n            # Update max_sum if the sum is greater than the current max_sum\n            if lists[j][i] > max_sum:\n                max_sum = lists[j][i]\n    # Loop through each sublist in the first list\n    for j in range(1, len(lists)):\n        # Add the last element of the sublist to the sum of the sublist at j\n        lists[j][-1] += lists[j][-2]\n        # Update max_sum if the sum is greater than the current max_sum\n        if lists[j][-1] > max_sum:\n            max_sum = lists[j][-1]\n    # Create a list with the indices of the maximum sum sublists\n    max_indices = []\n    for i in range(1, len(lists[0])):\n        max_index = i\n        for j in range(1, len(lists)):\n            if lists[j][i] > lists[j][max_index]:\n                max_index = j\n        max_indices.append(max_index)\n    # Create a new list of lists that contains the maximum sum sublists\n    max_sublists = []\n    for j in range(1, len(lists)):\n        # Create an empty list for each sublist\n        sublist = []\n        # Loop through each index in the maximum sum sublist indices\n        for i in max_indices:\n            # Add the element at i to the sublist\n            sublist.append(lists[j][i])\n        # Add the sublist to the new list of lists\n        max_sublists.append(sublist)\n    return max_sublists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    max_list = None\n    current_sum = 0\n    \n    # iterate over the lists\n    for lst in lists:\n        # iterate over the elements in the list\n        for num in lst:\n            # add the element to the current sum\n            current_sum += num\n            # if the current sum is greater than the maximum sum, update the maximum sum and the maximum list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n    \n    # return the maximum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                if lists[i][j] > lists[i][j+1]:\n                    temp = lists[i][j]\n                    lists[i][j] = lists[i][j+1]\n                    lists[i][j+1] = temp\n                elif lists[i][j] < lists[i][j+1]:\n                    temp = lists[i][j+1]\n                    lists[i][j+1] = lists[i][j]\n                    lists[i][j] = temp\n            elif j == len(lists[i])-1:\n                if lists[i][j-1] > lists[i][j]:\n                    temp = lists[i][j-1]\n                    lists[i][j-1] = lists[i][j]\n                    lists[i][j] = temp\n                elif lists[i][j-1] < lists[i][j]:\n                    temp = lists[i][j]\n                    lists[i][j] = lists[i][j-1]\n                    lists[i][j-1] = temp\n            else:\n                if lists[i][j-1] > lists[i][j]:\n                    temp = lists[i][j-1]\n                    lists[i][j-1] = lists[i][j]\n                    lists[i][j] = temp\n                elif lists[i][j-1] < lists[i][j]:\n                    temp = lists[i][j]\n                    lists[i][j] = lists[i][j-1]\n                    lists[i][j-1] = temp\n        temp_sum = 0\n        for k in range(len(lists[i])):\n            temp_sum += lists[i][k]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = [lists[i]]\n        elif temp_sum == max_sum:\n            max_list.append(lists[i])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i > 0 and j > 0:\n                current_sum = lists[i][j] + lists[i-1][j] + lists[i][j-1] - lists[i-1][j-1]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    result = [[lists[i][j], lists[i-1][j], lists[i][j-1], lists[i-1][j-1]]]\n                elif current_sum == max_sum:\n                    result.append([lists[i][j], lists[i-1][j], lists[i][j-1], lists[i-1][j-1]])\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate through each list in the list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        \n        # Update the maximum sum and list if the sum is greater than the current maximum sum\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            uppercase_count = 0\n        if uppercase_count == 0:\n            current_run = 0\n        current_run += 1\n    if uppercase_count > max_run:\n        max_run = uppercase_count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    current_char = test_str[0]\n    max_count = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n            current_char = test_str[i]\n    \n    return current_char, max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    :param test_str: A string to be analyzed.\n    :return: The maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the maximum run of uppercase characters and its starting index\n    max_run = 0\n    start_index = 0\n\n    # Loop through the string and count the number of uppercase characters in each run\n    for i in range(len(test_str)):\n        if test_str[i].isupper() and i > start_index:\n            max_run += 1\n            start_index = i\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            j = i + 1\n            while j < len(test_str) and test_str[j].isupper():\n                j += 1\n            max_run = max(max_run, j - i)\n            i = j\n        else:\n            i += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize max run to 1\n    max_run = 1\n    # initialize current run to 1\n    current_run = 1\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is uppercase, increment current run\n        if char.isupper():\n            current_run += 1\n        # if the character is not uppercase, reset current run to 1\n        else:\n            current_run = 1\n        # if current run is greater than max run, update max run\n        if current_run > max_run:\n            max_run = current_run\n    # return max run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = []\n    current_run = []\n    for char in test_str:\n        if char.isupper():\n            current_run.append(char)\n        else:\n            if len(current_run) > len(uppercase_run) or (len(current_run) == len(uppercase_run) and len(current_run) > len(max(uppercase_run, key=len))):\n                uppercase_run = current_run\n            current_run = []\n    return uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 1\n    run_length = 1\n    prev_char = ''\n    \n    # Iterate through the string\n    for char in test_str:\n        # If the current character is uppercase\n        if char.isupper():\n            # If the current run length is greater than the maximum run length\n            if run_length > max_run:\n                # Update the maximum run length and previous character\n                max_run = run_length\n                prev_char = char\n            \n            # Increment the run length\n            run_length += 1\n        else:\n            # Reset the run length if the character is not uppercase\n            run_length = 1\n    \n    # Return the maximum run length and the previous character\n    return max_run, prev_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to keep track of maximum run and current run\n    max_run = 0\n    current_run = 0\n\n    # Iterate through each character in the string\n    for char in test_str:\n\n        # If the character is uppercase, add it to the current run\n        if char.isupper():\n            current_run += 1\n\n        # If the character is not uppercase, reset the current run\n        else:\n            current_run = 0\n\n        # Update the maximum run if the current run is greater than the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                start = i - max_count + 1\n                \n            count = 0\n            \n    if count > max_count:\n        max_count = count\n        start = len(test_str) - count + 1\n        \n    return test_str[start:start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_count = 0\n    run_start = 0\n    max_run = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            run_count += 1\n        else:\n            run_count = 0\n\n        if run_count > max_run:\n            max_run = run_count\n            run_start = i - max_run\n\n    return test_str[run_start:run_start + max_run]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    This function takes in a list of numbers as an argument and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # If no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Initialize a variable to store the first odd number\n    first_odd_num = None\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, set the first odd number to the current number\n            first_odd_num = num\n    \n    # Return the first odd number\n    return first_odd_num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if a given tuple contains the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:K]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        print(\"K is present in the given tuple.\")\n    else:\n        print(\"K is not present in the given tuple.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the given tuples contain the k\n    if test_tup[0] == K:\n        return True\n    elif test_tup[1] == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        print(f\"{K} is present in the tuple.\")\n    else:\n        print(f\"{K} is not present in the tuple.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Loop through the two tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # If all the elements of both tuples are smaller, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of the two tuples should be same.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Tuple 2 has a smaller element at index\", i)\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]